{"result":[{"sys_mod_count":"2","sys_updated_on":"2016-02-22 18:14:08","sys_tags":"","title":"Catalog Content","content":"### Displays all Catalog Categories and Items in the Category (this is a test)\nfsda\nCatalog can be specified on the URL or else the widget picks up the catalog specified on the portal record. \n\nUsed in page sc_view [example](/sp?id=sc_view)","sys_class_name":"sp_documentation","sys_id":"04bdcb60d731120023c84f80de6103b3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/69996b7b04f12210559073c06a02f7e2","value":"69996b7b04f12210559073c06a02f7e2"},"sys_update_name":"sp_documentation_04bdcb60d731120023c84f80de6103b3","sys_updated_by":"admin","sys_created_on":"2016-02-22 17:45:53","sys_name":"Catalog Content","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"3","sys_updated_on":"2016-02-22 18:15:29","sys_tags":"","title":"Chart.js","content":"###Chart.js - Draw a Doughnut Chart\nOptions required:\n+ table = table name\n+ filter = encoded query\n+ display_field = field in table to aggregate by count","sys_class_name":"sp_documentation","sys_id":"37cdcb60d731120023c84f80de6103ac","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/69996b7b04f12210559073c06a02f7e2","value":"69996b7b04f12210559073c06a02f7e2"},"sys_update_name":"sp_documentation_37cdcb60d731120023c84f80de6103ac","sys_updated_by":"admin","sys_created_on":"2016-02-22 17:46:25","sys_name":"Chart.js","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"9","sys_updated_on":"2016-03-04 00:48:53","sys_tags":"","title":"Widgets","content":"## Widgets\nWidgets are a superset of [Angular Directives](https://docs.angularjs.org/guide/directive) that facilitate creating reusable components with client Angular.js and server Rhino JavaScript. Access to the [GlideRecord](http://wiki.servicenow.com/?title=GlideRecord), [Sass](http://sass-lang.com/) and usage of JavaScript libraries are some of the most powerful features.\n\n### HTML Template\nTemplates are written with HTML and can contain Angular elements and attributes. Angular combines the template with information from the model and controller `c` to render a dynamic view that a user sees in the browser.\n```html\n<div class=\"count-widget\">\n  <h1 class=\"title\">{{c.title}}</h1>\n  <div>Total Records: {{c.data.count}}</div>\n  <input type=\"text\" ng-model=\"c.data.table\"/>\n  <input type=\"button\" class=\"btn btn-default\" ng-click=\"c.send()\">\n</div>\n```\nTemplates must contain a single root HTML element that wraps the template.\n\nUse `c` to access the widget controller for generic bindings and calling functions. \n\n### CSS - Sass\nHere, you can write custom CSS that will only affect the widget it belongs to. In addition to all standard CSS, you also have access to [Sass](http://sass-lang.com/) constructs, which give you the ability to leverage things like variables, mixins, functions and nested structures.\n\n```scss\n$custom-panel-color: #ff0000;\n\n.panel {\n  background-color: $custom-panel-color;\n  \n  h4 {\n    color: darken($custom-panel-color, 50%);\n  }\n}\n```\n\n### Server Script\nThis is where the server-side component of your widget will live. This script will execute before your widget renders and every time that the `input` value changes by a POST request from the client.\n\n```javascript\nif (input) {\n var gr = new GlideRecordCounter(data.table);\n data.count = gr.getCount();\n}\n```\n\nThe `input` variable contains an Array with a POST request from client-side.test\n\nThe `data` property is reserved for server-side / client-side data binding.\n\nIn the server script, you have access to everything in the [ServiceNow Server Javascript API](https://developer.servicenow.com/app.do#!/api_doc?v=fuji&type=server&scoped=true) (including GlideRecord, GlideSession, etc.).\n\n### Client Script\nThis block contains the `controller` function of your widget directive. This is where your client-side logic will be contained. Syntactically, it is the same as any other Angular controller.\n\n```javascript\nfunction(/* Your Angular Dependencies Here */) {\n    var c = this;\n    c.title = 'My Widget';\n    c.send = function() {\n        c.server.update().then(function(){\n            c.title = 'Widget Count Updated';\n        });\n    }\n}\n```\n\nThe `c.server.update()` method keeps in sync the `data` object between the two by calling into your `server script`.\n\nTip: Avoid using `$scope` when possible as we prefer the `controllerAs` syntax.\n\n\n### Link Function (Advanced)\nHere, you can declare your own link function for the directive component of your widget. This is where you would do direct DOM manipulation. Syntactically, it is the same as any other Angular link function.\n\n```javascript\nfunction(scope, element) { \n var el = $(element[0]).find('input'); \n scope.$evalAsync(function() {\n  el.focus(); \n });\n}\n\n```","sys_class_name":"sp_documentation","sys_id":"948bab53d721120023c84f80de61034e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/69996b7b04f12210559073c06a02f7e2","value":"69996b7b04f12210559073c06a02f7e2"},"sys_update_name":"sp_documentation_948bab53d721120023c84f80de61034e","sys_updated_by":"admin","sys_created_on":"2016-02-18 22:43:57","sys_name":"Widgets","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""}]}