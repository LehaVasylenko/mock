{"result":[{"sys_mod_count":"91","active":"false","description":"Overrides External authentication.  The default is to authenticate using header, parameter, or cookie and decrypt PGP encryption.  Enable the glide.authenticate.external property.  ","overrides":"ExternalAuthentication","sys_updated_on":"2007-11-10 01:33:21","sys_tags":"","script":"gs.include(\"PrototypeServer\");\r\n\r\nvar PGPSingleSignOn = Class.create();\r\nPGPSingleSignOn.prototype = {\r\n\r\n       process : function() {\r\n\r\n          Packages.java.security.Security.addProvider( new Packages.org.bouncycastle.jce.provider.BouncyCastleProvider());\r\n\r\n          var headerKey = GlideProperties.get(\"glide.authenticate.header.key\", \"SM_USER\");\r\n          var fieldName = GlideProperties.get(\"glide.authenticate.header.value\", \"user_name\"); \r\n\r\n          gs.log(\"External authentication using: \" + headerKey + \" / \" + fieldName);\r\n\r\n          var encdata = request.getHeader(headerKey);\r\n          if (encdata == null) {\r\n            encdata = request.getParameter(headerKey);\r\n\r\n            // maybe its a cookie\r\n            if (encdata == null) {\r\n                var CookieMan = GlideCookieMan;\r\n        \tvar cookies = request.getCookies();\r\n            \tencdata = CookieMan.getCookieValue(cookies, headerKey);\r\n            }\r\n          }\r\n      \r\n          try {\r\n            // Replace all spaces with plus(+)'s, converted in url         \r\n            encdata = encdata.replaceAll(' ', '+');\r\n          \r\n            // Decode the data back to a byte array\r\n            var base64Decoder = new Packages.sun.misc.BASE64Decoder();\r\n            var newEncdata = base64Decoder.decodeBuffer(encdata);\r\n\r\n            // ----- Decrypt the file\r\n            var privateKeyFile = new Packages.java.io.File(\"/glide/instances/instance_port/webapps/glide/itil/WEB-INF/update/customer/uploads/PGPPrivateKeyFile.skr\");\r\n\r\n            var privateKeyPassword = GlideProperties.get(\"glide.authenticate.secret_key\");\r\n\r\n\t    var encdataByteArray = new Packages.java.io.ByteArrayInputStream(newEncdata);\r\n\t    var privateKeyInputStream = new Packages.java.io.FileInputStream(privateKeyFile);\r\n \r\n            var key = this.decrypt(encdataByteArray, privateKeyInputStream, privateKeyPassword.split(''));\r\n\r\n            gs.log(\"Decrypted Key=\" + key);\r\n          } catch(e) {\r\n              gs.log(e);\r\n          }\r\n\r\n          if (key != null) {\r\n            var ugr = new GlideRecord(\"sys_user\");\r\n            ugr.initialize();\r\n            if (!ugr.isValidField(fieldName)) {\r\n                var Log = GlideLog;\r\n                Log.warn(\"External authorization is set to use field: '\"\r\n                        + fieldName + \"' which doesn't exist\");\r\n\r\n                return \"failed_missing_requirement\";\r\n            }\r\n            ugr.addQuery(fieldName, key);\r\n            ugr.query();\r\n            if (!ugr.next()) {\r\n                var User = GlideUser;\r\n                var userLoad = User.getUser(key);\r\n                if (userLoad == null)\r\n                    return \"failed_authentication\";\r\n                ugr.initialize();\r\n                ugr.addQuery(fieldName, key);\r\n                ugr.query();\r\n                if (!ugr.next())\r\n                    return \"failed_authentication\";\r\n            }\r\n            var userName = ugr.getValue(\"user_name\");\r\n            \r\n            return userName;\r\n          } else {\r\n            return \"failed_missing_requirement\";\r\n          }\r\n        },\r\n\r\n        decrypt : function( encdataByteArray, privateKeyInputStream, privateKeyPassword ) {\r\n\r\n                //org.bouncycastle.openpgp.PGPUtil\r\n\t\tdecodStream = Packages.org.bouncycastle.openpgp.PGPUtil.getDecoderStream( encdataByteArray );\r\n                var pgpObjFact = new Packages.org.bouncycastle.openpgp.PGPObjectFactory( decodStream );\r\n\r\n\t\tvar enc;\r\n\r\n\t\tvar o = pgpObjFact.nextObject();\r\n\r\n\t\t//\r\n\t\t// the first object might be a PGP marker packet.\r\n\t\t//\r\n\t\tif (o instanceof Packages.org.bouncycastle.openpgp.PGPEncryptedDataList) {\r\n\t\t\tenc = o;\r\n\t\t} else {\r\n\t\t\tenc = pgpObjFact.nextObject();\r\n\t\t}\r\n\r\n\t\t//\r\n\t\t// find the secret key\r\n\t\t//\r\n\t\tvar it = enc.getEncryptedDataObjects();\r\n\t\tvar sKey = null;\r\n\t\tvar pbe = null;\r\n\r\n\t\twhile (sKey == null && it.hasNext()) {\r\n\t\t\tpbe = it.next();\r\n\t\t\tgs.print(\"pbe id=\" + pbe.getKeyID());\r\n\t\t\tsKey = this.findSecretKey(privateKeyInputStream, pbe.getKeyID(), privateKeyPassword);\r\n\t\t}\r\n\r\n\t\tif (sKey == null) {\r\n\t\t\tgs.print(\"secret key for message not found.\");\r\n                        return null;\r\n\t\t}\r\n\r\n\t\tvar clear = pbe.getDataStream(sKey, \"BC\");\r\n\t\tvar plainFact = new Packages.org.bouncycastle.openpgp.PGPObjectFactory(clear);\r\n\t\tvar message = plainFact.nextObject();\r\n\r\n\t\tif (message instanceof Packages.org.bouncycastle.openpgp.PGPCompressedData) {\r\n\t\t\tvar pgpFact = new Packages.org.bouncycastle.openpgp.PGPObjectFactory(message.getDataStream());\r\n                        message = pgpFact.nextObject();\r\n\t\t}\r\n                gs.print('After message: ' + message );\r\n\t\tvar baos = new java.io.ByteArrayOutputStream();\r\n\r\n\t\tif (message instanceof Packages.org.bouncycastle.openpgp.PGPLiteralData) {\r\n\t\t\tvar unc = message.getInputStream();\r\n\t\t\tvar ch;\r\n\r\n\t\t\twhile ((ch = unc.read()) >= 0) {\r\n\t\t\t\tbaos.write(ch);\r\n\t\t\t}\r\n\t\t} else if (message instanceof Packages.org.bouncycastle.openpgp.PGPOnePassSignatureList) {\r\n\t\t\tgs.print(\"encrypted message contains a signed message - not literal data.\");\r\n                        return null;\r\n\t\t} else {\r\n\t\t\tgs.print(\"message is not a simple encrypted file - type unknown.\");\r\n                        return null;\r\n\t\t}\r\n\r\n\t\tif (pbe.isIntegrityProtected()) {\r\n\t\t\tif (!pbe.verify()) {\r\n\t\t\t\tgs.print(\"message failed integrity check\");\r\n\t\t\t} else {\r\n\t\t\t\tgs.print(\"message integrity check passed\");\r\n\t\t\t} \r\n                } else {\r\n\t\t\tgs.print(\"no message integrity check\");\r\n\t\t}\r\n\t\treturn baos.toString();\r\n        },\r\n\r\n        findSecretKey : function(privKey, pbe, privateKeyPassword) {\r\n\r\n                var pgpSec = new Packages.org.bouncycastle.openpgp.PGPSecretKeyRingCollection(Packages.org.bouncycastle.openpgp.PGPUtil.getDecoderStream(privKey));\r\n\r\n\t\tvar pgpSecKey = pgpSec.getSecretKey(pbe);\r\n\r\n\t\tif (pgpSecKey == null) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn pgpSecKey.extractPrivateKey(privateKeyPassword, \"BC\");\r\n        }\r\n\r\n}\r\n\r\n\r\n","sys_class_name":"sys_installation_exit","sys_id":"2db8d8db0a0a0b0600c42633329acd23","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_2db8d8db0a0a0b0600c42633329acd23","sys_updated_by":"glide.maint","sys_created_on":"2007-08-03 21:54:22","name":"PGPSingleSignOn","sys_name":"PGPSingleSignOn","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"43","active":"true","description":"Password must be at least 8 characters long and contain a digit, an uppercase letter, and a lowercase letter.","overrides":"ValidatePassword","sys_updated_on":"2016-07-07 20:35:50","sys_tags":"","script":"gs.include(\"PrototypeServer\");\n\nvar ValidatePasswordStronger = Class.create();\nValidatePasswordStronger.prototype = {\n\n        process : function() {\n           var user_password = request.getParameter(\"user_password\");\n           if (GlideStringUtil.nil(user_password)) {\n\t\t\t   user_password = request.getParameter(\"sysparam_new_password\");\n\t\t   }\n\n           var min_len = 8;\n\n           var rules = gs.getMessage(\"Password must be at least {0} characters long and contain a digit, an uppercase letter, and a lowercase letter.\", min_len);\n\n           if (user_password.length() < min_len) {\n              gs.addErrorMessage(gs.getMessage(\"TOO SHORT\") + \": \" + rules);\n              return false;\n           }\n\n           var digit_pattern = new RegExp(\"[0-9]\", \"g\");\n           if (!digit_pattern.test(user_password)) {\n              gs.addErrorMessage(gs.getMessage(\"DIGIT MISSING\") + \": \" + rules);\n              return false;\n           }\n\n           var upper_pattern = new RegExp(\"[A-Z]\", \"g\");\n           if (!upper_pattern.test(user_password)) {\n              gs.addErrorMessage(gs.getMessage(\"UPPERCASE MISSING\") + \": \" + rules);\n              return false;\n           }\n\n           var lower_pattern = new RegExp(\"[a-z]\", \"g\");\n           if (!lower_pattern.test(user_password)) {\n              gs.addErrorMessage(gs.getMessage(\"LOWERCASE MISSING\") + \": \" + rules);\n              return false;\n           }\n\n           return true; // password is OK\n        }\n}","sys_class_name":"sys_installation_exit","sys_id":"45c28b420a0a0b840009e5cf4a185462","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_45c28b420a0a0b840009e5cf4a185462","sys_updated_by":"admin","sys_created_on":"2007-11-16 00:02:27","name":"ValidatePasswordStronger","sys_name":"ValidatePasswordStronger","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"16","active":"false","description":"Validation of changed passwords. \r\nOverride or implement this to enforce strong passwords and write custom error messages.  \r\nNew password can be accessed via request.getParameter(\"user_password\")\r\nError messages can be written with gs.addErrorMessage(gs.getMessage(\"Your message here\"))\r\nprocess() must return true/false. ","overrides":"","sys_updated_on":"2007-11-16 18:47:05","sys_tags":"","script":"gs.include(\"PrototypeServer\");\r\n\r\nvar ValidatePassword = Class.create();\r\nValidatePassword.prototype = {\r\n\r\n    process : function() {\r\n        return true; \r\n    }\r\n\r\n}\r\n\r\n","sys_class_name":"sys_installation_exit","sys_id":"4601faf00a0a0b820076f13e112760d4","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_4601faf00a0a0b820076f13e112760d4","sys_updated_by":"glide.maint","sys_created_on":"2007-11-16 01:13:21","name":"ValidatePassword","sys_name":"ValidatePassword","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"2","active":"true","description":"Support Rotation handling","overrides":"","sys_updated_on":"2007-05-03 02:45:30","sys_tags":"","script":"gs.include(\"PrototypeServer\");\r\n\r\nvar SupportRota = Class.create();\r\n\r\nSupportRota.prototype = {\r\n   initialize: function() {\r\n   },\r\n\r\n   /**\r\n    * globals on call are:\r\n    *\r\n    *    incident - GlideRecord\r\n    *    ci_field - field in incident record containing the 'ci' to check\r\n    *         support rota assignments against\r\n    *\r\n    * returns: list of support assignments that match the incident\r\n    */\r\n   process: function() {\r\n      var conditions;\r\n      var match;\r\n      var assignments = new Object();\r\n\r\n      // Get any cmn_rota_ci's that match the incident CI\r\n      var rotaCIs = new Array();\r\n      var gr = new GlideRecord(\"cmn_rota_ci\");\r\n      var ciGR = new GlideRecord(\"cmdb_ci\");\r\n      var ciSysId = incident.getValue(ci_field);\r\n      if (ciSysId && ciGR.get(ciSysId)) {\r\n         gr.addQuery(\"ci\", incident.getValue(ci_field));\r\n         gr.query();\r\n         while (gr.next()) {\r\n\t    // Does this cmn_rota_ci entry pass the conditions\r\n            conditions = gr.conditions;\r\n            match = true;\r\n            if (conditions && !GlideFilter.checkRecord(ciGR, conditions, true)) {\r\n                match = false;\t    \r\n            } \r\n            if (match) {\r\n               // This is a rota_ci we care about\r\n               rotaCIs.push(gr.sys_id);\r\n            }\r\n         }\r\n      }\r\n\r\n      // Now check the assignment group rosters\r\n      var assignmentGroup = incident.assignment_group;\r\n      gr = new GlideRecord(\"cmn_rota_assignment\");\r\n      gr.initialize();\r\n      gr.addQuery(\"group\", assignmentGroup);\r\n      gr.addQuery(\"rota_ci\", \"NULL\");\r\n      gr.query();\r\n      while (gr.next()) {\r\n\t // Does this roster pass the conditions\r\n         conditions = gr.conditions;\r\n         match = true;\r\n         if (conditions && !GlideFilter.checkRecord(incident, conditions, true)) {\r\n             match = false;\t    \r\n         } \r\n         if (match) {\r\n            // One we care about\r\n            assignments[gr.sys_id] = true;\r\n         }\r\n      }\r\n\r\n      if (rotaCIs.length > 0) {\r\n         gr.initialize();\r\n         gr.addQuery(\"rota_ci\", rotaCIs);\r\n         gr.query();\r\n         while (gr.next()) {\r\n\t    // Does this roster pass the conditions\r\n            conditions = gr.conditions;\r\n            match = true;\r\n            if (conditions && !GlideFilter.checkRecord(incident, conditions, true)) {\r\n               match = false;\t    \r\n            } \r\n            if (match) {\r\n               // One we care about\r\n               assignments[gr.sys_id] = true;\r\n            }\r\n         }\r\n      }\r\n\r\n      return assignments;\r\n   }\r\n};\r\n\r\n","sys_class_name":"sys_installation_exit","sys_id":"4fc923b30a0a0a9e00a51dbfdcb6bc8f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/8c6ca73b04352210559073c06a02f754","value":"8c6ca73b04352210559073c06a02f754"},"sys_update_name":"sys_installation_exit_4fc923b30a0a0a9e00a51dbfdcb6bc8f","sys_updated_by":"glide.maint","sys_created_on":"2007-05-03 02:33:41","name":"SupportRota","sys_name":"SupportRota","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"74","active":"true","description":"User login authentication.  This is the default which takes a username/password pair and authenticates with the user object.  Override this for a custom login.","overrides":"","sys_updated_on":"2021-08-25 08:25:23","sys_tags":"","script":"gs.include(\"PrototypeServer\");\n\nvar Login = Class.create();\nLogin.prototype = {\n    initialize : function() {\n    },\n\n    process : function() {\n        // the request is passed in as a global\n        var userName = request.getParameter(\"user_name\");\n        var userPassword = request.getParameter(\"user_password\");\n        \n        var user = GlideUser;\n        if (GlideStringUtil.notNil(userName)) {\n            var authed = user.authenticate(userName, userPassword);\n            if (authed)\n                return user.getUser(userName);\n        } else if (SNC.AuthenticationHelper.isMutualAuth()) {\n            var userLoginName = user.authenticateMutualAuthToken();\n            if (userLoginName != null) {\n                return user.getUser(userLoginName);\n            }\n        }\n        this.loginFailed();\n\n        return \"login.failed\";\n    },\n\n    loginFailed: function() {\n        if (GlideController.exists(\"glide.ldap.error.connection\")) {\n            var ldapConnError = GlideController.getGlobal(\"glide.ldap.error.connection\");\n            if (GlideStringUtil.notNil(ldapConnError))\n                GlideSession.get().addErrorMessage(ldapConnError);\n        } else if (request.getSession().getAttribute(\"glide.authenticate.local.login.method\") == \"certificate\") {\n            var message = GlideSysMessage.format(\"cert_login_invalid\");\n            GlideSession.get().addErrorMessage(message);\n        } else if (GlideController.exists(\"glide.auth.policy.ui.error.message\")) {\n            var authPolicyError = GlideController.getGlobal(\"glide.auth.policy.ui.error.message\");\n            if (GlideStringUtil.notNil(authPolicyError)) {\n                GlideSession.get().addErrorMessage(GlideSysMessage.format(authPolicyError));\n            }\n        } else {\n            var message = GlideSysMessage.format(\"login_invalid\");\n            GlideSession.get().addErrorMessage(message);\n        }\n\n    }\n\n}","sys_class_name":"sys_installation_exit","sys_id":"7cfa46450a0a0aa90056aa3101b0bd7c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_7cfa46450a0a0aa90056aa3101b0bd7c","sys_updated_by":"admin","sys_created_on":"2007-05-11 21:10:15","name":"Login","sys_name":"Login","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"40","active":"true","description":"Base installation exit for external authentication","overrides":"","sys_updated_on":"2017-01-27 02:28:19","sys_tags":"","script":"gs.include('PrototypeServer'); \nvar ExternalAuthentication = Class.create(); \nExternalAuthentication.prototype = { \n \tprocess : function() { \n\t\t return 'failed_authentication';\n\t } \n};","sys_class_name":"sys_installation_exit","sys_id":"7d67b6230a0a0aa90025a422dd686a33","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_7d67b6230a0a0aa90025a422dd686a33","sys_updated_by":"admin","sys_created_on":"2007-05-11 23:09:47","name":"ExternalAuthentication","sys_name":"ExternalAuthentication","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"13","active":"true","description":"User logout.  This is the default which takes the user to the welcome page.  Override this for a custom logout.","overrides":"","sys_updated_on":"2020-09-11 07:02:10","sys_tags":"","script":"gs.include(\"PrototypeServer\");\n\nvar Logout = Class.create();\nLogout.prototype = {\n\n        process : function() {\n        var s = request.getParameter('sysparm_goto_url');\n        var localLoginMethod = request.getSession().getAttribute(\"glide.authenticate.local.login.method\");\n        if ( localLoginMethod == \"certificate\" ) {\n\t\t\tif (s)\n\t\t\t\tresponse.sendRedirect(\"logout_certificate_complete.do?sysparm_goto_url=\" + s);\n\t\t\telse\n\t\t\t\tresponse.sendRedirect(\"logout_certificate_complete.do\");\n\t\t\t\n\t\t\treturn true;\n        }\n    \tif (s && GlideSecurityUtils.isURLWhiteListedStrict(s))\n          response.sendRedirect(s);\n        else\n          response.sendRedirect(\"logout_success.do\");\n\n          return true;\n        }\n\n}\n","sys_class_name":"sys_installation_exit","sys_id":"8b98e4460a0a0aa90019ce4bae1e7d10","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_8b98e4460a0a0aa90019ce4bae1e7d10","sys_updated_by":"admin","sys_created_on":"2007-05-14 17:18:12","name":"Logout","sys_name":"Logout","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"10","active":"false","description":"User logout with redirection.  This is the default which takes the user to the welcome page.  Override this for a custom logout.","overrides":"Logout","sys_updated_on":"2010-02-16 22:30:57","sys_tags":"","script":"gs.include(\"PrototypeServer\");\r\n\r\nvar LogoutRedirect = Class.create();\r\nLogoutRedirect.prototype = {\r\n\r\n        process : function() {\r\n          var gotoURL = \"http://www.google.com\";\r\n\r\n          response.sendRedirect(\"logout_redirect.do?sysparm_url=\" + gotoURL);\r\n\r\n          return true;\r\n        }\r\n\r\n}","sys_class_name":"sys_installation_exit","sys_id":"8bd80b7c0a0a0aa900d8a8aa61bb154a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_8bd80b7c0a0a0aa900d8a8aa61bb154a","sys_updated_by":"jared.laethem","sys_created_on":"2007-05-14 18:27:10","name":"LogoutRedirect","sys_name":"LogoutRedirect","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","sys_policy":""},{"sys_mod_count":"89","active":"false","description":"Overrides External authentication.  The default is to authenticate using header, parameter, or cookie and decrypt Digest encryption.  Enable the glide.authenticate.external property.  ","overrides":"ExternalAuthentication","sys_updated_on":"2015-04-16 23:30:34","sys_tags":"","script":"gs.include(\"PrototypeServer\");\n\nvar DigestSingleSignOn = Class.create();\nDigestSingleSignOn.prototype = {\n\n        process : function() {\n\n          var headerKey = GlideProperties.get(\"glide.authenticate.header.key\", \"SM_USER\");\n          var headerDigestKey = GlideProperties.get(\"glide.authenticate.header.encrypted_key\", \"DIGEST\");\n          var fieldName = GlideProperties.get(\"glide.authenticate.header.value\", \"user_name\"); \n          var fkey = GlideProperties.get(\"glide.authenticate.secret_key\");\n\n          // Look in the Headers\n          var data = request.getHeader(headerKey);\n          var encdata = request.getHeader(headerDigestKey);\n\n          // If not, then check the URL Parameters\n          if (data == null || encdata == null) {\n            data = request.getParameter(headerKey);\n            encdata = request.getParameter(headerDigestKey);\n          }\n     \n          // then maybe its a cookie\n          if (data == null || encdata == null) {\n             var CookieMan = GlideCookieMan;\n             var cookies = request.getCookies();\n             data = CookieMan.getCookieValue(cookies, headerKey);\n             encdata = CookieMan.getCookieValue(cookies, headerDigestKey);\n          }\n\n          // if found run encryption\n          if (data != null && encdata != null) {\n            try {\n\n              // Replace all spaces with plus(+)'s, converted in url         \n              encdata = encdata.replaceAll(' ', '+');\n\n              // ----- Ecrypt the username \n              var key = this.getDigest(data, fkey);\n\n              // Check for match of recieved encoded data\n              // and your encoding of user name\n              if (encdata == key) {\n                var ugr = new GlideRecord(\"sys_user\");\n                ugr.initialize();\n                if (!ugr.isValidField(fieldName)) {\n                  var Log = GlideLog;\n                  Log.warn(\"External authorization is set to use field: '\"\n                            + fieldName + \"' which doesn't exist\");\n\n                  SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"failure\", \"user_name=\" + data, \"\");\n                  return \"failed_missing_requirement\";\n                }\n                ugr.addQuery(fieldName, data);\n                ugr.query();\n                if (!ugr.next()) {\n                  var User = GlideUser;\n                  var userLoad = User.getUser(data);\n                  if (userLoad == null) {\n                      SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"failure\", \"user_name=\" + data, \"\");\n\t\t\t\t\t  return \"failed_authentication\";\n\t\t\t\t  }\n                  ugr.initialize();\n                  ugr.addQuery(fieldName, data);\n                  ugr.query();\n                  if (!ugr.next()) {\n                    SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"failure\", \"user_name=\" + data, \"\");\n                    return \"failed_authentication\";\n\t\t\t\t  }\n                }\n                var userName = ugr.getValue(\"user_name\");\n                SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"success\", \"user_name=\" + data, \"\");\n                return userName;\n              } else {\n                SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"failure\", \"user_name=\" + data, \"\");\n                return \"failed_authentication\";\n              }\n            } catch(e) {\n                gs.log(e);\n                SNC.SecurityEventSender.sendLoginGCFEvent(\"Digest\", \"failure\", \"user_name=\" + data, \"\");\n                return \"failed_authentication\";\n            }\n          // Encoded data didn't match recieved Encoded data\n          } else {\n            return \"failed_missing_requirement\";\n          }\n        },\n\n        getDigest : function( data, fkey ) {\n          try {\n            // default to something JDK 1.4 has\n            var MAC_ALG = \"HmacSHA1\";\n            return  SncAuthentication.encode(data, fkey, MAC_ALG);\n            \n          } catch (e) {\n              gs.log(e.toString());\n              throw 'failed_missing_requirement';\n          }  \n        }        \n};\n\n\n","sys_class_name":"sys_installation_exit","sys_id":"b8d455e80a0a0b2b01d25f2b847d7003","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/9543af3304312210559073c06a02f769","value":"9543af3304312210559073c06a02f769"},"sys_update_name":"sys_installation_exit_b8d455e80a0a0b2b01d25f2b847d7003","sys_updated_by":"admin","sys_created_on":"2007-08-30 22:11:37","name":"DigestSingleSignOn","sys_name":"DigestSingleSignOn","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"cmitch","sys_policy":""},{"sys_mod_count":"28","active":"true","description":"Gets the session timeout for integration request.","overrides":"","sys_updated_on":"2015-10-10 00:00:23","sys_tags":"","script":"gs.include(\"PrototypeServer\");\n\nvar GetIntegrationSessionTimeout = Class.create();\nGetIntegrationSessionTimeout.prototype = {\n\tinitialize : function() {\n\t},\n\t\n\t// Gets the timeout (in minutes) for the new session being established for the current transaction.\n\t// Either numbers or strings containing numbers can be returned.\n\t//\n\t// If this script returns:\n\t//  - Any positive number or a string that represents a positive number. It will be interpreted\n\t//     as the desired session timeout in minutes for the new session.\n\t//  - Any non-positive number, or string that doesn't represent a number. It will be interpreted\n\t//     that the script does not wish to alter the default session timeout behavior.\n\t\n\tprocess : function() {\n\t\t// request and response are passed in as globals\n\t\treturn this.getIntegrationSessionTimeout();\n\t},\n\t\n\t// override integration session timeout for the current transaction\n\tgetIntegrationSessionTimeout : function() {\n\t\treturn GlideProperties.get('glide.integration.session_timeout', '1');\n\t}\n};\n","sys_class_name":"sys_installation_exit","sys_id":"d6b698229f3202002b6c96fcc67fcfeb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a5c7e3bf04b12210559073c06a02f7da","value":"a5c7e3bf04b12210559073c06a02f7da"},"sys_update_name":"sys_installation_exit_d6b698229f3202002b6c96fcc67fcfeb","sys_updated_by":"admin","sys_created_on":"2015-10-02 06:25:59","name":"GetIntegrationSessionTimeout","sys_name":"GetIntegrationSessionTimeout","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""}]}