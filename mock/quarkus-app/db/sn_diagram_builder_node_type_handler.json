{"result":[{"sys_mod_count":"7","active":"true","sys_updated_on":"2024-08-28 14:08:23","sys_tags":"","type":"add","script":"function addNode(diagram, newNodeData, newNodeConnectors, linkData, shapeTemplatePropertyMap, uuidv4, generateEdgeKey, dragAndDropTriggered) {\n    var _addLoopTemplate = function() {\n        var startNodeData = newNodeData.actionDependencies[0].action;\n        var endNodeData = newNodeData.actionDependencies[1].action;\n        diagram.model.commit(function(model) {\n            // Now that we added loop node to the diagram, add Start and end nodes to the loop node.\n            var startNodeKey = uuidv4();\n            var endNodeKey = uuidv4();\n            var startNodeTemplateId = startNodeData.nodeType.sysId;\n            var endNodeTemplateId = endNodeData.nodeType.sysId;\n            var startNode = Object.assign({\n                    key: startNodeKey,\n                    node_id: startNodeData.sysId,\n                    name: startNodeData.name,\n                    icon: startNodeData.icon,\n                    templateId: startNodeTemplateId,\n                    group: newNodeData.key,\n                    nodeCategory: startNodeData.category,\n                    nodeSubCategory: startNodeData.subCategory\n\n                }, shapeTemplatePropertyMap[startNodeTemplateId] // Shape template visual properties.\n            );\n            var endNode = Object.assign({\n                    key: endNodeKey,\n                    node_id: endNodeData.sysId,\n                    name: endNodeData.name,\n                    icon: endNodeData.icon,\n                    templateId: endNodeTemplateId,\n                    group: newNodeData.key,\n                    nodeCategory: endNodeData.category,\n                    nodeSubCategory: endNodeData.subCategory\n\n                }, shapeTemplatePropertyMap[startNodeTemplateId] // Shape template visual properties.\n            );\n\n            // Create link data that connects start and end node.\n            var linkFromStartToEnd = Object.assign({\n                    from: startNodeKey,\n                    to: endNodeKey,\n                    templateId: linkData.templateId,\n                    edge_id: linkData.edge_id,\n                    fromPort: '49de92bc535c20100b0cddeeff7b12f9',\n                    toPort: 'c0bed67c535c20100b0cddeeff7b12fc',\n                }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n            );\n            model.addNodeData(startNode);\n            model.addNodeData(endNode);\n            if (generateEdgeKey) {\n                Object.assign(linkFromStartToEnd, {\n                    key: uuidv4()\n                });\n            }\n            model.addLinkData(linkFromStartToEnd);\n        }, \"Adding loop start and end nodes to the loop node\");\n    };\n    diagram.model.commit(function(model) {\n        //debugger;\n        if (linkData) {\n            var nextNodeToPort = linkData.toPort;\n            if (!dragAndDropTriggered)\n                model.addNodeData(newNodeData); // Add new node to the diagram.\n\n            // Extract input/ output connectors of loop node.\n            var toConnector, fromConnector, elsePortConnector;\n\n            for (var i = 0; i < newNodeConnectors.length; i++) {\n                if (newNodeConnectors[i].direction === \"input\")\n                    toConnector = newNodeConnectors[i];\n                else if (newNodeConnectors[i].direction === \"output\") {\n                    fromConnector = newNodeConnectors[i];\n                }\n            }\n\n            // Create link data that connects new node to the next node.\n            var newLinkData = Object.assign({\n                    from: newNodeData.key,\n                    to: linkData.to,\n                    templateId: linkData.templateId,\n                    edge_id: linkData.edge_id,\n                }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n            );\n\n            // If from connector is available for the new node, add fromPort property to the new link.\n            if (fromConnector)\n                newLinkData.fromPort = fromConnector.sysId;\n            // If to port is available for the next node, add toPort property to the new link.\n            if (nextNodeToPort)\n                newLinkData.toPort = nextNodeToPort;\n\n            if (generateEdgeKey) {\n                Object.assign(newLinkData, {\n                    key: uuidv4()\n                });\n            }\n            //Add new link from then port to the diagram\n            model.addLinkData(newLinkData);\n\n            // Relink existing link to new node.\n            model.setDataProperty(linkData, 'to', newNodeData.key);\n            // If to connector is available for the new node, add toPort property to the existing link.\n            model.setDataProperty(linkData, 'toPort', toConnector.sysId);\n        } else\n            model.addNodeData(newNodeData); // Add new node to the diagram.\n    }, \"Adding Loop node to the diagram\");\n    _addLoopTemplate();\n}","sys_class_name":"sn_diagram_builder_node_type_handler","sys_id":"020b0758539220100b0cddeeff7b125f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"node_type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sn_diagram_builder_node_type/c698912753d8a0100b0cddeeff7b12f7","value":"c698912753d8a0100b0cddeeff7b12f7"},"sys_update_name":"sn_diagram_builder_node_type_handler_020b0758539220100b0cddeeff7b125f","sys_updated_by":"admin","sys_created_on":"2021-02-09 09:07:44","sys_name":"c698912753d8a0100b0cddeeff7b12f7","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"17","active":"true","sys_updated_on":"2022-11-29 03:42:59","sys_tags":"","type":"remove","script":"function removeNode(diagram, node, actionPropertyMap, dispatch) {\n    // TODO: Deleting Conditional nodes needs, a lot of custom manipulation.\n    // Update below code accordingly.\n    diagram.commit(function(d) {\n        // Get all links into this node.\n        var linksInto = node.findLinksInto();\n        // Get all links out of this node.\n        var linksOutFrom = node.findLinksOutOf();\n\n        // Get the then and else port ids.\n        var connectors = actionPropertyMap[node.data.node_id].connectors;\n        var thenPortId, elsePortId;\n        for (var i = 0; i < connectors.length; i++) {\n            if (connectors[i].direction === \"output\") {\n                if (connectors[i].name === \"Then\")\n                    thenPortId = connectors[i].sysId;\n                else\n                    elsePortId = connectors[i].sysId;\n            }\n        }\n\n        // Get all immediate nodes connecting out from then and else ports.\n        var nextNodeOutOfThenItr = node.findNodesOutOf(thenPortId);\n        var nextNodeDataOutOfThen = nextNodeOutOfThenItr && nextNodeOutOfThenItr.count > 0 ? nextNodeOutOfThenItr.value.data : null;\n        var nextNodeOutOfElseItr = node.findNodesOutOf(elsePortId);\n        var nextNodeDataOutOfElse = nextNodeOutOfElseItr && nextNodeOutOfElseItr.count > 0 ? nextNodeOutOfElseItr.value.data : null;\n\n        // For each link to deleted node, update to and toPort properties to those of deleted node's next node.\n        var links = [];\n        linksInto.each(function(link) {\n            links.push(link.data);\n        });\n        if (nextNodeDataOutOfThen) {\n            var actionId = nextNodeDataOutOfThen.node_id;\n\n            // Get the toPort ID of next node from then port. Take the first connector with direction input.\n            var nextNodeConnectors = actionPropertyMap[actionId].connectors;\n            var toConnector;\n            for (var j = 0; j < nextNodeConnectors.length; j++) {\n                if (nextNodeConnectors[j].direction === \"input\") {\n                    toConnector = nextNodeConnectors[j];\n                    break;\n                }\n            }\n            var toPortId = toConnector ? toConnector.sysId : null;\n            links.forEach(function(link) {\n                d.model.setDataProperty(link, 'to', nextNodeDataOutOfThen.key);\n                if (toPortId)\n                    d.model.setDataProperty(link, 'toPort', toPortId);\n            });\n        } else {\n            var linkKeys = [];\n\n            // If next node is not available, delete all links into this node, as they would be dangling after deleting the node.\n            // Remove all links coming out of this node.\n            links.forEach(function(link) {\n                d.model.removeLinkData(link);\n                if (link.key)\n                    linkKeys.push(link.key);\n            });\n\n            // Remove the edge arguments associated to the removed links\n            if (linkKeys.length > 0) {\n                dispatch(\"DIAGRAMDATA#DIAGRAM_JSON_UPDATED\", {\n                    action: 'argument-delete',\n                    data: {\n                        keys: linkKeys,\n                        isEdge: true,\n                    },\n                });\n            }\n        }\n\n        var outLinks = [];\n        var outLinkKeys = [];\n        linksOutFrom.each(function(link) {\n            outLinks.push(link.data);\n            if (link.key)\n                outLinkKeys.push(link.key);\n        });\n        // Remove all links coming out of this node.\n        outLinks.forEach(function(link) {\n            d.model.removeLinkData(link);\n        });\n\n        // Remove the edge arguments associated to the removed links\n        if (outLinkKeys.length > 0) {\n            dispatch(\"DIAGRAM_DATA#DIAGRAM_JSON_UPDATED\", {\n                action: 'argument-delete',\n                data: {\n                    keys: outLinkKeys,\n                    isEdge: true,\n                },\n            });\n        }\n\n        // Remove condition node itself.\n        d.model.removeNodeData(node.data);\n\n        // Remove subtree, coming out of else branch.\n        //const subtreeFromElse = nextNodeOutOfElse.findTreeParts();\n\n        //d.removeParts(nextNodeOutOfElse.findTreeParts());\n        // Remove node out of else port.\n        //d.model.removeNodeData(nextNodeOutOfElse);\n\n    }, 'Removing Condition node from diagram');\n}","sys_class_name":"sn_diagram_builder_node_type_handler","sys_id":"0e5a8f18539220100b0cddeeff7b1296","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"node_type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sn_diagram_builder_node_type/3558b669538020100b0cddeeff7b1208","value":"3558b669538020100b0cddeeff7b1208"},"sys_update_name":"sn_diagram_builder_node_type_handler_0e5a8f18539220100b0cddeeff7b1296","sys_updated_by":"admin","sys_created_on":"2021-02-09 09:04:53","sys_name":"3558b669538020100b0cddeeff7b1208","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"8","active":"true","sys_updated_on":"2022-11-29 03:41:35","sys_tags":"","type":"remove","script":"function removeNode(diagram, node, actionPropertyMap, dispatch) {\n    diagram.commit(function(d) {\n        //d.remove(node);\n        d.removeParts(node.memberParts);\n        // Get all links into this node.\n        var linksInto = node.findLinksInto();\n        var linksOutFrom = node.findLinksOutOf();\n        // Get immediate node connecting out from this node.\n        var nodeOutOfItr = node.findNodesOutOf();\n        var nextNode = nodeOutOfItr && nodeOutOfItr.count > 0 ? nodeOutOfItr.value.data : null;\n\n        // Extract link data for each link node.\n        var links = [];\n        linksInto.each(function(link) {\n            links.push(link.data);\n        });\n        if (nextNode) {\n            var actionId = nextNode.node_id;\n\n            // Get the toPort ID of next node. Take the first connector with direction input.\n            var connectors = actionPropertyMap[actionId].connectors;\n            var toConnector = null;\n            for (var i = 0; i < connectors.length; i++) {\n                if (connectors[i].direction === \"input\") {\n                    toConnector = connectors[i];\n                    break;\n                }\n\n            }\n            var toPortId = toConnector ? toConnector.sysId : null;\n            // For each link to deleted node, update to and toPort properties to those of deleted node's next node.\n            links.forEach(function(link) {\n                d.model.setDataProperty(link, 'to', nextNode.key);\n                if (toPortId)\n                    d.model.setDataProperty(link, 'toPort', toPortId);\n            });\n        } else {\n            var linkKeys = [];\n\n            // If next node is not available, delete all links into this node, as they would be dangling after deleting the node.\n            links.forEach(function(link) {\n                d.model.removeLinkData(link);\n                if (link.key)\n                    linkKeys.push(link.key);\n            });\n\n            // Remove the edge arguments associated to the deleted links\n            if (linkKeys.length > 0) {\n                dispatch(\"DIAGRAMDATA#DIAGRAM_JSON_UPDATED\", {\n                    action: 'argument-delete',\n                    data: {\n                        keys: linkKeys,\n                        isEdge: true,\n                    },\n                });\n            }\n        }\n\n        var outLinks = [];\n        var outLinkKeys = [];\n        linksOutFrom.each(function(link) {\n            outLinks.push(link.data);\n        });\n        // Remove all links coming out of this node.\n        outLinks.forEach(function(link) {\n            d.model.removeLinkData(link);\n            if (link.key)\n                outLinkKeys.push(link.key);\n        });\n\n        // Remove the edge arguments associated to the deleted links\n        if (outLinkKeys.length > 0) {\n            dispatch(\"DIAGRAM_DATA#DIAGRAM_JSON_UPDATED\", {\n                action: 'argument-delete',\n                data: {\n                    keys: outLinkKeys,\n                    isEdge: true,\n                },\n            });\n        }\n\n        // Remove action node itself.\n        d.model.removeNodeData(node.data);\n\n    }, 'Removing Loop node from the diagram');\n}","sys_class_name":"sn_diagram_builder_node_type_handler","sys_id":"5b1b4758539220100b0cddeeff7b1288","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"node_type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sn_diagram_builder_node_type/c698912753d8a0100b0cddeeff7b12f7","value":"c698912753d8a0100b0cddeeff7b12f7"},"sys_update_name":"sn_diagram_builder_node_type_handler_5b1b4758539220100b0cddeeff7b1288","sys_updated_by":"admin","sys_created_on":"2021-02-09 09:08:17","sys_name":"c698912753d8a0100b0cddeeff7b12f7","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"14","active":"true","sys_updated_on":"2024-08-28 14:07:29","sys_tags":"","type":"add","script":"function addNode(diagram, newNodeData, newNodeConnectors, linkData, shapeTemplatePropertyMap, uuidv4, generateEdgeKey, dragAndDropTriggered) {\n    var _constructPlaceholderNodeData = function() {\n        var placeholderActionData = newNodeData.actionDependencies[0].action;\n        var templateId = placeholderActionData.nodeType.sysId;\n        // FIXME: Construct this from action dependencies, instead of defining static values.\n        return Object.assign({\n            key: uuidv4(),\n            _isInvalid: false,\n            node_id: placeholderActionData.sysId,\n            templateId: templateId,\n            name: placeholderActionData.name,\n            nodeCategory: placeholderActionData.category,\n            nodeSubCategory: placeholderActionData.subCategory,\n            icon: placeholderActionData.icon,\n            group: newNodeData.group\n        }, shapeTemplatePropertyMap[templateId]);\n    };\n    diagram.model.commit(function(model) {\n        //debugger;\n        if (linkData) {\n            var nextNodeToPort = linkData.toPort;\n            if (!dragAndDropTriggered)\n                // Add new node to the diagram.\n                model.addNodeData(newNodeData);\n            // Extract one input and two output ports (then/ else) of the condition node.\n            var toConnector, thenPortConnector, elsePortConnector;\n            for (var i = 0; i < newNodeConnectors.length; i++) {\n                if (newNodeConnectors[i].direction === \"input\")\n                    toConnector = newNodeConnectors[i];\n                else {\n                    if (newNodeConnectors[i].name === \"Then\")\n                        thenPortConnector = newNodeConnectors[i];\n                    else\n                        elsePortConnector = newNodeConnectors[i];\n                }\n            }\n\n            var nextNode = diagram.findNodeForKey(linkData.to);\n\n            // Construct placeholder nodes coming out from then/else ports.\n            var thenPlaceholder = _constructPlaceholderNodeData();\n            var elsePlaceholder = _constructPlaceholderNodeData();\n\n            // \"Add If node\" behavior is determined based on whether next node is end node or not.\n            // So we need to first determine that.\n            // Next node is end only when we don't find a from link with next node's key\n            var nextActionNodeItr = diagram.findLinksByExample({\n                from: nextNode.key\n            });\n            var nextNodeIsEnd = !nextActionNodeItr || nextActionNodeItr.count === 0;\n\n            // Create link data that connects then port of if node to the next node.\n            // If next node is end node, then connect to this to then placeholder node.\n            // Otherwise connect to next node itself.\n            var newLinkDataFromThenPort = Object.assign({\n                    from: newNodeData.key,\n                    to: nextNodeIsEnd ? thenPlaceholder.key : linkData.to,\n                    templateId: linkData.templateId,\n                    edge_id: linkData.edge_id,\n                }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n            );\n            var newLinkDataFromThenPlaceholderNode = null;\n            if (nextNodeIsEnd)\n                newLinkDataFromThenPlaceholderNode = Object.assign({\n                        from: thenPlaceholder.key,\n                        to: linkData.to,\n                        templateId: linkData.templateId,\n                        edge_id: linkData.edge_id,\n                    }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n                );\n            // Add then port ID as fromPort property to the new link.\n            newLinkDataFromThenPort.fromPort = thenPortConnector.sysId;\n            // If to port is available for the next node, add toPort property to the new link.\n            if (nextNodeToPort) {\n                if (nextNodeIsEnd)\n                    newLinkDataFromThenPlaceholderNode.toPort = nextNodeToPort;\n                else\n                    newLinkDataFromThenPort.toPort = nextNodeToPort;\n            }\n\n            if (nextNodeIsEnd) {\n                model.addNodeData(thenPlaceholder);\n                if (generateEdgeKey)\n                    Object.assign(newLinkDataFromThenPlaceholderNode, {\n                        key: uuidv4()\n                    });\n                model.addLinkData(newLinkDataFromThenPlaceholderNode);\n            }\n            if (generateEdgeKey)\n                Object.assign(newLinkDataFromThenPort, {\n                    key: uuidv4()\n                });\n            model.addLinkData(newLinkDataFromThenPort);\n\n            // Create link data that connects else port of if node to the next node.\n            var newLinkDataFromElsePort = Object.assign({\n                    from: newNodeData.key,\n                    to: elsePlaceholder.key,\n                    templateId: linkData.templateId,\n                    edge_id: linkData.edge_id,\n                }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n            );\n\n            // If next node is not end node, we need to connect else node's placeholder to next action node.\n            var nextActionNodeLinkData = null;\n            if (!nextNodeIsEnd)\n                nextActionNodeLinkData = nextActionNodeItr.first().data;\n            var newLinkDataFromElsePlaceholderNode = Object.assign({\n                    from: elsePlaceholder.key,\n                    to: nextNodeIsEnd ? linkData.to : nextActionNodeLinkData.to,\n                    templateId: linkData.templateId,\n                    edge_id: linkData.edge_id,\n                }, shapeTemplatePropertyMap[linkData.templateId] // Shape template visual properties.\n            );\n            if (generateEdgeKey) {\n                Object.assign(newLinkDataFromElsePort, {\n                    key: uuidv4()\n                });\n                Object.assign(newLinkDataFromElsePlaceholderNode, {\n                    key: uuidv4()\n                });\n            }\n            // Add else port ID as fromPort property to the new link.\n            newLinkDataFromElsePort.fromPort = elsePortConnector.sysId;\n            // If to port is available for the next node, add toPort property to the new link.\n            if (nextNodeIsEnd) {\n                if (nextNodeToPort)\n                    newLinkDataFromElsePlaceholderNode.toPort = nextNodeToPort;\n            } else {\n                if (nextActionNodeLinkData && nextActionNodeLinkData.toPort)\n                    newLinkDataFromElsePlaceholderNode.toPort = nextActionNodeLinkData.toPort;\n            }\n\n            // Add placeholder node from Else port.\n            model.addNodeData(elsePlaceholder);\n            // Add new link from else port to placeholder node.\n            model.addLinkData(newLinkDataFromElsePort);\n            // Add new link from else placeholder node to next node.\n            model.addLinkData(newLinkDataFromElsePlaceholderNode);\n            // Relink existing link to new node.\n            model.setDataProperty(linkData, 'to', newNodeData.key);\n            // If to connector is available for the new node, add toPort property to the existing link.\n            model.setDataProperty(linkData, 'toPort', toConnector.sysId);\n        } else\n            model.addNodeData(newNodeData); // Add new node to the diagram.\n    }, \"Adding Condition node to the diagram\");\n}","sys_class_name":"sn_diagram_builder_node_type_handler","sys_id":"c21a0f18539220100b0cddeeff7b12a1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"node_type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sn_diagram_builder_node_type/3558b669538020100b0cddeeff7b1208","value":"3558b669538020100b0cddeeff7b1208"},"sys_update_name":"sn_diagram_builder_node_type_handler_c21a0f18539220100b0cddeeff7b12a1","sys_updated_by":"admin","sys_created_on":"2021-02-09 09:04:24","sys_name":"3558b669538020100b0cddeeff7b1208","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"sys_created_by":"admin","sys_policy":""},{"sys_mod_count":"11","active":"true","sys_updated_on":"2024-11-22 10:22:20","sys_tags":"","type":"dropped","script":"function droppedNode(diagram, newNodeData, newNodeConnectors, linkData, shapeTemplatePropertyMap, uuidv4, generateEdgeKey, nodeTypeHandlers) {\n    diagram.model.commit(function(model) {\n        if (linkData) {\n            const {\n                to,\n                edge_id,\n                toPort: nextNodeToPort,\n                templateId: linkShapeTemplate,\n            } = linkData;\n            // For action node, pick first input connector for\n            // toPort and first output connector for fromPort.\n            const toConnector = newNodeConnectors.find(\n                connector => connector.direction === 'input',\n            );\n            const fromConnector = newNodeConnectors.find(\n                connector => connector.direction === 'output',\n            );\n            // Set item arrays if input connectors are dynamic\n            const inputPortId = uuidv4();\n            if (toConnector?.isDynamic) {\n                newNodeData['input_ports'] = [{\n                    portId: inputPortId,\n                    direction: 'input',\n                }, ];\n            }\n            // Set item arrays if output connectors are dynamic\n            const outputPortId = uuidv4();\n            if (fromConnector?.isDynamic) {\n                newNodeData['output_ports'] = [{\n                    portId: outputPortId,\n                    direction: 'output',\n                }, ];\n            }\n            // Create link data that connects new node to the next node.\n            const newLinkData = {\n                from: newNodeData.key,\n                to,\n                templateId: linkShapeTemplate,\n                edge_id,\n                ...shapeTemplatePropertyMap[linkShapeTemplate], // Shape template visual properties.\n                // ...getActionCustomProperties(),\n            };\n            if (generateEdgeKey)\n                Object.assign(newLinkData, {\n                    key: uuidv4()\n                });\n            // If from connector is available for the new node, add fromPort property to the new link.\n            if (fromConnector) {\n                newLinkData.fromPort = fromConnector.isDynamic ?\n                    outputPortId :\n                    fromConnector.sysId;\n            }\n            // If to port is available for the next node, add toPort property to the new link.\n            if (nextNodeToPort)\n                newLinkData.toPort = nextNodeToPort;\n            // Add new link to the diagram\n            model.addLinkData(newLinkData);\n            // Relink existing link to new node.\n            model.setDataProperty(linkData, 'to', newNodeData.key);\n            // If to connector is available for the new node, add toPort property to the existing link.\n            if (toConnector) {\n                model.setDataProperty(\n                    linkData,\n                    'toPort',\n                    toConnector.isDynamic ?\n                    inputPortId :\n                    toConnector.sysId\n                );\n            } else\n                model.setDataProperty(linkData, 'toPort', null);\n            linkData = newLinkData;\n        }\n        //Add code to perform action when a node is dropped on to another node or link\n    }, 'Dropping node on another node or link');\n\n    var addNodeHandler = nodeTypeHandlers.find(function(handler) {\n        return handler.type === 'add';\n    });\n    if (addNodeHandler) {\n        //If addhandler is available for the node that is getting dropped, execute the same.\n        new Function(`return ${addNodeHandler.script}`)()(\n            diagram,\n            newNodeData,\n            newNodeConnectors,\n            linkData,\n            shapeTemplatePropertyMap,\n            uuidv4,\n            generateEdgeKey,\n            true\n        );\n    }\n}","sys_class_name":"sn_diagram_builder_node_type_handler","sys_id":"e56d122da31012105d51b85de31e6102","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"node_type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sn_diagram_builder_node_type/98b8fa39532310100b0cddeeff7b128b","value":"98b8fa39532310100b0cddeeff7b128b"},"sys_update_name":"sn_diagram_builder_node_type_handler_e56d122da31012105d51b85de31e6102","sys_updated_by":"admin","sys_created_on":"2024-08-28 14:15:25","sys_name":"98b8fa39532310100b0cddeeff7b128b","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1cf7ad026abf3abab12e761ddaa6e9df","value":"1cf7ad026abf3abab12e761ddaa6e9df"},"sys_created_by":"admin","sys_policy":""}]}