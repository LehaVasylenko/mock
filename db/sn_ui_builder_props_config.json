{"result":[{"image":"","config_layout":"[\r\n\t{\r\n\t\t\"type\": \"externalProp\",\r\n\t\t\"name\": \"listType\"\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Data\",\r\n\t\t\"icon\": \"database-outline\",\r\n\t\t\"id\": \"data\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"listMenuConfigurationId\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"listId\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"table\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"parentTable\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"parentRecordSysId\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"relatedListName\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"fixedFilter\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableLiveList\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableInfiniteScroll\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Default display\",\r\n\t\t\"icon\": \"sliders-outline\",\r\n\t\t\"id\": \"defaultDisplay\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"view\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"columns\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"columnLimit\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"rowLimit\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"filter\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"listTitle\"\r\n\t\t\t},\r\n\t\t\t\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"groupBy\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"nestBy\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"childrenRowLimit\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableBadgeCount\"\r\n\t\t\t},\r\n\t\t\t\"shadeAlternateRows\",\r\n\t\t\t\"expandAllGroups\",\r\n\t\t\t\"enableEmptyState\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"End user capabilities\",\r\n\t\t\"icon\": \"hand-gear-outline\",\r\n\t\t\"id\": \"endUserCapabilities\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"toggleAllGroupsEnabled\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableQuickEdit\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableQuickFormNavigation\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enforceViewRulesForQuickForm\"\r\n\t\t\t},\r\n\t\t\t\"cellEditingEnabled\",\r\n\t\t\t\"columnResizingEnabled\",\r\n\t\t\t\"columnDragDropEnabled\",\r\n\t\t\t\"rowDragDropEnabled\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableColumnSorting\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableColumnFiltering\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableColumnGrouping\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableCellFiltering\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Selection\",\r\n\t\t\"icon\": \"checkbox-checked-outline\",\r\n\t\t\"id\": \"selection\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"selectionEnabled\",\r\n\t\t\t\"selectAllEnabled\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"allRecordsSelected\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"selectedRecords\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"exceptedRecords\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"onlyEnableSelectionWhenRequiredByActions\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Cell content treatment\",\r\n\t\t\"icon\": \"text-outline\",\r\n\t\t\"id\": \"cellContentTreatment\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"clickableTextEnabled\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableReferenceLinks\"\r\n\t\t\t},\r\n\t\t\t\"wrapCellContent\",\r\n\t\t\t\"maxCharacters\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"fetchHighlightedValues\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"highlightedValueConfigId\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]","icon":"","sys_mod_count":"24","active":"true","sys_updated_on":"2024-11-27 23:45:52","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_component_preset/33f6672f7d096e5a32e4e96b497748e4","value":"33f6672f7d096e5a32e4e96b497748e4"},"scripted_config_policy":"// This script sets logical behavior for the now-list config panel in UIB ONLY WHEN NOW-LIST IS USED WITH THE LIST CONTROLLER PRESET.\n// There is a separate script in the now-list repo for the default when now-list has no preset applied.\nfunction connectedListPolicy(args) {\n\t// args.trigger is null on first load of the config\n\t// every check should run on first load so that all the expected values are set based on previous config\n\tvar isBootstrap = args.trigger === null;\n\t// external props from the controller are objects, not strings the way component props are.\n\t// shape: { type: 'externalProp', name: 'propName'}\n\t// setting this as a var and checking it prevents js object value semantics issues and shortens if statements\n\t// null is of type object, so args.trigger.<prop> will result in an error when it isBootstrap\n\tvar isExternalTrigger = (!isBootstrap && typeof args.trigger === \"object\");\n\t// this script doesn't include hiding selection, dragdrops, etc like now-list's vanilla policy does\n\t// since there is no need to account for invalid rows/cols in connected case\n\t// all list type prop updates\n\tif (\n\t\t(isExternalTrigger && args.trigger?.name === 'listType') ||\n\t\tisBootstrap\n\t) {\n\t\tconst currentListType = args.externalProperties.listType;\n\t\tconst columnFilteringPopoverDisplay = args.externalProperties.columnFilteringPopoverDisplay;\n\t\t// even though there are more supported list types, only some should be exposed in the UIB dropdown.\n\t\tconst selectableTypesChoices = [\n\t\t\t{\n\t\t\t\t\"label\": \"Default\",\n\t\t\t\t\"sublabel\": \"A list with a full feature set\",\n\t\t\t\t\"value\": \"default\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"sublabel\": \"A simplified list for small spaces within dashboards etc\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t}\n\t\t];\n\t\tconst individualListExternalProps = [\n\t\t\t'table',\n\t\t\t'listTitle',\n\t\t\t'fixedFilter',\n\t\t\t'filter',\n\t\t\t'groupBy',\n\t\t\t'view',\n\t\t\t'columns',\n\t\t\t'columnLimit',\n\t\t\t'enableColumnSorting',\n\t\t\t'enableColumnFiltering',\n\t\t\t'enableColumnGrouping',\n\t\t\t'enableCellFiltering',\n\t\t\t'allRecordsSelected',\n\t\t\t'onlyEnableSelectionWhenRequiredByActions',\n\t\t\t'enableReferenceLinks',\n\t\t\t'enableLiveList',\n\t\t\t'enableInfiniteScroll',\n\t\t\t'nestBy',\n\t\t\t'childrenRowLimit',\n\t\t\t'enableBadgeCount'\n\t\t];\n\t\tconst individualListProps = [\n\t\t\t'cellEditingEnabled',\n\t\t\t'clickableTextEnabled',\n\t\t\t'columnDragDropEnabled',\n\t\t\t'columnResizingEnabled',\n\t\t\t'expandAllGroups',\n\t\t\t'maxCharacters',\n\t\t\t'rowDragDropEnabled',\n\t\t\t'selectionEnabled',\n\t\t\t'selectAllEnabled',\n\t\t\t'wrapCellContent'\n\t\t];\n\t\tconst menuListExternalProps = [\n\t\t\t'listMenuConfigurationId',\n\t\t\t'listId',\n\t\t\t'showListOpenedByLinkSection'\n\t\t];\n\t\tconst relatedListExternalProps = [\n\t\t\t'parentTable',\n\t\t\t'parentRecordSysId',\n\t\t\t'relatedListName'\n\t\t];\n\t\tif (\n\t\t\tcurrentListType === 'default' ||\n\t\t\tcurrentListType === 'simple' ||\n\t\t\tcurrentListType === 'related'\n\t\t) {\n\t\t\t// common amongst these 3 list types since they are all individual lists\n\t\t\tindividualListExternalProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: true });\n\t\t\t});\n\t\t\tindividualListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: true });\n\t\t\t});\n\t\t\tmenuListExternalProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: false, value: null });\n\t\t\t});\n\t\t\targs.api.updateProperty( { type: 'externalProp', name: 'selectedRecords' }, { isVisible: true });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'exceptedRecords' }, { isVisible: true });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'highlightedValueConfigId' }, { isVisible: true });\n\t\t\t// specific to each list type\n\t\t\tswitch (currentListType) {\n\t\t\t\tcase 'default':\n\t\t\t\t\trelatedListExternalProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: false, value: null });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickEdit' }, { isVisible: true });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickFormNavigation' }, { isVisible: !args.externalProperties.nestBy});\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { isVisible: true });\n\t\t\t\t\t// if the user manually changed the list type, the value should update to reflect the new type.\n\t\t\t\t\t// if they just refreshed and kept the same type, we should preserve their configs.\n\t\t\t\t\tif (!isBootstrap) {\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickEdit' }, { value: true });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickFormNavigation' }, { value: !args.externalProperties.nestBy});\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { value: true });\n\t\t\t\t\t}\n\t\t\t\t\targs.api.updateVisibility('list-transform', true);\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableInfiniteScroll' }, { isVisible: true});\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableLiveList' }, { isVisible: true });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'simple':\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableInfiniteScroll' }, { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableLiveList' }, { isVisible: false, value: false });\n\n\t\t\t\t\trelatedListExternalProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: false, value: null });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickEdit' }, { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickFormNavigation' }, { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { isVisible: false, value: false });\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'related':\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableInfiniteScroll' }, { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableLiveList' }, { isVisible: false, value: false });\n\n\t\t\t\t\trelatedListExternalProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: true });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickEdit' }, { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { isVisible: false, value: false });\n\t\t\t\t\t// related is a hidden type\n\t\t\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\t\t\tconst relatedChoice = {\n\t\t\t\t\t\tlabel: \"Related\",\n\t\t\t\t\t\tvalue: \"related\"\n\t\t\t\t\t};\n\t\t\t\t\tselectableTypesChoices.push(relatedChoice);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tswitch (columnFilteringPopoverDisplay) {\n\t\t\t\tcase 'allowBoth':\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnFiltering' }, { value: true });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { value: true });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'columnFilteringPopoverDisplay' }, { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'allowOnlyFiltering':\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnFiltering' }, { value: true });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { value: false });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'columnFilteringPopoverDisplay' }, { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'allowOnlyGrouping':\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnFiltering' }, { value: false });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { value: true });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'columnFilteringPopoverDisplay' }, { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'disallowColumnFilteringPopover':\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnFiltering' }, { value: false });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { value: false });\n\t\t\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'columnFilteringPopoverDisplay' }, { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (currentListType === 'withMenu') {\n\t\t\tmenuListExternalProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: true });\n\t\t\t});\n\t\t\tindividualListExternalProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: false, value: null });\n\t\t\t});\n\t\t\tindividualListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t});\n\t\t\trelatedListExternalProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: prop }, { isVisible: false, value: null });\n\t\t\t});\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickEdit' }, { isVisible: false });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickFormNavigation' }, { isVisible: !args.externalProperties.nestBy });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { isVisible: true });\n\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableInfiniteScroll' }, { isVisible: false, value: false });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableLiveList' }, { isVisible: false, value: false });\n\n\t\t\t// if the user manually changed the list type, the value should update to reflect the new type.\n\t\t\t// if they just refreshed and kept the same type, we should preserve their configs.\n\t\t\tif (!isBootstrap) {\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enableQuickFormNavigation' }, { value: !args.externalProperties.nestBy });\n\t\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'enforceViewRulesForQuickForm' }, { value: true });\n\t\t\t}\n\t\t\t// if we set these to \"null\", \"null\" will display in the field\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'selectedRecords' }, { isVisible: false, value: [] });\n\t\t\targs.api.updateProperty({ type: 'externalProp', name: 'exceptedRecords' }, { isVisible: false, value: [] });\n\t\t\t// withMenu is a hidden type\n\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\tconst withMenuChoice = {\n\t\t\t\tlabel: \"With menu\",\n\t\t\t\tvalue: \"withMenu\"\n\t\t\t};\n\t\t\tselectableTypesChoices.push(withMenuChoice);\n\t\t}\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'listType'\n\t\t\t}, {\n\t\t\t\ttypeMetadata: {\n\t\t\t\t\tchoices: selectableTypesChoices,\n\t\t\t\t},\n\t\t\t\tenabled: currentListType !== 'withMenu'\n\t\t\t}\n\t\t);\n\t}\n\t// hide view when columns set\n\tif ((isExternalTrigger && args.trigger?.name  === 'columns') || (isExternalTrigger && args.trigger?.name  === 'listType') || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'view'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: !args.externalProperties.columns\n\t\t\t}\n\t\t);\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'columnPreferenceKey'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: (args.properties.columns || args.externalProperties.listType === 'withMenu')\n\t\t\t}\n\t\t);\n\t}\n\n\t// \t--------------------------------------------------\n\t//   \t\tINFINITE SCROLL - Connected List\n\t//  --------------------------------------------------\n\tfunction setInfiniteScrollDependencies( policyArgs) {\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'groupBy' }, { isVisible: false });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'rowLimit' }, { isVisible: false });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'currentPage' }, { isVisible: false });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { isVisible: false });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'allRecordsSelected' }, { isVisible: false });\n\n\t\tpolicyArgs.api.updateProperty('selectAllEnabled', {isVisible: false });\n\t\tpolicyArgs.api.updateProperty('rowDragDropEnabled', {isVisible: false });\n\t\tpolicyArgs.api.updateProperty('expandAllGroups', {isVisible: false });\n\t\tpolicyArgs.api.updateProperty('toggleAllGroupsEnabled', {isVisible: false });\n\t}\n\n\tfunction resetInfiniteScrollDependencies ( policyArgs ) {\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'rowLimit' }, { isVisible: true });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'currentPage' }, { isVisible: true });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'groupBy' }, { isVisible: true });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'enableLiveList' }, { isVisible: true, value: false });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'enableColumnGrouping' }, { isVisible: true });\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'allRecordsSelected' }, { isVisible: true });\n\n\n\t\tpolicyArgs.api.updateProperty('selectAllEnabled', {isVisible: true});\n\t\tpolicyArgs.api.updateProperty('rowDragDropEnabled', {isVisible: true });\n\t\tpolicyArgs.api.updateProperty('expandAllGroups', {isVisible: true });\n\t\tpolicyArgs.api.updateProperty('toggleAllGroupsEnabled', {isVisible: true});\n\t}\n\n\tfunction enableInfiniteScroll ( policyArgs ) {\n\t\tpolicyArgs.api.updateProperty({ type: 'externalProp', name: 'enableInfiniteScroll' }, { isVisible: true, value: true });\n\t}\n\n\tif ( args.trigger?.type === 'externalProp' && args.trigger?.name == 'enableLiveList' || args.trigger === 'enableLiveList' ) {\n\t\tif ( args.externalProperties.enableLiveList == true && args.externalProperties.enableInfiniteScroll == false) {\n\t\t\tenableInfiniteScroll(args)\n\t\t\tsetInfiniteScrollDependencies(args)\n\t\t}\n\t} else if (args.trigger?.type === 'externalProp' && args.trigger?.name == 'enableInfiniteScroll' || args.trigger === 'enableInfiniteScroll') {\n\t\tif ( args.externalProperties.enableInfiniteScroll == true ) {\n\t\t\tsetInfiniteScrollDependencies(args)\n\t\t} else {\n\t\t\tresetInfiniteScrollDependencies(args)\n\t\t}\n\t}\n\n\tif ( isBootstrap ) {\n\t\tif ( args.externalProperties.enableInfiniteScroll == true ) {\n\t\t\tsetInfiniteScrollDependencies(args)\n\t\t}\n\t}\n\t// \t--------------------------------------------------\n\t//        INFINITE SCROLL END - Connected List\n\t//  --------------------------------------------------\n\n\t// hide columns and colPrefKey when view set\n\tif ((isExternalTrigger && args.trigger?.name  === 'view') || (isExternalTrigger && args.trigger?.name  === 'listType') || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'columns'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: !args.externalProperties.columns\n\t\t\t}\n\t\t);\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'columnPreferenceKey'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: (args.properties.columns || args.externalProperties.listType === 'withMenu')\n\t\t\t}\n\t\t);\n\t}\n\t// hide all selection props when selection is disabled\n\t// need to run this when the list type is changed to ensure that the selection props are properly set\n\t// hidden for simple (selectionEnabled is set to false elsewhere), and using the value of selectionEnabled otherwise\n\tif (\n\t\targs.trigger === 'selectionEnabled' ||\n\t\t(isExternalTrigger && args.trigger?.name === 'listType') ||\n\t\tisBootstrap\n\t) {\n\t\tvar selectionDependentProps = [\n\t\t\t'selectAllEnabled',\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'allRecordsSelected'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'selectedRecords'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'exceptedRecords'\n\t\t\t},\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'onlyEnableSelectionWhenRequiredByActions'\n\t\t\t}\n\t\t];\n\t\tselectionDependentProps.map(function f(propName) {\n\t\t\targs.api.updateProperty(propName, { enabled: args.properties.selectionEnabled });\n\t\t});\n\t}\n\t// enable reference links dependency\n\tif (args.trigger === 'clickableTextEnabled' || isBootstrap) {\n\t\t// if still bound to the preset (to be true), clickableTextEnabled will evaluate as null, so need to treat binding as true\n\t\tconst canEditRefLinksProp = args.properties.clickableTextEnabled === null || args.properties.clickableTextEnabled === true;\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'enableReferenceLinks'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: canEditRefLinksProp\n\t\t\t}\n\t\t);\n\t}\n\t// highlighted values dependency\n\tif ((isExternalTrigger && args.trigger?.name === 'fetchHighlightedValues') || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'highlightedValueConfigId'\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: args.externalProperties.fetchHighlightedValues\n\t\t\t}\n\t\t);\n\t}\n\tif (\n\t\t(isExternalTrigger && args.trigger?.name === 'enableQuickEdit') ||\n\t\tisBootstrap\n\t) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'enableQuickFormNavigation'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: !args.externalProperties.nestBy && args.externalProperties.enableQuickEdit\n\t\t\t}\n\t\t);\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'enforceViewRulesForQuickForm'\n\t\t\t},\n\t\t\t{\n\t\t\t\tisVisible: args.externalProperties.enableQuickEdit\n\t\t\t}\n\t\t);\n\t}\n\tif ((isExternalTrigger && args.trigger?.name === \"nestBy\") || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t\t{\n\t\t\t\t\ttype: 'externalProp',\n\t\t\t\t\tname: 'childrenRowLimit'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tisVisible: args.externalProperties.nestBy\n\t\t\t\t}\n\t\t);\n\t\targs.api.updateProperty(\n\t\t\t\t{\n\t\t\t\t\ttype: 'externalProp',\n\t\t\t\t\tname: 'enableBadgeCount'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tisVisible: args.externalProperties.nestBy\n\t\t\t\t}\n\t\t);\n\t\tif(args.externalProperties.nestBy) {\n\t\t\targs.api.updateProperty(\n\t\t\t\t{\n\t\t\t\t\ttype: 'externalProp',\n\t\t\t\t\tname: 'enableQuickFormNavigation'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tisVisible: false, \n\t\t\t\t\tvalue: false\n\t\t\t\t}\n\t\t\t);\n\t\t} else if(!isBootstrap) {\n\t\t\targs.api.updateProperty(\n\t\t\t\t{\n\t\t\t\t\ttype: 'externalProp',\n\t\t\t\t\tname: 'enableQuickFormNavigation'\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tisVisible: args.externalProperties.enableQuickEdit, \n\t\t\t\t\tvalue: true\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t\n\t}\n}\n","sys_id":"0b1323b6a361311077370668341e613e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_update_name":"sn_ui_builder_props_config_0b1323b6a361311077370668341e613e","sys_updated_by":"admin","sys_created_on":"2024-10-03 03:27:15","name":"Connected list","sys_name":"Connected list","target_table":"sys_ux_component_preset","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_created_by":"admin","sys_policy":""},{"image":"","config_layout":"[\r\n\t{\r\n\t\t\"type\": \"externalProp\",\r\n\t\t\"name\": \"listType\"\r\n\t},\r\n\t\"headerSize\",\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Title and subtitle\",\r\n\t\t\"icon\": \"text-type-outline\",\r\n\t\t\"id\": \"titleAndSubtitle\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"showTitle\",\r\n\t\t\t\"enableTitleWrap\",\r\n\t\t\t\"title\",\r\n\t\t\t\"showSubtitle\",\r\n\t\t\t\"subtitle\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableLiveList\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Count\",\r\n\t\t\"icon\": \"number-outline\",\r\n\t\t\"id\": \"count\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"showCount\",\r\n\t\t\t\"count\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"recordCountLimit\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"List actions\",\r\n\t\t\"icon\": \"wrench-outline\",\r\n\t\t\"id\": \"listActions\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"showSearchButton\",\r\n\t\t\t\"showConditionBuilderButton\",\r\n\t\t\t\"showConditionBuilderPanel\",\r\n\t\t\t\"showRefreshButton\",\r\n\t\t\t\"showEditColumnsButton\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableDotWalk\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Declarative actions\",\r\n\t\t\"icon\": \"lightning-outline\",\r\n\t\t\"id\": \"declarativeActions\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"enableDeclarativeActions\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"actionConfigId\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n]","icon":"","sys_mod_count":"9","active":"true","sys_updated_on":"2024-11-25 13:54:45","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_component_preset/7390b78659717406599eca6a55e68c44","value":"7390b78659717406599eca6a55e68c44"},"scripted_config_policy":"// This script sets logical behavior for the header config panel in UIB ONLY WHEN USED WITH THE LIST CONTROLLER PRESET.\nfunction recordListHeaderPolicy(args) {\n\t// args.trigger is null on first load of the config\n\t// every check should run on first load so that all the expected values are set based on previous config\n\tvar isBootstrap = args.trigger === null;\n\n\t// external props from the controller are objects, not strings the way component props are.\n\t// shape: { type: 'externalProp', name: 'propName'}\n\t// setting this as a var and checking it prevents js object value semantics issues and shortens if statements\n\tvar isExternalTrigger = (!isBootstrap && typeof args.trigger === 'object');\n\n\t// all list type prop updates\n\tif (\n\t\t(isExternalTrigger && args.trigger.name === 'listType') || \n\t\tisBootstrap\n\t) {\n\t\tconst currentListType = args.externalProperties.listType;\n\n\t\t// even though there are more supported list types, only some should be exposed in the UIB dropdown.\n\t\tconst selectableTypesChoices = [\n\t\t\t{\n\t\t\t\t\"label\": \"Default\",\n\t\t\t\t\"sublabel\": \"A list with a full feature set\",\n\t\t\t\t\"value\": \"default\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"sublabel\": \"A simplified list for small spaces within dashboards etc\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t}\n\t\t];\n\n\t\tif (\n\t\t\t// individual lists\n\t\t\tcurrentListType === 'default' ||\n\t\t\tcurrentListType === 'simple' ||\n\t\t\tcurrentListType === 'related'\n\t\t) {\n\t\t\tswitch (currentListType) {\n\t\t\t\tcase 'default':\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'simple':\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tcase 'related':\n\t\t\t\t\t// related is a hidden type\n\t\t\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\t\t\tconst relatedChoice = {\n\t\t\t\t\t\tlabel: \"Related\",\n\t\t\t\t\t\tvalue: \"related\"\n\t\t\t\t\t};\n\t\t\t\t\tselectableTypesChoices.push(relatedChoice);\n\t\t\t\t\tbreak;\n\t\t\t\t\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (currentListType === 'withMenu') {\n\t\t\t// withMenu is a hidden type\n\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\tconst withMenuChoice = {\n\t\t\t\tlabel: \"With menu\",\n\t\t\t\tvalue: \"withMenu\"\n\t\t\t};\n\t\t\tselectableTypesChoices.push(withMenuChoice);\n\t\t}\n\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'listType'\n\t\t\t}, {\n\t\t\t\ttypeMetadata: {\n\t\t\t\t\tchoices: selectableTypesChoices,\n\t\t\t\t},\n\t\t\t\tenabled: currentListType !== 'withMenu'\n\t\t\t}\n\t\t);\n\t}\n\n\tif (args.trigger === 'showTitle' || isBootstrap) {\n\t\targs.api.updateProperty('title', { enabled: args.properties.showTitle });\n\t}\n\n\tif (args.trigger === 'showSubtitle' || isBootstrap) {\n\t\targs.api.updateProperty('subtitle', { enabled: args.properties.showSubtitle });\n\t}\n\n\tif (args.trigger === 'showCount' || isBootstrap) {\n\t\targs.api.updateProperty('count', { enabled: args.properties.showTitle });\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'recordCountLimit'\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: args.properties.showCount\n\t\t\t}\n\t\t);\n\t}\n\n\tif (args.trigger === 'showEditColumnsButton' || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'enableDotWalk'\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: args.properties.showEditColumnsButton\n\t\t\t}\n\t\t);\n\t}\n\n\tif ((isExternalTrigger && args.trigger.name === 'enableDeclarativeActions') || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'actionConfigId'\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: args.externalProperties.enableDeclarativeActions\n\t\t\t}\n\t\t);\n\t}\n\n\tif (\n        (args.trigger === 'enableLiveList') || isBootstrap\n    ) {\n        args.api.updateSection('count', { isVisible: !args.externalProperties.enableLiveList });\n    }\n\t\n}\n","sys_id":"4c2423b6a361311077370668341e6133","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_update_name":"sn_ui_builder_props_config_4c2423b6a361311077370668341e6133","sys_updated_by":"admin","sys_created_on":"2023-10-02 03:31:44","name":"Record list header","sys_name":"Record list header","target_table":"sys_ux_component_preset","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_created_by":"admin","sys_policy":""},{"image":"","config_layout":"[\r\n\t\t\"listType\",\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Data\",\r\n\t\t\"icon\": \"database-outline\",\r\n\t\t\"id\": \"data\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"listMenuConfigurationId\",\r\n\t\t\t\"listId\",\r\n\t\t\t\"showListOpenedByLinkSection\",\n\t\t\t\"table\",\r\n\t\t\t\"parentTable\",\r\n\t\t\t\"parentRecordSysId\",\r\n\t\t\t\"relatedListName\",\r\n\t\t\t\"fixedFilter\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Default display\",\r\n\t\t\"icon\": \"sliders-outline\",\r\n\t\t\"id\": \"defaultDisplay\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"view\",\r\n\t\t\t\"columns\",\r\n\t\t\t\"columnLimit\",\r\n\t\t\t\"rowLimit\",\r\n\t\t\t\"filter\",\r\n\t\t\t\"currentPage\",\r\n\t\t\t\"listTitle\",\r\n\t\t\t\"groupBy\",\r\n\t\t\t\"nestBy\",\r\n\t\t\t\"childrenRowLimit\",\r\n\t\t\t\"enableBadgeCount\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"End user capabilities\",\r\n\t\t\"icon\": \"hand-gear-outline\",\r\n\t\t\"id\": \"endUserCapabilities\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"enableQuickEdit\",\r\n\t\t\t\"enableQuickFormNavigation\",\r\n\t\t\t\"enforceViewRulesForQuickForm\",\r\n\t\t\t\"enableColumnSorting\",\r\n\t\t\t\"enableColumnFiltering\",\r\n\t\t\t\"enableColumnGrouping\",\r\n\t\t\t\"enableCellFiltering\",\r\n\t\t\t\"enableDeclarativeActions\",\r\n\t\t\t\"actionConfigId\",\r\n\t\t\t\"recordCountLimit\",\r\n\t\t\t\"enableDotWalk\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Selection\",\r\n\t\t\"icon\": \"checkbox-checked-outline\",\r\n\t\t\"id\": \"selection\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"allRecordsSelected\",\r\n\t\t\t\"selectedRecords\",\r\n\t\t\t\"exceptedRecords\",\r\n\t\t\t\"onlyEnableSelectionWhenRequiredByActions\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Cell content treatment\",\r\n\t\t\"icon\": \"text-outline\",\r\n\t\t\"id\": \"cellContentTreatment\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t\"enableReferenceLinks\",\r\n\t\t\t\"fetchHighlightedValues\",\r\n\t\t\t\"highlightedValueConfigId\"\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Advanced\",\r\n\t\t\"icon\": \"code-outline\",\r\n\t\t\"id\": \"advanced\",\r\n\t\t\"initialOpenState\": false,\r\n\t\t\"children\": [\r\n\t\t\t{\n\t\t\t\t\"apiName\": \"list-transform\",\r\n\t\t\t\t\"id\": \"list-transform\",\r\n\t\t\t\t\"instanceName\": \"list-transform\",\r\n\t\t\t\t\"label\": \"Customizations to run on data fetch\",\r\n\t\t\t\t\"sectionType\": \"interface\",\r\n\t\t\t\t\"properties\": [\r\n\t\t\t\t\t\"transformScriptSysId\"\r\n\t\t\t\t]\r\n\t\t\t},\r\n\t\t\t\"transformScriptArgs\",\r\n\t\t\t\"columnPreferenceKey\"\r\n\t\t]\r\n\t}\r\n]","icon":"","sys_mod_count":"35","active":"true","sys_updated_on":"2024-11-27 05:30:08","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_controller/5865e308432021105571609dc7b8f23b","value":"5865e308432021105571609dc7b8f23b"},"scripted_config_policy":"// This script sets logical behavior for the controller config modal in UIB\nfunction listControllerPolicy(args) {\n\t// args.trigger is null on first load of the config\n\t// every check should run on first load so that all the expected values are set based on previous config\n\tvar isBootstrap = args.trigger === null;\n\t// all list type prop updates\n\tif (args.trigger === 'listType' || isBootstrap) {\n\t\tconst currentListType = args.properties.listType;\n\t\tconst columnFilteringPopoverDisplay = args.properties.columnFilteringPopoverDisplay;\n\n\t\t// even though there are more supported list types, only some should be exposed in the UIB dropdown.\n\t\tconst selectableTypesChoices = [\n\t\t\t{\n\t\t\t\t\"label\": \"Default\",\n\t\t\t\t\"sublabel\": \"A list with a full feature set\",\n\t\t\t\t\"value\": \"default\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"label\": \"Simple\",\n\t\t\t\t\"sublabel\": \"A simplified list for small spaces within dashboards etc\",\n\t\t\t\t\"value\": \"simple\"\n\t\t\t}\n\t\t];\n\n\t\tconst individualListProps = [\n\t\t\t'table',\n\t\t\t'listTitle',\n\t\t\t'fixedFilter',\n\t\t\t'filter',\n\t\t\t'groupBy',\n\t\t\t'view',\n\t\t\t'columns',\n\t\t\t'columnLimit',\n\t\t\t'nestBy',\n\t\t\t'childrenRowLimit',\n\t\t\t'enableBadgeCount',\n\t\t\t'currentPage',\n\t\t\t'enableColumnSorting',\n\t\t\t'enableColumnFiltering',\n\t\t\t'enableColumnGrouping',\n\t\t\t'enableCellFiltering',\n\t\t\t'enableDeclarativeActions',\n\t\t\t'actionConfigId',\n\t\t\t'allRecordsSelected',\n\t\t\t'onlyEnableSelectionWhenRequiredByActions',\n\t\t\t'enableReferenceLinks',\n\t\t\t'enableLiveList',\n\t\t\t'enableInfiniteScroll',\n\t\t\t'enableDotWalk'\n\t\t\t// transformScriptSysId should also be hidden, but can't be in this list because it's a custom interface\n\t\t];\n\t\tconst menuListProps = [\n\t\t\t'listMenuConfigurationId',\n\t\t\t'listId',\n\t\t\t'showListOpenedByLinkSection'\n\t\t];\n\t\tconst relatedListProps = [\n\t\t\t'parentTable',\n\t\t\t'parentRecordSysId',\n\t\t\t'relatedListName'\n\t\t];\n\n\t\tif (\n\t\t\tcurrentListType === 'default' ||\n\t\t\tcurrentListType === 'simple' ||\n\t\t\tcurrentListType === 'related'\n\t\t) {\n\t\t\t// common amongst these 3 list types\n\t\t\tindividualListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: true });\n\t\t\t});\n\t\t\tmenuListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t});\n\t\t\targs.api.updateProperty('selectedRecords', { isVisible: true });\n\t\t\targs.api.updateProperty('exceptedRecords', { isVisible: true });\n\t\t\targs.api.updateProperty('highlightedValueConfigId', { isVisible: true });\n\n\t\t\t// hide / show transform script arguments when variant is set\n\t\t\targs.api.updateProperty('transformScriptArgs', {\n\t\t\t\tisVisible: !!args.properties.transformScriptSysId\n\t\t\t});\n\n\t\t\t// specific to each list type\n\t\t\tswitch (currentListType) {\n\t\t\t\tcase 'default':\n\t\t\t\t\trelatedListProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty('enableQuickEdit', { isVisible: true });\n\t\t\t\t\targs.api.updateProperty('enableQuickFormNavigation', { isVisible: !args.properties.nestBy });\n\t\t\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { isVisible: true });\n\t\t\t\t\t\n\t\t\t\t\t// if the user manually changed the list type, the value should update to reflect the new type.\n\t\t\t\t\t// if they just refreshed and kept the same type, we should preserve their configs.\n\t\t\t\t\tif (!isBootstrap) {\n\t\t\t\t\t\targs.api.updateProperty('enableQuickEdit', { value: true });\n\t\t\t\t\t\targs.api.updateProperty('enableQuickFormNavigation', { value: !args.properties.nestBy });\n\t\t\t\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { value: true });\n\t\t\t\t\t}\n\t\t\t\t\targs.api.updateVisibility('list-transform', true);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'simple':\n\t\t\t\t\trelatedListProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty('enableInfiniteScroll', {  value: false });\n\t\t\t\t\targs.api.updateProperty( 'enableLiveList', {  value: false });\n\t\t\t\t\targs.api.updateProperty('enableQuickEdit', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty('enableQuickFormNavigation', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateVisibility('list-transform', true);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'related':\n\t\t\t\t\trelatedListProps.map(function f(prop) {\n\t\t\t\t\t\targs.api.updateProperty(prop, { isVisible: true });\n\t\t\t\t\t});\n\t\t\t\t\targs.api.updateProperty('enableInfiniteScroll', { value: false });\n\t\t\t\t\targs.api.updateProperty( 'enableLiveList', { value: false });\n\t\t\t\t\targs.api.updateProperty('enableQuickEdit', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty('enableQuickFormNavigation', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { isVisible: false, value: false });\n\t\t\t\t\targs.api.updateVisibility('list-transform', true);\n\t\t\t\t\t// related is a hidden type\n\t\t\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\t\t\tvar relatedChoice = {\n\t\t\t\t\t\tlabel: \"Related\",\n\t\t\t\t\t\tvalue: \"related\"\n\t\t\t\t\t};\n\t\t\t\t\tselectableTypesChoices.push(relatedChoice);\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tswitch (columnFilteringPopoverDisplay) {\n\t\t\t\tcase 'allowBoth':\n\t\t\t\t\t\targs.api.updateProperty('enableColumnFiltering', { value: true });\n\t\t\t\t\t\targs.api.updateProperty('enableColumnGrouping', { value: true });\n\t\t\t\t\t\targs.api.updateProperty('columnFilteringPopoverDisplay', { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'allowOnlyFiltering':\n\t\t\t\t\t\targs.api.updateProperty('enableColumnFiltering', { value: true });\n\t\t\t\t\t\targs.api.updateProperty('enableColumnGrouping', { value: false });\n\t\t\t\t\t\targs.api.updateProperty('columnFilteringPopoverDisplay', { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'allowOnlyGrouping':\n\t\t\t\t\t\targs.api.updateProperty('enableColumnFiltering', { value: false });\n\t\t\t\t\t\targs.api.updateProperty('enableColumnGrouping', { value: true });\n\t\t\t\t\t\targs.api.updateProperty('columnFilteringPopoverDisplay', { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tcase 'disallowColumnFilteringPopover':\n\t\t\t\t\t\targs.api.updateProperty('enableColumnFiltering', { value: false });\n\t\t\t\t\t\targs.api.updateProperty('enableColumnGrouping', { value: false });\n\t\t\t\t\t\targs.api.updateProperty('columnFilteringPopoverDisplay', { value: '' });\n\t\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else if (currentListType === 'withMenu') {\n\t\t\tmenuListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: true });\n\t\t\t});\n\t\t\tindividualListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t});\n\t\t\trelatedListProps.map(function f(prop) {\n\t\t\t\targs.api.updateProperty(prop, { isVisible: false, value: null });\n\t\t\t});\n\t\t\targs.api.updateProperty('enabledInfiniteScroll', { value: false });\n\t\t\targs.api.updateProperty( 'enableLiveList', { value: false });\n\t\t\targs.api.updateProperty('enableQuickEdit', { isVisible: false });\n\t\t\targs.api.updateProperty('enableQuickFormNavigation', { isVisible: !args.properties.nestBy });\n\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { isVisible: true });\n\t\t\t\n\t\t\t// if the user manually changed the list type, the value should update to reflect the new type.\n\t\t\t// if they just refreshed and kept the same type, we should preserve their configs.\n\t\t\tif (!isBootstrap) {\n\t\t\t\targs.api.updateProperty('enableQuickFormNavigation', { value: !args.properties.nestBy });\n\t\t\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { value: true });\n\t\t\t}\n\t\t\t// if we set these to \"null\", \"null\" will display in the field\n\t\t\targs.api.updateProperty('selectedRecords', { isVisible: false, value: [] });\n\t\t\targs.api.updateProperty('exceptedRecords', { isVisible: false, value: [] });\n\n\t\t\t// custom transforms are not allowed in menu lists because the same script would apply to every list in the menu\n\t\t\targs.api.updateVisibility('list-transform', false);\n\t\t\targs.api.updateProperty('transformScriptSysId', {value: null});\n\t\t\targs.api.updateProperty(\"transformScriptArgs\", { isVisible: false, value: null });\n\n\t\t\t// withMenu is a hidden type\n\t\t\t// if it is applied through a binding etc, we should unhide it in the choices so that a user can see which type is applied.\n\t\t\tconst withMenuChoice = {\n\t\t\t\tlabel: \"With menu\",\n\t\t\t\tvalue: \"withMenu\"\n\t\t\t};\n\t\t\tselectableTypesChoices.push(withMenuChoice);\n\t\t}\n\n\t\targs.api.updateProperty('listType', {\n\t\t\t\ttypeMetadata: {\n\t\t\t\t\tchoices: selectableTypesChoices,\n\t\t\t\t},\n\t\t\t\tenabled: currentListType !== 'withMenu'\n\t\t});\n\t}\n\n\t// \t--------------------------------------------------\n\t//   \t   INFINITE SCROLL- List Controller\n\t//  --------------------------------------------------\n\tfunction setInfiniteScrollDependencies ( policyArgs ) {\n\t\tpolicyArgs.api.updateProperty('rowLimit', { isVisible: false });\n\t\tpolicyArgs.api.updateProperty('currentPage', { isVisible: false});\n\t\tpolicyArgs.api.updateProperty('groupBy', { isVisible: false});\n\t\tpolicyArgs.api.updateProperty('enableColumnGrouping', { isVisible: false });\n\t\tpolicyArgs.api.updateProperty('allRecordsSelected', { isVisible: false });\n\t}\n\n\tfunction resetInfiniteScrollDependencies ( policyArgs ) {\n\t\tpolicyArgs.api.updateProperty('rowLimit', { isVisible: true });\n\t\tpolicyArgs.api.updateProperty('currentPage', { isVisible: true});\n\t\tpolicyArgs.api.updateProperty('groupBy', { isVisible: true});\n\t\tpolicyArgs.api.updateProperty('enableColumnGrouping', { isVisible: true });\n\t\tpolicyArgs.api.updateProperty('allRecordsSelected', { isVisible: true });\n\t}\n\n\tif ((args.trigger  === 'enableLiveList') || isBootstrap  ) {\n\t\t// liveList has to be used with infiniteScroll\n\t\tif ( args.properties.enableLiveList == true  && args.properties.enableInfiniteScroll == false) {\n\t\t\tsetInfiniteScrollDependencies(args);\n\t\t}\n\t}\n\t// hide and set default values when enableInfiniteScroll is set\n\tif (args.trigger === \"enableInfiniteScroll\" ) {\n\t\tif ( args.properties.enableInfiniteScroll ) {\n\t\t\tsetInfiniteScrollDependencies(args);\n\t\t} else if ( !isBootstrap ){\n\t\t\tresetInfiniteScrollDependencies(args);\n\t\t}\n\t}\n\n\tif (isBootstrap && args.properties.enableInfiniteScroll == true) {\n\t\tsetInfiniteScrollDependencies(args);\n\t}\n\t// \t--------------------------------------------------\n\t//        INFINITE SCROLL END - List Controller\n\t//  --------------------------------------------------\n\n\t// hide columns and colPrefKey when view set\n\tif (args.trigger === \"view\" || args.trigger === \"listType\" || isBootstrap) {\n\t\targs.api.updateProperty(\"columns\", { isVisible: !args.properties.view });\n\t\targs.api.updateProperty(\"columnPreferenceKey\", { isVisible: (args.properties.columns || args.properties.listType === 'withMenu') });\n\t}\n\n\t// hide view when columns set\n\tif (args.trigger === \"columns\" || args.trigger === \"listType\" || isBootstrap) {\n\t\targs.api.updateProperty(\"view\", { isVisible: !args.properties.columns });\n\t\targs.api.updateProperty(\"columnPreferenceKey\", { isVisible: (args.properties.columns || args.properties.listType === 'withMenu') });\n\t}\n\n\t// declarative actions dependency\n\tif (args.trigger === \"enableDeclarativeActions\" || isBootstrap) {\n\t\targs.api.updateProperty(\"actionConfigId\", { enabled: args.properties.enableDeclarativeActions });\n\t}\n\n\t// highlighted values dependency\n\tif (args.trigger === \"fetchHighlightedValues\" || isBootstrap) {\n\t\targs.api.updateProperty(\"highlightedValueConfigId\", { enabled: args.properties.fetchHighlightedValues });\n\t}\n\n\t// hide / show transform script arguments when script is set\n\tif (args.trigger === \"transformScriptSysId\" || isBootstrap) {\n\t\targs.api.updateProperty('transformScriptArgs', {\n\t\t\tisVisible: !!args.properties.transformScriptSysId\n\t\t});\n\t}\n\n\tif (args.trigger === \"enableQuickEdit\" || isBootstrap) {\n\t\targs.api.updateProperty('enableQuickFormNavigation', { isVisible: !args.properties.nestBy && args.properties.enableQuickEdit });\n\t\targs.api.updateProperty('enforceViewRulesForQuickForm', { isVisible: args.properties.enableQuickEdit });\n\t}\n\n\tif (args.trigger === \"nestBy\" || isBootstrap) {\n\t\targs.api.updateProperty('childrenRowLimit', {\n\t\t\tisVisible: args.properties.nestBy\n\t\t});\n\t\targs.api.updateProperty('enableBadgeCount', {\n\t\t\tisVisible: args.properties.nestBy\n\t\t});\n\n\t\tif(args.properties.nestBy) {\n\t\t\targs.api.updateProperty('enableQuickFormNavigation', {\n\t\t\t\tisVisible: false,\n\t\t\t\tvalue: false\n\t\t\t});\n\t\t} else if(!isBootstrap) {\n\t\t\targs.api.updateProperty('enableQuickFormNavigation', {\n\t\t\t\tisVisible: args.properties.enableQuickEdit,\n\t\t\t\tvalue: true\n\t\t\t});\n\t\t}\n\t\t\n\t}\n}\n","sys_id":"a754633aa361311077370668341e61b1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_update_name":"sn_ui_builder_props_config_a754633aa361311077370668341e61b1","sys_updated_by":"admin","sys_created_on":"2024-10-03 03:32:27","name":"List controller","sys_name":"List controller","target_table":"sys_ux_controller","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_created_by":"admin","sys_policy":""},{"image":"","config_layout":"[\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Data\",\r\n\t\t\"icon\": \"database-outline\",\r\n\t\t\"id\": \"data\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"listMenuConfigurationId\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t{\r\n\t\t\"sectionType\": \"section\",\r\n\t\t\"title\": \"Tabs and content\",\r\n\t\t\"icon\": \"tabset-outline\",\r\n\t\t\"id\": \"tabsAndContent\",\r\n\t\t\"initialOpenState\": true,\r\n\t\t\"children\": [\r\n            \"tabItems\",\r\n            \"selectedTabId\",\r\n            \"menuItems\",\r\n\t\t\t{\r\n\t\t\t\t\"type\": \"externalProp\",\r\n\t\t\t\t\"name\": \"listId\"\r\n\t\t\t},\r\n            \"expandedItems\",\r\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"type\": \"externalProp\",\n\t\t\t\t\t\t\t\"name\": \"showListOpenedByLinkSection\"\n\t\t\t\t\t\t},\n            \"emptyStateConfig\"\r\n\t\t]\r\n\t}\r\n]","icon":"","sys_mod_count":"2","active":"true","sys_updated_on":"2023-10-01 14:34:45","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_component_preset/259c0fea9323ce154fa0d7f25995808e","value":"259c0fea9323ce154fa0d7f25995808e"},"scripted_config_policy":"// This script sets logical behavior for the list menu config panel in UIB ONLY WHEN IT IS USED WITH THE LIST CONTROLLER PRESET\nfunction listMenuPolicy(args) {\n\t// args.trigger is null on first load of the config\n\t// every check should run on first load so that all the expected values are set based on previous config\n\tvar isBootstrap = args.trigger === null;\n\n\t// external props from the controller are objects, not strings the way component props are.\n\t// shape: { type: 'externalProp', name: 'propName'}\n\t// setting this as a var and checking it prevents js object value semantics issues and shortens if statements\n\tvar isExternalTrigger = typeof args.trigger === \"object\";\n\n\tif (args.trigger === \"tabItems\" || isBootstrap) {\n\t\targs.api.updateProperty(\n\t\t\t'selectedTabId',\n\t\t\t{\n\t\t\t\tenabled: args.properties.tabItems != []\n\t\t\t}\n\t\t);\n\t}\n\n\tif (args.trigger === \"menuItems\" || isBootstrap) {\n\t\tvar isMenuItemsNonEmpty = args.properties.menuItems != [];\n\t\targs.api.updateProperty(\n\t\t\t{\n\t\t\t\ttype: 'externalProp',\n\t\t\t\tname: 'listId'\n\t\t\t},\n\t\t\t{\n\t\t\t\tenabled: isMenuItemsNonEmpty\n\t\t\t}\n\t\t);\n\t\targs.api.updateProperty(\n\t\t\t'expandedItems',\n\t\t\t{\n\t\t\t\tenabled: isMenuItemsNonEmpty\n\t\t\t}\n\t\t);\n\t}\n}\n","sys_id":"ac126f76a361311077370668341e611d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_update_name":"sn_ui_builder_props_config_ac126f76a361311077370668341e611d","sys_updated_by":"admin","sys_created_on":"2023-10-02 03:26:12","name":"List menu","sys_name":"List menu","target_table":"sys_ux_component_preset","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_created_by":"admin","sys_policy":""},{"image":"","config_layout":"[\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Data\",\n\t\t\"icon\": \"database-outline\",\n\t\t\"id\": \"default\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"inputTable\",\n\t\t\t\"inputSysId\",\n\t\t\t\"inputQuery\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Default Display\",\n\t\t\"icon\": \"sliders-outline\",\n\t\t\"id\": \"defaultDisplay\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"view\",\n\t\t\t\"forcedViewName\",\n\t\t\t\"selectedTabIndex\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Advanced\",\n\t\t\"icon\": \"code-outline\",\n\t\t\"id\": \"advanced\",\n\t\t\"initialOpenState\": false,\n\t\t\"children\": [\n\t\t\t\"detailsContext\",\n\t\t\t\"inputExtraParams\",\n\t\t\t\"userPrefs\",\n\t\t\t\"inputActionLayoutId\",\n\t\t\t\"shouldDisplayFormErrorsAsPageAlerts\",\n\t\t\t\"shouldSuppressGlobalEvents\",\n\t\t\t\"isMappedToAppShell\",\n\t\t\t\"overrideAppContextConfigIds\",\n\t\t\t\"delayRecommendationFetching\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Override Configuration Ids\",\n\t\t\"icon\": \"hand-gear-outline\",\n\t\t\"id\": \"overrideConfigurationIds\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"actionConfigId\",\n\t\t\t\"headerConfigId\",\n\t\t\t\"highlightedValueConfigId\",\n\t\t\t\"ribbonConfigId\",\n\t\t\t\"viewRuleConfigId\"\n\t\t]\n\t}\n]","icon":"","sys_mod_count":"5","active":"true","sys_updated_on":"2024-09-26 01:23:33","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_controller/029f04e053610110ac9bddeeff7b1294","value":"029f04e053610110ac9bddeeff7b1294"},"scripted_config_policy":"// This script sets logical behavior for the Form controller config modal in UIB\nfunction formControllerPolicy(args) {\n\t// args.trigger is null on first load of the config\n\t// every check should run on first load so that all the expected values are set based on previous config\n\tvar isBootstrap = args.trigger === null;\n\n    const overrideProps = [\n\t\t\t'actionConfigId',\n\t\t\t'headerConfigId',\n            'highlightedValueConfigId',\n\t\t\t'ribbonConfigId',\n            'viewRuleConfigId'\n\t\t];\n\t// set override section visibility based on if they checked override property\n\tif (args.trigger === 'overrideAppContextConfigIds' || isBootstrap) {\n\t\tconst currentOverride = args.properties.overrideAppContextConfigIds;\n        args.api.updateSectionVisibility('overrideConfigurationIds', currentOverride === true);\n    }\n}\n","sys_id":"b994b33ca361d11d7727466e3e1b62b1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6d940d54d63c3f847df337e8f4e0d712","value":"6d940d54d63c3f847df337e8f4e0d712"},"sys_update_name":"sn_ui_builder_props_config_b994b33ca361d11d7727466e3e1b62b1","sys_updated_by":"admin","sys_created_on":"2024-05-01 04:32:27","name":"Form controller","sys_name":"Form controller","target_table":"sys_ux_controller","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/6d940d54d63c3f847df337e8f4e0d712","value":"6d940d54d63c3f847df337e8f4e0d712"},"sys_created_by":"admin","sys_policy":""},{"image":"","config_layout":"[\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Related properties from Form Controller\",\n\t\t\"icon\": \"database-outline\",\n\t\t\"id\": \"data\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"table\",\n\t\t\t\"sysId\",\n\t\t\t{\n\t\t\t\t\"sectionType\": \"textLink\",\n\t\t\t\t\"id\": \"formController\",\n\t\t\t\t\"target\": \"controller\",\n\t\t\t\t\"text\": \"View all properties\",\n\t\t\t\t\"url\": null\n\t\t\t}\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Default display\",\n\t\t\"icon\": \"sliders-outline\",\n\t\t\"id\": \"defaultDisplay\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"sections\",\n\t\t\t\"fields\",\n\t\t\t\"relatedLists\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Context menu options\",\n\t\t\"icon\": \"menu-outline\",\n\t\t\"id\": \"contextMenuOptions\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"isContextMenuHidden\",\n\t\t\t\"isSectionMenuHidden\",\n\t\t\t\"isFormOptionsHidden\",\n\t\t\t\"isViewSectionHidden\",\n\t\t\t\"isRemovePaddingLeft\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Form section options\",\n\t\t\"icon\": \"grid-three-outline\",\n\t\t\"id\": \"formSectionOptions\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"isSectionTitleHidden\",\n\t\t\t\"isFirstSectionTitleHidden\",\n\t\t\t\"disableCollapse\",\n\t\t\t\"sectionHeadingLevel\"\n\t\t]\n\t},\n\t{\n\t\t\"sectionType\": \"section\",\n\t\t\"title\": \"Accessibility\",\n\t\t\"icon\": \"accessibility-outline\",\n\t\t\"id\": \"accessibility\",\n\t\t\"initialOpenState\": true,\n\t\t\"children\": [\n\t\t\t\"landmark\"\n\t\t]\n\t}\n]","icon":"","sys_mod_count":"20","active":"true","sys_updated_on":"2024-09-13 22:58:48","sys_tags":"","sys_class_name":"sn_ui_builder_props_config","target":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_ux_component_preset/187b98f917f400e17ab765dee8b4fb04","value":"187b98f917f400e17ab765dee8b4fb04"},"scripted_config_policy":"","sys_id":"e3cc0eaeffe41210f581ffffffffff5a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6d940d54d63c3f847df337e8f4e0d712","value":"6d940d54d63c3f847df337e8f4e0d712"},"sys_update_name":"sn_ui_builder_props_config_e3cc0eaeffe41210f581ffffffffff5a","sys_updated_by":"admin","sys_created_on":"2024-09-13 01:56:27","name":"Record form","sys_name":"Record form","target_table":"sys_ux_component_preset","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/6d940d54d63c3f847df337e8f4e0d712","value":"6d940d54d63c3f847df337e8f4e0d712"},"sys_created_by":"admin","sys_policy":""}]}