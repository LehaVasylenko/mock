{"result":[{"scoped_name":"MIDServerCheck","short_description":"Reports any missing roles.","sys_mod_count":"8","active":"true","sys_updated_on":"2017-02-06 01:00:00","sys_tags":"","script":"/*\n * Given a comma-separated list of roles in 'roles', returns a comma-separated list (hopefully empty) of those that are necessary and missing, in the //result/missing tag.\n * Also returns the state of strict SOAP security in the //result/strict tag, and basic SOAP authentication in the //result/basicauth tag.\n */\nvar isStrict = GlideProperties.getBoolean('glide.soap.strict_security');\nvar isBasicAuth = GlideProperties.getBoolean('glide.basicauth.required.soap');\nvar roles = request.roles.split(',');\nvar missing = [];\nif (isBasicAuth && isStrict) {\n    for (var i = 0; i < roles.length; i++) {\n        if (!gs.getUser().hasRole(roles[i]))\n            missing.push(roles[i]);\n    }\n}\nvar resp = {'result':{}};\nresp.result.missing = missing.join(',');\nresp.result.strict = (isStrict ? 'true' : 'false');\nresp.result.basicauth = (isBasicAuth ? 'true' : 'false');\nresponse.response = new XMLHelper().toXMLDoc(resp);\n\n// User Authorization successful?\nif (missing.length != 0) {\t\n\t// Generate the Event\n\t//   instance = null\n\t//   parm1    = userID\n\t//   parm2    = comma separated list of missing roles\n\t//\n\t\n\t// Trigger Event\n\tgs.eventQueue('login.authorization.failed', null, gs.getUserName(), resp.result.missing);\t\n}\n","sys_class_name":"sys_web_service","sys_id":"08832fa083201000dada83ec37d9295d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_08832fa083201000dada83ec37d9295d","sys_updated_by":"ardis.maison","wsdl":"https://dev315171.service-now.com/MIDServerCheck.do?WSDL","sys_created_on":"2011-08-14 22:35:56","function_name":"execute","name":"MIDServerCheck","sys_name":"MIDServerCheck","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"tom.dilatush","sys_policy":""},{"scoped_name":"InstanceInfo","short_description":"Public service that provides basic information about the instance ","sys_mod_count":"11","active":"true","sys_updated_on":"2021-04-08 11:42:00","sys_tags":"","script":"var requestType = request.purpose;\nvar resp = {'result':{}};\nswitch (requestType) {\n\tcase \"GetLocalInfo\":\n\t\tgetLocalInfo();\n\t\tbreak;\n\tdefault:\n\t\tgetBasicInfo();\n}\nresponse.response = new XMLHelper().toXMLDoc(resp);\n\n/*\n * Returns customizable local settings.\n * Because such values can be changed anytime, the client\n * should call it right before usage in order to get up-to-date info\n */\nfunction getLocalInfo() {\n\tif (gs.hasRole('mid_server')) {\n\t\tresp.result.time_zone_name = '' + gs.getSession().getTimeZoneName();\n\t\tresp.result.language = '' + gs.getSession().getLanguage();\n\t\tresp.result.sys_date_format = gs.getProperty('glide.sys.date_format', '');\n\t\tresp.result.sys_time_format = gs.getProperty('glide.sys.time_format', '');\n\t}\n}\n\n/*\n * Returns basic instance information.\n * DO NOT change this schema other than by adding elements, as it is used by MID servers\n * and any change could cause MID server upgrade failures.\n */\nfunction getBasicInfo() {\n\tif (!gs.hasRole('mid_server')) {\n\t\tresp.result.mid_buildstamp = 'access restricted';\n\t\tresp.result.mid_version = 'access restricted';\n\t\tresp.result.install_name  = 'access restricted';\n\t\tresp.result.instance_name = 'access restricted';\n\t\tresp.result.instance_id   = 'access restricted';\n\t\tresp.result.build_date    = 'access restricted';\n\t\tresp.result.build_tag     = 'access restricted';\n\t\tresp.result.system_id     = 'access restricted';\n\t\tresp.result.node_id       = 'access restricted';\n\t\tresp.result.instance_ip   = 'access restricted';\n\t\treturn;\n\t}\n\n\tvar mv = gs.getProperty('mid.buildstamp');\n\tvar mvo = gs.getProperty('mid.version.override');\n\tif (mv == null)\n\t\tmv = '';\n\tif (mvo)\n\t\tmv = mvo;\n\n\tvar legacyBuildstamp = null;\n\ttry {\n\t\tlegacyBuildstamp = MIDPackage.createLegacyBuildstamp(mv);\n\t} catch (e) {\n\t\tlegacyBuildstamp = '';\n\t}\n\n\tresp.result.mid_buildstamp = ensure(mv);\n\tresp.result.mid_version = ensure(legacyBuildstamp); // deprecated at berlin release. use mid_buildstamp.\n\tresp.result.install_name  = gs.getProperty( 'glide.installation.name', ''             );\n\tresp.result.instance_name = gs.getProperty( 'instance_name',           'unregistered' );\n\tresp.result.instance_id   = gs.getProperty( 'instance_id',             'unregistered' );\n\tresp.result.build_date    = gs.getProperty( 'glide.builddate',         ''             );\n\tresp.result.build_tag     = gs.getProperty( 'glide.buildtag',          ''             );\n\tresp.result.release_candidate = gs.getProperty( 'glide.release_candidate', 'false'    );\n\tresp.result.system_id     = ensure( gs.getSystemID()   );\n\tresp.result.node_id       = ensure( gs.getNodeID()     );\n\tresp.result.instance_ip   = ensure( gs.getInstanceIP() );\n}\n\nfunction ensure(datum) {\n\treturn (datum == null) ? '' : datum;\n}\n","sys_class_name":"sys_web_service","sys_id":"0cbfe98d83301000dada83ec37d929c8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_0cbfe98d83301000dada83ec37d929c8","sys_updated_by":"cong.thieu","wsdl":"https://dev315171.service-now.com/InstanceInfo.do?WSDL","sys_created_on":"2011-08-28 13:39:51","function_name":"execute","name":"InstanceInfo","sys_name":"InstanceInfo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"tom.dilatush","sys_policy":""},{"scoped_name":"MIDFileSyncSnapshot","short_description":"Grabs a snapshot of a specified set of files to be synchronized to the MID server","sys_mod_count":"60","active":"true","sys_updated_on":"2023-11-20 03:01:53","sys_tags":"","script":"var resp = {'result':{'@code':'OK'}};\nvar gr;\n\nif (canSnap()) {\n    // first we build a map (by parent) of arrays of object representing an entry in our table...\n    gr.addActiveQuery();\n    gr.query();\n    var byParent = {};\n    while (gr.next()) {\n        var name = ('' + gr.name).replace(/&/g, \"&amp;\").replace(/>/g, \"&gt;\").replace(/</g, \"&lt;\").replace(/\"/g, \"&quot;\"); \n        var parent = '' + gr.parent;\n        var id = '' + gr.sys_id;\n\t\t\n\t\t// construct and append our record entry...\n\t\tvar rec = {};\n\t\trec.name = name;\n\t\trec.parent = parent;\n\t\trec.id = id;\n\t\trec.checksum = '';\n\t\trec.use_attachment = false;\n\n\t\tif (request.attachments != 'false') {\n\t\t\t// find the most recent attachment...\n\t\t\tvar agr = new GlideSysAttachment().getAttachments(gr.getTableName(), gr.getUniqueValue());\n\t\t\tvar attName;\n\t\t\tvar attID;\n\t\t\tvar attTimestamp;\n\t\t\twhile (agr.next()) {\n\t\t\t\trec.file_name = '' + agr.file_name;\n\t\t\t\trec.file_id = '' + agr.sys_id;\n\t\t\t\trec.file_time = '' + agr.sys_created_on.getGlideObject().getNumericValue();\n\t\t\t\trec.use_attachment = true;\n\t\t\t}\n\t\t} else {\n\t\t\t// looking for field based content\n\t\t\tif (!gr.directory) {\n\t\t\t\trec.file_name = name;\n\t\t\t\trec.file_id = id;\n\t\t\t\trec.file_time = gr.sys_updated_on.getGlideObject().getNumericValue();\n\n\t\t\t\t// --- Is the script using an attachment?\n\t\t\t\t// Attachment takes precedence over the script field\n\t\t\t\tif (gr.use_attachment) {\n\t\t\t\t\t// Make sure we have an actual attachment\n\t\t\t\t\tif (gr.script_attachment != null && gr.script_attachment != \"\") {\n\t\t\t\t\t\trec.use_attachment = true;\n\t\t\t\t\t\trec.file_name = '' + gr.script_attachment.file_name;\n\t\t\t\t\t\trec.file_id = '' + gr.script_attachment.sys_id;\n\n\t\t\t\t\t\t//Use the timestamp of attachment\n\t\t\t\t\t\tvar agr = new GlideRecord('sys_attachment');\n\t\t\t\t\t\tif (gr.script_attachment.sys_id && agr.get('sys_id', gr.script_attachment.sys_id))\n\t\t\t\t\t\t\trec.file_time = '' + agr.sys_created_on.getGlideObject().getNumericValue();\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\trec.use_attachment = false;\n\t\t\t\t\t\tgs.warn(\"No attachment found for \" + name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!byParent[parent])\n\t\t\tbyParent[parent] = [];\n\n\t\tif (shouldDownloadFile('' + gr.getTableName(), '' + rec.file_name))\n\t\t\tbyParent[parent].push(rec);\n    }\n\n    // now build our hierarchy from the root down, recursively...\n    var root = {'@name':''};\n    addDir(root, byParent[''], byParent);\n    resp.result.dir = root;\n}\n\nresponse.response = new XMLHelper().toXMLDoc(resp);\n\nfunction addDir(currentDest, currentSource, byParent) {\n    // iterate through the objects in the current subdirectory...\n    for (var i = 0; i < currentSource.length; i++) {\n        var fsObj = currentSource[i];\n\n        // do we have a subdirectory here?\n        if (byParent[fsObj.id]) {\n            var src = byParent[fsObj.id];\n            if (!currentDest.dir)\n                currentDest.dir = [];\n            var dst = {};\n            dst['@name'] = fsObj.name;\n            currentDest.dir.push(dst);\n            addDir(dst, src, byParent);\n        }\n\n        // do we have a file here?\n        else if (fsObj.file_id) {\n            if (!currentDest.file)\n                currentDest.file = [];\n            var file = {};\n            file['@name'] = fsObj.file_name;\n            file['@id'] = fsObj.file_id;\n            file['@time'] = fsObj.file_time;\n\t\t\tfile['@useAttachment'] = fsObj.use_attachment;\n\t\t\tfile['@checksum'] = fsObj.checksum;\n\t\t\tcurrentDest.file.push(file);\n        }\n    }\n}\n\nfunction canSnap() {\n    if (!gs.hasRole('mid_server')) {\n        resp.result['@code'] = 'Error: user does not have mid_server role';\n        return false;\n    }\n    var target = request.type;\n\tvar base = '' + GlideDBObjectManager.get().getBase(target);\n    if (base != 'ecc_agent_sync_file') {\n        resp.result['@code'] = 'Error: invalid synchronization target table: ' + target;\n        return false;\n    }\n    gr = new GlideRecord(target);\n    if (!gr.canRead()) {\n        resp.result['@code'] = 'Error: user not authorized to read synchronization target table: ' + target;\n        return false;\n    }\n    return true;\n}\n\nfunction shouldDownloadFile(tableName, fileName) {\n\t// do not download a jar with invalid filename characters ('/', '\\', or null)\n\tif (tableName == 'ecc_agent_jar')\n\t\treturn !/\\\\|\\/|\\0/.test(fileName);\n\n\treturn true;\n}\n","sys_class_name":"sys_web_service","sys_id":"2956924283101000dada83ec37d929a9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_2956924283101000dada83ec37d929a9","sys_updated_by":"vrijendrakumar.singh","wsdl":"https://dev315171.service-now.com/MIDFileSyncSnapshot.do?WSDL","sys_created_on":"2011-08-06 22:33:01","function_name":"execute","name":"MIDFileSyncSnapshot","sys_name":"MIDFileSyncSnapshot","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"tom.dilatush","sys_policy":""},{"scoped_name":"SOAPAccessChecker","short_description":"Checks access rights to a particular table via SOAP.","sys_mod_count":"1","active":"true","sys_updated_on":"2011-08-25 10:16:54","sys_tags":"","script":"/*\r\n * Supports one operation (check ACLs) with a single parameter (\"table\").  \r\n * \r\n * Returns a single \"table\" tag with attributes \"name\", \"isValid\", \"canRead\", \"canWrite\", \"canCreate\", and \"canDelete\".\r\n * If the table isValid is true, and any of canRead, canWrite, or canCreate are true, then there are \"field\" tags \r\n * contained within the table tag, each with attributes \r\n */\r\nvar resp = process(request);\r\nresponse.response = new XMLHelper().toXMLDoc(resp);\r\n\r\nfunction process(request) {\r\n    var table = request.table;\r\n    var isStrict = GlideProperties.getBoolean('glide.soap.strict_security');\r\n    var soapSecurity = new GlideSOAPSecurity();\r\n    soapSecurity.setStrictSecurity(isStrict);\r\n\r\n    // set up the default response...\r\n    var resp = {result:{table:{}}};\r\n    setAttr(resp.result.table, 'isValid', false);\r\n\r\n    // do we have a valid table?\r\n    var gr = new GlideRecord(table);\r\n    if (!gr.isValid())\r\n        return resp;\r\n\r\n    // set our table-level responses...\r\n    setAttr( resp.result.table, 'isValid',   true                       );\r\n    setAttr( resp.result.table, 'name',      table                      );\r\n    setAttr( resp.result.table, 'canRead',   soapSecurity.canRead(gr)   );\r\n    setAttr( resp.result.table, 'canWrite',  soapSecurity.canWrite(gr)  );\r\n    setAttr( resp.result.table, 'canCreate', soapSecurity.canCreate(gr) );\r\n    setAttr( resp.result.table, 'canDelete', soapSecurity.canDelete(gr) );\r\n    \r\n    // are we allowed to see this table's fields?\r\n    var canSeeFields = soapSecurity.canRead(gr) || soapSecurity.canWrite(gr) || soapSecurity.canCreate(gr);\r\n    var fields = [];\r\n    var elems = gr.getElements();\r\n    for (var i = 0; i < elems.size(); i++) {\r\n        var elem = elems.get(i);\r\n        var name = '' + elem.getName();\r\n        var field = {};\r\n        setAttr( field, 'name',      name                             );\r\n        setAttr( field, 'canRead',   soapSecurity.canRead(gr, name)   );\r\n        setAttr( field, 'canWrite',  soapSecurity.canWrite(gr, name)  );\r\n        setAttr( field, 'canCreate', soapSecurity.canCreate(gr, name) );\r\n        fields.push(field);\r\n    }\r\n    resp.result.table.field = fields;\r\n    \r\n    return resp;\r\n}\r\n\r\nfunction setAttr(parent, name, value) {\r\n    parent['@' + name] = '' + value;\r\n}\r\n","sys_class_name":"sys_web_service","sys_id":"3d29856783201000dada83ec37d92911","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_3d29856783201000dada83ec37d92911","sys_updated_by":"tom.dilatush","wsdl":"https://dev315171.service-now.com/SOAPAccessChecker.do?WSDL","sys_created_on":"2011-08-23 19:01:57","function_name":"execute","name":"SOAPAccessChecker","sys_name":"SOAPAccessChecker","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"tom.dilatush","sys_policy":""},{"scoped_name":"OrderBlackBerry","short_description":"Order a BlackBerry","sys_mod_count":"3","active":"true","sys_updated_on":"2008-12-19 05:42:03","sys_tags":"","script":"var cart = new Cart();\r\nvar item = cart.addItem('e2132865c0a8016500108d9cee411699');\r\ncart.setVariable(item, 'original', request.phone_number);\r\n\r\n// set the requested for\r\nvar gr = new GlideRecord(\"sys_user\");\r\ngr.addQuery(\"user_name\", request.requested_for);\r\ngr.query();\r\nif (gr.next()) {\r\n  var cartGR = cart.getCart();\r\n  cartGR.requested_for = gr.sys_id;\r\n  cartGR.update();\r\n}\r\n\r\nvar rc = cart.placeOrder();\r\nresponse.request_number = rc.number;","sys_class_name":"sys_web_service","sys_id":"4cf937380a0a0b2400a551b53dde0e82","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f83a3f304312210559073c06a02f788","value":"7f83a3f304312210559073c06a02f788"},"sys_update_name":"sys_web_service_4cf937380a0a0b2400a551b53dde0e82","sys_updated_by":"glide.maint","wsdl":"https://dev315171.service-now.com/OrderBlackBerry.do?WSDL","sys_created_on":"2008-12-19 02:01:51","function_name":"order","name":"OrderBlackBerry","sys_name":"OrderBlackBerry","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"glide.maint","sys_policy":""},{"scoped_name":"MIDFieldForFileProvider","short_description":"Fetches the value of a given field for the MID server to write as a file, alone with the field record's created and updated times","sys_mod_count":"15","active":"true","sys_updated_on":"2025-02-18 21:46:56","sys_tags":"","script":"var resp = {'result':{'@code':'OK'}};\n\nif (!gs.hasRole('mid_server')) {\n   resp.result['@code'] = gs.getMessage('Error: user does not have the mid_server role');\n} else {\n\tvar gr = new GlideRecordSecure(request.table);\n\tif (!gr.isValid())\n\t\tresp.result['@code'] = gs.getMessage('Error: the specified table is invalid');\n\telse if (request.sys_id && gr.get('sys_id', request.sys_id)) {\n\t\tif (gr.isValidField(request.field)) {\n            resp.result.field_value = {'#cdata' : new GlideStringUtil().escapeHTML(gr[request.field])}; \n\t\t\tresp.result.updated_time = '' + gr.sys_updated_on.getGlideObject().getNumericValue();\n\t\t\tresp.result.created_time = '' + gr.sys_created_on.getGlideObject().getNumericValue();\n\t\t} else\n\t\t\tresp.result['@code'] = gs.getMessage('Error: the requested field was not valid on the given table');\n\t} else\n\t\tresp.result['@code'] = gs.getMessage('Error: the requested record was not found');\n}\n\nresponse.response = new XMLHelper().toXMLDoc(resp, true);","sys_class_name":"sys_web_service","sys_id":"69b623b0376001006b882d465abe5de8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_69b623b0376001006b882d465abe5de8","sys_updated_by":"now.midserve","wsdl":"https://dev315171.service-now.com/MIDFieldForFileProvider.do?WSDL","sys_created_on":"2013-04-03 06:00:49","function_name":"execute","name":"MIDFieldForFileProvider","sys_name":"MIDFieldForFileProvider","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"jimmy.yuan","sys_policy":""},{"scoped_name":"MIDServerFileProvider","short_description":"Provides file contents for files that are synchronized to MID servers.","sys_mod_count":"20","active":"true","sys_updated_on":"2020-09-17 21:07:44","sys_tags":"","script":"// supports two operations: 'open' and 'read'\n// open operation requires table and attachment_id; returns information about the attachment\n// read operation requires table, attachment_id, sequence, and max_chunks; returns up to max_chunks blocks of attachment document\nvar op  = request.operation;\nvar tbl = request.table;\nvar aid = request.attachment_id;\nvar seq = request.sequence;\nvar max = request.max_chunks;\n\nvar resp = {'result':{'@code':'OK'}};\n\nif (!gs.hasRole('mid_server')) {\n   resp.result['@code'] = 'Error: user does not have the mid_server role';\n} \nelse {\n   switch(op) {\n   case 'open':\n       handleOpen(tbl, aid, resp);\n       break;\n       \n   case 'read':\n       handleRead(tbl, aid, seq, max, resp);\n       break;\n\n   default:\n       resp.result['@code'] = 'Invalid operation: ' + op;\n       break;\n   }\n}\n\nresponse.response = new XMLHelper().toXMLDoc(resp);\n\nfunction handleOpen(tbl, aid, resp) {\n    if (!isValidTable(tbl, resp))\n        return;\n    \n    var gr = getAttachment(tbl, aid, resp);\n    if (!gr)\n        return;\n    \n    resp.result.compressed      = '' + gr.compressed;\n    resp.result.size_bytes      = '' + gr.size_bytes;\n    resp.result.size_compressed = '' + gr.size_compressed;\n    resp.result.content_type    = '' + gr.content_type;\n    resp.result.file_name       = '' + gr.file_name;\n    resp.result.created_time    = '' + gr.sys_created_on.getGlideObject().getNumericValue();\n    \n    if (request.need_signature == 'true') {\n        var su = new sn_automation.SignatureUtil(tbl, aid);\n\t\tvar sig_ver = request.signature_version;\n\t\ttry {\n\t\t\tvar signature = su.getVersionedSignature(sig_ver);\n\t\t\tif (signature)\n\t\t\t\tresp.result.signature = '' + signature;\n\t\t} catch (err) {\n\t\t\tgs.error(\"The MIDServerFileProvider web service failed to handle the request due to the unsupported signature_version: \" + sig_ver + \", error: \" + err);\n\t\t\tresp.result['@code'] = 'Unsupported signature_version: ' + sig_ver;\n\t\t}\n    }\n} \n\nfunction handleRead(tbl, aid, seq, max, resp) {\n    if (!isValidTable(tbl, resp)) \n        return;\n    \n    if (!getAttachment(tbl, aid, resp))\n        return;\n    \n    var gr = GlideSysAttachment.getAttachmentParts(aid, seq, max);\n    var chunk = [];\n    while (gr.next()) {\n        var datum = {};\n        datum.data = '' + gr.data;\n        datum.length = '' + gr.length;\n        chunk.push(datum);\n    }\n    if (chunk.length == 0) {\n        resp.result['@code'] = 'EOF';\n        return;\n    }\n    \n    resp.result.chunk = chunk;\n}\n\n/*\n * Returns a GlideRecord for the given sys_attachment sys_id, if the given table matches the one in the attachment.  Returns \n * null sets an appropriate error message in the response otherwise.\n */\nfunction getAttachment(table, aid, resp) {\n    var gr = new GlideRecord('sys_attachment');\n    if (!aid || !gr.get('sys_id', aid)) {\n        resp.result['@code'] = 'Could not read attachment: sys_attachment:' + aid;\n        return null;\n    }\n    if (table != gr.table_name) {\n        resp.result['@code'] = 'Given table does not match attachment table:' + table + ' vs. ' + gr.table_name;\n        return null;\n    }\n    return gr;\n}\n\n/*\n * Returns true if the tiven table is valid and is extended from ecc_agent_sync_file.  If it\n * returns false, the response's code is set to an error message.\n */\nfunction isValidTable(table, resp) {\n    var gr = new GlideRecord(table);\n    if (!gr.isValid()) {\n        resp.result['@code'] = 'Invalid table: ' + table;\n        return false;\n    }\n    \n    var base = '' + GlideDBObjectManager.get().getBase(table);\n    if (base != 'ecc_agent_sync_file' && base != 'ecc_agent_attachment') {\n        resp.result['@code'] = 'Invalid table base: ' + table;\n        return false;\n    }\n    return true;\n}","sys_class_name":"sys_web_service","sys_id":"6c94a96683201000dada83ec37d929c8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_6c94a96683201000dada83ec37d929c8","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/MIDServerFileProvider.do?WSDL","sys_created_on":"2011-08-20 18:27:18","function_name":"execute","name":"MIDServerFileProvider","sys_name":"MIDServerFileProvider","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"tom.dilatush","sys_policy":""},{"scoped_name":"MIDIssueLogger","short_description":"Allows logging to ecc_agent_issue","sys_mod_count":"7","active":"true","sys_updated_on":"2023-09-18 17:17:35","sys_tags":"","script":"(function scriptedWebServiceOperation(request, response) {\n\tif (!gs.hasRole(\"mid_server\")) {\n\t\tresponse.error = \"The mid_server role is required.\";\n\t\treturn;\n\t}\n\n\tvar midSysId = request.midSysId;\n\tvar issueList = JSON.parse(request.issues);\n\n\tif (issueList) {\n\t\tissueList.forEach(function (issueListItem) {\n\t\t\tvar operation = issueListItem.operation;\n\t\t\tvar issue = issueListItem.issue;\n\t\t\tvar source = issue.source;\n\t\t\tvar message = issue.message;\n\t\t\tdoIssueOperation(midSysId, operation, source, message);\n\t\t});\n\t} else {\n\t\t// for backwards compatiblity with older MIDs (pre-Washington D.C.)\n\t\tvar operation = request.operation;\n\t\tvar source = request.source;\n\t\tvar message = request.message;\n\t\tdoIssueOperation(midSysId, operation, source, message);\n\t}\n\t\n})(request, response);\n\nfunction doIssueOperation(midSysId, operation, source, message) {\n\tswitch (operation) {\n\t\tcase \"log\":\n\t\t\tMIDServerUtil.createOrUpdateIssue(midSysId, source, message);\n\t\t\tbreak;\n\t\tcase \"resolve\":\n\t\t\tMIDServerUtil.resolveExistingIssues(midSysId, source, message);\n\t\t\tbreak;\n\t\tcase \"unique_log\": \n\t\t\tMIDServerUtil.createOrUpdateUniqueIssue(midSysId, source, message);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tresponse.error = \"Invalid operation\";\n\t\t\tbreak;\n\t}\n}","sys_class_name":"sys_web_service","sys_id":"74e86fc17f2032002dedbb87adfa910b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_74e86fc17f2032002dedbb87adfa910b","sys_updated_by":"now.midserver","wsdl":"https://dev315171.service-now.com/MIDIssueLogger.do?WSDL","sys_created_on":"2017-01-24 22:06:03","function_name":"execute","name":"MIDIssueLogger","sys_name":"MIDIssueLogger","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"chris.nguyen","sys_policy":""},{"scoped_name":"PostToLiveFeed","short_description":"Create a live_message record from web service","sys_mod_count":"38","active":"false","sys_updated_on":"2014-12-17 16:52:15","sys_tags":"","script":"(function postToFeed() {\n\tvar util = new LiveFeedUtil();\n\n\tvar msg = request.message;\n\tvar userID = request.user;\n\tvar profileID = request.profile;\n\tvar groupID = request.group;\n\tvar linkUrl = request.linkurl;\n\tvar linkName = request.linkname;\n\n\tif (profileID) {\n\t\t// Checking if profile id is valid\n\t\tif (!util.getProfileUserID(profileID))\n\t\t\treturn;\n\t} else if (userID) {\n\t\t// find/create live profile from user sys_id\n\t\tprofileID = util.getUserProfile(userID);\n\t} // else session user profile is used\n\n\tmsg = JSUtil.unescapeText(msg);\n\n\t//copy url to name if we don't have a name\n\tif (linkUrl && !linkName)\n\t\tlinkName = linkUrl;\n\n\tvar live_feed_version = util.getLiveFeedVersion();\n\tvar newMsgID;\n\tif(live_feed_version == '2.0')\n\t\tnewMsgID = postV2Message(msg, profileID, groupID, linkUrl, linkName);\n\telse\n\t\tnewMsgID = postV1Message(msg, profileID, groupID, linkUrl, linkName);\n\n\tresponse.messageID = newMsgID;\n\n\n\tfunction postV2Message(msg, profileID, groupID, linkUrl, linkName) {\n\t\tvar data = {\n\t\t\tmessage: msg,\n\t\t\tgroup_id: groupID,\n\t\t\tfrom_profile: profileID\n\t\t};\n\t\t//add link if we have a valid one\n\t\tif (linkUrl && isUrl(linkUrl)) {\n\t\t\tdata.links = [\n\t\t\t\t{short_description: linkName, url: linkUrl}\n\t\t\t];\n\t\t}\n\t\treturn new LiveFeedMessage().postMessage(data); // LiveFeedMessage is not available in V1\n\t}\n\n\tfunction postV1Message(msg, profileID, groupID, linkUrl, linkName) {\n\t\tvar msgId = new SNC.LiveFeedApi().addMessage(msg, groupID, null, false, profileID);\n\t\t//add link if we have one\n\t\tif (msgId && linkUrl)\n\t\t\taddLink(msgId, linkUrl, linkName);\n\t\treturn msgId;\n\t}\n\n\tfunction addLink(messageId, url, name) {\n\t\t//check url format\n\t\tif (!isUrl(url))\n\t\t\treturn;\n\n\t\tvar linkGr = new GlideRecord(\"live_link\");\n\t\tlinkGr.url = url;\n\t\tlinkGr.short_description = name;\n\t\tlinkGr.attached_to_table = \"live_message\";\n\t\tlinkGr.attached_to_id = messageId;\n\t\tlinkGr.insert();\n\n\t\tvar mGr = new GlideRecord(\"live_message\");\n\t\tif (mGr.get(messageId)) {\n\t\t\tmGr.has_links = true;\n\t\t\tmGr.update();\n\t\t}\n\t}\n\n\tfunction isUrl(url) {\n\t\tvar regexp = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/;\n\t\treturn regexp.test(url);\n\t}\n\n}());\t","sys_class_name":"sys_web_service","sys_id":"975bd40ec0a80a6c7b82cecae802adc4","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/50442b7b04312210559073c06a02f7ef","value":"50442b7b04312210559073c06a02f7ef"},"sys_update_name":"sys_web_service_975bd40ec0a80a6c7b82cecae802adc4","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/PostToLiveFeed.do?WSDL","sys_created_on":"2011-04-27 14:28:09","function_name":"execute","name":"PostToLiveFeed","sys_name":"PostToLiveFeed","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"john.roberts","sys_policy":""},{"scoped_name":"GetTransactionCount","short_description":"Get the number of transactions","sys_mod_count":"7","active":"true","sys_updated_on":"2008-12-17 08:26:30","sys_tags":"","script":"/**********\r\n * Use the following business rule to invoke this example service\r\n *\r\n * // create the soap document\r\n * var soapdoc = new SOAPEnvelope(\"GetTransactionCount\", \"http://www.service-now.com/\");\r\n * soapdoc.setFunctionName(\"execute\");\r\n *\r\n * // post the request\r\n * var soapRequest = new SOAPRequest(\"http://localhost:8080/glide/GetTransactionCount.do?SOAP\");\r\n * var soapResponse = soapRequest.post(soapdoc);\r\n * var transactions = gs.getXMLText(soapResponse, \"//executeResponse/transactions\");\r\n *\r\n * gs.log(transactions);\r\n *\r\n ***********/\r\n\r\nvar servlet = GlideServlet.getServlet();\r\nresponse.transactions = servlet.getTotalTransactions();","sys_class_name":"sys_web_service","sys_id":"9880000f0a0a0b610072a9d09803b05f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f83a3f304312210559073c06a02f788","value":"7f83a3f304312210559073c06a02f788"},"sys_update_name":"sys_web_service_9880000f0a0a0b610072a9d09803b05f","sys_updated_by":"glide.maint","wsdl":"https://dev315171.service-now.com/GetTransactionCount.do?WSDL","sys_created_on":"2008-06-17 21:49:01","function_name":"execute","name":"GetTransactionCount","sys_name":"GetTransactionCount","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"glide.maint","sys_policy":""},{"scoped_name":"GetProperty","short_description":"Get a property value","sys_mod_count":"28","active":"true","sys_updated_on":"2022-07-25 17:12:39","sys_tags":"","script":"/**********\n * Use the following business rule to invoke this example service\n *\n * // create the soap document\n * var soapdoc = new SOAPEnvelope(\"GetProperty\", \"http://www.service-now.com/\");\n * soapdoc.setFunctionName(\"execute\");\n * soapdoc.addFunctionParameter(\"property\", \"glide.db.name\");\n *\n * // post the request\n * var soapRequest = new SOAPRequest(\"http://localhost:8080/glide/GetProperty.do?SOAP\");\n * var soapResponse = soapRequest.post(soapdoc);\n * var property = gs.getXMLText(soapResponse, \"//executeResponse/property\");\n *\n * gs.log(property);\n *\n ***********/\n\nvar gr = new GlideRecordSecure('sys_properties');\ngr.addQuery('name', request.property);\ngr.query();\nresponse.property = gr.next() ? gr.value : null;","sys_class_name":"sys_web_service","sys_id":"98f408730a0a0b610098d3a5f2d0d1fd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f83a3f304312210559073c06a02f788","value":"7f83a3f304312210559073c06a02f788"},"sys_update_name":"sys_web_service_98f408730a0a0b610098d3a5f2d0d1fd","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/GetProperty.do?WSDL","sys_created_on":"2008-06-17 23:55:07","function_name":"execute","name":"GetProperty","sys_name":"GetProperty","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"glide.maint","sys_policy":""},{"scoped_name":"GetMIDInfo","short_description":"Web Service to access MID Server credentials, affinities, and other relevant information","sys_mod_count":"77","active":"true","sys_updated_on":"2024-10-01 18:31:54","sys_tags":"","script":"if (gs.hasRole(\"mid_server\") && (isAgentValid() || (request.purpose == \"UpdatePublicKey\"))) {\n    var requestType = request.purpose;\n    var MIDServerInfoAccessor = new GlideMIDServerInfoAccessor();\n\n\tswitch (requestType) {\n\t\tcase \"GetCredentials\":\n\t\t\tgetCredentials();\n\t\t\tbreak;\n\t\tcase \"GetPersonalAuthCredentialData\":\n\t\t\tgetPersonalAuthCredentialData();\n\t\t\tbreak;\n\t\tcase \"GetCertificatePolicies\":\n\t\t\tgetCertificatePolicies();\n\t\t\tbreak;\n\t\tcase \"UpdateFileDiscoveryWhitelist\":\n\t\t\tupdateFileDiscoveryWhitelist();\n\t\t\tbreak;\n\t\tcase \"GetAgentAggregate\":\n\t\t\tgetAgentAggregate();\n\t\t\tbreak;\n\t\tcase \"GetQueueProcessingIds\":\n\t\t\tgetQueueProcessingIds();\n\t\t\tbreak;\n\t\tcase \"UpdateQueueFromProcessingToReady\":\n\t\t\tupdateEccQueueProcessingToReady();\n\t\t\tbreak;\n\t\tcase \"UpdateQueueFromReadyToProcessing\":\n\t\t\tupdateEccQueueReadyToProcessing();\n\t\t\tbreak;\n\t\tcase \"UpdateCredentialAffinity\":\n\t\t\tupdateCredentialAffinity();\n\t\t\tbreak;\n\t\tcase \"GetAutomationEncryptionKeys\":\n\t\t\tgetAutomationEncryptionKeys();\n\t\t\tbreak;\n        case \"UpdateOrInsertPrivAffinity\":\n            insertOrUpdatePrivilegedCommandAffinity();\n            break;\n        case \"DeletePrivAffinity\":\n            deletePrivilegedCommandAffinity();\n            break;\n\t\tcase \"GetIsAgentValid\":\n\t\t\tgetIsAgentValid();\n\t\t\tbreak;\n\t\tcase \"GetCloudServiceAccountInfo\":\n\t\t\tgetCloudServiceAccountInfo();\n\t\t\tbreak;\n\t\tcase \"UpdatePublicKey\":\n\t\t\tupdatePublicKey();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tgs.log(\"Unsupported request type: \" + requestType);\n\t}\n\n} else {\n    response.midInfo = \"Insufficient rights\";\n}\n\nfunction getIsAgentValid() {\n\tvar isValid = isAgentValid();\n\tresponse.midInfo = MIDServerInfoAccessor.getIsAgentValid(isValid);\n}\n\nfunction isAgentValid() {\n\treturn new MIDServerManage().isAgentValid(request.agent);\n}\n\nfunction getCredentials() {\n    // Setting a session property to indicate that this session is initiated by Mid Server callback\n    GlideSession.get().putProperty(\"MidCallbackOnCredentialsReload\", true);\n\tvar agent = request.agent;\n    var doc = MIDServerInfoAccessor.getCredentialXML(agent);\n\n    response.midInfo = doc;\n    GlideSession.get().putProperty(\"MidCallbackOnCredentialsReload\", false);\n}\n\nfunction getPersonalAuthCredentialData() {\n\tvar agent = request.agent;\n\tvar credentialId = request.credential_id;\n\tvar username = request.credential_username;\n\tvar doc = MIDServerInfoAccessor.getPersonalCredentialXML(agent, credentialId, username);\n\tresponse.midInfo = doc;\n}\n\nfunction getCertificatePolicies() {\n\tvar agent = request.agent;\n    var doc = MIDServerInfoAccessor.getCertificatePolicyXML(agent);\n\n    response.midInfo = doc;\n}\n\nfunction updateFileDiscoveryWhitelist() {\n\n\tvar agent = request.agent;\n\tvar doc = MIDServerInfoAccessor.updateFileDiscoveryWhitelist(agent);\n\n\tresponse.midInfo = doc;\n}\n\nfunction updateCredentialAffinity() {\n    var type = request.type;\n    var affinityId = request.affinity_id;\n    var agentId = request.agent;\n    var credentialId = request.credential_id;\n    var probe = request.probe_id;\n    var credentialTag = request.credential_tag;\n\n    var res = MIDServerInfoAccessor.insertOrUpdateAffinity(type, affinityId, agentId, credentialId, probe, credentialTag);\n\n    if (res)\n        response.midInfo = res;\n}\n\nfunction getAgentAggregate() {\n\n\tvar table = request.table;\n\tvar permittedTables = ['ecc_queue'];\n\n\tif (table && permittedTables.indexOf(table) >= 0) {\n\t\tvar aggregate = request.aggregate;\n\t\tvar field = request.field;\n\t\t\n\t\tvar ga = new GlideAggregate(table);\n\t\tga.setGroup(false);\n\t\tga.addAggregate(aggregate, field);\n\t\tga.addQuery('agent', request.agent);\n\t\t\n\t\tvar query = request.query;\n\t\tif (query) {\n\t\t\tga.addEncodedQuery(query, true);\n\t\t}\n\t\tga.query();\n\t\t\n\t\tvar aggregateValue = ga.next() ? ga.getAggregate(aggregate, field) : null;\n\t\tvar respObj = { 'GetAggregate' : { 'aggregate' : aggregateValue } };\n\t\t\n\t\tresponse.midInfo = new XMLHelper().toXMLDoc(respObj);\n\t\n\t} else {\n\t\tresponse.error = 'Invalid request.';\n\t}\n}\n\nfunction getQueueProcessingIds() {\n\t\n\tvar agent = request.agent;\n\tvar after = request.after;\n\tvar lastSysId = request.lastSysId;\n\tvar limit = parseInt(request.batchSize);\n\t\n\tvar gr = new GlideRecord('ecc_queue');\n\tgr.orderByDesc('sys_id');\n\tgr.setLimit(limit);\n\t\n\tgr.addQuery('agent', agent);\n\tgr.addQuery('queue', 'output');\n\tgr.addQuery('state', 'processing');\n\tgr.addQuery('sys_created_on', '>', after);\n\t\n\tif (lastSysId)\n\t\tgr.addQuery('sys_id', '<', lastSysId);\n\t\n\tgr.query();\n\t\n\tvar sysIds = [];\t\n\twhile (gr.next())\n\t\tsysIds.push(gr.getValue('sys_id'));\n\tvar sysIdsValue = sysIds.join(\",\");\n\t\n\tvar respObj = { 'GetQueueProcessingIds': { 'sysIds': sysIdsValue } };\t\n\tresponse.midInfo = new XMLHelper().toXMLDoc(respObj);\n}\n\nfunction updateEccQueueProcessingToReady() {\n\tvar agentId = request.agent;\n\tvar sysIds = request.sysIds;\n\n\tvar gr = new GlideRecord('ecc_queue');\n\t\n\t// allow for smaller batch calls if list of sys_ids is supplied\n\tif (sysIds)\n\t\tgr.addQuery('sys_id', 'IN', sysIds);\n\t\n\tgr.addQuery('state', 'processing');\n\tgr.addQuery('agent', agentId);\n\tgr.addQuery('queue', 'output');\n\tgr.setValue('state', 'ready');\n\tgr.updateMultiple();\n}\n\nfunction updateEccQueueReadyToProcessing () {\n\tvar agentId = request.agent;\n\tvar sysids = request.sysids;\n\n\tvar gr = new GlideRecord('ecc_queue');\n\tgr.addQuery('state', 'ready');\n\tgr.addQuery('agent', agentId);\n\tgr.addQuery('sys_id', 'IN', sysids);\n\tgr.addQuery('queue', 'output');\n\tgr.setValue('state', 'processing');\n\tgr.updateMultiple();\n}\n\nfunction insertOrUpdatePrivilegedCommandAffinity(){\n    var midServerId = request.agent;\n    var affinityId = request.affinityId;\n    var command = request.command;\n    var res = MIDServerInfoAccessor.insertOrUpdatePrivAffinity(midServerId, affinityId, command);\n    response.midInfo = res;\n}\n\nfunction deletePrivilegedCommandAffinity(){\n    var midServerId = request.agent;\n    var affinityId = request.affinityId;\n    var command = request.command;\n    var res = MIDServerInfoAccessor.deletePrivAffinity(midServerId, affinityId, command);\n    response.midInfo = res;\n}\n\nfunction getAutomationEncryptionKeys() {\n\tvar agent = request.agent;\n\tvar doc = MIDServerInfoAccessor.getAutomationEncryptionKeysXML(agent);\n\n\tresponse.midInfo = doc;\n}\n\nfunction getCloudServiceAccountInfo() {\n\tvar cloudServiceAccountInfoUtil = new CloudServiceAccountInfoUtil();\n\tvar doc = cloudServiceAccountInfoUtil.getCloudServiceAccountInfoXML();\n\t\n\tresponse.midInfo = doc;\n}\n\nfunction updatePublicKey() {\n\tvar agentId = request.agent ? request.agent : '';\n\tvar key = request.public_key ? request.public_key : '';\n\tvar signature = request.update_signature ? request.update_signature : '';\n\tvar isUsingMutualAuth = request.is_using_mutual_auth ? request.is_using_mutual_auth : 'false';\n\tvar doc = MIDServerInfoAccessor.updatePublicKey(agentId, key, signature, isUsingMutualAuth === 'true');\n\tgs.info('updatePublicKey: ' + GlideXMLUtil.toString(doc));\n\tresponse.midInfo = doc;\n}\n","sys_class_name":"sys_web_service","sys_id":"9d5754c5ff7200006857361332f49d5c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_9d5754c5ff7200006857361332f49d5c","sys_updated_by":"now.midserver","wsdl":"https://dev315171.service-now.com/GetMIDInfo.do?WSDL","sys_created_on":"2011-05-20 21:09:01","function_name":"execute","name":"GetMIDInfo","sys_name":"GetMIDInfo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"aleck.lin","sys_policy":""},{"scoped_name":"MIDAssignedPackages","short_description":"Provides the MID with a list of package URLs that are assigned to it","sys_mod_count":"49","active":"true","sys_updated_on":"2024-08-22 17:14:00","sys_tags":"","script":"/*\n * This page is public.\n * DO NOT change this schema other than by adding elements, as it is used by MID servers\n * and any change could cause MID server upgrade failures.\n *\n * Result payload format example:\n * result: {\n *   midPackage: [\n *     { filename: string, url: string[] },..\n *   ],\n * } \n */\n\nvar MidAssignedPackages = function() {};\n\n/**\n * Processes the request.\n * @return XMLDoc response\n */\nMidAssignedPackages.prototype.process = function(request) {\n\tvar glideWar = gs.getProperty('glide.war');\n\tvar glideAssignedWar = gs.getProperty('glide.war.assigned');\n\tvar glideWarNoUpgrade = gs.getProperty('glide.war.no_upgrade');\n\tvar jreVersion = '17.0.12-sncmid1';\n\tvar glibcVersionMinRquirement = '2.17';\n\n\t// PRB1344057: In the case of roll back glideWar != glideAssignedWar and we want to continue\n\t// MID upgrade. Checking glide.war.no_upgrade guarantees platform upgrade is not in progress\n\tvar isRollBack = (!gs.nil(glideWarNoUpgrade)) && (glideWarNoUpgrade == glideAssignedWar);\n\tif (!gs.nil(glideWar) && !gs.nil(glideAssignedWar) && glideWar != glideAssignedWar && !isRollBack)\n\t\treturn { result: { error: 'Platform upgrade is currently in progress.' } };\n\n\tvar result = { 'result': { midPackage: [] }};\n\tvar buildstamp = gs.getProperty('mid.buildstamp');\n\tvar versionOverride = gs.getProperty('mid.version.override');\n\tif (buildstamp == null)\n\t\tbuildstamp = '';\n\tif (versionOverride)\n\t\tbuildstamp = versionOverride;\n\n\tvar midSysId = request.mid_id;\n\t// apply a pinned version if configured\n\t// try the config table first, then the property table if nothing is found\n\tif (!gs.nil(request.mid_id)) {\n\t\tvar configGr = new GlideRecord('ecc_agent_config');\n\t\tconfigGr.addQuery('ecc_agent', midSysId);\n\t\tconfigGr.addQuery('param_name', 'mid.pinned.version');\n\t\tconfigGr.addNotNullQuery('value');\n\t\tconfigGr.setLimit(1);\n\t\tconfigGr.query();\n\t\tif (configGr.next()) {\n\t\t\tbuildstamp = configGr.value;\n\t\t} else { // try using mid properties\n\t\t\tvar propGr = new GlideRecord('ecc_agent_property');\n\t\t\tpropGr.addQuery('ecc_agent', midSysId);\n\t\t\tpropGr.addQuery('name', 'mid.pinned.version');\n\t\t\tpropGr.addNotNullQuery('value');\n\t\t\tpropGr.setLimit(1);\n\t\t\tpropGr.query();\n\t\t\tif (propGr.next()) {\n\t\t\t\tbuildstamp = propGr.value;\n\t\t\t} else { // try using mid property with no mid referenced\n\t\t\t\tvar propGr = new GlideRecord('ecc_agent_property');\n\t\t\t\tpropGr.addQuery('name', 'mid.pinned.version');\n\t\t\t\tpropGr.addQuery('ecc_agent', null);\n\t\t\t\tpropGr.addNotNullQuery('value');\n\t\t\t\tpropGr.setLimit(1);\n\t\t\t\tpropGr.query();\n\t\t\t\tif (propGr.next())\n\t\t\t\t\tbuildstamp = propGr.value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// build a list of packages currently assigned to the MID\n\tvar packages = [\n\t\tnew MIDPackage('mid-core', buildstamp, 'universal', 'universal'),\n\t\tnew MIDPackage('mid-upgrade', buildstamp, 'universal', 'universal')\n\t];\n\t\n\t// Check whether arch is 32-bit\n\tvar is32bit = false;\n\t// Need to check arch since we removed arch in London\n\tif (JSUtil.notNil(request.arch)) {\n\t\tif (request.os.includes('linux')) {\n\t\t\t// Linux 32-bit returns 'universal' when using SystemUtils.OS_ARCH\n\t\t\t// We use the jre properties meta file for architecture information\n\t\t\t// after the initial upgrade so this should only happen once\n\t\t\tif (request.arch == \"universal\")\n\t\t\t\trequest.arch = \"x86-32\";\n\t\t}\n\t\tif (request.arch.includes('x86-32')) {\n\t\t\tis32bit = true;\n\t\t}\n\t}\n\n\tif (is32bit) {\n\t\tvar mid32BitHost = '32 bit MID servers are not supported. Please refer to KB0863694 for more information.';\n\t\tMIDServerUtil.createOrUpdateIssue(midSysId, 'MIDAssignedPackages', mid32BitHost);\n\t}\n\n\n\t// only assign a jre if needed, as it's a large download\n\t// if jre_version is null, agent/jre does not exist. otherwise, it does and we check that version\n\t// DEF0136092: Download jre package if bundled mid jre version and installed mid jre version does not match (downgrade support).\n\tif (JSUtil.notNil(request.os) && (JSUtil.nil(request.jre_version) ||\n\t\t\tjreVersion != request.jre_version.trim())) {\n\t\tvar includeJrePkg = true;\n\t\tif (request.os.includes('linux')) {\n\n\t\t\t// Skip jre upgrade for Linux 32-bit MID Server.\n\t\t\tif (is32bit) {\n\t\t\t\tincludeJrePkg = false;\n\t\t\t\tvar linux32BitHost = 'JRE will not be upgarded on 32 bit Linux host machine.';\n\t\t\t\tMIDServerUtil.createOrUpdateIssue(midSysId, 'MIDAssignedPackages', linux32BitHost);\n\t\t\t}\n\n\t\t\t// Skip jre upgarde for glibc lower than 2.17 in Linux\n\t\t\tvar gr = new GlideRecord('ecc_agent');\n\t\t\tgr.get('sys_id', midSysId);\n\t\t\tvar glibcVersion = gr.getValue('host_glibc_version');\n\n\t\t\tif (!gs.nil(glibcVersion) && glibcVersion.localeCompare(glibcVersionMinRquirement) < 0) {\n\t\t\t\tincludeJrePkg = false;\n\t\t\t\tvar glibcIssue = 'JRE will not be upgarded. Host glibc version does not meet minimum glibc requirement (2.17). Host glibc version is : ' + glibcVersion;\n\t\t\t\tMIDServerUtil.createOrUpdateIssue(midSysId, 'MIDAssignedPackages', glibcIssue);\n\t\t\t}\n\t\t}\n\n\t\tvar midBuildstamp = getCurrentMidBuildstamp(request.installed_packages);\n\t\tif (midBuildstamp == buildstamp)\n\t\t\tincludeJrePkg = false;\n\n\t\tif (includeJrePkg) {\n\t\t\tpackages.push(new MIDPackage('mid-jre', buildstamp, request.os, request.arch));\n\t\t}\n\t}\n\n\t// build a list of URLs to download each package from, this will be passed to the MID\n\tfor (var i = 0; i < packages.length; ++i) {\n\t\tvar pack = packages[i];\n\t\tvar uriFactory = new MIDPackageUriFactory(pack,'auto_upgrade');\n\t\turiFactory.setMidSysId(midSysId);\n\t\tresult.result.midPackage.push({\n\t\t\t'filename': pack.getLegacyFilename(),\n\t\t\t'url': uriFactory.getUris()\n\t\t});\n\t}\n\n\treturn result;\n};\n\nfunction getCurrentMidBuildstamp(installed_packages) {\n\tvar packages = installed_packages.split('comma');\n\tfor(var i = 0; i < packages.length; i++) {\n\t\tvar pack = packages[i];\n\t\tif(pack.includes('mid-core')) {\n\t\t\treturn pack.split('.')[1];\n\t\t}\n\t}\n\treturn '';\n}\n\n// driver\nresponse.response = new XMLHelper().toXMLDoc(new MidAssignedPackages().process(request));\n","sys_class_name":"sys_web_service","sys_id":"9d9edb8237213000dcd48c00dfbe5da3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/42b8273704f12210559073c06a02f78d","value":"42b8273704f12210559073c06a02f78d"},"sys_update_name":"sys_web_service_9d9edb8237213000dcd48c00dfbe5da3","sys_updated_by":"now.midserver","wsdl":"https://dev315171.service-now.com/MIDAssignedPackages.do?WSDL","sys_created_on":"2012-11-08 23:35:27","function_name":"execute","name":"MIDAssignedPackages","sys_name":"MIDAssignedPackages","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"roy.laurie","sys_policy":""},{"scoped_name":"CMDBApiWS","short_description":"This scripted web service is for CMDB Web API","sys_mod_count":"10","active":"true","sys_updated_on":"2014-08-14 20:15:25","sys_tags":"","script":"try {\n\tvar api = new CmdbWebApi();\n\tswitch(request.purpose) {\n\t\tcase 'createOrUpdateCI':\n\t\tresponse.result = api.createOrUpdateCI(request.svcSysId, request.jsonStr);\n\t\tbreak;\n\t\tcase 'createOrUpdateConnection':\n\t\tresponse.result = api.createOrUpdateConnection(request.svcSysId, request.jsonStr);\n\t\tbreak;\n\t\tcase 'createRelation':\n\t\tresponse.result = api.createRelation(request.jsonStr);\n\t\tbreak;\n\t\tcase 'removeCIFromBusinessService':\n\t\tresponse.result = api.removeCIFromBusinessService(request.svcSysId, request.jsonStr);\n\t\tbreak;\n\t\tcase 'getCIByExample':\n\t\tresponse.result = api.retrieveCIByExample(request.jsonStr);\n\t\tbreak;\n\t\tcase 'deleteBusinessService':\n\t\tresponse.result = api.deleteBusinessService(request.svcSysId);\n\t\tbreak;\n\t\tdefault:\n\t\tunknownRequest(request.purpose);\n\t}\n}\ncatch(err){\n\tresponse.result = 'CMDB_API_WS_ERROR: ' + err;\n}\n\nfunction unknownRequest(purpose) {\n\tresponse.result = 'UNKNOWN_REQUEST: ' + purpose;\n}","sys_class_name":"sys_web_service","sys_id":"e1eabe03bf5221007c94c0647e07397f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6535677304712210559073c06a02f74f","value":"6535677304712210559073c06a02f74f"},"sys_update_name":"sys_web_service_e1eabe03bf5221007c94c0647e07397f","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/CMDBApiWS.do?WSDL","sys_created_on":"2014-08-07 18:49:59","function_name":"execute","name":"CMDBApiWS","sys_name":"CMDBApiWS","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"admin","sys_policy":""},{"scoped_name":"BusinessServiceManagerWS","short_description":"Web Service for Business Service Manager","sys_mod_count":"29","active":"true","sys_updated_on":"2015-05-06 15:27:53","sys_tags":"","script":"try {\n\tvar bsManager = new SNC.BusinessServiceManager();\n\tvar result = true;\n\tgs.log(\"Executing BusinessServiceManagerWS: \" + request.purpose);\n\tgs.log(\"Incoming business service sysId: \" + request.svcSysId);\n\tgs.log(\"Incoming json string: \" + request.jsonStr);\n\tvar params = JSON.parse(request.jsonStr);\n\tswitch(request.purpose) {\n\t\tcase 'addEntryPoint':\n\t\tresult = bsManager.addEntryPointWithoutStartDiscovery(request.svcSysId, getGlideRecord(params));\n\t\tbreak;\n\t\tcase 'attachToGroup':\n\t\tresult = bsManager.attachToGroup(request.svcSysId, params.bsGroupSysId);\n\t\tbreak;\n\t\tcase 'addBoundaryEndpoint':\n\t\tvar comment = params.comment;\n\t\t// Deleting the comment parameter from the rest of the parameters after getting it\n\t\tdelete params.comment;\n\t\tresult = bsManager.addBoundaryEndpoint(request.svcSysId, getGlideRecord(params), comment);\n\t\tbreak;\n\t\tcase 'detachAllOtherGroups':\n\t\tresult = bsManager.detachAllOtherGroups(request.svcSysId, params.bsGroupsSysIds);\n\t\tbreak;\n\t\tdefault:\n\t\tresult = unknownRequest(request.purpose);\n\t}\n\tgs.log(\"Result is: \" + result);\n\tif (!result)\n\t\tthrow bsManager.error;\n\tresponse.result = result;\n}\ncatch(err){\n\tresponse.result = 'BUSINESS_SERVICE_MANAGER_WS_ERROR: ' + err;\n}\n\nfunction unknownRequest(purpose) {\n\treturn 'UNKNOWN_REQUEST: ' + purpose;\n}\n\nfunction getGlideRecord(params) {\n\tvar gr = new GlideRecord(params.sys_class_name);\n\tfor (var key in params) {\n\t\tgr.setValue(key,params[key]);\n\t}\n\treturn gr;\n}","sys_class_name":"sys_web_service","sys_id":"fbfb0b65ffb33100ab8fffffffffff9f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/cd4cabf704352210559073c06a02f74d","value":"cd4cabf704352210559073c06a02f74d"},"sys_update_name":"sys_web_service_fbfb0b65ffb33100ab8fffffffffff9f","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/BusinessServiceManagerWS.do?WSDL","sys_created_on":"2015-05-03 13:56:12","function_name":"execute","name":"BusinessServiceManagerWS","sys_name":"BusinessServiceManagerWS","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"admin","sys_policy":""},{"scoped_name":"HAGetParams","short_description":"Retrieve HA Parameters","sys_mod_count":"28","active":"true","sys_updated_on":"2016-01-16 22:46:09","sys_tags":"","script":"populateParms();\n\nfunction populateParms() {\n\tif (!gs.getUser().hasRole(\"clone_admin\")) {\n\t\tresponse.error_string = \"Invalid admin user\";\n\t\treturn;\n\t}\n\t\n\tif ('false' == gs.getProperty(\"glide.db.clone.allow_clone_target\", 'true')) {\n\t\tresponse.error_string = \"Destination does not allow clone requests (Typically used by live production instances, a property was set that prevents the instance from being cloned over).\";\n\t\treturn;\n\t}\n\t\n\tresponse.instance_id = gs.getProperty(\"instance_id\");\n\tresponse.production = GlideUtil.isProductionInstance();\n\tresponse.war_version = gs.getProperty(\"glide.war\");\n\t\n\tvar requestExcludeJdbc = !gs.nil(request.exclude_jdbc_params) && request.exclude_jdbc_params == 'true';\n\tvar globalExcludeJdbc = gs.getProperty(\"glide.db.clone.ha_get_params_ws.exclude_jdbc_params\", 'false') == 'true';\n\tvar includeJdbcParams = !requestExcludeJdbc && !globalExcludeJdbc;\n\t\n\tif (includeJdbcParams) {\n\t\tvar parms = GlideDBUtil.getPrimaryDBConfigurationParms();\n\t\tresponse.name = parms.getDatabaseName();\n\t\tresponse.user = parms.getUser();\n\t\tresponse.rdbms = parms.getRDBMS();\n\t\n\t\t// for ease of development and testing in dev environments just use localhost (no sql permission; also IP address lookup takes 5s)\n\t\tvar primaryIP = GlideUtil.isDeveloperInstance() ? \"localhost\" : GlideHostUtil.getPublicIPAddress();\n\t\tresponse.ip = primaryIP;\n\t\n\t\tvar dbUrl = parms.getURL().replace(\"//localhost\", \"//\" + primaryIP);\n\t\tresponse.url = dbUrl;\n\t\n\t\tvar pwd = parms.getPassword();\n\t\tresponse.password = \"\"; // this is no longer in use by caller\n\t\n\t\tvar ts = parms.getTableSpaceName();\n\t\tif (ts == null)\n\t\t\tts = \"\";\n\t\n\t\tresponse.tablespace = ts;\n\t}\n\t\n\tvar tokenGR = new GlideRecord(\"clone_token\");\n\tif (!tokenGR.isValid())\n\t\treturn;\n\t\n\ttokenGR.initialize();\n\ttokenGR.clone_id = request.clone_id;\n\tvar tokenId = GlideSecureRandomUtil.getSecureRandomString(40);\n\ttokenGR.security_token = tokenId;\n\ttokenGR.insert();\n\t\n\tresponse.security_token = tokenId || \"\";\n}","sys_class_name":"sys_web_service","sys_id":"fdc5f87c0a0006657635b6fae5714f2f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3b83a3f304312210559073c06a02f788","value":"3b83a3f304312210559073c06a02f788"},"sys_update_name":"sys_web_service_fdc5f87c0a0006657635b6fae5714f2f","sys_updated_by":"admin","wsdl":"https://dev315171.service-now.com/HAGetParams.do?WSDL","sys_created_on":"2011-03-28 18:42:46","function_name":"execute","name":"HAGetParams","sys_name":"HAGetParams","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"wsdl_compliance":"false","sys_created_by":"jeremiah.hall","sys_policy":""}]}