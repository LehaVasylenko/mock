{"result":[{"value_script":"","sys_mod_count":"2","active":"true","sys_updated_on":"2014-04-23 00:43:47","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/eb95df760ab301550015543188996362","value":"eb95df760ab301550015543188996362"},"sys_id":"09be24f3c32311002d031f051eba8f35","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_09be24f3c32311002d031f051eba8f35","sys_updated_by":"sky.lin","sys_created_on":"2014-03-25 23:36:48","name":"mid.discovery.max_payload_size","sys_name":"mid.discovery.max_payload_size","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"-1","sys_created_by":"chris.nguyen","sys_policy":""},{"value_script":"","sys_mod_count":"60","active":"true","sys_updated_on":"2012-05-04 23:58:18","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/8a405889ff401000dada361332f49d51","value":"8a405889ff401000dada361332f49d51"},"sys_id":"0b569db4ff501000dada361332f49d12","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_0b569db4ff501000dada361332f49d12","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-02 20:41:23","name":"GetEnvFiles.js","sys_name":"GetEnvFiles.js","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"  /**********************************************\r\n   * Use Service-now.com WMIAPI to gather stats\r\n   * This script requires the admin share (admin$) enabled and point to the windows system directory (like \\WINDOWS or \\WINNT).\r\n  ***********************************************/\r\n  var CMD_RETRIES = 3;\r\n  var FOR_READING = 1;\r\n  var OUTPUT_FILE = \"application_disco_output.txt\";\r\n  var DEBUG = false;\r\n  var MAX_TIMEOUT = 60000; //60 seconds; This timeout dictates how long each command can run.\r\n\r\n  var scanner = getScanner();\r\n  if (scanner) \r\n      var output = run();\r\n\r\n  scanner.appendToRoot(\"output\", output);\r\n\r\n  /*******************************************\r\n   * Function definitions\r\n   ******************************************/\r\n  function run() {\r\n      var sysDir = \"C:\\\\WINDOWS\\\\system32\";\r\n      sysDir = setSystemDirectory(scanner.fetchTable(\"Win32_OperatingSystem\"));\r\n\r\n      // Environment specified location\r\n      var envPath = \"${envPath}\"; \r\n      // Property specified location\r\n      var propertyPath = \"${defaultPropertyPath}\";\r\n\r\n      if (envPath && envPath.indexOf(\"${\") != 0) // Make sure it's substituted correctly..\r\n          dirPath = envPath;\r\n      else\r\n          dirPath = propertyPath;\r\n\r\n      // Running the command and pipe the output to a file and read the file back... \r\n      // the \"2>&1\" redirect both stdout and stderr to the file\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c dir /w \\\"\" + dirPath + \"\\\" > %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE + \" 2>&1\");\r\n      var output = readFile(OUTPUT_FILE);\r\n\r\n      //Clean up the temp file created...\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c del %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE);\r\n\r\n      return output;\r\n  }\r\n\r\n  function setSystemDirectory(items) {\r\n      for(var i = 0; i < items.length; i++) {\r\n          var item = items[i];\r\n          sysDir = item.SystemDirectory;\r\n      }\r\n\r\n      return sysDir;\r\n  }\r\n\r\n  function executeCommand(command) {\r\n      for(var i = 0; i < CMD_RETRIES; i++) {\r\n          var oProcess = GetObject('winmgmts:\\\\\\\\' + gCurrentMachine + '\\\\root\\\\CIMV2:Win32_Process')\r\n          var oMethod = oProcess.Methods_.Item(\"Create\");\r\n          var oInParam = oMethod.InParameters.SpawnInstance_();\r\n          oInParam.CommandLine = command;\r\n\r\n          var oOutParam = oProcess.ExecMethod_(oMethod.Name, oInParam);\r\n          var retValue = oOutParam.ReturnValue;\r\n          var pid = oOutParam.ProcessID;\r\n\t  debug(\"Running command: \" + command);\r\n          debug(\"The return value is \" + retValue);\r\n          debug(\"The process ID is \" + pid);\r\n\r\n          //If the command returns successfully, let's get out of here...\r\n      \t  if (retValue == 0)  \r\n              break;\r\n       }\r\n       \r\n       waitForProcessComplete(pid); \r\n   }\r\n\r\n  function readFile(fileName) {\r\n      var fileObj = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n      try {\r\n          var objTextFile = fileObj.OpenTextFile(\"\\\\\\\\\" + gCurrentMachine + \"\\\\admin$\\\\temp\\\\\" + fileName, FOR_READING);\r\n          var output = objTextFile.ReadAll();\r\n          objTextFile.close();\r\n      } catch (e) {\r\n          return \"Exception in readFile: \" + e.message;\r\n      }\r\n\r\n      return output;\r\n  }\r\n\r\n  function waitForProcessComplete(pid) {\r\n      var myDate = new Date();\r\n      myDate.setTime(myDate.getTime()+MAX_TIMEOUT)\r\n\r\n      while (processExists(pid) == true && ((new Date()) < myDate)) \r\n           WScript.Sleep(100);\r\n  }\r\n\r\n  function processExists(pid) {\r\n      try {\r\n          var wql = \"SELECT * FROM Win32_Process WHERE ProcessId=\" + pid;\r\n\t  debug(\"Running wql query: \" + wql);\r\n          var procs = GetObject('WinMgmts:\\\\\\\\' + gCurrentMachine + \"\\\\root\\\\CIMV2\").ExecQuery(wql);\r\n          for (var en = new Enumerator(procs); !en.atEnd(); en.moveNext())\r\n              return true;\r\n\r\n          return false;\r\n      } catch (e) {\r\n          return false;\r\n      }\r\n  }\r\n \r\n  function debug(msg) {\r\n       if (DEBUG == true)\r\n           WScript.echo(msg);\r\n  }","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"4","active":"true","sys_updated_on":"2014-10-17 21:34:18","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bd7f5717ff202000dada361332f49d01","value":"bd7f5717ff202000dada361332f49d01"},"sys_id":"0b7bb8d2effb200098d5925495c0fba9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_0b7bb8d2effb200098d5925495c0fba9","sys_updated_by":"josh.gerbasi","sys_created_on":"2012-08-14 06:24:00","name":"GetEnvFile.ps1","sys_name":"GetEnvFile.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"    $dirPath = '${envFilePath}';\r\n\r\n    $finalCommand = 'type ' + '\"' + $dirPath + '\"';\r\n\r\n    launchProcess -computer $computer -cred $cred -command $finalCommand","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"3","active":"true","sys_updated_on":"2017-03-22 15:23:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/478ebcaf93c31200c2fe705bb47ffb0c","value":"478ebcaf93c31200c2fe705bb47ffb0c"},"sys_id":"0b882b9b8f213200a5760b5437bdee92","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_0b882b9b8f213200a5760b5437bdee92","sys_updated_by":"steve.francis","sys_created_on":"2017-03-22 14:53:19","name":"disable_vm_nic_vnics","sys_name":"disable_vm_nic_vnics","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"steve.francis","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2010-04-19 15:25:32","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/a87444cc0a0a0b6b0039d2d8d4f2b7c8","value":"a87444cc0a0a0b6b0039d2d8d4f2b7c8"},"sys_id":"16ac7e530a0a0bbe002c7fd02630da0e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_16ac7e530a0a0bbe002c7fd02630da0e","sys_updated_by":"tom.dilatush","sys_created_on":"2010-04-19 15:25:32","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"tom.dilatush","sys_policy":""},{"value_script":"answer = command;","sys_mod_count":"1","active":"false","sys_updated_on":"2007-11-06 22:30:47","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/16f2fd350a0a032700f2534f3b6ea391","value":"16f2fd350a0a032700f2534f3b6ea391"},"sys_id":"16f3386f0a0a032700701446ce37c343","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_16f3386f0a0a032700701446ce37c343","sys_updated_by":"glide.maint","sys_created_on":"2007-11-06 21:52:31","name":"command","sys_name":"command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"32","active":"true","sys_updated_on":"2018-05-13 13:59:20","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/17c3b4ce0a0a032700d51f4b08a8bd1e","value":"17c3b4ce0a0a032700d51f4b08a8bd1e"},"sys_id":"17c3d1c70a0a0327009e152f09eb2429","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_17c3d1c70a0a0327009e152f09eb2429","sys_updated_by":"oron.subayi","sys_created_on":"2007-11-07 01:40:25","name":"get-zones.sh","sys_name":"get-zones.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n#\r\nIFS=\"\r\n\"\r\nADMCMD=/usr/sbin/zoneadm\r\nZNAMECMD=/usr/bin/zonename\r\nCFGCMD=/usr/sbin/zonecfg\r\n\r\nprintf \"<zones>\\n\"\r\n\r\nif [ -f $ADMCMD -and -f $ZNAMECMD ]; then\r\n    MYZONENAME=`$ZNAMECMD`\r\n\r\n    if [ \"$MYZONENAME\" = \"global\" ]; then\r\n        MYZONEID=\"0\"\r\n        for LINE in `$ADMCMD list -cip`; do\r\n            ZID=`echo $LINE | cut -d\":\" -f5`\r\n            ZNAME=`echo $LINE | cut -d\":\" -f2`\r\n            ZSTATUS=`echo $LINE | cut -d\":\" -f3`\r\n            ZPATH=`echo $LINE | cut -d\":\" -f4`\r\n\r\n            if [ \"$ZNAME\" != \"global\" ]; then\r\n                    printf \"<zone>\\n\"\r\n\r\n                    printf \"<id>%s</id>\\n\" $ZID\r\n\r\n                    printf \"<name>%s</name>\\n\" $ZNAME\r\n                        \r\n                    printf \"<status>%s</status>\\n\" $ZSTATUS\r\n\r\n                    printf \"<path>\\n\"\r\n                    $CFGCMD -z $ZNAME info zonepath\r\n                    printf \"</path>\\n\"\r\n\r\n                    printf \"<net>\\n\"\r\n                    $CFGCMD -z $ZNAME info net\r\n                    printf \"</net>\\n\"\r\n\r\n                    printf \"</zone>\\n\"\r\n            fi\r\n        done\r\n    else\r\n        MYZONEID=`$ADMCMD -z $MYZONENAME list -p  | cut -d\":\" -f5`\r\n    fi\r\n\r\n    printf \"<id>%s</id>\\n\" $MYZONEID\r\nfi\r\n\r\nprintf \"</zones>\"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"4","active":"true","sys_updated_on":"2018-03-12 22:27:31","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/f39d6a930a0a0b780004c15893b3cfe4","value":"f39d6a930a0a0b780004c15893b3cfe4"},"sys_id":"19712372c3210100ed48cd1879ba8f10","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_19712372c3210100ed48cd1879ba8f10","sys_updated_by":"marjan.marzban","sys_created_on":"2013-05-29 03:47:19","name":"findcat.sh","sys_name":"findcat.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"version=`find $1 -name catalina.jar 2>/dev/null -exec unzip -c {} org/apache/catalina/util/ServerInfo.properties \\; | grep server.info`\r\nif [ -z \"$version\" ]; then\r\nversion=`find -L $1 -name catalina.jar 2>/dev/null -exec unzip -c {} org/apache/catalina/util/ServerInfo.properties \\; | grep server.info`\r\nfi\r\n\r\nif [ -z \"$version\" ]; then\r\n echo \"Unable to find catalina.jar. Check catalina.home path.\" >&2\r\n exit 1\r\nelse\r\n echo $version\r\nfi\r\n","sys_created_by":"tim.broberg","sys_policy":""},{"value_script":"","sys_mod_count":"33","active":"true","sys_updated_on":"2022-01-11 13:57:17","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/1a9c233dc0a8000b005c58d007c94a03","value":"1a9c233dc0a8000b005c58d007c94a03"},"sys_id":"1a9c6bdac0a8000b00785787b24511e6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_1a9c6bdac0a8000b00785787b24511e6","sys_updated_by":"moiz.alibhayani","sys_created_on":"2007-09-18 21:53:39","name":"WMI_ActiveConnections.js","sys_name":"WMI_ActiveConnections.js","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"  /**********************************************\r\n   * Use Service-now.com WMIAPI to gather stats\r\n   * This script requires the admin share (admin$) enabled and point to the windows system directory (like \\WINDOWS or \\WINNT).\r\n  ***********************************************/\r\n  var CMD_RETRIES = 3;\r\n  var FOR_READING = 1;\r\n  var OUTPUT_FILE = \"netstat_output.txt\";\r\n  var DEBUG = false;\r\n  var MAX_TIMEOUT = 60000; //60 seconds; This timeout dictates how long each command can run.\r\n\r\n  var scanner = getScanner();\r\n  if (scanner) \r\n      var output = run();\r\n\r\n  scanner.appendToRoot(\"output\", output);\r\n\r\n  /*******************************************\r\n   * Function definitions\r\n   ******************************************/\r\n  function run() {\r\n      var sysDir = \"C:\\\\WINDOWS\\\\system32\";\r\n      sysDir = setSystemDirectory(scanner.fetchTable(\"Win32_OperatingSystem\"));\r\n\r\n      // Running the netstat command and pipe the output to a file and read the file back... \r\n      // the \"2>&1\" redirect both stdout and stderr to the file\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c netstat.exe -ano > %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE + \" 2>&1\");\r\n      var output = readFile(OUTPUT_FILE);\r\n\r\n      // check if the output is actually connections, or the netstat usage page is shown...\r\n      if (output.indexOf(\"NETSTAT\") > -1) {\r\n\t  // Most likely the -o option is not supported on a 2000. Re-run and log it.\r\n          displayWarningOnOption(output);\r\n          executeCommand(sysDir + \"\\\\cmd.exe /c netstat.exe -anp TCP > %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE + \" 2>&1\");\r\n          output = readFile(OUTPUT_FILE);\r\n      }\r\n      //Clean up the temp file created...\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c del %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE);\r\n\r\n      return output;\r\n  }\r\n\r\n  function setSystemDirectory(items) {\r\n      for(var i = 0; i < items.length; i++) {\r\n          var item = items[i];\r\n          sysDir = item.SystemDirectory;\r\n      }\r\n\r\n      return sysDir;\r\n  }\r\n\r\n  function executeCommand(command) {\r\n      for(var i = 0; i < CMD_RETRIES; i++) {\r\n          var oProcess = GetObject('winmgmts:\\\\\\\\' + gCurrentMachine + '\\\\root\\\\CIMV2:Win32_Process')\r\n          var oMethod = oProcess.Methods_.Item(\"Create\");\r\n          var oInParam = oMethod.InParameters.SpawnInstance_();\r\n          oInParam.CommandLine = command;\r\n\r\n          var oOutParam = oProcess.ExecMethod_(oMethod.Name, oInParam);\r\n          var retValue = oOutParam.ReturnValue;\r\n          var pid = oOutParam.ProcessID;\r\n\t  debug(\"Running command: \" + command);\r\n          debug(\"The return value is \" + retValue);\r\n          debug(\"The process ID is \" + pid);\r\n\r\n          //If the command returns successfully, let's get out of here...\r\n      \t  if (retValue == 0)  \r\n              break;\r\n       }\r\n       \r\n       waitForProcessComplete(pid); \r\n   }\r\n\r\n  function readFile(fileName) {\r\n      var fileObj = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n      try {\r\n          var objTextFile = fileObj.OpenTextFile(\"\\\\\\\\\" + gCurrentMachine + \"\\\\admin$\\\\temp\\\\\" + fileName, FOR_READING);\r\n          var output = objTextFile.ReadAll();\r\n          objTextFile.close();\r\n      } catch (e) {\r\n          return \"Exception in readFile: \" + e.message;\r\n      }\r\n\r\n      return output;\r\n  }\r\n\r\n  function waitForProcessComplete(pid) {\r\n      var myDate = new Date();\r\n      myDate.setTime(myDate.getTime()+MAX_TIMEOUT)\r\n\r\n      while (processExists(pid) == true && ((new Date()) < myDate)) \r\n           WScript.Sleep(100);\r\n  }\r\n\r\n  function processExists(pid) {\r\n      try {\r\n          var wql = \"SELECT * FROM Win32_Process WHERE ProcessId=\" + pid;\r\n\t  debug(\"Running wql query: \" + wql);\r\n          var procs = GetObject('WinMgmts:\\\\\\\\' + gCurrentMachine + \"\\\\root\\\\CIMV2\").ExecQuery(wql);\r\n          for (var en = new Enumerator(procs); !en.atEnd(); en.moveNext())\r\n              return true;\r\n\r\n          return false;\r\n      } catch (e) {\r\n          return false;\r\n      }\r\n  }\r\n\r\n  function displayWarningOnOption(output) {\r\n      var options = [\"-a\", \"-n\", \"-o\", \"-p\"];\r\n      for (var i=0; i<options.length; i++) {\r\n          var warning = \"\";\r\n          var option = options[i];\r\n          if (output.indexOf(option) > -1)\r\n              continue;\r\n\r\n          warning = \"'\" + option + \"' is not supported on the version of the netstat.\";\r\n          if (option == \"-o\")\r\n              warning += \" Without the '-o' option, connections do not have process IDs associated them.\";\r\n  \r\n          if (warning != \"\")\r\n              scanner.addWarning(warning); \r\n      }\r\n  }\r\n \r\n  function debug(msg) {\r\n       if (DEBUG == true)\r\n           WScript.echo(msg);\r\n  }\r\n","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"2","active":"true","sys_updated_on":"2018-03-12 22:28:09","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/656e8f974bd77116016c349e177f5b63","value":"656e8f974bd77116016c349e177f5b63"},"sys_id":"1abbd9753bf813009cde239434efc4c8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_1abbd9753bf813009cde239434efc4c8","sys_updated_by":"marjan.marzban","sys_created_on":"2018-03-12 22:24:25","name":"findweblist.sh","sys_name":"findweblist.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"XMLLIST=`find $1 -name web.xml -print 2>/dev/null`\r\nif [ -z \"$XMLLIST\" ]; then\r\nXMLLIST=`find -L $1 -name web.xml -print 2>/dev/null`\r\nfi\r\n\r\nfor var in $XMLLIST\r\ndo\r\necho $var\r\ndone","sys_created_by":"marjan.marzban","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2021-01-29 17:30:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/1e4b29618f071200c2fe0b5437bdee19","value":"1e4b29618f071200c2fe0b5437bdee19"},"sys_id":"1b64d401770aa010a27540f2a9106196","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_1b64d401770aa010a27540f2a9106196","sys_updated_by":"varsha.srinivas","sys_created_on":"2021-01-29 17:30:06","name":"batch_update_vm_state","sys_name":"batch_update_vm_state","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"varsha.srinivas","sys_policy":""},{"value_script":"","sys_mod_count":"3","active":"true","sys_updated_on":"2017-03-22 15:20:36","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/478ebcaf93c31200c2fe705bb47ffb0c","value":"478ebcaf93c31200c2fe705bb47ffb0c"},"sys_id":"1e98ab9b8f213200a5760b5437bdee24","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_1e98ab9b8f213200a5760b5437bdee24","sys_updated_by":"steve.francis","sys_created_on":"2017-03-22 14:53:33","name":"disable_vm_nic_vdisks","sys_name":"disable_vm_nic_vdisks","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"steve.francis","sys_policy":""},{"value_script":"","sys_mod_count":"4","active":"true","sys_updated_on":"2014-10-17 21:34:25","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/fbc37783ff101000dada361332f49d32","value":"fbc37783ff101000dada361332f49d32"},"sys_id":"218bf8d2effb200098d5925495c0fb5a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_218bf8d2effb200098d5925495c0fb5a","sys_updated_by":"josh.gerbasi","sys_created_on":"2012-08-14 06:24:09","name":"GetVersionFile.ps1","sys_name":"GetVersionFile.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"    $dirPath = '${versionFilePath}';\r\n\r\n    $finalCommand = 'type ' + '\"' + $dirPath + '\"';\r\n\r\n    launchProcess -computer $computer -cred $cred -command $finalCommand","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2014-02-12 20:50:44","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bd7f3a7a0a00002d0051caaec62f1cc6","value":"bd7f3a7a0a00002d0051caaec62f1cc6"},"sys_id":"237fb022c33211002d031f051eba8fe9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_237fb022c33211002d031f051eba8fe9","sys_updated_by":"chris.nguyen","sys_created_on":"2014-02-12 20:50:44","name":"use_terminal","sys_name":"use_terminal","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"chris.nguyen","sys_policy":""},{"value_script":"var g = new GetDiscoverySchedulerConfigPerProbe();answer = g.getConfig('57874ec40a0a0b2000e662317a4c1714', g_probe.getCorrelator());","sys_mod_count":"1","active":"true","sys_updated_on":"2024-10-17 20:24:15","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/57874ec40a0a0b2000e662317a4c1714","value":"57874ec40a0a0b2000e662317a4c1714"},"sys_id":"25711df168515610f877135743046005","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_25711df168515610f877135743046005","sys_updated_by":"now.discovery_infra","sys_created_on":"2024-10-17 20:23:14","name":"running_process_filter","sys_name":"running_process_filter","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"now.discovery_infra","sys_policy":""},{"value_script":"","sys_mod_count":"19","active":"true","sys_updated_on":"2020-05-18 07:22:20","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/e71cd26fa9fe156100b4b355bf835b9c","value":"e71cd26fa9fe156100b4b355bf835b9c"},"sys_id":"263987170a0a0327002e52a2c0d673ce","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_263987170a0a0327002e52a2c0d673ce","sys_updated_by":"srikanth.nelapudi","sys_created_on":"2007-11-09 21:04:07","name":"ps.sh","sys_name":"ps.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n#\r\n# Only get our processes, not our child zone processes\r\n# NOTE: this takes one arguments:  zone name in $1\r\n# Core of this script is very similar to MID Server Script File solaris_ps_command.sh.\r\n#\r\nZONENAME=$1\r\nIFS=\"\r\n\"\r\nZONECMD=/usr/bin/zonename\r\nPSCMD=\"/usr/bin/ps\"\r\nPSARGS=\"-o pid,ppid\"\r\nAWKCMD=\"awk\"\r\n\r\n# Solaris 10 and older have ucb/ps installed; Solaris 11 does not by default.\r\n# But Solaris 11 /usr/bin/ps generates /usr/ucb/ps compatible output for when -\r\n# is not at the front of the first command argument.\r\n#\r\nSOLVERSION=`uname -r`\r\n\r\n# First output just the heading for ps's output, tacking on a COMMAND column\r\necho PID PPID COMMAND\r\n\r\n# Check for existence of zonename command\r\nif [ ! -z \"$ZONENAME\" ]; then\r\n        ZONEPARAM=\"-z ${ZONENAME}\"\r\nelif [ -f $ZONECMD ]; then\r\n\t# exists: limit ps to display processes for this zone\r\n        ZONEPARAM=\"-z `$ZONECMD`\"\r\nelse\r\n\t# doesn't exist: ps to display all processes \r\n        ZONEPARAM=\"-e\"\r\nfi\r\n\r\n# Replace awk command with nawk if it is available \r\n# awk has a byte limit of 2559 bytes on older solaris machines\r\nif hash nawk 2>/dev/null; then\r\n  AWKCMD=\"nawk\"\r\nfi\r\n\r\n# Iterate through each line of ps output...\r\nfor LINE in `$PSCMD $ZONEPARAM $PSARGS`; do\r\n\tPID=`echo $LINE | $AWKCMD '{print $1}'`\r\n\t# Check that this line isn't the header, and it's valid in /proc\r\n\tif [ \"$PID\" != \"PID\" -a -f \"/proc/$PID/status\" ]; then\r\n        # run ucb/ps as root get full, non-truncated command+args even for processes we don't own.\r\n        # Check if Solaris 11, which may not have /usr/ucb/ps installed.\r\n        # SNC runtime script preprocessor requires ${sudo:...} contain literal string, not a $myvar.\r\n        case $SOLVERSION in\r\n            \"5.11\") CMD=`${sudo:/usr/bin/ps} awwx $PID | tail +2 | $AWKCMD '{$1=\"\";$2=\"\";$3=\"\";$4=\"\";print $0}'`;;\r\n            *) CMD=`${sudo:/usr/ucb/ps} -awwx $PID | tail +2 | $AWKCMD '{$1=\"\";$2=\"\";$3=\"\";$4=\"\";print $0}'`;;\r\n        esac        # tack on the command+args to the output        \r\n        echo $LINE $CMD\r\n        fi\r\ndone\r\n","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"1","active":"false","sys_updated_on":"2009-11-24 23:37:51","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/287ee5530a0a0b481798012461c01dbc","value":"287ee5530a0a0b481798012461c01dbc"},"sys_id":"287f564f0a0a0b4829a43efd3dc8f2e3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_287f564f0a0a0b4829a43efd3dc8f2e3","sys_updated_by":"glide.maint","sys_created_on":"2009-11-24 23:21:02","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"false","sys_updated_on":"2009-11-25 01:08:24","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/28e1854e0a0a0b48650bebd7e38556c1","value":"28e1854e0a0a0b48650bebd7e38556c1"},"sys_id":"28e1a2f50a0a0b485d27b1088d61b2a9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_28e1a2f50a0a0b485d27b1088d61b2a9","sys_updated_by":"glide.maint","sys_created_on":"2009-11-25 01:08:24","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"var answer = undefined; \r\nvar path = undefined; \r\n\r\n//--config   \"c:\\program files\\mongodb\\conf\\mongodb.conf\"\r\n//--config=\"c:\\program files\\mongodb\\conf\\mongodb.conf\"\r\n//-f  \"c:\\program files\\mongodb\\conf\\mongodb.conf\"\r\n\r\nmatches = parameters.match(/(\\-f|\\-\\-config)([\\s]+|=)\"([a-zA-z]:\\\\[0-9a-zA-Z_\\-\\.\\\\\\s]+)\"/);\r\nif (matches) {\r\n    if ((matches[1])&&(matches[2])&&(matches[3]))\r\n        path = matches[3];\r\n}\r\n\r\n\r\n//--config   c:\\mongodb\\conf\\mongodb.conf\r\n//--config=c:\\mongodb\\conf\\mongodb.conf\r\n//-f  c:\\mongodb\\conf\\mongodb.conf\r\n\r\nmatches = parameters.match(/(\\-f|\\-\\-config)([\\s]+|=)([a-zA-z]:\\\\[0-9a-zA-Z_\\-\\.\\\\]+)/);\r\nif (matches) {\r\n    if ((matches[1])&&(matches[2])&&(matches[3]))\r\n        path = matches[3];\r\n}\r\n\r\nif (path != undefined) {\r\n        answer = path;\r\n}","sys_mod_count":"25","active":"true","sys_updated_on":"2014-08-27 22:04:11","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/0e6ce562ef1221007f04b25495c0fbf3","value":"0e6ce562ef1221007f04b25495c0fbf3"},"sys_id":"2904fda2ef1221007f04b25495c0fbbe","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2904fda2ef1221007f04b25495c0fbbe","sys_updated_by":"jing.yang","sys_created_on":"2014-08-06 00:20:28","name":"powershell_param_confFilePath","sys_name":"powershell_param_confFilePath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"jing.yang","sys_policy":""},{"value_script":"","sys_mod_count":"5","active":"true","sys_updated_on":"2014-08-22 21:18:56","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/62c4abee9f0221001e021a1cf67fcfec","value":"62c4abee9f0221001e021a1cf67fcfec"},"sys_id":"2ba1e8089f3221001e021a1cf67fcfe7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2ba1e8089f3221001e021a1cf67fcfe7","sys_updated_by":"admin","sys_created_on":"2014-08-22 20:27:05","name":"version.sh","sys_name":"version.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"if [ -r /usr/bin/hbase ]; then\r\n    echo \"version\" | hbase shell\r\nelse\r\n    echo \"version\" | $1/bin/hbase shell\r\nfi","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2014-02-22 00:38:05","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/57874ec40a0a0b2000e662317a4c1714","value":"57874ec40a0a0b2000e662317a4c1714"},"sys_id":"2cb94c659f031100d8939ff3367fcfb0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2cb94c659f031100d8939ff3367fcfb0","sys_updated_by":"admin","sys_created_on":"2014-02-22 00:38:05","name":"ps.sh","sys_name":"ps.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n\r\n# setting column width to avoid truncating results\r\nexport COLUMNS=1000\r\nPS=`ps -aef -o \"pid,ppid,args\"`\r\necho \"$PS\"","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"false","sys_updated_on":"2009-01-31 14:42:04","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/eb95df760ab301550015543188996362","value":"eb95df760ab301550015543188996362"},"sys_id":"2d236e5e0ab3015500e6ab1e8c5d840b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2d236e5e0ab3015500e6ab1e8c5d840b","sys_updated_by":"glide.maint","sys_created_on":"2009-01-31 14:42:04","name":"HTTP_waitForResponseMS","sys_name":"HTTP_waitForResponseMS","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"5000","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"4","active":"true","sys_updated_on":"2019-09-26 05:53:37","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/eb95df760ab301550015543188996362","value":"eb95df760ab301550015543188996362"},"sys_id":"2d244f840ab30155003aab8add48ec9e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2d244f840ab30155003aab8add48ec9e","sys_updated_by":"durgaprasad.cp","sys_created_on":"2009-01-31 14:42:56","name":"GenericTCP_waitForConnectMS","sys_name":"GenericTCP_waitForConnectMS","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"3000","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"9","active":"true","sys_updated_on":"2015-08-24 08:53:30","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/d4970ad09f02020003f3b0aec32e7096","value":"d4970ad09f02020003f3b0aec32e7096"},"sys_id":"2e584ed09f02020003f3b0aec32e70c1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_2e584ed09f02020003f3b0aec32e70c1","sys_updated_by":"yair.leibkowiz","sys_created_on":"2015-08-19 08:09:11","name":"cli_commands","sys_name":"cli_commands","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"list ltm virtual recursive;","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"7","active":"true","sys_updated_on":"2012-07-29 03:30:34","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/df4905820a0a0ba500b7ea51b460326c","value":"df4905820a0a0ba500b7ea51b460326c"},"sys_id":"38eaa906efd3200098d5925495c0fb57","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_38eaa906efd3200098d5925495c0fb57","sys_updated_by":"aleck.lin","sys_created_on":"2012-07-19 18:41:44","name":"wmi_timeout","sys_name":"wmi_timeout","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"900","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"var g = new GetDiscoverySchedulerConfigPerProbe();answer = g.getConfig('e71cd26fa9fe156100b4b355bf835b9c', g_probe.getCorrelator());","sys_mod_count":"0","active":"true","sys_updated_on":"2024-10-17 20:25:02","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/e71cd26fa9fe156100b4b355bf835b9c","value":"e71cd26fa9fe156100b4b355bf835b9c"},"sys_id":"40f19df168515610f877135743046033","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_40f19df168515610f877135743046033","sys_updated_by":"now.discovery_infra","sys_created_on":"2024-10-17 20:25:02","name":"running_process_filter","sys_name":"running_process_filter","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"now.discovery_infra","sys_policy":""},{"value_script":"answer = command;","sys_mod_count":"0","active":"true","sys_updated_on":"2014-08-22 18:06:43","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/d4614800c33221002d031f051eba8f41","value":"d4614800c33221002d031f051eba8f41"},"sys_id":"41914800c33221002d031f051eba8f79","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_41914800c33221002d031f051eba8f79","sys_updated_by":"chris.nguyen","sys_created_on":"2014-08-22 18:06:43","name":"command","sys_name":"command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"chris.nguyen","sys_policy":""},{"value_script":"","sys_mod_count":"1","active":"false","sys_updated_on":"2009-02-04 18:01:14","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/eb95df760ab301550015543188996362","value":"eb95df760ab301550015543188996362"},"sys_id":"41f236c60a0a0b82005516c241157787","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_41f236c60a0a0b82005516c241157787","sys_updated_by":"glide.maint","sys_created_on":"2009-02-04 15:40:17","name":"debug","sys_name":"debug","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"4","active":"true","sys_updated_on":"2015-07-23 07:19:04","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/b05c347893910200084135bb357ffbb2","value":"b05c347893910200084135bb357ffbb2"},"sys_id":"43aea0b693110200084135bb357ffb9e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_43aea0b693110200084135bb357ffb9e","sys_updated_by":"admin","sys_created_on":"2015-07-20 13:15:40","name":"cli_commands","sys_name":"cli_commands","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"show version;show interface;show rserver;show serverfarm;show service-policy detail;","sys_created_by":"admin","sys_policy":""},{"value_script":"// -Dcatalina.home=/glide/instances/devsqlserver_16002\r\n// value script, input vars are command, name, parameters, set answer\r\nvar i = parameters.indexOf('-Dcatalina.base');\r\nif (i > -1) {\r\n  var s = parameters.substring(i); \r\n  s = s.split(' ')[0];\r\n  s = s.split('=')[1];\r\n  answer = s + \"/conf/server.xml\";\r\n} else {\r\n  i = parameters.indexOf('-Dcatalina.home');\r\n  if (i > -1) {\r\n    var s = parameters.substring(i); \r\n    s = s.split(' ')[0];\r\n    s = s.split('=')[1];\r\n    answer = s + \"/conf/server.xml\";\r\n  }\r\n}","sys_mod_count":"2","active":"false","sys_updated_on":"2007-09-11 22:12:48","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/1f700ec4ac10020301d36d234582404f","value":"1f700ec4ac10020301d36d234582404f"},"sys_id":"46252b1fc0a8006701abfe0e28a0dcea","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_46252b1fc0a8006701abfe0e28a0dcea","sys_updated_by":"glide.maint","sys_created_on":"2007-01-21 19:32:25","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"58","active":"true","sys_updated_on":"2014-09-25 00:21:26","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/51c1cde3df3221001e02a3cf6bf2630f","value":"51c1cde3df3221001e02a3cf6bf2630f"},"sys_id":"47434127df3221001e02a3cf6bf2638e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_47434127df3221001e02a3cf6bf2638e","sys_updated_by":"swapnesh.patel","sys_created_on":"2014-09-02 19:53:00","name":"oraclepfile.ps1","sys_name":"oraclepfile.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"$exePath = '${commandVal}';\r\n$res1 = $exePath.IndexOf('${');\r\n\r\n$sid = '${sidVal}';\r\n$res2 = $sid.IndexOf('${');\r\n\r\n#Make sure it's substituted correctly.\r\nTry{\r\n\tif($exePath  -and ($res1 -ne 0)){\r\n\t\t\t $oracleHome = $exePath -replace \"\\\\bin\\\\oracle.exe\",\"\";\r\n\t\t\t $oracleHome = $oracleHome -replace \"/bin/oracle.exe\",\"\";\r\n\t\tif($sid -and ($res2 -ne 0)){\r\n\t\t\t$pfilesList=\"$oracleHome\\database\\spfile$sid.ora\",\"$oracleHome\\database\\spfile.ora\",\"$oracleHome\\database\\init$sid.ora\";\r\n\t\t\t$found = $false;\r\n\t\t\tfor($i=0; $i -lt $pfilesList.length; $i++){\r\n\t\t\t\t$finalCommand = '(IF EXIST \"' + $pfilesList[$i] + '\" (type \"' + $pfilesList[$i] + '\") ELSE (echo \"FILE_DOES_NOT_EXIST\"))';\r\n\t\t\t\t[string]$result = launchProcess -computer $computer -cred $cred -command $finalCommand; \r\n\t\t\t\tif($result -ne $null -and $result -ne \"\" -and (-not ($result -like \"*FILE_DOES_NOT_EXIST*\" ) )){\r\n\t\t\t\t\tWrite-Host $result;\r\n\t\t\t\t\t$found = $true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(-not $found) {\r\n\t\t\t\tthrow \"Could not able to find the Server Parameter(spfile) file.\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow \"Invalid value of SID:$sid.\";\r\n\t\t}\r\n\t} else {\r\n\t\t\tthrow \"Invalid value of oracle exe path:$exePath.\";\r\n\t}\r\n}\r\nCatch{\r\n\tWrite-Error $_.Exception.Message; \r\n\tExit 4;\r\n}","sys_created_by":"swapnesh.patel","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2017-09-19 17:39:53","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/e71cd26fa9fe156100b4b355bf835b9c","value":"e71cd26fa9fe156100b4b355bf835b9c"},"sys_id":"4b66d0f96751030072b9f06943415a22","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_4b66d0f96751030072b9f06943415a22","sys_updated_by":"jim.freeman","sys_created_on":"2017-09-19 17:39:53","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"jim.freeman","sys_policy":""},{"value_script":"","sys_mod_count":"19","active":"true","sys_updated_on":"2013-05-22 23:02:20","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3f82e14d37530000dadacffbcfbe5dbb","value":"3f82e14d37530000dadacffbcfbe5dbb"},"sys_id":"4f82e54d37530000dadacffbcfbe5d64","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_4f82e54d37530000dadacffbcfbe5d64","sys_updated_by":"tim.broberg","sys_created_on":"2011-06-14 23:19:20","name":"oracle_instance.sh","sys_name":"oracle_instance.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"SID=$1\r\nORATABS=\"/var/opt/oracle/oratab /etc/oratab /var/opt/unix/oratab /etc/oracle/oratab /etc/opt/oracle/oratab /shared/opt/oracle/oratab\"\r\nFAILED=0\r\nERR=\"\"\r\n\r\nget_pfile() {\r\n    PFILES=\"${ORA_HOME}/dbs/spfile${SID}.ora ${ORA_HOME}/dbs/spfile.ora ${ORA_HOME}/dbs/init${SID}.ora\"\r\n    for PFILE in $PFILES; do\r\n        if [ -f $PFILE ]; then\r\n            FAILED=`strings $PFILE 1> /dev/null 2>&1; echo $?`\r\n            [ \"$FAILED\" != 0 ] && ERR=\"Could not read Oracle (s)pfile: $PFILE. $ERR\" && return\r\n            echo \"snc_pfile_contents=\"\r\n            strings $PFILE\r\n            return\r\n        fi\r\n    done\r\n    FAILED=1\r\n    ERR=\"No Oracle (s)pfile found (or insufficient permissions). $ERR\"\r\n}\r\n\r\nget_version() {\r\n    VERSION=`echo exit | ORACLE_HOME=$ORA_HOME $ORA_HOME/bin/sqlplus /NOLOG 2>&1 | sed -n 's/.*: Release \\([0-9\\.]*\\) .*/\\1/p'`\r\n    [ \"$VERSION\" != \"\" ] && echo \"snc_ora_version=$VERSION\" && return\r\n    VERSION=`${ORA_HOME}/bin/lsnrctl status 2>&1 | grep Version | sed -ne 's/.*: Version \\([0-9.]*\\) .*/\\1/p'`\r\n    [ \"$VERSION\" != \"\" ] && echo \"snc_ora_version=$VERSION\" && return\r\n    VERSION=`echo $ORA_HOME | sed -ne 's/.*\\/\\([0-9.]*\\)\\/.*/\\1/p'`\r\n    [ \"$VERSION\" != \"\" ] && echo \"snc_ora_version=$VERSION\" && return\r\n    FAILED=1\r\n    ERR=\"Could not determine Oracle instance version. $ERR\"\r\n}\r\n\r\nrunit() {\r\n    [ ! $SID ] && echo \"No Oracle SID was provided\" && exit 1\r\n    for ORATAB in $ORATABS; do\r\n        if [ -f $ORATAB ]; then\r\n            INSTANCES=`cat $ORATAB | sed -n 's/^\\([^:#]*\\):\\([^:]*\\):.*/\\1:\\2/p'`\r\n            for INST in $INSTANCES; do\r\n                if [ \"X`echo $INST | cut -d ':' -f 1`\" = \"X$SID\" ]; then\r\n                    ORA_HOME=`echo $INST | cut -d ':' -f 2`\r\n                    echo \"snc_ora_home=$ORA_HOME\"\r\n                    get_version\r\n                    get_pfile\r\n                    return\r\n                fi\r\n            done\r\n        fi\r\n    done\r\n    FAILED=1\r\n    ERR=\"No Oracle oratab file found. $ERR\"\r\n}\r\n\r\nrunit\r\n[ \"$FAILED\" != 0 ] && echo \"snc_error=$ERR\"\r\nexit 0","sys_created_by":"ben.yukich","sys_policy":""},{"value_script":"// ...com.ibm.ws.bootstrap.WSLauncher com.ibm.ws.runtime.WsServer /opt/IBM/WPS/profiles/ccmdb/config localhostNode01Cell ccmdb01 server1\r\n// from the command line parameters\r\n// last == server name\r\n// last - 1 == node name\r\n// last - 2 == cell name\r\n// last - 3 == config path\r\n// last - 4 == launched program\r\n// last - 5 == launcher (always predictable)\r\n\r\nvar params = parameters.split(\" \");\r\nvar plength = params.length - 1; // starts with 0\r\n\r\nvar configPath = params[plength - 3];\r\nvar cellName = params[plength - 2];\r\nvar nodeName = params[plength - 1];\r\nvar serverName = params[plength];\r\n\r\nanswer = configPath + \"/cells/\" + cellName + \"/cell.xml\";","sys_mod_count":"2","active":"false","sys_updated_on":"2007-01-23 21:38:47","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/50ddd1110a0a0a6f01fba3988ac6e2d7","value":"50ddd1110a0a0a6f01fba3988ac6e2d7"},"sys_id":"50de5fe40a0a0a6f00bfe5d5c010c8a0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_50de5fe40a0a0a6f00bfe5d5c010c8a0","sys_updated_by":"glide.maint","sys_created_on":"2007-01-23 21:30:55","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"5","active":"false","sys_updated_on":"2008-10-31 02:03:44","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/51174bf50a0a0b200086e777759084a9","value":"51174bf50a0a0b200086e777759084a9"},"sys_id":"511766d30a0a0b2000b1a510ec3bd08b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_511766d30a0a0b2000b1a510ec3bd08b","sys_updated_by":"glide.maint","sys_created_on":"2007-08-10 18:44:28","name":"hifconfig.sh","sys_name":"hifconfig.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n#\r\n\r\nIFS=\"\r\n\"\r\n\r\nfor IFACE in `/usr/bin/netstat -in | grep -v Name | awk '{print $1}' | uniq`; do\r\n        ifconfig $IFACE\r\ndone\r\n\r\nlanscan -ia","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// ...com.ibm.ws.bootstrap.WSLauncher com.ibm.ws.runtime.WsServer /opt/IBM/WPS/profiles/ccmdb/config localhostNode01Cell ccmdb01 server1\r\n// from the command line parameters\r\n// last == server name\r\n// last - 1 == node name\r\n// last - 2 == cell name\r\n// last - 3 == config path\r\n// last - 4 == launched program\r\n// last - 5 == launcher (always predictable)\r\n\r\nvar params = parameters.split(\" \");\r\nvar plength = params.length - 1; // starts with 0\r\n\r\nvar configPath = params[plength - 3];\r\nvar cellName = params[plength - 2];\r\nvar nodeName = params[plength - 1];\r\nvar serverName = params[plength];\r\n\r\nanswer = configPath + \"/cells/\" + cellName + \"/nodes/\" + nodeName + \"/servers/\" + serverName + \"/server.xml\";","sys_mod_count":"0","active":"false","sys_updated_on":"2007-01-24 00:14:02","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5171c4dc0a0a0a6f01a72df67e7d38f5","value":"5171c4dc0a0a0a6f01a72df67e7d38f5"},"sys_id":"5173b5320a0a0a6f01fb2220cb59b122","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_5173b5320a0a0a6f01fb2220cb59b122","sys_updated_by":"glide.maint","sys_created_on":"2007-01-24 00:14:02","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"3","active":"false","sys_updated_on":"2009-11-25 20:06:23","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5246daf50a0a0b2000741895af5905b5","value":"5246daf50a0a0b2000741895af5905b5"},"sys_id":"5246f6460a0a0b2000d03267206c3a72","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_5246f6460a0a0b2000d03267206c3a72","sys_updated_by":"glide.maint","sys_created_on":"2007-08-11 00:16:08","name":"cpuinfo.sh","sys_name":"cpuinfo.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/sbin/sh\r\nOS_REL=`uname -r | sed -e 's/^[AB]\\.//' -e 's/\\..*//'`\r\ncpu_type=paXXXX\r\nif [ \"$OS_REL\" -ge 11 ]; then\r\n    typeset -i2 bin\r\n    bin=`getconf CPU_CHIP_TYPE`\r\n    typeset -i16 hex\r\n    hex=2#`echo $bin | sed -e 's/2#//' -e 's/.....$//'`\r\n    model_num=`echo $hex | cut -c4-`\r\n    case $model_num in\r\n        b) cpu_type=PA7200   ;;\r\n        d) cpu_type=PA7100LC ;;\r\n        e) cpu_type=PA8000   ;;\r\n        f) cpu_type=PA7300LC ;;\r\n        10) cpu_type=PA8200   ;;\r\n        11) cpu_type=PA8500   ;;\r\n        12) cpu_type=PA8600   ;;\r\n        13) cpu_type=PA8700   ;;\r\n        14) cpu_type=PA8800   ;;\r\n        15) cpu_type=PA8750   ;;\r\n        *) cpu_type=paXXXX   ;;\r\n        *) cpu_type=paXXXX   ;;\r\n    esac\r\nelse\r\n    model_num=`model`\r\n    model_num=`echo $model_num | sed -e 's/^9000\\///'`\r\n    l=`expr length $model_num`\r\n    if [ $l -gt 5 ]; then\r\n        model_num=`echo $model_num | sed -e 's/^[78]..\\///'`\r\n    else\r\n        model_num=`echo $model_num | sed -e 's/\\/.*//'`\r\n    fi\r\n    if [ $model_num = B1000 -o $model_num = B2000 ]; then\r\n        cpu_type=PA8500\r\n    else\r\n          for sm in /usr/lib/sched.models /usr/sam/lib/mo/sched.models /opt/langtools/lib/sched.models\r\n           do\r\n                if [ -s $sm ]; then\r\n                    h=`awk '(NF>=3&&$1==\"'$model_num'\"){print $3;exit}' $sm`\r\n                    if [ -n \"$h\" ]; then\r\n                        cpu_type=$h\r\n                        break\r\n                    fi\r\n                fi\r\n           done\r\n    fi\r\nfi\r\necho \"cpu:$cpu_type\"\r\nCPU_COUNT=`ioscan -fnkC processor | grep PROCESSOR | wc -l`\r\necho \"count:$CPU_COUNT\"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// ...com.ibm.ws.bootstrap.WSLauncher com.ibm.ws.runtime.WsServer /opt/IBM/WPS/profiles/ccmdb/config localhostNode01Cell ccmdb01 server1\r\n// from the command line parameters\r\n// last == server name\r\n// last - 1 == node name\r\n// last - 2 == cell name\r\n// last - 3 == config path\r\n// last - 4 == launched program\r\n// last - 5 == launcher (always predictable)\r\n\r\nvar params = parameters.split(\" \");\r\nvar plength = params.length - 1; // starts with 0\r\n\r\nvar configPath = params[plength - 3];\r\nvar cellName = params[plength - 2];\r\nvar nodeName = params[plength - 1];\r\nvar serverName = params[plength];\r\n\r\nanswer = configPath + \"/cells/\" + cellName + \"/nodes/\" + nodeName + \"/serverindex.xml\";","sys_mod_count":"0","active":"false","sys_updated_on":"2007-01-24 18:19:34","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/555485950a0a0a6f010216c0d236a69d","value":"555485950a0a0a6f010216c0d236a69d"},"sys_id":"55558eb10a0a0a6f000b6145cbc7fbe6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_55558eb10a0a0a6f000b6145cbc7fbe6","sys_updated_by":"glide.maint","sys_created_on":"2007-01-24 18:19:34","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// ...com.ibm.ws.bootstrap.WSLauncher com.ibm.ws.runtime.WsServer /opt/IBM/WPS/profiles/ccmdb/config localhostNode01Cell ccmdb01 server1\r\n// from the command line parameters\r\n// last == server name\r\n// last - 1 == node name\r\n// last - 2 == cell name\r\n// last - 3 == config path\r\n// last - 4 == launched program\r\n// last - 5 == launcher (always predictable)\r\n\r\nvar params = parameters.split(\" \");\r\nvar plength = params.length - 1; // starts with 0\r\n\r\nvar serverName = params[plength];\r\n\r\nanswer = serverName;","sys_mod_count":"2","active":"false","sys_updated_on":"2007-01-24 22:03:35","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/555485950a0a0a6f010216c0d236a69d","value":"555485950a0a0a6f010216c0d236a69d"},"sys_id":"55d85a950a0a0a6f0035acf68ede6499","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_55d85a950a0a0a6f0035acf68ede6499","sys_updated_by":"glide.maint","sys_created_on":"2007-01-24 20:42:26","name":"servername","sys_name":"servername","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// -classpath /usr/local/jboss-4.0.5.GA/bin/run.jar:/lib/tools.jar org.jboss.Main\r\n// value script, input vars are command, name, parameters, set answer\r\nvar i = parameters.indexOf('-classpath');\r\nif (i > -1) {\r\n  var s = parameters.substring(i); \r\n  var cpath = s.split(\" \")[1];\r\n\r\n  var runjarclasspath = cpath.split(\":\")[0];\r\n\r\n  answer = runjarclasspath.substring(0, runjarclasspath.lastIndexOf(\"bin/run.jar\")) + \"server/default/conf/jboss-service.xml\";\r\n}","sys_mod_count":"1","active":"false","sys_updated_on":"2007-01-25 21:18:29","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5adfe34b0a0a0a6f00d496be33cf4ac4","value":"5adfe34b0a0a0a6f00d496be33cf4ac4"},"sys_id":"5b1d000e0a0a0a6f00e23d660f0ffe31","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_5b1d000e0a0a0a6f00e23d660f0ffe31","sys_updated_by":"glide.maint","sys_created_on":"2007-01-25 21:15:31","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// -classpath /usr/local/jboss-4.0.5.GA/bin/run.jar:/lib/tools.jar org.jboss.Main\r\n// value script, input vars are command, name, parameters, set answer\r\nvar i = parameters.indexOf('-classpath');\r\nif (i > -1) {\r\n  var s = parameters.substring(i); \r\n  var cpath = s.split(\" \")[1];\r\n\r\n  var runjarclasspath = cpath.split(\":\")[0];\r\n\r\n  answer = runjarclasspath.substring(0, runjarclasspath.lastIndexOf(\"bin/run.jar\")) + \"server/default/deploy\";\r\n}","sys_mod_count":"0","active":"false","sys_updated_on":"2007-01-26 00:08:10","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5bb94e820a0a0a6f0150c0135e7f5e9d","value":"5bb94e820a0a0a6f0150c0135e7f5e9d"},"sys_id":"5bbb0f3d0a0a0a6f000461875f7a2ebf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_5bbb0f3d0a0a0a6f000461875f7a2ebf","sys_updated_by":"glide.maint","sys_created_on":"2007-01-26 00:08:10","name":"dirname","sys_name":"dirname","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"var location = gs.getProperty(\"glide.discovery.apd.windows_location\", \"\")\nif (location)\n    answer = location.replace(/\\\\/g,\"\\\\\\\\\"); //Escape it for the next stage first.\nelse\n    answer = \"\";","sys_mod_count":"12","active":"true","sys_updated_on":"2012-05-04 20:17:51","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/8a405889ff401000dada361332f49d51","value":"8a405889ff401000dada361332f49d51"},"sys_id":"6028c2f8ff501000dada361332f49ddd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6028c2f8ff501000dada361332f49ddd","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-03 00:18:57","name":"defaultPropertyPath","sys_name":"defaultPropertyPath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"// In a Cloudera install, the HBase service config appears in a folder with the following pattern:\r\n// /var/run/cloudera-scm-agent/process/*-hbase-MASTER\r\n// /var/run/cloudera-scm-agent/process/*-hbase-REGIONSERVER\r\nvar matches = parameters.match(/(\\/var\\/run\\/cloudera-scm-agent\\/process\\/\\d+-hbase-(MASTER|REGIONSERVER))/);\r\n\r\nif (matches) { // Cloudera Distribution\r\n    answer = matches[1] + '/hbase-site.xml';  \r\n} else { // Apache Distribution\r\n    answer = g_probe_parameters['hbase_home'] + '/conf/hbase-site.xml'; // default to\r\n}\r\n\r\n","sys_mod_count":"7","active":"true","sys_updated_on":"2014-07-31 18:26:40","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/f53594879f4221001e021a1cf67fcfa1","value":"f53594879f4221001e021a1cf67fcfa1"},"sys_id":"607558879f4221001e021a1cf67fcf01","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_607558879f4221001e021a1cf67fcf01","sys_updated_by":"admin","sys_created_on":"2014-07-25 20:28:44","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"admin","sys_policy":""},{"value_script":"// --defaults-extra-file=/glide/mysql/data/my.cnf\r\n// --defaults-file=/etc/my.cnf\r\n// if defaults-extra-file exists, use it. if the paths are relative, use basedir\r\n\r\nanswer = \"/etc/my.cnf\";\r\nvar matches = null;\r\nvar path = null;\r\n\r\nmatches = parameters.match(/--defaults-extra-file=([0-9a-zA-Z_\\-\\.\\/]+)/);\r\nif (matches)\r\n    path = matches[1];\r\nelse {\r\n    matches = parameters.match(/--defaults-file=([0-9a-zA-Z_\\-\\.\\/]+)/);\r\n    if (matches)\r\n        path = matches[1];\r\n}\r\n\r\nif (path != undefined) {\r\n    if (path[0] != '/') {\r\n        matches = parameters.match(/--basedir=([0-9a-zA-Z_\\-\\.\\/]+)/);\r\n        if (matches) {\r\n            path = matches[1] + '/' + path;\r\n            answer = path;\r\n        }\r\n    } else\r\n        answer = path;\r\n}\r\n","sys_mod_count":"16","active":"true","sys_updated_on":"2011-04-29 15:35:13","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/60fe930b0a0a0a6f005e409232b3b8bd","value":"60fe930b0a0a0a6f005e409232b3b8bd"},"sys_id":"61089eab0a0a0a6f00afc023ff4c5a6f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_61089eab0a0a0a6f00afc023ff4c5a6f","sys_updated_by":"roy.laurie","sys_created_on":"2007-01-27 00:50:59","name":"filename","sys_name":"filename","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"answer = command;","sys_mod_count":"0","active":"false","sys_updated_on":"2007-01-27 01:41:27","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/61361aa40a0a0a6f01b1d372d015a855","value":"61361aa40a0a0a6f01b1d372d015a855"},"sys_id":"6136d3de0a0a0a6f008ab1ae004a3818","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6136d3de0a0a0a6f008ab1ae004a3818","sys_updated_by":"glide.maint","sys_created_on":"2007-01-27 01:41:27","name":"command","sys_name":"command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// -Dcatalina.home=/glide/instances/devsqlserver_16002\r\n// value script, input vars are command, name, parameters, set answer\r\nvar i = parameters.indexOf('-Dcatalina.base');\r\nif (i > -1) {\r\n  var s = parameters.substring(i); \r\n  s = s.split(' ')[0];\r\n  s = s.split('=')[1];\r\n  answer = s + \"/webapps\";\r\n} else {\r\n  i = parameters.indexOf('-Dcatalina.home');\r\n  if (i > -1) {\r\n    var s = parameters.substring(i); \r\n    s = s.split(' ')[0];\r\n    s = s.split('=')[1];\r\n    answer = s + \"/webapps\";\r\n  }\r\n}","sys_mod_count":"1","active":"false","sys_updated_on":"2007-09-11 22:15:13","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/656e8f974bd77116016c349e177f5b63","value":"656e8f974bd77116016c349e177f5b63"},"sys_id":"65ddd8b8c0a800670043f7d710756bcc","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_65ddd8b8c0a800670043f7d710756bcc","sys_updated_by":"glide.maint","sys_created_on":"2007-01-27 23:22:22","name":"dirname","sys_name":"dirname","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"// Should be overwritten by parameter passing from Windows - Find APD File Location","sys_mod_count":"6","active":"true","sys_updated_on":"2012-05-04 20:18:25","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/8a405889ff401000dada361332f49d51","value":"8a405889ff401000dada361332f49d51"},"sys_id":"6629c23cff501000dada361332f49dca","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6629c23cff501000dada361332f49dca","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-03 00:22:19","name":"envPath","sys_name":"envPath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2016-03-08 20:38:05","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/95e96f24c0a8019a15cccba63c35846a","value":"95e96f24c0a8019a15cccba63c35846a"},"sys_id":"68ef837493021200feaf705bb47ffb9c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_68ef837493021200feaf705bb47ffb9c","sys_updated_by":"steve.francis","sys_created_on":"2016-03-06 22:49:48","name":"vCenter.getSANStorageInfo","sys_name":"vCenter.getSANStorageInfo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"steve.francis","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2011-04-18 22:35:54","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/6ac0fab40a0007171dfa9895dbc49411","value":"6ac0fab40a0007171dfa9895dbc49411"},"sys_id":"6ac15b920a0007175d3ab7f90bd32e29","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6ac15b920a0007175d3ab7f90bd32e29","sys_updated_by":"ben.yukich","sys_created_on":"2011-04-18 22:35:54","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"ben.yukich","sys_policy":""},{"value_script":"answer = command;\n\n","sys_mod_count":"24","active":"true","sys_updated_on":"2014-08-25 07:08:10","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bf9baaa1ef1221007f04b25495c0fb76","value":"bf9baaa1ef1221007f04b25495c0fb76"},"sys_id":"6e6cdd72ef1221007f04b25495c0fb3f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6e6cdd72ef1221007f04b25495c0fb3f","sys_updated_by":"chris.nguyen","sys_created_on":"2014-08-06 17:17:52","name":"powershell_param_cmdPath","sys_name":"powershell_param_cmdPath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"jing.yang","sys_policy":""},{"value_script":"","sys_mod_count":"40","active":"true","sys_updated_on":"2014-09-24 23:09:20","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3c48298adf3221001e02a3cf6bf2639a","value":"3c48298adf3221001e02a3cf6bf2639a"},"sys_id":"6f29250edf3221001e02a3cf6bf26335","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_6f29250edf3221001e02a3cf6bf26335","sys_updated_by":"swapnesh.patel","sys_created_on":"2014-08-29 06:50:31","name":"oracleversion.ps1","sys_name":"oracleversion.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"$exePath = '${commandVal}';\r\n$res = $exePath.IndexOf('${');\r\n\r\n#Make sure it's substituted correctly.\r\nTry{\r\n\tif($exePath  -and ($res -ne 0)){\r\n\r\n\t\t$oracleHome = $exePath -replace \"\\\\bin\\\\oracle.exe\",\"\";\r\n\t\t$oracleHome = $oracleHome -replace \"/bin/oracle.exe\",\"\";\r\n\r\n\t\tWrite-Host \"snc_ora_home=$oracleHome\";\r\n\r\n\t\t$sqlplusExePath = $exePath -replace \"oracle.exe\",\"sqlplus.exe\";\r\n\t\t$finalCommand = '\"' + $sqlplusExePath + '\" -V';\r\n\t\t[string]$result1 = launchProcess -computer $computer -cred $cred -command $finalCommand;\r\n\t\tif($result1 -ne $null -and $result1 -ne \"\"){\r\n\t\t\t$matchFound = $result1 -match \".*:\\sRelease\\s([0-9\\.]*)\\s[\\w]*\";\r\n\t\t\tif($matchFound) {\r\n\t\t\t\t$VERSION = 'snc_ora_version=' + $matches[1];\r\n\t\t\t\tWrite-Host $VERSION;\r\n\t\t\t} else {\r\n\t\t\t\tthrow \"Could not determine oracle instance version from result:$result1.\";\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow \"Could not determine Oracle instance version.\";\r\n\t\t}\r\n\t} else {\r\n\t\tthrow \"Oracle exe path is invalid.\";\r\n\t}\r\n}\r\nCatch{\r\n\tWrite-Error $_.Exception.Message;\r\n\tExit 4;\r\n}\r\n","sys_created_by":"swapnesh.patel","sys_policy":""},{"value_script":"","sys_mod_count":"1","active":"true","sys_updated_on":"2023-07-17 12:01:15","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/53d141350b02101088b90bdb35673a20","value":"53d141350b02101088b90bdb35673a20"},"sys_id":"74e289350b02101088b90bdb35673a23","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_74e289350b02101088b90bdb35673a23","sys_updated_by":"now.discovery.content","sys_created_on":"2020-07-17 08:37:10","name":"aix_connection.sh","sys_name":"aix_connection.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\nexists()\n{\n\tcommand -v \"$1\" >/dev/null 2>&1\n}\n\nif exists lsof; then\n\tconnectionInfo=`sudo lsof -iTCP -n -P -F pcnfT 2> /dev/null`\n\techo \"lsof output\"\n\techo \"$connectionInfo\"\n\texit 0\nfi\nconnectionInfo=`sudo netstat -Aan | grep tcp | tr -s ' ' | grep -v CLOSED | sort | \nwhile read pcb proto tqr tqs la fa state; do\n\tprintf \"$proto $tqr $tqs $la $fa $state \";\n\trmsock $(echo $pcb | cut -d ' ' -f1) tcpcb | cut -d ' ' -f9,10\ndone | awk '{\n\tprint $1 \" \" $2 \" \" $3 \" \" $4 \" \" $5 \" \" $6 \" \" $7 \"/\" $8;\n}' | grep -v \"before\" | sed 's/\\(.*\\)::1/\\1127.0.0.1/' 2> /dev/null`\nif [ \"$?\" -eq \"0\" ]; then\n\techo \"netstat output\"\n\techo \"$connectionInfo\"\n\texit 0\nfi\necho \"both lsof and netstat commands failed\"\nexit 1","sys_created_by":"moiz.alibhayani","sys_policy":""},{"value_script":"answer=\"false\";\r\n// First check if we have a Windows filter enabled\r\nvar discovery_spkg_filter_gr = new GlideRecord(\"discovery_spkg_filter\");\r\ndiscovery_spkg_filter_gr.addQuery(\"filter\", \"exclude\");\r\ndiscovery_spkg_filter_gr.addQuery(\"type\", \"windows\");\r\ndiscovery_spkg_filter_gr.addQuery(\"enable\", \"1\");\r\ndiscovery_spkg_filter_gr.query();\r\n\r\nif (discovery_spkg_filter_gr.hasNext()){\r\n    var spkg_filter_gr = new GlideRecord(\"discovery_spkg_keys\");\r\n    spkg_filter_gr.addQuery(\"key\", \"Hotfix\");\r\n    spkg_filter_gr.addQuery(\"active\", 1);\r\n    spkg_filter_gr.query();\r\n\r\n    // Return if we have a hotfix filtering\r\n    answer = spkg_filter_gr.hasNext();\r\n}\r\nelse{\r\n    answer=\"false\";\r\n}","sys_mod_count":"9","active":"true","sys_updated_on":"2018-05-24 16:27:23","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/df4905820a0a0ba500b7ea51b460326c","value":"df4905820a0a0ba500b7ea51b460326c"},"sys_id":"7a8bc8ccc74e13008ec4abbd9b976368","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_7a8bc8ccc74e13008ec4abbd9b976368","sys_updated_by":"nisan.barzion","sys_created_on":"2018-05-08 09:22:29","name":"should_filter_hotfix","sys_name":"should_filter_hotfix","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"nisan.barzion","sys_policy":""},{"value_script":"//Should be passed in by the sensor that launches it","sys_mod_count":"5","active":"true","sys_updated_on":"2012-03-12 05:42:43","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/ccbf2cf6ff021000dada361332f49d23","value":"ccbf2cf6ff021000dada361332f49d23"},"sys_id":"7dd4f161ffc31000dada361332f49d17","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_7dd4f161ffc31000dada361332f49d17","sys_updated_by":"aleck.lin","sys_created_on":"2011-12-19 23:39:53","name":"versionFilePath","sys_name":"versionFilePath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"11","active":"true","sys_updated_on":"2022-01-11 13:56:14","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/1a9c233dc0a8000b005c58d007c94a03","value":"1a9c233dc0a8000b005c58d007c94a03"},"sys_id":"7dfc5f870a000483000169d19b46c06d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_7dfc5f870a000483000169d19b46c06d","sys_updated_by":"moiz.alibhayani","sys_created_on":"2011-03-03 23:13:48","name":"WMI_ActiveConnections.ps1","sys_name":"WMI_ActiveConnections.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"launchProcess -computer $computer -cred $cred -command 'netstat.exe -ano'","sys_created_by":"jimmy.yuan","sys_policy":""},{"value_script":"","sys_mod_count":"2","active":"false","sys_updated_on":"2007-02-02 22:24:46","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/7f7beaaf0a0a0a6f0041b2bb48873eb4","value":"7f7beaaf0a0a0a6f0041b2bb48873eb4"},"sys_id":"7f7c82630a0a0a6f01480478cfa2ee14","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_7f7c82630a0a0a6f01480478cfa2ee14","sys_updated_by":"glide.maint","sys_created_on":"2007-02-01 22:46:10","name":"script.pl","sys_name":"script.pl","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"print '<?xml version=\"1.0\" encoding=\"utf-8\"?>';\r\nprint \"\\n<computer>\\n\";\r\n\r\nprint \"<outputversion>1.3</outputversion>\\n\";\r\n\r\n\r\n# hostname, ip, etc...\r\n\r\nmy($hostname);\r\nmy($name);\r\nmy($aliases);\r\nmy($addrtype);\r\nmy($length);\r\nmy(@addrs);\r\nmy(@v);\r\n\r\n$hostname = `hostname`;\r\nchop $hostname;\r\n\r\n($name,$aliases,$addrtype,$length,@addrs) = gethostbyname($hostname);\r\n\r\n@v = split(/\\./,$name);\r\nprint \"<hostname>$v[0]</hostname>\\n\";\r\nprint \"<fqdn>$name</fqdn>\\n\";\r\n\r\nforeach (@addrs) {\r\n    my($a);\r\n    my($b);\r\n    my($c);\r\n    my($d);\r\n\r\n    ($a,$b,$c,$d) = unpack('C4',$_);\r\n\r\n    print \"<ipaddress>\" . sprintf(\"%s.%s.%s.%s\",$a,$b,$c,$d) . \"</ipaddress>\\n\";\r\n}\r\n\r\n\r\n# OS version and patch level, etc ...\r\n\r\nmy($computer_model);\r\nmy($unique_system_id);\r\nmy($raw_uname);\r\nmy($major_os);\r\nmy($major_os_version);\r\nmy($os_patch_level);\r\n\r\n@raw_uname = split(/ /,`uname -a`);\r\n\r\n$major_os = $raw_uname[0];\r\n\r\nif ($major_os eq \"NetBSD\" ||\r\n    $major_os eq \"Linux\" ||\r\n    $major_os eq \"HP-UX\") {\r\n    $major_os_version = $raw_uname[2];\r\n}\r\n\r\nif ( -e \"/usr/bin/hostid\" ) {\r\n    $unique_system_id = `/usr/bin/hostid`;\r\n    chop $unique_system_id;\r\n}\r\n\r\nif ($major_os eq \"AIX\") {\r\n    my($e);\r\n    my(@l);\r\n    my($h);\r\n    my($n);\r\n\r\n    undef $unique_system_id;\r\n\r\n    $major_os_version = `oslevel`;\r\n    chop $major_os_version;\r\n    \r\n    $os_patch_level = `oslevel -r`;\r\n    chop $os_patch_level;\r\n\r\n    $computer_model = `lsattr -El sys0 -a modelname -F value`;\r\n    chop $computer_model;\r\n\r\n    $e = `lscfg -vpl sysplanar0`;\r\n    @l = split(\"\\n\",$e);\r\n\r\n    $n = 0;\r\n    while ($n <= $#l) {\r\n\tif ($l[$n] =~ /System:/ ||\r\n\t    $l[$n] =~ /System VPD:/) {\r\n\t    $h = $n;\r\n\r\n\t    last;\r\n\t}\r\n\r\n\t$n++;\r\n    }\r\n\r\n    if (defined $h) {\r\n\twhile ($h <= $#l) {\r\n\t    if ($l[$h] =~ /Machine\\/Cabinet.*\\.\\.\\.(.*)$/) {\r\n\t\t$unique_system_id = $1;\r\n\t\tlast;\r\n\t    }\r\n\r\n\t    $h++;\r\n\t}\r\n\r\n\tif (! defined $unique_system_id) {\r\n\t    if ($raw_uname[3] == 4 &&\r\n\t\t$raw_uname[2] == 3) {\r\n\t\t$unique_system_id = `/usr/sbin/hostid`;\r\n\t    } else {\r\n\t\t$unique_system_id = `uname -f`;\r\n\t    }\r\n\t    chop $unique_system_id;\r\n\t}\r\n    } else {\r\n\tif ($raw_uname[3] == 4 &&\r\n\t    $raw_uname[2] == 3) {\r\n\t    $unique_system_id = `/usr/sbin/hostid`;\r\n\t} else {\r\n\t    $unique_system_id = `uname -f`;\r\n\t}\r\n\tchop $unique_system_id;\r\n    }\r\n}\r\n\r\nif ($major_os eq \"HP-UX\") {\r\n    $unique_system_id = `uname -i`;\r\n    chop $unique_system_id;\r\n\r\n    $computer_model = `/usr/bin/getconf MACHINE_MODEL`;\r\n    chop $computer_model;\r\n}\r\n\r\nif (defined $unique_system_id) {\r\n    print \"<serialnumber>$unique_system_id</serialnumber>\\n\";\r\n}\r\n\r\nif (defined $computer_model) {\r\n    print \"<computermodel>$computer_model</computermodel>\\n\";\r\n}\r\n\r\nprint \"<os>\\n\";\r\nprint \"<osname>$major_os</osname>\\n\";\r\nif (defined $major_os_version) {\r\n    print \"<osversion>$major_os_version</osversion>\\n\";\r\n}\r\nif (defined $os_patch_level) {\r\n    print \"<ospatchlevel>$os_patch_level</ospatchlevel>\\n\";\r\n}\r\nprint \"</os>\\n\";\r\n\r\n\r\n# LAN interface information...\r\n\r\nmy($iwhere);\r\nmy(@netinterfaces);\r\n\r\nif ($major_os eq \"NetBSD\" ||\r\n    $major_os eq \"AIX\") {\r\n    my($e);\r\n    my(@l);\r\n    my($n);\r\n    my(%i);\r\n    my(@if_info);\r\n\r\n    if ($major_os eq \"NetBSD\") {\r\n\t$e = `/sbin/ifconfig -au`;\r\n    }\r\n\r\n    if ($major_os eq \"AIX\") {\r\n\t$e = `/etc/ifconfig -au`;\r\n    }\r\n\r\n    @l = split(\"\\n\",$e);\r\n    $n = 0;\r\n\r\n    while ($n <= $#l) {\r\n\tif ($l[$n] =~ /flags/) {\r\n\t    my(@fline);\r\n\t    my($iname);\r\n\r\n\t    if (defined $i{'interfacename'}) {\r\n\t\tmy(%ii) = %i;\r\n\r\n\t\tpush(@netinterfaces,\\%ii);\r\n\t    }\r\n\r\n\t    @fline = split(/ /,$l[$n]);\r\n\t    $iname = $fline[0];\r\n\t    $iname =~ s/:$//g;\r\n\r\n\t    if ($iname !~ /^lo/) {\r\n\t\t$i{'interfacename'} = $iname;\r\n\t    } else {\r\n\t\tundef $i{'interfacename'};\r\n\t    }\r\n\t    undef $i{'interfacestuff'};\r\n\t    @if_info = ();\r\n\t}\r\n\r\n\tif ($l[$n] =~ /address: / &&\r\n\t    defined $i{'interfacename'}) {\r\n\t    my(@mline);\r\n\t    my($maddress);\r\n\r\n\t    @mline = split(/ /,$l[$n]);\r\n\t    $maddress = lc($mline[$#mline]);\r\n\t    $i{'interfacemacaddress'} = $maddress;\r\n\t}\r\n\r\n\tif ($l[$n] =~ /inet / &&\r\n\t    defined $i{'interfacename'}) {\r\n\t    my(@iline);\r\n\t    my($iaddress);\r\n\t    my($inm);\r\n\t    my($ibcast);\r\n\t    my($dd);\r\n\t    my(%if_info);\r\n\r\n\t    @iline = split(/ /,$l[$n]);\r\n\t    $dd = 0;\r\n\t    while ($dd <= $#iline) {\r\n\t\tif ($iline[$dd] =~ /inet$/) {\r\n\t\t    $if_info{'interfaceipaddress'} = $iline[$dd + 1];\r\n\t\t}\r\n\t\tif ($iline[$dd] eq \"netmask\") {\r\n\t\t    $if_info{'interfacenetmask'} = $iline[$dd + 1];\r\n\t\t}\r\n\t\tif ($iline[$dd] eq \"broadcast\") {\r\n\t\t    $if_info{'interfacebroadcast'} = $iline[$dd + 1];\r\n\t\t}\r\n\r\n\t\t$dd++;\r\n\t    }\r\n\r\n\t    push(@{$i{'interfacestuff'}},\\%if_info);\r\n\t}\r\n\r\n\t$n++;\r\n    }\r\n\r\n    if (defined $i{'interfacename'}) {\r\n\tmy(%ii) = %i;\r\n\r\n\tpush(@netinterfaces,\\%ii);\r\n    }\r\n}\r\n\r\nif ($major_os eq \"AIX\") {\r\n    my($e);\r\n    my(@l);\r\n    my($this_if);\r\n    my($this_network);\r\n    my($this_mac);\r\n    my(@m);\r\n    my(%macs);\r\n    my($m);\r\n    my($junk);\r\n    my(@junk);\r\n\r\n    $e = `netstat -in`;\r\n\r\n    @l = split(\"\\n\",$e);\r\n\r\n    foreach (@l) {\r\n\tmy(@ll);\r\n\r\n\tforeach $m (split(/ /)) {\r\n\t    if ($m ne \"\") {\r\n\t\tpush(@ll,$m);\r\n\t    }\r\n\t}\r\n\r\n\tnext if ($ll[0] eq \"Name\");\r\n\tnext if ($ll[0] =~ /^lo/);\r\n\tnext if ($ll[2] !~ /^link/);\r\n\r\n\t@m = split(/\\./,$ll[3]);\r\n\r\n\t$macs{$ll[0]} = sprintf(\"%02x:%02x:%02x:%02x:%02x:%02x\",$m[0],$m[1],$m[2],$m[3],$m[4],$m[5],$m[6]);\r\n    }\r\n\r\n    foreach (@netinterfaces) {\r\n\tif (defined $macs{$_->{'interfacename'}} &&\r\n\t    ! defined $_->{'interfacemacaddress'}) {\r\n\t    $_->{'interfacemacaddress'} = $macs{$_->{'interfacename'}};\r\n\t}\r\n    }\r\n}\r\n\r\nif ($major_os eq \"HP-UX\") {\r\n    my($e);\r\n    my(@l);\r\n    my($n);\r\n    my($ni);\r\n    my(%i);\r\n    my($hmacaddr);\r\n    my($iname);\r\n    my($snap);\r\n\r\n    $e = `/etc/lanscan -ai`;\r\n\r\n    @l = split(\"\\n\",$e);\r\n\r\n    foreach (@l) {\r\n\tmy(%ii);\r\n\r\n\tchop;\r\n\r\n\t($hmacaddr,$iname,$snap) = split(/ /);\r\n\r\n\t$ii{'interfacename'} = $iname;\r\n\r\n\tif ($hmacaddr =~ /^0x([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])([0-9A-F][0-9A-F])/) {\r\n\t    $ii{'interfacemacaddress'} = lc(\"$1:$2:$3:$4:$5:$6\");\r\n\t}\r\n\r\n\tpush(@netinterfaces,\\%ii);\r\n    }\r\n\r\n    foreach $ni (@netinterfaces) {\r\n\t$iname = $ni->{'interfacename'};\r\n\r\n\t$e = `/etc/ifconfig $iname 2>&1`;\r\n\r\n\t@l = split(\"\\n\",$e);\r\n\t$n = 0;\r\n\r\n\twhile ($n <= $#l) {\r\n\t    if ($l[$n] =~ /inet /) {\r\n\t\tmy(@iline);\r\n\t\tmy($iaddress);\r\n\t\tmy($inm);\r\n\t\tmy($ibcast);\r\n\t\tmy($dd);\r\n\r\n\t\t@iline = split(/ /,$l[$n]);\r\n\t\t$dd = 0;\r\n\t\twhile ($dd <= $#iline) {\r\n\t\t    if ($iline[$dd] =~ /inet$/) {\r\n\t\t\tif ($iline[$dd + 1] ne \"0.0.0.0\") {\r\n\t\t\t    $ni->{'interfaceipaddress'} = $iline[$dd + 1];\r\n\t\t\t}\r\n\t\t    }\r\n\t\t    if ($iline[$dd] eq \"netmask\") {\r\n\t\t\tif ($iline[$dd + 1] ne \"0\") {\r\n\t\t\t    $ni->{'interfacenetmask'} = '0x' . $iline[$dd + 1];\r\n\t\t\t}\r\n\t\t    }\r\n\t\t    if ($iline[$dd] eq \"broadcast\") {\r\n\t\t\t$ni->{'interfacebroadcast'} = $iline[$dd + 1];\r\n\t\t    }\r\n\r\n\t\t    $dd++;\r\n\t\t}\r\n\t    }\r\n\r\n\t    $n++;\r\n\t}\r\n    }\r\n}\r\n\r\nif ($major_os eq \"Linux\") {\r\n    my($e);\r\n    my(@l);\r\n    my($n);\r\n    my(%i);\r\n\r\n    $e = `/sbin/ifconfig`;\r\n\r\n    @l = split(\"\\n\",$e);\r\n    $n = 0;\r\n\r\n    while ($n <= $#l) {\r\n\tif ($l[$n] =~ /Link encap:/) {\r\n\t    my(@fline);\r\n\t    my($iname);\r\n\t    my($hc);\r\n\r\n\t    if (defined $i{'interfacename'}) {\r\n\t\tmy(%ii) = %i;\r\n\r\n\t\tpush(@netinterfaces,\\%ii);\r\n\t    }\r\n\r\n\t    @fline = split(/ /,$l[$n]);\r\n\t    $iname = $fline[0];\r\n\r\n\t    if ($iname !~ /^lo/) {\r\n\t\t$i{'interfacename'} = $iname;\r\n\t    } else {\r\n\t\tundef $i{'interfacename'};\r\n\t    }\r\n\t    undef $i{'interfaceipaddress'};\r\n\t    undef $i{'interfacenetmask'};\r\n\t    undef $i{'interfacebroadcast'};\r\n\t    undef $i{'interfacemacaddress'};\r\n\r\n\t    $hc = 0;\r\n\t    while ($hc <= $#fline) {\r\n\t\tif ($fline[$hc] eq \"HWaddr\") {\r\n\t\t    if ($fline[$hc + 1] ne \"\") {\r\n\t\t\t$i{'interfacemacaddress'} = lc($fline[$hc + 1]);\r\n\t\t    }\r\n\t\t    last;\r\n\t\t}\r\n\r\n\t\t$hc++;\r\n\t    }\r\n\t}\r\n\r\n\tif ($l[$n] =~ /inet addr:/ &&\r\n\t    defined $i{'interfacename'}) {\r\n\t    my(@iline);\r\n\t    my($iaddress);\r\n\t    my($inm);\r\n\t    my($ibcast);\r\n\t    my($dd);\r\n\r\n\t    @iline = split(/ /,$l[$n]);\r\n\t    $dd = 0;\r\n\t    while ($dd <= $#iline) {\r\n\t\tif ($iline[$dd] =~ /^addr:/) {\r\n\t\t    my($t) = $iline[$dd];\r\n\r\n\t\t    $t =~ s/addr://g;\r\n\t\t    $i{'interfaceipaddress'} = $t;\r\n\t\t}\r\n\t\tif ($iline[$dd] =~ /^Mask:/) {\r\n\t\t    my($t) = $iline[$dd];\r\n\r\n\t\t    $t =~ s/Mask://g;\r\n\t\t    $i{'interfacenetmask'} = $t;\r\n\t\t}\r\n\t\tif ($iline[$dd] =~ /^Bcast:/) {\r\n\t\t    my($t) = $iline[$dd];\r\n\r\n\t\t    $t =~ s/Bcast://g;\r\n\t\t    $i{'interfacebroadcast'} = $t;\r\n\t\t}\r\n\r\n\t\t$dd++;\r\n\t    }\r\n\t}\r\n\r\n\t$n++;\r\n    }\r\n\r\n    if (defined $i{'interfacename'}) {\r\n\tmy(%ii) = %i;\r\n\r\n\tpush(@netinterfaces,\\%ii);\r\n    }\r\n\r\n    foreach (@netinterfaces) {\r\n\tif (! defined $_->{'interfacemacaddress'}) {\r\n\t    my($iname) = $_->{'interfacename'} . \".info\";\r\n\t    if ( -e \"/proc/net/nicinfo/$iname\" ) {\r\n\t\tmy($line);\r\n\t\tmy(@f);\r\n\r\n\t\topen(I,\"/proc/net/nicinfo/$iname\");\r\n\t\twhile ($line = <I>) {\r\n\t\t    if ($line =~ /^Current_HWaddr\\W*([0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f]:[0-9a-f][0-9a-f])$/) {\r\n\t\t\t$_->{'interfacemacaddress'} = $1;\r\n\t\t\tlast;\r\n\t\t    }\r\n\t\t}\r\n\t\tclose I;\r\n\t    }\r\n\t}\r\n    }\r\n}\r\n\r\nif ($#netinterfaces > -1) {\r\n    my(@ni);\r\n    my($d);\r\n\r\n    foreach (@netinterfaces) {\r\n\tif (defined $_->{'interfacestuff'}) {\r\n\t    foreach $d (@{$_->{'interfacestuff'}}) {\r\n\t\tmy(%ah);\r\n\r\n\t\t%ah = %{$_};\r\n\r\n\t\tif (defined $d->{'interfaceipaddress'}) {\r\n\t\t    $ah{'interfaceipaddress'} = $d->{'interfaceipaddress'};\r\n\t\t}\r\n\t\tif (defined $d->{'interfacenetmask'}) {\r\n\t\t    $ah{'interfacenetmask'} = $d->{'interfacenetmask'};\r\n\t\t}\r\n\t\tif (defined $d->{'interfacebroadcast'}) {\r\n\t\t    $ah{'interfacebroadcast'} = $d->{'interfacebroadcast'};\r\n\t\t}\r\n\r\n\t\tpush(@ni,\\%ah);\r\n\t    }\r\n\t} else {\r\n\t    push(@ni,$_);\r\n\t}\r\n    }\r\n\r\n    foreach (@ni) {\r\n\tprint \"<netinterface>\\n\";\r\n\tprint \"<interfacename>$_->{'interfacename'}</interfacename>\\n\";\r\n\tif (defined $_->{'interfaceipaddress'}) {\r\n\t    print \"<interfaceipaddress>$_->{'interfaceipaddress'}</interfaceipaddress>\\n\";\r\n\t}\r\n\tif (defined $_->{'interfacenetmask'}) {\r\n\t    print \"<interfacenetmask>$_->{'interfacenetmask'}</interfacenetmask>\\n\";\r\n\t}\r\n\tif (defined $_->{'interfacebroadcast'}) {\r\n\t    print \"<interfacebroadcast>$_->{'interfacebroadcast'}</interfacebroadcast>\\n\";\r\n\t}\r\n\tif (defined $_->{'interfacemacaddress'}) {\r\n\t    print \"<interfacemacaddress>$_->{'interfacemacaddress'}</interfacemacaddress>\\n\";\r\n\t}\r\n\tprint \"</netinterface>\\n\";\r\n    }\r\n}\r\n\r\n\r\n# cpus, memory, etc...\r\n\r\nmy($total_memory);\r\nmy(@san_devices);\r\nmy(%san_stuff);\r\nmy(@cpus);\r\nmy(@cpusfrequency);\r\n\r\nif ( -e \"/var/run/dmesg.boot\" ) {\r\n    open(DMESG,\"/var/run/dmesg.boot\");\r\n    while (<DMESG>) {\r\n\tchop;\r\n\r\n\tif (/^total memory = /) {\r\n\t    my(@v);\r\n\r\n\t    @v = split(/ /);\r\n\t    $total_memory = $v[$#v - 1];\r\n\t}\r\n\r\n\tif (/^cpu[0-9]: /) {\r\n\t    if (/mhz/i) {\r\n\t\tmy($c) = $_;\r\n\t\tmy($v);\r\n\t\tmy(@v);\r\n\r\n\t\t$c =~ s/^cpu[0-9]: //;\r\n\t\tpush(@cpus,$c);\r\n\r\n\t\tforeach $v (split(/,/,$c)) {\r\n\t\t    if ($v =~ /mhz/i) {\r\n\t\t\t$v =~ s/^[ ]*//g;\r\n\t\t\t@v = split(/ /,$v);\r\n\t\t\tpush(@cpusfrequency,$v[0]);\r\n\t\t    }\r\n\t\t}\r\n\t    }\r\n\t}\r\n    }\r\n    close DMESG;\r\n}\r\n\r\nif ( -e \"/proc/cpuinfo\" ) {\r\n    open(CPUINFO,\"/proc/cpuinfo\");\r\n    while (<CPUINFO>) {\r\n\tchop;\r\n\r\n\tif (/^model name.*: (.*)$/) {\r\n\t    push(@cpus,$1);\r\n\t}\r\n\r\n\tif (/^cpu MHz.*: (.*)$/) {\r\n\t    push(@cpusfrequency,$1);\r\n\t}\r\n    }\r\n    close CPUINFO;\r\n}\r\n\r\nif ( -e \"/proc/meminfo\" ) {\r\n    open(MEMINFO,\"/proc/meminfo\");\r\n    while (<MEMINFO>) {\r\n\tchop;\r\n\r\n\tif (/^Mem\\:[\\W]*([0-9]*)[\\W]/) {\r\n\t    my($t) = $1;\r\n\r\n\t    $total_memory = $t / 1024 / 1024;\r\n\r\n\t    last;\r\n\t}\r\n    }\r\n    close MEMINFO;\r\n}\r\n\r\nif ($major_os eq \"AIX\") {\r\n    my($e);\r\n    my($processor_name);\r\n    my($available);\r\n    my(@junk);\r\n    my(@processor_names);\r\n    my(%processor_stuff);\r\n    my($attribute);\r\n    my($value);\r\n\r\n    $e = `lsdev -C -F 'name,status' -c processor`;\r\n\r\n    foreach (split(\"\\n\",$e)) {\r\n\t($processor_name,$available) = split(/,/);\r\n\tif ($available eq \"Available\") {\r\n\t    push(@processor_names,$processor_name);\r\n\t}\r\n    }\r\n\r\n    foreach (@processor_names) {\r\n\tmy($v);\r\n\r\n\t$e = `lsattr -E -F 'attribute,value' -l $_`;\r\n\r\n\tforeach $v (split(\"\\n\",$e)) {\r\n\t    ($attribute,$value) = split(/,/,$v);\r\n\t    $processor_stuff{$_}{$attribute} = $value;\r\n\t}\r\n    }\r\n\r\n    foreach (@processor_names) {\r\n\tmy(@s);\r\n\tmy($f);\r\n\r\n\t@s = ($_);\r\n\tpush(@s,$processor_stuff{$_}{'type'});\r\n\t$f = $processor_stuff{$_}{'frequency'} / 1000000;\r\n\tpush(@s,$f);\r\n\tpush(@s,\"MHZ\");\r\n\r\n\tpush(@cpus,join(' ',@s));\r\n\tpush(@cpusfrequency,$f);\r\n    }\r\n\r\n\r\n    my($memory_name);\r\n    my(@memory_names);\r\n    my(%memory_stuff);\r\n\r\n    $e = `lsdev -C -F 'name,status' -c memory`;\r\n\r\n    foreach (split(\"\\n\",$e)) {\r\n\t($memory_name,$available) = split(/,/);\r\n\tif ($available eq \"Available\" &&\r\n\t    $memory_name =~ /^mem[0-9]/) {\r\n\t    push(@memory_names,$memory_name);\r\n\t}\r\n    }\r\n\r\n    foreach (@memory_names) {\r\n\tmy($v);\r\n\r\n\t$e = `lsattr -E -F 'attribute,value' -l $_`;\r\n\r\n\tforeach $v (split(\"\\n\",$e)) {\r\n\t    ($attribute,$value) = split(/,/,$v);\r\n\t    $memory_stuff{$_}{$attribute} = $value;\r\n\t}\r\n    }\r\n\r\n    $total_memory = 0;\r\n    foreach (@memory_names) {\r\n\t$total_memory += $memory_stuff{$_}{'size'};\r\n    }\r\n\r\n    $e = `lsdev -C -F name -c disk`;\r\n\r\n    foreach (split(\"\\n\",$e)) {\r\n\tif (/^hdiskpower[0-9]/) {\r\n\t    push(@san_devices,$_);\r\n\t}\r\n    }\r\n\r\n    foreach (@san_devices) {\r\n\tmy($v);\r\n\r\n\t$e = `lsattr -E -F 'attribute,value' -l $_`;\r\n\r\n\tforeach $v (split(\"\\n\",$e)) {\r\n\t    ($attribute,$value) = split(/,/,$v);\r\n\t    $san_stuff{$_}{$attribute} = $value;\r\n\t}\r\n    }\r\n}\r\n\r\nif ($major_os eq \"HP-UX\") {\r\n    my($v);\r\n    my($c);\r\n    my($num_processors);\r\n    my($hp_processor_frequency);\r\n    my($hp_processor_type);\r\n    my($shp_processor_type);\r\n\r\n    $e = `/sbin/ioscan -kf -C disk`;\r\n\r\n    foreach $v (split(\"\\n\",$e)) {\r\n\tif ($v =~ /^disk[\\W]*([0-9]*)[\\W]*(.*[0-9])[\\W]*sdisk[\\W]*CLAIMED[\\W]*DEVICE[\\W]*EMC[\\W]*SYMMETRIX/) {\r\n\t    push(@san_devices,$2);\r\n\t}\r\n    }\r\n\r\n    $e = `/usr/local/bin/sudo-1.6.7p5/sudo /opt/ignite/bin/print_manifest 2> /dev/null`;\r\n\r\n    foreach $v (split(\"\\n\",$e)) {\r\n\tif ($v =~ /^[\\W]*Main Memory:[\\W]*([0-9]*) MB/) {\r\n\t    $total_memory = $1;\r\n\t}\r\n\r\n\tif ($v =~ /^[\\W]*Processors:[\\W]*([0-9]*)$/) {\r\n\t    $num_processors = $1;\r\n\t}\r\n\r\n\tif (defined $total_memory &&\r\n\t    defined $num_processors) {\r\n\t    last;\r\n\t}\r\n    }\r\n\r\n    if (! defined $num_processors) {\r\n\t$num_processors = 1;\r\n    }\r\n\r\n    $hp_processor_type = `getconf CPU_CHIP_TYPE`;\r\n    chop $hp_processor_type;\r\n    \r\n    if ($hp_processor_type eq \"\") {\r\n\t$hp_processor_type = 65535;\r\n    }\r\n\r\n    $hp_processor_type = $hp_processor_type >> 5;\r\n\r\n  CPU_TYPE: {\r\n      if ($hp_processor_type == 0xb) {\r\n\t  $shp_processor_type = \"PA7200\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0xd) {\r\n\t  $shp_processor_type = \"PA7100LC\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0xe) {\r\n\t  $shp_processor_type = \"PA8000\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0xf) {\r\n\t  $shp_processor_type = \"PA7300LC\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x10) {\r\n\t  $shp_processor_type = \"PA8200\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x11) {\r\n\t  $shp_processor_type = \"PA8500\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x12) {\r\n\t  $shp_processor_type = \"PA8600\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x13) {\r\n\t  $shp_processor_type = \"PA8700\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x14) {\r\n\t  $shp_processor_type = \"PA8800\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      if ($hp_processor_type == 0x15) {\r\n\t  $shp_processor_type = \"PA8750\";\r\n\t  last CPU_TYPE;\r\n      }\r\n\r\n      $shp_processor_type=\"PAXXXX\";\r\n  };\r\n\r\n    $e = `echo itick_per_tick/D | adb -k /stand/vmunix /dev/kmem | tail -1`;\r\n    chop $e;\r\n\r\n    if ($e =~ /[\\W]*([0-9]*)$/) {\r\n\t$hp_processor_frequency = $1;\r\n\t$hp_processor_frequency = $hp_processor_frequency / 10000;\r\n    }\r\n\r\n    $c = 0;\r\n\r\n    while ($c < $num_processors) {\r\n\t$cpus[$c] = $shp_processor_type;\r\n\t$cpusfrequency[$c] = $hp_processor_frequency;\r\n\r\n\t$c++;\r\n    }\r\n}\r\n\r\nif (defined $total_memory) {\r\n    print \"<totalmemorymb>$total_memory</totalmemorymb>\\n\";\r\n}\r\n\r\nif ($#san_devices > -1) {\r\n    foreach (@san_devices) {\r\n\tprint \"<sandevice>\\n\";\r\n\tprint \"<name>$_</name>\\n\";\r\n\tif (defined $san_stuff{$_}{'lun_id'}) {\r\n\t    print \"<lun>$san_stuff{$_}{'lun_id'}</lun>\\n\";\r\n\t}\r\n\tprint \"</sandevice>\\n\";\r\n    }\r\n}\r\n\r\nmy($n);\r\n\r\n$n = 0;\r\n\r\nwhile ($n <= $#cpus) {\r\n    print \"<cpu>\\n\";\r\n    print \"<cpuidentifier>$cpus[$n]</cpuidentifier>\\n\";\r\n    print \"<cpufrequencymhz>$cpusfrequency[$n]</cpufrequencymhz>\\n\";\r\n    print \"</cpu>\\n\";\r\n\r\n    $n++;\r\n}\r\n\r\n\r\n# file systems, etc ...\r\n\r\nmy($raw_df);\r\nmy(@fs_device);\r\nmy(%fs_total);\r\nmy(%fs_used);\r\nmy(%fs_free);\r\nmy(%original_fs_total);\r\nmy(%original_fs_used);\r\nmy(%original_fs_free);\r\nmy(%fs_mountpoint);\r\nmy($partial);\r\n\r\n# KByte portable POSIX assumed...  works for NetBSD, AIX, Linux, HP-UX\r\n$raw_df = `df -kP`;\r\n\r\nforeach (split(\"\\n\",$raw_df)) {\r\n    my(@v);\r\n    my(@nv);\r\n    my($v);\r\n\r\n    @v = split(/ /);\r\n\r\n    next if ($v[0] !~ /^\\/dev\\// && ! defined $partial);\r\n\r\n    if (defined $partial) {\r\n\tpush(@nv,$partial);\r\n\r\n\tundef $partial;\r\n    }\r\n\r\n    foreach $v (@v) {\r\n\tif ($v ne \"\") {\r\n\t    push(@nv,$v);\r\n\t}\r\n    }\r\n\r\n    if ($#nv == 0) {\r\n\t$partial = $nv[0];\r\n\r\n\tnext;\r\n    }\r\n\r\n    push(@fs_device,$nv[0]);\r\n    $fs_total{$nv[0]} = $nv[1] / 1000 / 1000;\r\n    $fs_used{$nv[0]} = $nv[2] / 1000 / 1000;\r\n    $fs_free{$nv[0]} = $nv[3] / 1000 / 1000;\r\n    $original_fs_total{$nv[0]} = $nv[1];\r\n    $original_fs_used{$nv[0]} = $nv[2];\r\n    $original_fs_free{$nv[0]} = $nv[3];\r\n    $fs_mountpoint{$nv[0]} = $nv[$#nv];\r\n}\r\n\r\nforeach (@fs_device) {\r\n    print \"<filesystem>\\n\";\r\n    print \"<devicename>$_</devicename>\\n\";\r\n    print \"<mountpoint>$fs_mountpoint{$_}</mountpoint>\\n\";\r\n    print \"<totalgb>$fs_total{$_}</totalgb>\\n\";\r\n    print \"<usedgb>$fs_used{$_}</usedgb>\\n\";\r\n    print \"<freegb>$fs_free{$_}</freegb>\\n\";\r\n    print \"<originaltotal>$original_fs_total{$_}</originaltotal>\\n\";\r\n    print \"<originalused>$original_fs_used{$_}</originalused>\\n\";\r\n    print \"<originalfree>$original_fs_free{$_}</originalfree>\\n\";\r\n    print \"</filesystem>\\n\";\r\n}\r\n\r\n# System services and processes\r\n\r\nmy(%system_services);\r\n\r\nundef $e;\r\n\r\nif ($major_os eq \"NetBSD\" ||\r\n    $major_os eq \"Linux\") {\r\n    $e = `ps -auxww 2> /dev/null`;\r\n}\r\n\r\nif ($major_os eq \"AIX\" ||\r\n    $major_os eq \"HP-UX\") {\r\n    $e = `ps -elf`;\r\n}\r\n\r\n@v = ();\r\n\r\nforeach (split(\"\\n\",$e)) {\r\n    push(@v,$_);\r\n}\r\n\r\nforeach (@v) {\r\n    if ($_ =~ /httpd/ ||\r\n\t$_ =~ /httpd2/) {\r\n\t$system_services{'apache'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /nfsd/ ||\r\n\t$_ =~ /nfskd/) {\r\n\t$system_services{'nfs'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /samba/) {\r\n\t$system_services{'samba'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /ftpd/) {\r\n\t$system_services{'ftpd'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /telnetd/) {\r\n\t$system_services{'telnetd'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /xntpd/ ||\r\n\t$_ =~ /ntpd/) {\r\n\t$system_services{'ntp'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /sshd/) {\r\n\t$system_services{'sshd'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /dsmcad/) {\r\n\t$system_services{'tsmacceptor'} = 'running';\r\n    }\r\n\r\n    if ($_ =~ /dsmc sched/) {\r\n\t$system_services{'tsmscheduler'} = 'running';\r\n    }\r\n}\r\n\r\nif ( -e \"/etc/inetd.conf\" ) {\r\n    open(INETDCONF,\"/etc/inetd.conf\");\r\n    while (<INETDCONF>) {\r\n\tif (/^ftp[ \t]/ &&\r\n\t    ! defined $system_services{'ftpd'}) {\r\n\t    $system_services{'ftpd'} = 'enabled';\r\n\t}\r\n\r\n\tif (/^telnet[ \t]/ &&\r\n\t    ! defined $system_services{'telnetd'}) {\r\n\t    $system_services{'telnetd'} = 'enabled';\r\n\t}\r\n\r\n\tif (/^ssh[ \t]/ &&\r\n\t    ! defined $system_services{'sshd'}) {\r\n\t    $system_services{'sshd'} = 'enabled';\r\n\t}\r\n\r\n\tif (/^shell[ \t]/) {\r\n\t    $system_services{'rsh'} = 'enabled';\r\n\t}\r\n\r\n\tif (/^login[ \t]/) {\r\n\t    $system_services{'rlogin'} = 'enabled';\r\n\t}\r\n\r\n\tif (/^exec[ \t]/) {\r\n\t    $system_services{'rexec'} = 'enabled';\r\n\t}\r\n    }\r\n    close INETDCONF;\r\n}\r\n\r\nif ( -e \"/etc/oratab\" ) {\r\n    if (! defined $system_services{'oracle'}) {\r\n\t$system_services{'oracle'} = 'enabled';\r\n    }\r\n}\r\n\r\nforeach (keys %system_services) {\r\n    print \"<systemservice>\\n\";\r\n    print \"<name>$_</name>\\n\";\r\n    print \"<state>$system_services{$_}</state>\\n\";\r\n    print \"</systemservice>\\n\";\r\n}\r\n\r\nprint \"</computer>\\n\";\r\n\r\n","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"10","active":"true","sys_updated_on":"2012-08-14 06:18:31","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/fbc37783ff101000dada361332f49d32","value":"fbc37783ff101000dada361332f49d32"},"sys_id":"806b5eb3ff141000dada361332f49dc0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_806b5eb3ff141000dada361332f49dc0","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-12 09:23:40","name":"GetVersionFile.js","sys_name":"GetVersionFile.js","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"  /**********************************************\r\n   * Use Service-now.com WMIAPI to gather stats\r\n   * This script requires the admin share (admin$) enabled and point to the windows system directory (like \\WINDOWS or \\WINNT).\r\n  ***********************************************/\r\n  var CMD_RETRIES = 3;\r\n  var FOR_READING = 1;\r\n  var OUTPUT_FILE = \"apdver_output\" + getGUID() + \".txt\";\r\n  var DEBUG = false;\r\n  var MAX_TIMEOUT = 60000; //60 seconds; This timeout dictates how long each command can run.\r\n\r\n  var scanner = getScanner();\r\n  if (scanner) \r\n      var output = run();\r\n\r\n  scanner.appendToRoot(\"output\", output);\r\n\r\n  /*******************************************\r\n   * Function definitions\r\n   ******************************************/\r\n  function run() {\r\n      var sysDir = \"C:\\\\WINDOWS\\\\system32\";\r\n      sysDir = setSystemDirectory(scanner.fetchTable(\"Win32_OperatingSystem\"));\r\n\r\n      dirPath = \"${versionFilePath}\";\r\n\r\n      // Running the command and pipe the output to a file and read the file back... \r\n      // the \"2>&1\" redirect both stdout and stderr to the file\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c more \\\"\" + dirPath + \"\\\" > %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE + \" 2>&1\");\r\n      var output = readFile(OUTPUT_FILE);\r\n\r\n      //Clean up the temp file created...\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c del %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE);\r\n\r\n      return output;\r\n  }\r\n\r\n  function setSystemDirectory(items) {\r\n      for(var i = 0; i < items.length; i++) {\r\n          var item = items[i];\r\n          sysDir = item.SystemDirectory;\r\n      }\r\n\r\n      return sysDir;\r\n  }\r\n\r\n  function executeCommand(command) {\r\n      for(var i = 0; i < CMD_RETRIES; i++) {\r\n          var oProcess = GetObject('winmgmts:\\\\\\\\' + gCurrentMachine + '\\\\root\\\\CIMV2:Win32_Process')\r\n          var oMethod = oProcess.Methods_.Item(\"Create\");\r\n          var oInParam = oMethod.InParameters.SpawnInstance_();\r\n          oInParam.CommandLine = command;\r\n\r\n          var oOutParam = oProcess.ExecMethod_(oMethod.Name, oInParam);\r\n          var retValue = oOutParam.ReturnValue;\r\n          var pid = oOutParam.ProcessID;\r\n\t  debug(\"Running command: \" + command);\r\n          debug(\"The return value is \" + retValue);\r\n          debug(\"The process ID is \" + pid);\r\n\r\n          //If the command returns successfully, let's get out of here...\r\n      \t  if (retValue == 0)  \r\n              break;\r\n       }\r\n       \r\n       waitForProcessComplete(pid); \r\n   }\r\n\r\n  function readFile(fileName) {\r\n      var fileObj = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n      try {\r\n          var objTextFile = fileObj.OpenTextFile(\"\\\\\\\\\" + gCurrentMachine + \"\\\\admin$\\\\temp\\\\\" + fileName, FOR_READING);\r\n          var output = objTextFile.ReadAll();\r\n          objTextFile.close();\r\n      } catch (e) {\r\n          return \"Exception in readFile: \" + e.message;\r\n      }\r\n\r\n      return output;\r\n  }\r\n\r\n  function waitForProcessComplete(pid) {\r\n      var myDate = new Date();\r\n      myDate.setTime(myDate.getTime()+MAX_TIMEOUT)\r\n\r\n      while (processExists(pid) == true && ((new Date()) < myDate)) \r\n           WScript.Sleep(100);\r\n  }\r\n\r\n  function processExists(pid) {\r\n      try {\r\n          var wql = \"SELECT * FROM Win32_Process WHERE ProcessId=\" + pid;\r\n\t  debug(\"Running wql query: \" + wql);\r\n          var procs = GetObject('WinMgmts:\\\\\\\\' + gCurrentMachine + \"\\\\root\\\\CIMV2\").ExecQuery(wql);\r\n          for (var en = new Enumerator(procs); !en.atEnd(); en.moveNext())\r\n              return true;\r\n\r\n          return false;\r\n      } catch (e) {\r\n          return false;\r\n      }\r\n  }\r\n \r\n  function debug(msg) {\r\n       if (DEBUG == true)\r\n           WScript.echo(msg);\r\n  }\r\n\r\n  /*** found in http://note19.com/2007/05/27/javascript-guid-generator/ ***/\r\n  function S4() {\r\n     return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n  }\r\n\r\n  function getGUID() {\r\n      return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n  }","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"// value script, input vars are command, name, parameters, and values; set answer\r\nanswer = '' + values.get('ip_addresses');\r\n","sys_mod_count":"8","active":"true","sys_updated_on":"2010-08-21 14:08:42","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/845331880a0a0bab008f5580d5b94a71","value":"845331880a0a0bab008f5580d5b94a71"},"sys_id":"845349b40a0a0bab00943e91114acf33","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_845349b40a0a0bab00943e91114acf33","sys_updated_by":"tom.dilatush","sys_created_on":"2010-06-29 15:29:09","name":"ip_addresses","sys_name":"ip_addresses","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"tom.dilatush","sys_policy":""},{"value_script":"","sys_mod_count":"7","active":"true","sys_updated_on":"2013-05-22 23:03:33","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/00555f3237130000dadacffbcfbe5d25","value":"00555f3237130000dadacffbcfbe5d25"},"sys_id":"893ecdad37630000dadacffbcfbe5ded","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_893ecdad37630000dadacffbcfbe5ded","sys_updated_by":"tim.broberg","sys_created_on":"2011-06-28 21:16:10","name":"oracle_listener.sh","sys_name":"oracle_listener.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"ORA_HOME=$1\r\nLISTENER=$2\r\nFAILED=0\r\nERR=\"\"\r\n\r\nget_config() {\r\n    CONFIG_PATH=\"${ORA_HOME}/network/admin/listener.ora\"\r\n    FAILED=`cat $CONFIG_PATH 1> /dev/null 2>&1; echo $?`\r\n    [ \"$FAILED\" != 0 ] && ERR=\"Could not read listener.ora: $CONFIG_PATH. $ERR\" && return\r\n    echo \"snc_listener.ora_contents=\"\r\n    cat $CONFIG_PATH\r\n}\r\n\r\nget_instances() {\r\n    ORACLE_HOME=$ORA_HOME\r\n    export ORACLE_HOME\r\n    TNS_ADMIN=${ORA_HOME}/network/admin\r\n    export TNS_ADMIN\r\n    INSTANCES=`${ORA_HOME}/bin/lsnrctl status $LISTENER 2>&1 | sed -ne 's/Instance \"\\(.*\\)\", status READY.*/\\1/p' | tr -d ' ' | uniq | tr '\\n' ' '`\r\n    [ \"$INSTANCES\" != \"\" ] && echo \"snc_ora_instances=$INSTANCES\" && return\r\n    FAILED=1\r\n    ERR=\"Unable to accurately determine listener<->instance relationships. $ERR\"\r\n}\r\n\r\nget_version() {\r\n    VERSION=`${ORA_HOME}/bin/lsnrctl status 2>&1 | grep Version | sed -ne 's/.*: Version \\([0-9.]*\\) .*/\\1/p'`\r\n    [ \"$VERSION\" != \"\" ] && echo \"snc_ora_version=$VERSION\" && return\r\n    VERSION=`echo $ORA_HOME | sed -ne 's/.*\\/\\([0-9.]*\\)\\/.*/\\1/p'`\r\n    [ \"$VERSION\" != \"\" ] && echo \"snc_ora_version=$VERSION\" && return\r\n    FAILED=1\r\n    ERR=\"Could not determine Oracle listener version. $ERR\"\r\n}\r\n\r\nget_version\r\nget_instances\r\nget_config\r\n[ \"$FAILED\" != 0 ] && echo \"snc_error=$ERR\"\r\necho \"listener_name=$LISTENER\"\r\nexit 0","sys_created_by":"ben.yukich","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2014-07-28 22:42:08","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/4d790c449f9221001e021a1cf67fcff4","value":"4d790c449f9221001e021a1cf67fcff4"},"sys_id":"89e05c849f9221001e021a1cf67fcf72","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_89e05c849f9221001e021a1cf67fcf72","sys_updated_by":"admin","sys_created_on":"2014-07-28 22:42:08","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"admin","sys_policy":""},{"value_script":"//Should be passed in by the probe that launches it.","sys_mod_count":"4","active":"true","sys_updated_on":"2012-03-12 05:42:43","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/a0962fd2ff701000dada361332f49dfa","value":"a0962fd2ff701000dada361332f49dfa"},"sys_id":"8e7e1196ff402000dada361332f49d8d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_8e7e1196ff402000dada361332f49d8d","sys_updated_by":"aleck.lin","sys_created_on":"2012-02-09 23:00:23","name":"envFilePath","sys_name":"envFilePath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"10","active":"true","sys_updated_on":"2012-08-10 00:59:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/7f41dd19ff401000dada361332f49de4","value":"7f41dd19ff401000dada361332f49de4"},"sys_id":"8fc077c3ff401000dada361332f49d6f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_8fc077c3ff401000dada361332f49d6f","sys_updated_by":"steve.bandow","sys_created_on":"2011-07-28 21:29:27","name":"envFinder.sh","sys_name":"envFinder.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n\r\nFILES=\"/etc/profile /etc/bashrc\"\r\n\r\nfor FILE in ${FILES}\r\n    do \r\n        [ -r ${FILE} ] && . ${FILE}\r\ndone\r\n\r\necho `env | grep APDCONF`","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2021-05-25 21:59:25","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5639e2d6ff10301036a2c787d53bf12c","value":"5639e2d6ff10301036a2c787d53bf12c"},"sys_id":"967a621aff10301036a2c787d53bf1a5","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_967a621aff10301036a2c787d53bf1a5","sys_updated_by":"nisan.barzion","sys_created_on":"2021-05-25 21:59:25","name":"wmi_smb_cleanup.ps1","sys_name":"wmi_smb_cleanup.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"Get-SmbSession -ClientComputerName '${midIPAddress}'| Close-SmbSession -Force ","sys_created_by":"nisan.barzion","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2019-03-06 17:14:11","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/478ebcaf93c31200c2fe705bb47ffb0c","value":"478ebcaf93c31200c2fe705bb47ffb0c"},"sys_id":"98f78999674c330018da6c706785efcb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_98f78999674c330018da6c706785efcb","sys_updated_by":"srikanth.nelapudi","sys_created_on":"2019-03-06 17:14:11","name":"disable_vm_tags_probe","sys_name":"disable_vm_tags_probe","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"srikanth.nelapudi","sys_policy":""},{"value_script":"command.trim();\r\nif (command.indexOf(\" \") > -1)\r\n    command ='\"'+command+'\"';\r\n\r\nanswer = command;\r\n\r\n\r\n\r\n\r\n\r\n\r\n","sys_mod_count":"2","active":"true","sys_updated_on":"2014-08-19 23:49:25","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/6275c330ef1221007f04b25495c0fbb9","value":"6275c330ef1221007f04b25495c0fbb9"},"sys_id":"9bc54b30ef1221007f04b25495c0fb5c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_9bc54b30ef1221007f04b25495c0fb5c","sys_updated_by":"admin","sys_created_on":"2014-07-31 19:48:01","name":"command","sys_name":"command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"6","active":"true","sys_updated_on":"2020-01-09 21:50:00","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/e643f2c2a9fe15610038fc84ebfc075a","value":"e643f2c2a9fe15610038fc84ebfc075a"},"sys_id":"a5c8944173833300d4c1b7385ef6a74e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_a5c8944173833300d4c1b7385ef6a74e","sys_updated_by":"benjamin.phan","sys_created_on":"2019-08-01 22:17:59","name":"linux_network.sh","sys_name":"linux_network.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\nnetworkInfo=`ifconfig -a 2> /dev/null && echo SNC_ROUTING_TABLE_SNC && route -n 2> /dev/null`\r\nif [ \"$?\" -eq \"0\" ]; then\r\n    echo \"net-tools output\"\r\n    echo \"$networkInfo\"\r\n    exit 0\r\nfi\r\nnetworkInfo=`ip address show 2> /dev/null && echo SNC_ROUTING_TABLE_SNC && ip route 2> /dev/null`\r\nif [ \"$?\" -eq \"0\" ]; then\r\n    echo \"iproute output\"\r\n    echo \"$networkInfo\"\r\n    exit 0\r\nfi\r\necho \"both net-tools and iproute commands failed\"\r\nexit 1","sys_created_by":"benjamin.phan","sys_policy":""},{"value_script":"","sys_mod_count":"3","active":"true","sys_updated_on":"2018-09-13 01:11:34","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/a7117dcca9fe156100afbcd624901028","value":"a7117dcca9fe156100afbcd624901028"},"sys_id":"a7122381a9fe156100ed13098a0acdd8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_a7122381a9fe156100ed13098a0acdd8","sys_updated_by":"benjamin.phan","sys_created_on":"2007-02-09 15:14:48","name":"cpus.sh","sys_name":"cpus.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"for i in `lsdev -C -F 'name,status' -c processor -S a`; do\r\n      PROC=`echo $i | cut -d \",\" -f1`\r\n      lsattr -E -F 'attribute,value' -l $PROC\r\ndone","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"52","active":"true","sys_updated_on":"2012-08-15 04:01:12","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/8a405889ff401000dada361332f49d51","value":"8a405889ff401000dada361332f49d51"},"sys_id":"aaa9236bef83200098d5925495c0fb47","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_aaa9236bef83200098d5925495c0fb47","sys_updated_by":"aleck.lin","sys_created_on":"2012-07-12 09:30:19","name":"GetEnvFiles.ps1","sys_name":"GetEnvFiles.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"    # Environment specified location\r\n    $envPath = '${envPath}'; \r\n    # Property specified location\r\n    $propertyPath = '${defaultPropertyPath}';\r\n\r\n    $res = $envPath.IndexOf('${')\r\n\r\n    if ($envPath -and ($res -ne 0)) {  #Make sure it's substituted correctly..\r\n        $dirPath = $envPath;\r\n    } else {\r\n        $dirPath = $propertyPath;\r\n    }\r\n\r\n    $dirPath = $dirPath.replace(\"\\\\\", \"\\\");  #Need it for the case where someone uses c:\\abc\r\n\r\n    $finalCommand = 'dir /w ' + '\"' + $dirPath + '\"';\r\n\r\n    launchProcess -computer $computer -cred $cred -command $finalCommand","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"13","active":"true","sys_updated_on":"2013-01-17 00:36:13","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3c5455d5ff401000dada361332f49de5","value":"3c5455d5ff401000dada361332f49de5"},"sys_id":"ab545999ff401000dada361332f49d33","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_ab545999ff401000dada361332f49d33","sys_updated_by":"steve.bandow","sys_created_on":"2011-07-22 23:34:25","name":"getEnvFiles.sh","sys_name":"getEnvFiles.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\nfor location\r\ndo\r\n  result=`ls $location 2> /dev/null`\r\n  if [ $? = 0 ]\r\n    then\r\n      echo Directory $location\r\n      echo $result\r\n      break\r\n  fi\r\ndone","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"29","active":"true","sys_updated_on":"2014-10-17 21:35:00","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/8e812c67df1221001e02a3cf6bf26303","value":"8e812c67df1221001e02a3cf6bf26303"},"sys_id":"ace12c67df1221001e02a3cf6bf26362","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_ace12c67df1221001e02a3cf6bf26362","sys_updated_by":"josh.gerbasi","sys_created_on":"2014-08-08 20:55:16","name":"mysqlconfig.ps1","sys_name":"mysqlconfig.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"$mysqlConfigPath = '${configFilePathVal}';\r\n$res = $mysqlConfigPath.IndexOf('${');\r\n#Make sure it's substituted correctly..\r\nif($mysqlConfigPath  -and ($res -ne 0)) {\r\n  $finalCommand = 'type \"' + $mysqlConfigPath + '\"';\r\n  launchProcess -computer $computer -cred $cred -command $finalCommand \r\n} else {\r\n  Write-Error \"Configuration file path not specified as part of running MySql process\"\r\n  Exit 4\r\n}\r\n","sys_created_by":"swapnesh.patel","sys_policy":""},{"value_script":"","sys_mod_count":"21","active":"true","sys_updated_on":"2012-08-14 08:29:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bd7f5717ff202000dada361332f49d01","value":"bd7f5717ff202000dada361332f49d01"},"sys_id":"aea82397ff202000dada361332f49ddf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_aea82397ff202000dada361332f49ddf","sys_updated_by":"aleck.lin","sys_created_on":"2012-03-09 08:09:23","name":"GetEnvFile.js","sys_name":"GetEnvFile.js","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"  /**********************************************\r\n   * Use Service-now.com WMIAPI to gather stats\r\n   * This script requires the admin share (admin$) enabled and point to the windows system directory (like \\WINDOWS or \\WINNT).\r\n  ***********************************************/\r\n  var CMD_RETRIES = 3;\r\n  var FOR_READING = 1;\r\n  var OUTPUT_FILE = \"apdenv_output\" + getGUID() + \".txt\";\r\n  var DEBUG = false;\r\n  var MAX_TIMEOUT = 60000; //60 seconds; This timeout dictates how long each command can run.\r\n\r\n  var scanner = getScanner();\r\n  if (scanner) \r\n      var output = run();\r\n\r\n  scanner.appendToRoot(\"output\", output);\r\n\r\n  /*******************************************\r\n   * Function definitions\r\n   ******************************************/\r\n  function run() {\r\n      var sysDir = \"C:\\\\WINDOWS\\\\system32\";\r\n      sysDir = setSystemDirectory(scanner.fetchTable(\"Win32_OperatingSystem\"));\r\n\r\n      dirPath = \"${envFilePath}\";\r\n\r\n      // Running the command and pipe the output to a file and read the file back... \r\n      // the \"2>&1\" redirect both stdout and stderr to the file\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c more \\\"\" + dirPath + \"\\\" > %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE );// + \" 2>&1\");\r\n      var output = readFile(OUTPUT_FILE);\r\n\r\n      //Clean up the temp file created...\r\n      executeCommand(sysDir + \"\\\\cmd.exe /c del %SystemRoot%\\\\temp\\\\\" + OUTPUT_FILE);\r\n\r\n      return output;\r\n  }\r\n\r\n  function setSystemDirectory(items) {\r\n      for(var i = 0; i < items.length; i++) {\r\n          var item = items[i];\r\n          sysDir = item.SystemDirectory;\r\n      }\r\n\r\n      return sysDir;\r\n  }\r\n\r\n  function executeCommand(command) {\r\n      for(var i = 0; i < CMD_RETRIES; i++) {\r\n          var oProcess = GetObject('winmgmts:\\\\\\\\' + gCurrentMachine + '\\\\root\\\\CIMV2:Win32_Process')\r\n          var oMethod = oProcess.Methods_.Item(\"Create\");\r\n          var oInParam = oMethod.InParameters.SpawnInstance_();\r\n          oInParam.CommandLine = command;\r\n\r\n          var oOutParam = oProcess.ExecMethod_(oMethod.Name, oInParam);\r\n          var retValue = oOutParam.ReturnValue;\r\n          var pid = oOutParam.ProcessID;\r\n\t  debug(\"Running command: \" + command);\r\n          debug(\"The return value is \" + retValue);\r\n          debug(\"The process ID is \" + pid);\r\n\r\n          //If the command returns successfully, let's get out of here...\r\n      \t  if (retValue == 0)  \r\n              break;\r\n       }\r\n       \r\n       waitForProcessComplete(pid); \r\n   }\r\n\r\n  function readFile(fileName) {\r\n      var fileObj = new ActiveXObject(\"Scripting.FileSystemObject\");\r\n      try {\r\n          var objTextFile = fileObj.OpenTextFile(\"\\\\\\\\\" + gCurrentMachine + \"\\\\admin$\\\\temp\\\\\" + fileName, FOR_READING);\r\n          var output = objTextFile.ReadAll();\r\n          objTextFile.close();\r\n      } catch (e) {\r\n          return \"Exception in readFile: \" + e.message;\r\n      }\r\n\r\n      return output;\r\n  }\r\n\r\n  function waitForProcessComplete(pid) {\r\n      var myDate = new Date();\r\n      myDate.setTime(myDate.getTime()+MAX_TIMEOUT)\r\n\r\n      while (processExists(pid) == true && ((new Date()) < myDate)) \r\n           WScript.Sleep(100);\r\n  }\r\n\r\n  function processExists(pid) {\r\n      try {\r\n          var wql = \"SELECT * FROM Win32_Process WHERE ProcessId=\" + pid;\r\n\t  debug(\"Running wql query: \" + wql);\r\n          var procs = GetObject('WinMgmts:\\\\\\\\' + gCurrentMachine + \"\\\\root\\\\CIMV2\").ExecQuery(wql);\r\n          for (var en = new Enumerator(procs); !en.atEnd(); en.moveNext())\r\n              return true;\r\n\r\n          return false;\r\n      } catch (e) {\r\n          return false;\r\n      }\r\n  }\r\n \r\n  function debug(msg) {\r\n       if (DEBUG == true)\r\n           WScript.echo(msg);\r\n  }\r\n\r\n  /*** found in http://note19.com/2007/05/27/javascript-guid-generator/ ***/\r\n  function S4() {\r\n     return (((1+Math.random())*0x10000)|0).toString(16).substring(1);\r\n  }\r\n\r\n  function getGUID() {\r\n      return (S4()+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+\"-\"+S4()+S4()+S4());\r\n  }","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2021-06-29 05:38:12","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/1e4b29618f071200c2fe0b5437bdee19","value":"1e4b29618f071200c2fe0b5437bdee19"},"sys_id":"b0a95391078d301019f0782a9cd300f6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_b0a95391078d301019f0782a9cd300f6","sys_updated_by":"admin","sys_created_on":"2021-06-29 05:38:12","name":"delete_stale_relationships","sys_name":"delete_stale_relationships","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"5","active":"true","sys_updated_on":"2019-09-17 09:23:38","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/eb95df760ab301550015543188996362","value":"eb95df760ab301550015543188996362"},"sys_id":"b3bd9ff777f37300660eb8a42b10611d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_b3bd9ff777f37300660eb8a42b10611d","sys_updated_by":"durgaprasad.cp","sys_created_on":"2019-09-17 08:29:16","name":"TLS_keepOriginalCertificate","sys_name":"TLS_keepOriginalCertificate","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"false","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"2","active":"false","sys_updated_on":"2007-07-11 13:50:04","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/b577856b0a00002d005798ea7529a40b","value":"b577856b0a00002d005798ea7529a40b"},"sys_id":"b57813b70a00002d00b3376ee9375d46","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_b57813b70a00002d00b3376ee9375d46","sys_updated_by":"glide.maint","sys_created_on":"2007-07-11 13:29:25","name":"memory.sh","sys_name":"memory.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"for i in `lsdev -C -F 'name,status' -c memory|grep '^mem'`; do\r\n      PROC=`echo $i | cut -d \",\" -f1`\r\n      lsattr -E -F 'attribute,value' -l $PROC\r\ndone","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"1","active":"true","sys_updated_on":"2023-08-06 15:02:37","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/56d52b5fc3101200d8d4bea192d3ae55","value":"56d52b5fc3101200d8d4bea192d3ae55"},"sys_id":"b782e823c3901200d8d4bea192d3aeba","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_b782e823c3901200d8d4bea192d3aeba","sys_updated_by":"now.discovery.content","sys_created_on":"2015-12-18 23:26:29","name":"lsof.sh","sys_name":"lsof.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\n\n# Check if lsof is available\nif command -v lsof > /dev/null 2>&1; then\n    # If lsof is available, run the command\n    lsof_output=`sudo lsof -iTCP -n -P -F pcnfT -z$1`\n\n    # Check if lsof_output is empty, if not, print the output and exit\n    if [ -n \"$lsof_output\" ]; then\n        echo \"lsof output\"\n        echo \"$lsof_output\"\n        exit 0\n    fi\nfi\n\n# If lsof is not present print pfiles output\necho \"pfiles output\"\n\n# Get the list of process IDs with socket information\npids=`sudo pgrep -z$1 | sort -n`\n\n# Loop through each PID and process the output for S_IFSOCK\nfor pid in $pids; do\n    pfiles_output=`sudo pfiles $pid 2>/dev/null | awk '/S_IFSOCK/ {\n        sock=\"f\"$1;\n\t\ti=0;\n\t\ttcp=0;\n\t\twhile(getline) {\n\t\t\t\tarray[i] = $0;\n\t\t\t\ti = i +1;\n\t\t\t\tif(array[i]~/SOCK_STREAM/)\n\t\t\t\ttcp=1;\n\t\t}\n\t\tfor(j=0;(j<=i && tcp=1);j++){\n\t\t\tif(array[j]~/sockname: AF_INET/ || array[j]~/sockname: AF_INET6/) {\n\t\t\t\tprintf substr(sock, 1, length(sock)-1)\"\\n\";\n\t\t\t\tprintf \"n\"array[j];\n\t\t\t\tif (array[j+1]~/peername: AF_INET/ || array[j+1]~/peername: AF_INET6/) {\n\t\t\t\t\tprintf \"->\"array[j+1]\"\\n\";\n\t\t\t\t\tprint \"TST=NOT_LISTEN\";\n\t\t\t\t} else {\n\t\t\t\t\tprintf \"\\n\";\n\t\t\t\t\tprint \"TST=LISTEN\";\n\t\t\t\t}\n\t\t\t}\t\n\t\t}\n\t} NR==1'`\n    pid_line=\"p${pid}\"\n    command_line=`echo \"$pfiles_output\" | sed -n 's/^[0-9]\\{1,\\}: *\\([^ ]\\{1,\\}\\).*$/c \\1/p'`\n    fd_line=`echo \"$pfiles_output\" | sed '1d'`\n\n    # Skip the loop iteration if fd_line is empty\n    if [ -z \"$fd_line\" ]; then\n        continue\n    fi\n    \n    formatted_output=\"$pid_line\\n$command_line\\n$fd_line\"\n    \n    # Print the formatted output if it's not empty\n    if [ -n \"$formatted_output\" ]; then\n        echo \"$formatted_output\"\n    fi\ndone\n\n# Loop through each PID and process the output for S_IFCHR\nfor pid in $pids; do\n    pfiles_output=`sudo pfiles $pid 2>/dev/null | awk '/S_IFCHR/ {\n        sock=\"f\"$1;\n        while(getline) {\n            if($0~/sockname: AF_INET/ || $0~/sockname: AF_INET6/) {\n                socket_info=$0;\n                getline;\n                if($0~/tcp/) {\n                    print substr(sock, 1, length(sock)-1);\n                    split(sock, a, \" \");\n                    printf \"n \" socket_info;\n                    print \"\\nTST=LISTEN\";\n                    break;\n                } \n                break;\n            }\n        }\n    } NR==1'`\n    pid_line=\"p${pid}\"\n    command_line=`echo \"$pfiles_output\" | sed -n 's/^[0-9]\\{1,\\}: *\\([^ ]\\{1,\\}\\).*$/c \\1/p'`\n    fd_line=`echo \"$pfiles_output\" | sed '1d'`\n\n    # Skip the loop iteration if fd_line is empty\n    if [ -z \"$fd_line\" ]; then\n        continue\n    fi\n    \n    formatted_output=\"$pid_line\\n$command_line\\n$fd_line\"\n    \n    # Print the formatted output if it's not empty\n    if [ -n \"$formatted_output\" ]; then\n        echo \"$formatted_output\"\n    fi\ndone\n        ","sys_created_by":"josh.gerbasi","sys_policy":""},{"value_script":"var g = new GetDiscoverySchedulerConfigPerProbe();answer = g.getConfig('d1e11ba20a0a0b26008b521d6fed01fb', g_probe.getCorrelator());","sys_mod_count":"1","active":"true","sys_updated_on":"2024-10-17 20:24:05","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/d1e11ba20a0a0b26008b521d6fed01fb","value":"d1e11ba20a0a0b26008b521d6fed01fb"},"sys_id":"c0b155f168515610f8771357430460d7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_c0b155f168515610f8771357430460d7","sys_updated_by":"now.discovery_infra","sys_created_on":"2024-10-17 20:23:55","name":"running_process_filter","sys_name":"running_process_filter","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"now.discovery_infra","sys_policy":""},{"value_script":"","sys_mod_count":"62","active":"true","sys_updated_on":"2014-12-05 23:44:34","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/f3301ebfc3a12100d8d4bea192d3ae0a","value":"f3301ebfc3a12100d8d4bea192d3ae0a"},"sys_id":"c18c5673c3e12100d8d4bea192d3aeaf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_c18c5673c3e12100d8d4bea192d3aeaf","sys_updated_by":"josh.gerbasi","sys_created_on":"2014-07-03 17:43:36","name":"findcat.sh","sys_name":"findcat.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"ppid=$1\r\nconfig=$2\r\n\r\nfunction find_config {\r\n    # If -Dweblogic.RootDirectory parameter is not given, try and find the domain directory\r\n    # By using the PPID of the process (which usually ties back to the startWeblogic.sh script)\r\n    if [ \"$config\" == \"undefined\" ]; then\r\n        full_path=`ps -p $ppid -o cmd= | awk '{print $2}'`\r\n        # $full_path will be null if the PPID ties back to the init process\r\n        if [ -n \"$full_path\" ]; then\r\n            if test -e $full_path; then\r\n                cut_sh=`dirname $full_path`\r\n                cut_bin=`dirname $cut_sh`\r\n                final_path=\"$cut_bin/config/config.xml\"\r\n                if test -e $final_path; then\r\n                    cat $final_path\r\n                else\r\n                    echo \"$final_path is not a valid path. Could not find the config.xml file for this weblogic server.\" 1>&2\r\n                    return 1\r\n                fi\r\n            else\r\n                # This is the case when the current instance is a Managed Server \r\n                # and its PPID does not tie back to the startWeblogic.sh script. \r\n                # We should be grabbing the information from the related AdminServer \r\n                # so this will happen occasionally and is expected behavior.\r\n                echo \"This is not an AdminServer\"\r\n            fi\r\n        else\r\n            echo \"Could not find the config.xml file for this weblogic server, this server was probably started via NodeManager and not through a dedicated startup script.\" 1>&2\r\n            return 1\r\n        fi\r\n    else\r\n        if test -e \"$config\"; then\r\n            cat $config\r\n        else\r\n            echo \"$config is not a valid path. Make sure that the -Dweblogic.RootDirectory parameter is set correctly.\" 1>&2\r\n            return 1\r\n        fi\r\n    fi\r\n}\r\n\r\nfind_config","sys_created_by":"josh.gerbasi","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2018-10-18 00:42:11","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/df4905820a0a0ba500b7ea51b460326c","value":"df4905820a0a0ba500b7ea51b460326c"},"sys_id":"c2efed54c75523008ec44c4c8a976301","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_c2efed54c75523008ec44c4c8a976301","sys_updated_by":"nisan.barzion","sys_created_on":"2018-10-18 00:42:11","name":"output_format","sys_name":"output_format","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"json","sys_created_by":"nisan.barzion","sys_policy":""},{"value_script":"// Should be overwritten by parameter passing from Unix - Find ADI XML sensor. Default to blank path.\r\nanswer = \" \"","sys_mod_count":"12","active":"true","sys_updated_on":"2012-04-23 17:07:31","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3c5455d5ff401000dada361332f49de5","value":"3c5455d5ff401000dada361332f49de5"},"sys_id":"c6fd34acff101000dada361332f49d60","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_c6fd34acff101000dada361332f49d60","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-02 00:15:07","name":"envPath","sys_name":"envPath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"answer = command.substring(0, command.lastIndexOf('/')) + '/jps';","sys_mod_count":"0","active":"true","sys_updated_on":"2014-07-28 22:20:31","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/4d790c449f9221001e021a1cf67fcff4","value":"4d790c449f9221001e021a1cf67fcff4"},"sys_id":"cbfa40849f9221001e021a1cf67fcf95","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_cbfa40849f9221001e021a1cf67fcf95","sys_updated_by":"admin","sys_created_on":"2014-07-28 22:20:31","name":"jps","sys_name":"jps","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2018-06-20 00:20:45","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/a2bada940a0a0b6100d5e020a828fdeb","value":"a2bada940a0a0b6100d5e020a828fdeb"},"sys_id":"cc4c23e1733213000045c7a18af6a7c9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_cc4c23e1733213000045c7a18af6a7c9","sys_updated_by":"admin","sys_created_on":"2018-06-20 00:20:45","name":"result_format","sys_name":"result_format","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"JSON","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2020-07-01 14:26:41","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3c0cc4729f2221001e021a1cf67fcf70","value":"3c0cc4729f2221001e021a1cf67fcf70"},"sys_id":"ce19f3e0c7311010b92c660703c26074","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_ce19f3e0c7311010b92c660703c26074","sys_updated_by":"nitinlaxmanbha.gupta","sys_created_on":"2020-07-01 14:26:41","name":"established_session_timeout","sys_name":"established_session_timeout","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"1000","sys_created_by":"admin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"true","sys_updated_on":"2017-08-18 19:11:26","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/da438c7d5352320023bdae4a16dc3482","value":"da438c7d5352320023bdae4a16dc3482"},"sys_id":"ce78bf5b53200300e06462f706dc34cb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_ce78bf5b53200300e06462f706dc34cb","sys_updated_by":"hardik.modi","sys_created_on":"2017-08-18 19:11:26","name":"filter_kernel_procs","sys_name":"filter_kernel_procs","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"hardik.modi","sys_policy":""},{"value_script":"","sys_mod_count":"48","active":"true","sys_updated_on":"2014-08-16 01:23:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/ea4afa31df5221001e02a3cf6bf263e2","value":"ea4afa31df5221001e02a3cf6bf263e2"},"sys_id":"d0abbe31df5221001e02a3cf6bf26335","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_d0abbe31df5221001e02a3cf6bf26335","sys_updated_by":"swapnesh.patel","sys_created_on":"2014-08-04 00:19:42","name":"mysqlinfo.ps1","sys_name":"mysqlinfo.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"$mysqlExePath = '${commandVal}';\r\n$res = $mysqlExePath.IndexOf('${');\r\n#Make sure it's substituted correctly..\r\nif($mysqlExePath  -and ($res -ne 0)) {\r\n  $finalCommand = '\"' + $mysqlExePath + '\" -V';\r\n  launchProcess -computer $computer -cred $cred -command $finalCommand\r\n} else {\r\n  Write-Error \"MySql exe path not specified as part of running MySql process\";\r\n  Exit 4\r\n}","sys_created_by":"swapnesh.patel","sys_policy":""},{"value_script":"//Typically overwritten by parameter passing from Windows - Get APD Env File Content\r\n","sys_mod_count":"8","active":"true","sys_updated_on":"2012-05-04 20:19:21","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/fbc37783ff101000dada361332f49d32","value":"fbc37783ff101000dada361332f49d32"},"sys_id":"d76b1ebbffd01000dada361332f49d04","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_d76b1ebbffd01000dada361332f49d04","sys_updated_by":"aleck.lin","sys_created_on":"2011-08-12 09:22:31","name":"versionFilePath","sys_name":"versionFilePath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"83","active":"true","sys_updated_on":"2017-07-11 00:48:30","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/de069b6d0a0a0b7800d600a7ff5a8724","value":"de069b6d0a0a0b7800d600a7ff5a8724"},"sys_id":"de07453f0a0a0b7800d06b79122bbc5b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_de07453f0a0a0b7800d06b79122bbc5b","sys_updated_by":"hardik.modi","sys_created_on":"2007-10-26 20:36:18","name":"sqlinfo.ps1","sys_name":"sqlinfo.ps1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"# MSSQL Probe\r\n# Retrieves the available Microsoft SQL Server instances and databases for the specified hostname. Will cycle through all known\r\n# IP addresses if the specified source IP doesn't work.\r\n# Command-line usage: sqlinfo.ps1 [ip] <instance name>\r\n# Requirements:\r\n#   * Windows Credentials:\r\n#     * Must have access to target machine and MSSQL\r\n#     * If origin and target are in different domains: the origin domain must trust the target domain\r\n#       and the credential must be allowed local logon for the origin\r\n#   * If the target is Windows 2000 (or Windows 2003 in some cases) it will need Remote Registry enabled.\r\n#   * The origin must have the MSSQL management library (SMO) installed.\r\n#   * Redirection:\r\n#     * All usages of the out-null cmdlet were replaced with equivalent redirects to $null\r\n#     * If two probes were running simultaneously they trigger an IO Exception contending for the out-null file\r\n#     * The error commonly occurred in fetchSqlServerProcesses, but all usage of out-null was replaced\r\n# Copyright 2013 ServiceNow\r\n# @author Roy Laurie <roy.laurie@service-now.com>\r\n##############################################################################################################\r\n#set error action preference to Stop so in the event of error from command, it should throw exception. Instead of just log and continue. Continue is the default option if not specified.\r\n$ErrorActionPreference='Stop'\r\n\r\nfunction loadAssembly($name) {\r\n    if (![reflection.assembly]::LoadWithPartialName($name)) {\r\n        Write-Error -Message \"Unable to load assembly $name. The SMO library must be installed on the MID Server host\" -Category NotInstalled\r\n        Exit 4\r\n    }\r\n}\r\n\r\nloadAssembly(\"Microsoft.SqlServer.Smo\")\r\nloadAssembly(\"Microsoft.SqlServer.SqlWmiManagement\")\r\n\r\n##\r\n# InstanceInfo Class\r\nAdd-Type @'\r\npublic class InstanceInfo {\r\n    public string instanceName;\r\n    public string errorMessage;\r\n    public string serviceName;\r\n    public string version;\r\n    public string engineEdition;\r\n    public string edition;\r\n    public string servicepack;\r\n    public int port;\r\n    public bool portDynamic;\r\n    public int pid;\r\n    public string[] databases;\r\n}\r\n'@\r\n\r\n##\r\n# Fetches all processes running on the target machine that are running 'sqlserver'\r\n# @return WMI:Win32_Service\r\nfunction fetchSqlServerProcesses($ip) {\r\n    try {\r\n        if ($cred) {\r\n            $processes = Get-WmiObject -ComputerName $ip Win32_Process -filter \"Name='sqlservr.exe'\" -Credential $cred 2>$null\r\n        } else {\r\n            $processes = Get-WmiObject -ComputerName $ip Win32_Process -filter \"Name='sqlservr.exe'\" 2>$null\r\n        }\r\n        \r\n        if (!$processes) {\r\n            return @()\r\n        }\r\n        \r\n        $processes = $processes | Sort-Object -Property ProcessId 2>$null\r\n        if (!$processes) {\r\n            return @()\r\n        }\r\n        \r\n        # Note the cred/nocred gwmi call nested in the foreach cmdlet\r\n        $processes = $processes |\r\n            ForEach-Object -process {\r\n                if ($cred) {\r\n                    Get-WmiObject -ComputerName $ip Win32_Service -filter (\"ProcessId=\" + $_.ProcessId) -Credential $cred\r\n                } else {\r\n                    Get-WmiObject -ComputerName $ip Win32_Service -filter (\"ProcessId=\" + $_.ProcessId)\r\n                }\r\n            } 2>$null\r\n\r\n        if (!$processes) {\r\n            return @()\r\n        }\r\n        \r\n        return $processes\r\n    } catch [System.Exception] {\r\n        return @()\r\n    }\r\n}\r\n\r\n##\r\n# Retrieves the IP addresses for the specified Windows machine\r\nfunction fetchIpAddresses($targetIp) {\r\n    if ($cred) {\r\n        $adapters = Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName $sourceIp -Credential $cred\r\n    } else {\r\n        $adapters = Get-WmiObject Win32_NetworkAdapterConfiguration -ComputerName $sourceIp\r\n    }\r\n    \r\n    [array]$ipAddresses = $adapters |\r\n        Where { $_.IPAddress } |\r\n        Select -Expand IPAddress |\r\n        Where { $_ -notlike '*:*' -and $_ -notlike '169.254.*' -and $_ -notlike '0.0.0.0' }\r\n    \r\n    return $ipAddresses\r\n}\r\n\r\n## \r\n# Determine netbios name by passing the provided ip to nbstat and then retrieving the first unique result \r\n# ignore any exceptions and just return empty string, will be handled by sensor as needed \r\n# @return string \r\nfunction resolveNetbiosName($ipAddresses) { \r\n    for ($i = 0; $i -lt $ipAddresses.Length; ++$i) { \r\n        $ip = $ipAddresses[$i] \r\n        try { \r\n            $netbiosNames = nbtstat -A $ip | Where {$_ -match \"UNIQUE\" } \r\n            $netbiosNames[0] -replace \"^\\s+\", \"\" -match \"^[\\w\\-]+\" >$null \r\n            $netbiosName = $matches[0] \r\n\r\n            if ($netbiosName) { \r\n                return $netbiosName \r\n            } \r\n        } catch [System.Exception] { \r\n            continue \r\n        } \r\n    } \r\n    return \"\"\r\n} \r\n\r\n##\r\n# Fetch the MSSQL instance names for a target\r\n# if SMO fails attempt to use registry (always for Win2000, sometimes forWin2003)\r\n# @return string[]\r\nfunction fetchInstanceNames($ip) {\r\n    try {\r\n        $instanceNames = fetchInstanceNamesBySmo $ip\r\n        if ($instanceNames) {\r\n            return $instanceNames\r\n        }\r\n    } catch [System.Exception] {\r\n        # Microsoft.SqlServer.Management.Smo.SmoException thrown if Win2000\r\n        # just fallback to registry\r\n    }\r\n    \r\n    try {\r\n        $instanceNames = fetchInstancesNamesByRegistry $ip\r\n    } catch [System.Exception] {\r\n        return $null\r\n    }\r\n\r\n    return $instanceNames\r\n}\r\n\r\n##\r\n# Fetch the MSSQL instance names for a target by using remote SMO WMI calls.\r\n# @return string[]\r\nfunction fetchInstanceNamesBySmo($ip) {\r\n    # Must use correct ProviderArchitecture to get ServerInstances\r\n    $architectures = @(\"Default\", \"Use64Bit\", \"Use32Bit\")\r\n    foreach ($architecture in $architectures) {\r\n        $manager = New-Object Microsoft.SqlServer.Management.Smo.WMI.ManagedComputer($ip)\r\n        if ($cred) {\r\n            $manager.ConnectionSettings.Username = $cred.Username\r\n            $manager.ConnectionSettings.SetPassword($cred.GetNetWorkCredential().Password)\r\n        }\r\n        $manager.ConnectionSettings.ProviderArchitecture = $architecture\r\n        $manager.Initialize() >$null\r\n        \r\n        $instanceNames = @()\r\n        foreach ($instance in $manager.ServerInstances) {\r\n            $instanceNames += $instance.Name\r\n        }\r\n        \r\n        if ($instanceNames.Length -gt 0) {\r\n            return $instanceNames\r\n        }\r\n    }\r\n    \r\n    return $null\r\n}\r\n\r\n##\r\n# Fetch the MSSQL instance names for at target by using remote registry calls.\r\n# @return string[]\r\nfunction fetchInstancesNamesByRegistry($ip) {\r\n    $HKLM = 2147483650\r\n    $reg = getRegistryProvider\r\n    $instanceNames = ($reg.GetMultiStringValue($HKLM, \"SOFTWARE\\Microsoft\\Microsoft SQL Server\", \"InstalledInstances\")).sValue\r\n\r\n    return $instanceNames\r\n}\r\n\r\n##\r\n# Get the instance info based on the instance name... Also adding cluster support by Looping through each IP address\r\nfunction fetchInstanceInfoForKnownName ($targetInstanceName, $ipAddresses) {\r\n    for ($i = 0; $i -lt $ipAddresses.Length; ++$i) {\r\n        $ip = $ipAddresses[$i]\r\n        $info = fetchInstanceInfo $targetInstanceName $ip\r\n        if ($info.errorMessage) {\r\n            continue\r\n        }\r\n        return $info\r\n    }\r\n    # If we couldn't get anything, then return null\r\n    return $null\r\n}\r\n\r\n##\r\n# Connects to the MSSQL instance via SMO and queries it for meta information and database names\r\n# @return InstanceInfo\r\nfunction fetchInstanceInfo ($instanceName, $ip) {\r\n    $info = New-Object InstanceInfo\r\n    $info.instanceName = $instanceName\r\n\r\n    # determine tcp port\r\n    fillPortInfo $info $ip $instanceName\r\n  \r\n    $dbInstance = $ip + \"\\\" + $instanceName\r\n    if ($info.port) {\r\n        $dbInstance += \",\" + $info.port\r\n    }\r\n\r\n    # connection settings\r\n    $server = New-Object Microsoft.SqlServer.Management.Smo.Server($dbinstance)\r\n    if ($cred) {\r\n        $server.ConnectionContext.LoginSecure = $true\r\n        $server.ConnectionContext.ConnectAsUser = $true\r\n        $server.ConnectionContext.ConnectAsUsername = formatConnectAsUsername $cred.Username\r\n        $server.ConnectionContext.ConnectAsUserPassword = $cred.GetNetWorkCredential().Password\r\n    }\r\n\r\n    $success = $false\r\n    try {\r\n        $success = $server.Initialize()\r\n    } catch [System.Exception] {\r\n        $info.errorMessage = \"Error connecting to MSSQL instance: \" + $_.Exception.Message\r\n        $success = $false\r\n    }\r\n\r\n    if ($success -ne $true) {\r\n        if (!$info.errorMessage) {\r\n            $info.errorMessage = \"Unable to connect to MSSQL instance \" + $dbInstance\r\n        }\r\n        return $info\r\n    }\r\n\r\n    $info.serviceName = $server.ServiceName\r\n    $info.version = $server.VersionString\r\n    $info.edition = $server.Information.Edition\r\n    $info.engineEdition = $server.Information.EngineEdition\r\n    $info.servicepack = $server.ProductLevel\r\n\r\n    # fetch databases\r\n    foreach($db in $server.Databases) {\r\n        $info.databases += $db.Name\r\n    }\r\n\r\n\r\n    return $info\r\n}\r\n\r\nfunction fillPortInfo([InstanceInfo] $info, $ip, $instanceName) {    \r\n    try {\r\n        fillPortInfoBySmo $info $ip $instanceName\r\n        return  # assume success if no exception\r\n    } catch [System.Exception] {\r\n        # Microsoft.SqlServer.Management.Smo.SmoException thrown if Win2000\r\n        # do not catch explicitly, just fallback to registry\r\n    }\r\n    \r\n    try {\r\n        fillPortInfoByRegistry $info $ip $instanceName\r\n    } catch [System.Exception] {\r\n        # do nothing\r\n    }\r\n}\r\n\r\nfunction fillPortInfoBySmo([InstanceInfo] $info, $ip, $instanceName) {\r\n    if ($cred) {\r\n        $manager = New-Object Microsoft.SqlServer.Management.Smo.WMI.ManagedComputer($ip,\r\n            $cred.Username, $cred.GetNetWorkCredential().Password)\r\n    } else {\r\n        $manager = New-Object Microsoft.SqlServer.Management.Smo.WMI.ManagedComputer($ip)\r\n    }\r\n\r\n    $ipallProps = $manager.ServerInstances[$instanceName].ServerProtocols['Tcp'].IPAddresses['IPAll'].IPAddressProperties\r\n    if ($ipallProps['TcpDynamicPorts'].Value -eq '') {\r\n        $info.port = $ipallProps['TcpPort'].Value\r\n    } else {\r\n        $info.port = $ipallProps['TcpDynamicPorts'].Value\r\n        $info.portDynamic = $true\r\n    }\r\n}\r\n\r\nfunction fillPortInfoByRegistry([InstanceInfo] $info, $ip, $instanceName) {\r\n    $HKLM = 2147483650\r\n    $reg = getRegistryProvider\r\n    $port = ($reg.GetStringValue($HKLM, \"SOFTWARE\\Microsoft\\MSSQLServer\\\" + $instanceName + \"\\SuperSocketNetLib\\Tcp\", \"TcpPort\")).sValue\r\n    if ($port) {\r\n        $info.port = $port\r\n    }\r\n}\r\n\r\n##\r\n# Used by fetchInstancesNamesByRegistry and fillPortInfoByRegistry\r\nfunction getRegistryProvider() {\r\n    if ($cred) {\r\n        $reg = Get-WmiObject -List -Namespace root\\default -ComputerName $ip -Credential $cred | Where-Object {$_.Name -eq \"StdRegProv\"}\r\n    } else {\r\n        $reg = Get-WmiObject -List -Namespace root\\default -ComputerName $ip | Where-Object {$_.Name -eq \"StdRegProv\"}\r\n    }\r\n    \r\n    return $reg\r\n}\r\n\r\n##\r\n# Convert username to UPN format, required for SMO Windows Authentication\r\n# e.g. domain\\username to username@domain\r\nfunction formatConnectAsUsername ($origuser) {\r\n    $usersplit = $origuser.split(\"\\\")\r\n    if ($usersplit.Length -ne 2) {\r\n        return $origuser\r\n    }\r\n    $domain = $usersplit[0]\r\n    $username = $usersplit[1]\r\n\r\n    if ($domain -match \"\\.\" ) {\r\n        return $username\r\n    }\r\n    \r\n    return $username + \"@\" + $domain\r\n}\r\n\r\n##\r\n# Determine the PID for a given instance name\r\nfunction getPIDByInstanceName ($instanceName, $processes) {\r\n    foreach ($process in $processes) {\r\n        $indexedName = \"MSSQL$\" + $instanceName\r\n        if ($process.Name -eq $instanceName -or $process.Name -eq $indexedName) {\r\n            return $process.ProcessId\r\n        }\r\n    }\r\n    return \"\"\r\n}\r\n\r\n##\r\n# Construct the return payload XML based on the instance and database info\r\nfunction constructXMLPayload($instanceInfoList, $netbiosName, $warnings) {\r\n    # initialize result xml\r\n    $xmlDoc = New-Object System.Xml.XmlDocument\r\n    $xmlRoot = $xmlDoc.CreateElement(\"sqlserver\")\r\n    $xmlDoc.AppendChild($xmlRoot) >$null\r\n\r\n    if ($instanceInfoList.count -gt 0) {\r\n      # netbiosName\r\n      $node = $xmlDoc.CreateElement('netbiosName')\r\n      $node.AppendChild($xmlDoc.CreateTextNode($netbiosName)) >$null\r\n      $xmlRoot.AppendChild($node) >$null\r\n    } else {\r\n        # output warnings only when we couldn't retrieve an instance\r\n        foreach ($warning in $warnings) {\r\n            $node = $xmlDoc.CreateElement('warning')\r\n            $node.AppendChild($xmlDoc.CreateTextNode($warning)) >$null\r\n            $xmlRoot.AppendChild($node) >$null\r\n        }   \r\n    }\r\n    \r\n    foreach ($info in $instanceInfoList) {\r\n        # initialize mssql instance xml\r\n        $xmlInstance = $xmlDoc.CreateElement(\"sqlInstance\")\r\n        $xmlRoot.AppendChild($xmlInstance) >$null\r\n        # instanceName\r\n        $node = $xmlDoc.CreateElement('instanceName')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.instanceName)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n\r\n        # error\r\n        if ($info.errorMessage) {\r\n            $node = $xmlDoc.CreateElement('error')\r\n            $node.AppendChild($xmlDoc.CreateTextNode($info.errorMessage)) >$null\r\n            $xmlInstance.AppendChild($node) >$null\r\n            continue\r\n        }       \r\n\r\n        # serviceName\r\n        $node = $xmlDoc.CreateElement('serviceName')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.serviceName)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # version\r\n        $node = $xmlDoc.CreateElement('version')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.version)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # Service Pack level\r\n        $node = $xmlDoc.CreateElement('servicepack')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.servicepack)) | out-null\r\n        $xmlInstance.AppendChild($node) | out-null\r\n        # port\r\n        $node = $xmlDoc.CreateElement('port')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.port)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # portDynamic\r\n        $node = $xmlDoc.CreateElement('portDynamic')\r\n        if ($info.portDynamic) {\r\n            $portDynamic = 'true'\r\n        } else {\r\n            $portDynamic = 'false'\r\n        }\r\n        \r\n        $node.AppendChild($xmlDoc.CreateTextNode($portDynamic)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # pid\r\n        $node = $xmlDoc.CreateElement('pid')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.pid)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # engineEdition\r\n        $node = $xmlDoc.CreateElement('engineEdition')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.engineEdition)) >$null\r\n        $xmlInstance.AppendChild($node) >$null\r\n        # edition\r\n        $node = $xmlDoc.CreateElement('edition')\r\n        $node.AppendChild($xmlDoc.CreateTextNode($info.edition)) >$null\r\n        $xmlInstance.AppendChild($node) >$null        \r\n        \r\n        $xmlDatabases = $xmlDoc.CreateElement('databases')\r\n        $xmlInstance.AppendChild($xmlDatabases) >$null\r\n\r\n        foreach($db in $info.databases) {\r\n            if (!$db) {\r\n                continue\r\n            }\r\n\r\n            $xmlDb = $xmlDoc.CreateElement(\"database\")\r\n            $xmlDb.setAttribute(\"id\", $db)\r\n            $xmlDatabases.AppendChild($xmlDb) >$null\r\n        }\r\n    }\r\n\r\n    return $xmlDoc\r\n}\r\n\r\nfunction main($sourceIp, $targetInstanceName) {\r\n    if (!$sourceIp) {\r\n        Write-Error \"Usage: sqlinfo.ps1 [ip] <instance name>\"\r\n        Exit 4\r\n    }\r\n\r\n    $warnings = @()\r\n    $instanceInfoList = @()\r\n    [array]$ipAddresses = fetchIpAddresses $sourceIp\r\n\r\n    # If we have the instance name, then let's just fetch it!\r\n    if ($targetInstanceName) {\r\n        $info = fetchInstanceInfoForKnownName $targetInstanceName $ipAddresses\r\n        if ($info) {\r\n            $instanceInfoList += $info\r\n        } else {\r\n            # no info returned for the known instance name\r\n            # if there is a credential, exit so others can be attempted or fallback to the MID user\r\n            # if there is no credential, we have failed with the MID user and can go no further\r\n            if ($cred) {\r\n                Exit 1\r\n            } else {\r\n                Exit 3\r\n            }\r\n        }\r\n    } else {    \r\n        # If we do not have instance name (which is typical of SQL 2000), \r\n        # then we need to find them, query them and then correlate them by PID\r\n        \r\n        #Initialize the IP address we're going to go after...\r\n        $ipAddr = $sourceIp\r\n        \r\n        # Get a list of instance names...    \r\n        for ($i = 0; $i -lt $ipAddresses.Length; ++$i) {\r\n            $ip = $ipAddresses[$i]\r\n            $instanceNames = fetchInstanceNames $ip\r\n            if (!$instanceNames) {\r\n                $warnings += \"Unable to list MSSQL instances for \" + $ip\r\n                continue\r\n            }\r\n            $ipAddr = $ip  # Use this IP for fetching instance info\r\n            break\r\n        }\r\n        \r\n        # Query each of the instanceNames and find the corresponding PID for each\r\n        # Get the list of processes first...\r\n        # Assume success if we have at least one good one\r\n        $success = $false\r\n        $processes = fetchSqlServerProcesses $sourceIp  \r\n        foreach ($instanceName in $instanceNames) {\r\n            $info = fetchInstanceInfo $instanceName $ipAddr\r\n            if (!$info.errorMessage) {\r\n                $success = $true\r\n                $info.pid = getPIDByInstanceName $instanceName $processes\r\n            }\r\n            $instanceInfoList += $info\r\n        }\r\n\r\n        # no info returned for any instance names, or no instance names were returned\r\n        # if there is a credential, exit so others can be attempted or fallback to the MID user\r\n        # if there is no credential, we have failed with the MID user and can go no further\r\n        # otherwise return all results\r\n        if ($success -ne $true) {\r\n            if ($cred) {\r\n                Exit 1\r\n            } else {\r\n                Exit 3\r\n            }\r\n        }\r\n    }\r\n    \r\n    # Get the netbios name of the target (it's used to help with constructing a MSSQL record that resembles the real naming convention)\r\n    $netbiosName = resolveNetbiosName $ipAddresses\r\n\r\n    # construct the payload and print the result\r\n    $xmlDoc = constructXMLPayload $instanceInfoList $netbiosName $warnings\r\n    Write-Host $xmlDoc.innerXml\r\n    Exit 0\r\n}\r\n\r\nif ($args.length -gt 0) { # from command line\r\n    $computer = $args[0]\r\n    $instanceName = $args[1]\r\n} else { # from probe\r\n    # $computer already set as global\r\n    $instanceName = \"${sqlInstance}\" # from g_probe_parameters set by process classifier\r\n}\r\n\r\nmain $computer $instanceName","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"//Typically overwritten by parameter passing from Windows - Get APD Environment Files","sys_mod_count":"8","active":"true","sys_updated_on":"2012-05-04 20:16:59","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bd7f5717ff202000dada361332f49d01","value":"bd7f5717ff202000dada361332f49d01"},"sys_id":"e197af57ff202000dada361332f49d2b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_e197af57ff202000dada361332f49d2b","sys_updated_by":"aleck.lin","sys_created_on":"2012-03-09 08:05:47","name":"envFilePath","sys_name":"envFilePath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"answer = gs.getProperty(\"glide.discovery.apd.unix_location\", \" \")\r\n","sys_mod_count":"14","active":"true","sys_updated_on":"2012-05-04 20:14:15","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/3c5455d5ff401000dada361332f49de5","value":"3c5455d5ff401000dada361332f49de5"},"sys_id":"e1d57676ff401000dada361332f49d16","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_e1d57676ff401000dada361332f49d16","sys_updated_by":"aleck.lin","sys_created_on":"2011-07-27 22:28:15","name":"defaultPropertyPath","sys_name":"defaultPropertyPath","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"aleck.lin","sys_policy":""},{"value_script":"","sys_mod_count":"74","active":"true","sys_updated_on":"2020-03-17 21:55:23","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/bf9baaa1ef1221007f04b25495c0fb76","value":"bf9baaa1ef1221007f04b25495c0fb76"},"sys_id":"e5a4ba33ef1221007f04b25495c0fb34","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_e5a4ba33ef1221007f04b25495c0fb34","sys_updated_by":"benjamin.phan","sys_created_on":"2014-08-10 02:15:15","name":"GetMongoDBVersion.command","sys_name":"GetMongoDBVersion.command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"\"$SNC_cmdPath\" -version","sys_created_by":"jing.yang","sys_policy":""},{"value_script":"","sys_mod_count":"21","active":"true","sys_updated_on":"2014-03-04 23:50:25","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/e71ace1ba9fe1561011c33bdea27a1bb","value":"e71ace1ba9fe1561011c33bdea27a1bb"},"sys_id":"e71b500fa9fe15610086c16086c8582d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_e71b500fa9fe15610086c16086c8582d","sys_updated_by":"sky.lin","sys_created_on":"2007-02-22 01:40:31","name":"suntype.sh","sys_name":"suntype.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n# $Id$\r\n# \r\n# hosttype: Figure out what sort of sun this is.\r\n#\r\n# Version 2.1   August 14, 1998\r\n# John DiMarco <jdd@cs.toronto.edu>\r\n# University of Toronto, Computer Science Laboratory (CSLab)\r\n\r\nPATH=\"/bin:/usr/bin:/usr/etc:/usr/sbin:/usr/ucb\"; export PATH\r\nVERBOSE=\"VERBOSE yes\"\t\r\nPROMINFO=\"yes\"\t\t# use prtconf/devinfo.  Otherwise use hostid only.\r\n\r\n# awk has a byte limit of 2559 bytes on older solaris machines\r\n# default to using nawk if available. nawk has a limit of 1073741823 bytes.\r\nAWKCMD=\"awk\"\r\nif hash nawk 2>/dev/null; then\r\n  AWKCMD=\"nawk\"\r\nfi\r\n\r\n# output system configuration directly\r\n/usr/sbin/prtconf | grep 'System Configuration:'\r\n\r\nwhile getopts vH c; do\r\n  case $c in\r\n  v) VERBOSE=\"VERBOSE yes\" ;;\r\n  H) PROMINFO=\"no\" ;;\r\n  *) echo \"Usage $0 [-v][-H]\" 1>&2; exit 3 ;;\r\n  esac\r\ndone\r\nexport VERBOSE PROMINFO\r\n\r\n# misc function definitions\r\nget_hostid() {\r\n  # Output the host id, if possible\r\n  echo HOSTID\r\n  if [ -x /usr/bin/hostid ]; then\r\n    /usr/bin/hostid 2>/dev/null\r\n  elif [ -x /usr/ucb/hostid ]; then\r\n    /usr/ucb/hostid 2>/dev/null\r\n  fi\r\n}\r\nget_prominfo() {\r\n  # Output the output of prtconf/devinfo -pv, if possible\r\n  echo PROMINFO\r\n  if [ \"yes\" = \"$PROMINFO\" ]; then\r\n    if [ -x /usr/sbin/prtconf ]; then\r\n      /usr/sbin/prtconf -pv 2>/dev/null\r\n    elif [ -x /usr/etc/devinfo ]; then\r\n      /usr/etc/devinfo -pv 2>/dev/null\r\n    fi\r\n  fi\r\n}\r\n\r\n(\r\necho $VERBOSE\r\ncat <<END_OF_TABLE\r\n#\r\n# ID = model code from hostid.\r\n# DEV_NAME = Sun internal development name\r\n# SYSTEM_NAME = System name\r\n# MODEL_NAME = Model name(s)\r\n# CLK = CLock speed\r\n# CPU_NAME = name of CPU (Integer Unit)\r\n# \t\tNB: cpu name in table may not always be correct.\r\n# \r\n# This data is overridden by prtconf/devinfo -pv data, if available.\r\n#\r\nID DEV_NAME    SYSTEM_NAME      MODEL_NAME           CLK  CPU_NAME (IU)\r\n## ########### ################ #################### #### #################\r\n01 unknown     2/100            100U,150U,120,170    10   Motorola,MC68010\r\n02 unknown     2/50             50,130,160           10   Motorola,MC68010\r\n11 Carrera     3/100            75,140,150,160,180   16.7 Motorola,MC68020\r\n12 M25         3/50             _NA                  12.5 Motorola,MC68020\r\n13 Sirius      3/200            260,280              25   Motorola,MC68020\r\n14 Prism       3/110            _NA                  16.7 Motorola,MC68020\r\n17 Ferrari     3/60             _NA                  20   Motorola,MC68020\r\n18 unknown     3E               _NA                  ??.? Motorola,MC68020\r\n21 Sunrise     4/200            260,280              16.7 Fujitsu,MB86903\r\n22 Cobra       4/100            110,150              14.2 Fujitsu,SF9010\r\n23 Stingray    4/300            310,330,370,390      25   Cypress,CY7C601\r\n24 Sunray      4/400            470,490              33   Cypress,CY7C601\r\n31 RoadRunner  386i             150,250              ??.? Intel,80386DX\r\n32 Apache      486i             unknown              ??.? Intel,80486DX\r\n41 Pegasus     3/400            470,490              33   Motorola,MC68030\r\n42 Hydra       3/80             _NA                  20   Motorola,MC68030\r\n51 Campus      SPARCstation-1   4/60                 20   LSI,L64801\r\n52 Phoenix     SPARCstation-IPC 4/40                 25   LSI,L64801\r\n53 CampusB     SPARCstation-1+  4/65                 25   LSI,L64801\r\n54 OffCampus   SPARCstation-SLC 4/20                 20   LSI,L64801\r\n55 Calvin      SPARCstation-2   4/75                 40   Cypress,CY7C601\r\n56 NodeWarrior SPARCstation-ELC 4/25                 33   Weitek,W8601\r\n57 Hobbes      SPARCstation-IPX 4/50                 40   Weitek,W8601\r\n61 Polaris     4E               _NA                  ??.? unknown,SPARC\r\n71 Galaxy      SPARCsystem-600  _MBUS                40   variable\r\n72 Campus2     SPARCstation-10  _MBUS                40   variable\r\n72 Kodiak      SPARCstation-20  _MBUS                50   variable\r\n80 Sunergy     SPARCclassic     4/15                 50   TI,TMS390S10\r\n80 Sunergy     SPARCstation-LX  4/30                 50   TI,TMS390S10\r\n80 Aurora      SPARCstation-5   _SS5                 ??.? unknown,SPARC\r\n80 Perigee     SPARCstation-4   _SS4                 ??.? unknown,SPARC\r\n80 Gypsy       unknown          Voyager              60   unknown,SPARC\r\n80 Scorpion    SPARCserver-1000 _XDBUS               ??.? variable\r\n80 Dragon      SPARCserver-2000 _XDBUS               ??.? variable\r\n# There's no simple way to distinguish between the three different kinds\r\n# of Ultra-1 systems, or the four different kinds of Ultra enterprise systems.\r\n80 Neutron(U1)/Electron(U1E)/Dublin(U150) Ultra-1 Ultra1 ??.? SUNW,UltraSPARC\r\n80 Pulsar      Ultra-2          Ultra2               ??.? variable\r\n80 Quark       Ultra-30         Ultra30              ??.? variable\r\n80 Deuterium   Ultra-60         Ultra60              ??.? variable\r\n80 Javelin     Ultra-250        Ultra250             ??.? variable\r\n80 Tazmo       Ultra-4          Ultra450             ??.? variable\r\n80 Duraflame(E3k)/Campfire(E4/5k)/Sunfire(E6k)/Duraflame+(EX500) Ultra-Enterprise EXX00 ??.? variable\r\n80 Starfire    Ultra-Enterprise-10000 Enterprise10000 ??.? variable\r\n80 Darwin      Ultra-5_10       Ultra5,Ultra10       ??.? variable\r\nEND_OF_TABLE\r\nget_hostid\r\nget_prominfo\r\n) | sed -e '/translations:/d' -e '/post-to-obp:/d' | $AWKCMD '\r\nBEGIN {\r\n  #\r\n  # SS10/20/600 type table:\r\n  # Maps from module clock rate to system name.\r\n  #\r\n  mtype[33]=2 \r\n  mtype[36]=3\r\n  mtype[40]=4\r\n  mtype[40.3]=4\r\n  mtype[50]=5\r\n  mtype[60]=6\r\n  mtype[75]=7\r\n  mtype[85]=8\r\n  #\r\n  # Some constants\r\n  #\r\n  MB=1048576\r\n  KB=1024\r\n  M=1000000\r\n  ROSS=\"Ross 605 SPARC\"\r\n  #\r\n  # Maps from reported processor name to generic processor name\r\n  #\r\n  ptype[\"Motorola,MC68010\"]=\"68K\"\r\n  ptype[\"Motorola,MC68020\"]=\"68K\"\r\n  ptype[\"Motorola,MC68030\"]=\"68K\"\r\n  ptype[\"Intel,80386DX\"]=\"x86\"\r\n  ptype[\"Intel,80486DX\"]=\"x86\"\r\n  ptype[\"Fujitsu,MB86900IU\"]=\"SPARC\"\r\n  ptype[\"Fujitsu,SF9010IU\"]=\"SPARC\"\r\n  ptype[\"Cypress,CY7C601\"]=\"SPARC\"\r\n  ptype[\"Weitek,W8601\"]=\"SPARC\"\r\n  ptype[\"LSI,L64811\"]=\"SPARC\"\r\n  ptype[\"TI,TMS390S10\"]=\"MicroSPARC I\"\r\n  ptype[\"TI,TMS390Z50\"]=\"SuperSPARC\"\r\n  ptype[\"TI,TMS390Z55\"]=\"SuperSPARC\"\r\n  ptype[\"Cypress,CY605\"]=ROSS\r\n  ptype[\"Ross,RT605\"]=ROSS\r\n  ptype[\"Ross,RT625\"]=\"HyperSPARC\"\r\n  ptype[\"SUNW,UltraSPARC\"]=\"UltraSPARC\"\r\n  ptype[\"SUNW,UltraSPARC-II\"]=\"UltraSPARC\"\r\n  ptype[\"SUNW,UltraSPARC-IIi\"]=\"UltraSPARC\"\r\n}\r\n$1~/^#/ { continue }\r\n$1==\"VERBOSE\" { verbose=$2; continue }\r\n$1==\"ID\" || $1==\"PROMINFO\" || $1==\"HOSTID\" { mode=$1; continue }\r\nmode==\"ID\" {\r\n  #\r\n  # read a line of the ID table\r\n  #\r\n  nlines++\r\n  hostidcode[nlines]=$1\r\n  id[$1]=nlines\r\n  devname[nlines]=$2\r\n  sysname[nlines]=$3\r\n  model[nlines]=$4\r\n  clk[nlines]=$5\r\n  cpu[nlines]=$6\r\n  nm[$3]=nlines\r\n}\r\nmode==\"HOSTID\" {\r\n  hostid=substr($1,0,2)\r\n}\r\nmode==\"PROMINFO\" {\r\n  if($1==\"idprom:\"){\r\n    # get hostid code from here if it is not already defined\r\n    if(!hostid){\r\n      hostid=substr($2, 2, 2)\r\n    }\r\n  } else if($1==\"clock-frequency:\"){\r\n    # convert clock frequency from hex to decimal\r\n    pwr=1;\r\n    clock=0;\r\n    for(i=8;i>0;i--){\r\n      digit=substr($2, i, 1);\r\n      if(\"a\"==digit) digit=10;\r\n      else if(\"b\"==digit) digit=11;\r\n      else if(\"c\"==digit) digit=12;\r\n      else if(\"d\"==digit) digit=13;\r\n      else if(\"e\"==digit) digit=14;\r\n      else if(\"f\"==digit) digit=15;\r\n      clock += digit*pwr;\r\n      pwr *= 16;\r\n    }\r\n    if(!systemclock) systemclock=clock/M\r\n  } else if($1==\"ecache-line-size:\" || $1==\"cache-line-size:\"){\r\n    # again, hex to dec. If I was using nawk, I would make\r\n    # this a function, but early SunOS is nawkless\r\n    pwr=1;\r\n    clinesize=0;\r\n    for(i=8;i>0;i--){\r\n      digit=substr($2, i, 1);\r\n      if(\"a\"==digit) digit=10;\r\n      else if(\"b\"==digit) digit=11;\r\n      else if(\"c\"==digit) digit=12;\r\n      else if(\"d\"==digit) digit=13;\r\n      else if(\"e\"==digit) digit=14;\r\n      else if(\"f\"==digit) digit=15;\r\n      clinesize += digit*pwr;\r\n      pwr *= 16;\r\n    }\r\n  } else if($1==\"ecache-nlines:\" || $1==\"cache-nlines:\"){\r\n    # again, hex to dec. If I was using nawk, I would make\r\n    # this a function, but early SunOS is nawkless\r\n    pwr=1;\r\n    cnlines=0;\r\n    for(i=8;i>0;i--){\r\n      digit=substr($2, i, 1);\r\n      if(\"a\"==digit) digit=10;\r\n      else if(\"b\"==digit) digit=11;\r\n      else if(\"c\"==digit) digit=12;\r\n      else if(\"d\"==digit) digit=13;\r\n      else if(\"e\"==digit) digit=14;\r\n      else if(\"f\"==digit) digit=15;\r\n      cnlines += digit*pwr;\r\n      pwr *= 16;\r\n    }\r\n  } else if($1==\"name:\"){\r\n    # process name:\r\n    # first, concatenate all the pieces\r\n    name=$2\r\n    for(i=3;i<=NF;i++) name=name\" \"$i\r\n\r\n    # strip off end quotes\r\n    name = substr(name, 2, length(name)-2)\r\n\r\n    # strip off leading \"SUNW,\" if present\r\n    if(\"SUNW,\"==substr(name, 1, 5))\r\n      name=substr(name, 6, length(name)-5)\r\n\r\n    # strip off leading \"Sun \" if present\r\n    if(\"Sun \"==substr(name, 1, 4))\r\n      name=substr(name, 5, length(name)-4)\r\n\r\n    if(!systemname){\r\n      # the first \"name:\" is the system name\r\n      systemname = name\r\n    }\r\n  } else if($1==\"device_type:\"){\r\n    if(\"cpu\" == substr($2,2,3)){\r\n      iscpu=\"yes\"\r\n      cpucount++\r\n    }\r\n  } else if($1==\"Node\"){\r\n    if(\"yes\"==iscpu){\r\n      if(clock) {\r\n        cpuclock=clock/M\r\n      } else {\r\n        cpuclock=systemclock\r\n      }\r\n      cpucache=clinesize*cnlines\r\n      cpuname=name\r\n    }\r\n    iscpu=\"no\"\r\n    clock=0\r\n  } else if($1==\"banner-name:\"){\r\n    i=index($0, \":\")+3;\r\n    banner=substr($0, i+1, length($0)-i-1)\r\n  }\r\n}\r\nEND{\r\n  # process last remaining cpu, if applicable\r\n  if(\"yes\"==iscpu){\r\n      if(clock) {\r\n        cpuclock=clock/M\r\n      } else {\r\n        cpuclock=systemclock\r\n      }\r\n      cpucache=clinesize*cnlines\r\n      cpuname=name\r\n  }\r\n\r\n  if(0==cpucount) cpucount=1\r\n\r\n  if(hostid<\"80\" && \"72\"!=hostid) {\r\n    # look up hostid in table\r\n    if(id[hostid]) {\r\n      developname=devname[id[hostid]]\r\n      modelname=model[id[hostid]]\r\n      if (!cpuname) cpuname=cpu[id[hostid]]\r\n      if (!systemname || systemname==modelname) systemname=sysname[id[hostid]]\r\n      if (!cpuclock) cpuclock=clk[id[hostid]]\r\n    }\r\n  } else {\r\n    # look up system name in table\r\n    if(systemname) {\r\n      if(nm[systemname]){\r\n        developname=devname[nm[systemname]]\r\n        modelname=model[nm[systemname]]\r\n        if (!cpuname) cpuname=cpu[id[hostid]]\r\n        if (!cpuclock) cpuclock=clk[id[hostid]]\r\n      }\r\n    }\r\n  }\r\n  if(!cpucount) cpucount=1\r\n  # Compute known model names. \r\n  if(\"_MBUS\" == modelname){\r\n    # SS10/20/600: Ross 605 or SuperSPARC processors. \r\n    if(ROSS==ptype[cpuname]) {\r\n      modelname=1\"\"cpucount\"\"0\r\n    } else if(\"SuperSPARC\"==ptype[cpuname]){\r\n      if(cpucount==1) cpucount=\"\"\r\n      if(mtype[cpuclock]) {\r\n        modelname=mtype[cpuclock]\"\"cpucache/MB\"\"cpucount\r\n      } \r\n    }\r\n    if(\"_MBUS\" == modelname) modelname = \"unknown\"\r\n  } else if(\"_SS5\" == modelname || \"_SS4\" == modelname){\r\n    # SPARCstation 4/5: modelname is simply the CPU clock rate\r\n    modelname=cpuclock\r\n  } else if (\"_XDBUS\" == modelname){\r\n    # SPARCcenter 1000 or 2000.\r\n    ccount=cpucount; if(ccount<10) ccount=\"0\"ccount\r\n    modelname=substr(systemname,13,1)\"\"cpucache/MB\"\"ccount\r\n  } else if (cpuname ~ /UltraSPARC.*/){\r\n    if(\"Ultra-1\"==systemname || \"Ultra-5_10\"==systemname){\r\n       # modelname is clock speed rounded to nearest 10MHz.\r\n       # modelname=10*sprintf \"%d\\n\", ((cpuclock/10)+0.5)\r\n       modelname=10*sprintf(\"%d\\n\", ((cpuclock/10)+0.5))\r\n    } else {\r\n       # modelname is number of cpus followed by clock speed rounded to\r\n       # nearest 10MHz\r\n       # modelname=cpucount\"\"10*sprintf \"%d\\n\", ((cpuclock/10)+0.5)\r\n       modelname=cpucount\"\"10*sprintf(\"%d\\n\", ((cpuclock/10)+0.5))\r\n    }\r\n  }\r\n\r\n  if(!systemname) systemname=\"unknown\"\r\n  if(!modelname) modelname=systemname\r\n  if(!developname) developname=\"unknown\"\r\n  if(!cpuname) cpuname=\"unknown\"\r\n  if(!cpuclock) cpuclock=\"unknown\"\r\n\r\n  if(ptype[cpuname]) cpuname=cpuname\" (\"ptype[cpuname]\")\"\r\n  if(cpucache) {\r\n    if(cpucache>=MB) {\r\n      cpucache=cpucache/MB\" MB\"\r\n    } else {\r\n      cpucache=cpucache/KB\" KB\"\r\n    }\r\n  }\r\n  if(!systemclock) systemclock=cpuclock\r\n  if(\"yes\"==verbose){\r\n    # output what we have discovered\r\n    print \"System name:\", systemname\r\n    print \"Description:\", banner\r\n    print \"Development name:\", developname\r\n    if(\"_NA\"!=modelname) print \"Model:\", modelname\r\n    print \"Number of cpus:\", cpucount\r\n    print \"Cpu name:\", cpuname\r\n    if(systemclock == cpuclock) {\r\n      print \"System/Cpu clock rate (MHz):\", cpuclock\r\n    } else {\r\n      print \"System clock rate (MHz):\", systemclock\r\n      print \"Cpu clock rate (MHz):\", cpuclock\r\n    }\r\n    if(cpucache) print \"External cache:\", cpucache\r\n  } else {\r\n    if(\"_NA\"==modelname) {\r\n      modelname=\"\"\r\n    } else {\r\n      modelname=\": \"modelname\r\n    }\r\n    print systemname, modelname\r\n  }\r\n}\r\n'","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"49","active":"true","sys_updated_on":"2014-11-26 17:33:54","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/ef1c9c3d0a0a0b1000d1016807e46dae","value":"ef1c9c3d0a0a0b1000d1016807e46dae"},"sys_id":"ef1cb3c50a0a0b10004e9d5cd6d82ed5","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_ef1cb3c50a0a0b10004e9d5cd6d82ed5","sys_updated_by":"marjan.marzban","sys_created_on":"2007-12-18 21:15:55","name":"get-apcfg.sh","sys_name":"get-apcfg.sh","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#!/bin/sh\r\n#\r\nHTTPD=$1\r\nDIR=$2\r\nCFG=$3\r\n\r\n\r\n# Remove the first char from the input parameters, which is '-'. \r\n# This character is used to identify which input parameter is empty\r\nHTTPD=`echo $HTTPD | sed 's/^.//'`\r\nDIR=`echo $DIR | sed 's/^.//'`\r\nCFG=`echo $CFG | sed 's/^.//'`\r\n\r\n\r\n# If the path contains white space it is wrapped in double quotes\r\n# In this case we need to remove these double quotes.\r\nDIR=`echo $DIR | sed -e 's/^\\\"*//' -e 's/\\\"*$//'`\r\nCFG=`echo $CFG | sed -e 's/^\\\"*//' -e 's/\\\"*$//'`\r\n\r\n\r\nif [ \"$HTTPD\" != \"apache2ctl\" ] &&[ \"$HTTPD\" = \"\" -o ! -x $HTTPD ]; then\r\n\techo \"$HTTPD is not  executable\" 1>&2\r\n\texit 1\r\nfi\r\n\r\nIFS=\"\r\n\"\r\n# Find the configuation file path for apache server\r\nfor i in `$HTTPD -V`; do\r\n\tNAME=`echo $i | cut -d\" \" -f3|cut -d\"=\" -f1`\r\n\tVALUE=`echo $i | cut -d\" \" -f3|cut -d\"=\" -f2| sed -e 's/^\\\"*//' -e 's/\\\"*$//'`\r\n        # Strip down to the right of the \"=\", then strip away leading and trailing quotes.\r\n\t\r\n\tif [ \"$NAME\" = \"HTTPD_ROOT\" ]; then\r\n\t\tDEFAULT_ROOT=$VALUE\r\n\tfi\r\n\t\r\n\tif [ \"$NAME\" = \"SERVER_CONFIG_FILE\" ]; then\r\n\t\tDEFAULT_CFG=$VALUE\r\n\tfi\r\ndone\r\n\r\nif [ \"$DIR\" = \"\" ]; then\r\n\tDIR=$DEFAULT_ROOT\r\nfi\r\n\r\nif [ \"$CFG\" = \"\" ]; then\r\n\tCFG=$DEFAULT_CFG\r\nfi\r\n\r\nif [ \"`echo $CFG | cut -c1`\" = \"/\" ]; then\r\n\tCFG_LOCATION=$CFG\r\nelse\r\n\tCFG_LOCATION=$DIR/$CFG\r\nfi\r\n\r\nif [ ! -f $CFG_LOCATION ]; then\r\n\techo \"Cannot locate config file: $CFG_LOCATION\"  1>&2\r\n\texit 1\r\nfi\r\n\r\nKeyWords='ServerName|Listen|Port'\r\ngrep -v '^\\s*#' $CFG_LOCATION | egrep $KeyWords\r\n#Translation: Search for comment lines, now allowing for leading whitespace.\r\n\r\necho \"--- LOAD BALANCER MODULES INFO ---\"\r\nMODJK=\"\"\r\nMODPROXY=\"\"\r\nMODJK=`$HTTPD -M 2>/dev/null | grep 'jk_module'`\r\nMODPROXY=`$HTTPD -M 2>/dev/null | grep 'proxy_module'`\r\n\r\necho \"MODJK  \" $MODJK\r\necho \"MODPROXY  \" $MODPROXY\r\necho \"CFG_LOCATION  \"$CFG_LOCATION","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"9","active":"true","sys_updated_on":"2016-02-25 17:20:50","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/2c93a59c0a0a0a8b00d5f029ccaf5573","value":"2c93a59c0a0a0a8b00d5f029ccaf5573"},"sys_id":"f1c36f110ab301bf00ad336a478241eb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_f1c36f110ab301bf00ad336a478241eb","sys_updated_by":"greg.grisco","sys_created_on":"2008-02-07 02:40:17","name":"pkg_munger","sys_name":"pkg_munger","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"#! /bin/bash\r\ncmd_test=$(whereis -b rpm | grep ': /')\r\ncmd_test2=$(which rpm)\r\nresult=''\r\nif [[ -n \"$cmd_test\" && -n \"$cmd_test2\" ]]\r\nthen\r\n   result=$(rpm -q -a --qf 'Package: %{NAME}\\nStatus: install ok installed\\nMaintainer: %{VENDOR}\\nVersion: %{VERSION}\\nRelease: %{RELEASE}\\n')\r\n   if [ -n \"$result\" ]\r\n   then\r\n     echo \"$result\"\r\n   fi\r\nfi   \r\n\r\n# It's possible to not get anything back from rpm. If that's the case, try dpkg \r\nif [[ -z \"$result\" && -e /var/lib/dpkg/status ]]\r\nthen\r\n   cat /var/lib/dpkg/status | egrep '^Status:|^Package:|^Maintainer:|^Version:'\r\nfi","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"24","active":"true","sys_updated_on":"2020-03-17 21:56:28","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/0e6ce562ef1221007f04b25495c0fbf3","value":"0e6ce562ef1221007f04b25495c0fbf3"},"sys_id":"f27c2962ef1221007f04b25495c0fb27","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_f27c2962ef1221007f04b25495c0fb27","sys_updated_by":"benjamin.phan","sys_created_on":"2014-08-05 23:48:06","name":"GetMongoDBConf.command","sys_name":"GetMongoDBConf.command","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"type \"$SNC_confFilePath\"","sys_created_by":"jing.yang","sys_policy":""},{"value_script":"// -Dcatalina.home=/glide/instances/devsqlserver_16002\r\n// value script, input vars are command, name, parameters, set answer\r\nvar i = parameters.indexOf('-Dcatalina.base');\r\nvar names = ['-Dcatalina.home', '-Dcatalina.base'];\r\nfor (var i = 0; i < names.length; i++) {\r\n  var j = parameters.indexOf(names[i]);\r\n  if (j > -1) {\r\n    var s = parameters.substring(j); \r\n    s = s.split(' ')[0];\r\n    s = s.split('=')[1];\r\n    answer = s;\r\n    break;\r\n  }\r\n}","sys_mod_count":"19","active":"true","sys_updated_on":"2013-05-29 00:05:06","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/f39d6a930a0a0b780004c15893b3cfe4","value":"f39d6a930a0a0b780004c15893b3cfe4"},"sys_id":"f39d849d0a0a0b7800e79ae2537daf3e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_f39d849d0a0a0b7800e79ae2537daf3e","sys_updated_by":"tim.broberg","sys_created_on":"2007-10-31 01:12:49","name":"catalina_home","sys_name":"catalina_home","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"","sys_created_by":"glide.maint","sys_policy":""},{"value_script":"","sys_mod_count":"5","active":"true","sys_updated_on":"2014-09-25 01:59:33","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/5fe4a8230a0a0b2000cb228a067bd153","value":"5fe4a8230a0a0b2000cb228a067bd153"},"sys_id":"f3c94975ff9321005467ffffffffffeb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_f3c94975ff9321005467ffffffffffeb","sys_updated_by":"sky.lin","sys_created_on":"2014-09-22 06:22:59","name":"filter_kernel_procs","sys_name":"filter_kernel_procs","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"sky.lin","sys_policy":""},{"value_script":"","sys_mod_count":"0","active":"false","sys_updated_on":"2008-02-08 02:34:33","sys_tags":"","sys_class_name":"discovery_probe_parameter","probe":{"link":"https://dev315171.service-now.com/api/now/v1/table/discovery_probes/6f23f36f4014b54c00d127806d1d579b","value":"6f23f36f4014b54c00d127806d1d579b"},"sys_id":"f6e4c8a70ab301bf0086974cd0fd2f09","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"sys_update_name":"discovery_probe_parameter_f6e4c8a70ab301bf0086974cd0fd2f09","sys_updated_by":"glide.maint","sys_created_on":"2008-02-08 02:34:33","name":"must_sudo","sys_name":"must_sudo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"value":"true","sys_created_by":"glide.maint","sys_policy":""}]}