{"result":[{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-24 22:34:11","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"00696ee073330300688e0d573cf6a71a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-18 13:49:20","sys_name":"Add Item to Shopping Cart (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_ADD_TO_CART_STEP = \"Performing 'Add to cart' action\";\n\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before submission\";\n\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser failed to block submission of form to server\";\n\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of form to server\";\n\tvar FAILED_SUBMIT = \"FAILURE: Failed to Add the catalog item to cart.\";\n\tvar SUCCESS_SUBMIT = \"SUCCESS: Item was successfully added to cart.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ADD_TO_CART_STEP, FAILED_NO_G_FORM, FAILED_BROWSER_BLOCK_SUBMIT, SUCCESS_CONFIRM_BROWSER_BLOCK, FAILED_SUBMIT, SUCCESS_SUBMIT]);\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ADD_TO_CART_STEP]);\n\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getCatalogUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction assertAddToCart(catalogUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\t\n\t\tcatalogUtil.addToCart(step.timeout * 1000).then(function(response) {\n\t\t\tif (assertType == \"form_submitted_to_server\") {\n\t\t\t\tstepResult.outputs.cart_item_id = response;\n\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t}\n\t\t\telse\n\t\t\t\tonFailure(FAILED_BROWSER_BLOCK_SUBMIT);\n\t\t}, function() {\n\t\t\tif (assertType == \"form_submission_cancelled_in_browser\")\n\t\t\t\tonSuccess(SUCCESS_CONFIRM_BROWSER_BLOCK);\n\t\t\telse\n\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t});\n\t}\n\t\n\tgetCatalogUtil().then(assertAddToCart, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"12","active":"true","sys_tags":"","html_description":"<p>Add item to <code>Shopping Cart</code></p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened a Catalog Item page using the “Open a Catalog Item (SP)” step.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Add Item to Shopping Cart (SP)","sys_update_name":"sys_atf_step_config_00696ee073330300688e0d573cf6a71a","name":"Add Item to Shopping Cart (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Add item to cart and confirm addition of item to cart\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Add item to cart and confirm addition is canceled in browser\");\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-09-06 01:42:32","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"012105620fe2330091d0f00c97767ec4","class_type":"script","sys_updated_by":"admin","sys_created_on":"2019-07-12 20:42:43","sys_name":"Validate List UI Action Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7270","step_execution_generator":"(function executeStep(step, stepResult) {\n\tvar alh = new ATFListHelper(step.inputs);\n\tvar isRelatedList = alh.isRelatedList();\n\tvar listId = alh.getListID();\n\n\tvar VALIDATING_LIST_UI_ACTION_VISIBILITY = \"Validating List UI action visibility\";\n\tvar PROVIDE_AT_LEAST_ONE = \"LIST_Provide at least one UI action to assert as visible or not visible\";\n\tvar NO_LIST_FOUND = isRelatedList ?\n\t\t\"FAILURE: Unable to find related list '{0}' on the '{1}' form\":\n\t\t\"FAILURE: Unable to find list '{0}'\";\n\tvar SUCCESS_VISIBLE = isRelatedList ?\n\t\t\"Successfully validated that UI action '{0}' is visible on the '{1}' related list on the '{2}' form\":\n\t\t\"Successfully validated that UI action '{0}' is visible on the '{1}' list\";\n\tvar FAILURE_NOT_VISIBLE = isRelatedList ?\n\t\t\"FAILURE: UI action '{0}' is not visible on the '{1}' related list on the '{2}' form\":\n\t\t\"FAILURE: UI action '{0}' is not visible on the '{1}' list\";\n\tvar SUCCESS_NOT_VISIBLE = isRelatedList ? \n\t\t\"Successfully validated that UI action '{0}' is not visible on the '{1}' related list on the '{2}' form\":\n\t\t\"Successfully validated that UI action '{0}' is not visible on the '{1}' list\";\n\tvar FAILURE_VISIBLE = isRelatedList ?\n\t\t\"FAILURE: UI action '{0}' is visible on the '{1}' related list on the '{2}' form\":\n\t\t\"FAILURE: UI action '{0}' is visible on the '{1}' list\";\n\n\tvar messageMap = new GwtMessage().getMessages([VALIDATING_LIST_UI_ACTION_VISIBILITY, PROVIDE_AT_LEAST_ONE,\n\t\tNO_LIST_FOUND, SUCCESS_VISIBLE, FAILURE_NOT_VISIBLE, SUCCESS_NOT_VISIBLE, FAILURE_VISIBLE]);\n\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[VALIDATING_LIST_UI_ACTION_VISIBILITY]);\n\n\tvar listLabel = step.inputs.list_label;\n\tvar uiActionFieldValuesMap = step.inputs.ui_action_field_values_map;\n\n\tvar frameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\tvar tableName = step.inputs.table;\n\n\tif (!step.inputs.visible && !step.inputs.not_visible) {\n\t\tpassStep(messageMap[PROVIDE_AT_LEAST_ONE]);\n\t\treturn;\n\t}\n\n\talh.getListObject()\n\t\t.then(checkUIActionVisibility)\n\t\t['catch'](function(ex) {\n\t\t\tfailStep(alh.getExceptionMessage(ex));\n\t\t});\n\n\tfunction checkUIActionVisibility(gList) {\n\t\tvar message = \"\";\n\t\tvar i;\n\t\tvar failed;\n\n\t\t// search inside the list container because there can be id collisions\n\t\t// if the same UI action shows up on more than one related list\n\t\tvar listContainer = gList.listContainer;\n\t\tif (!listContainer) {\n\t\t\tif (isRelatedList)\n\t\t\t\tfailStep(formatMessage(messageMap[NO_LIST_FOUND], listLabel, tableName));\n\t\t\telse\n\t\t\t\tfailStep(formatMessage(messageMap[NO_LIST_FOUND], listLabel));\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (step.inputs.visible) {\n\t\t\tvar visibleActionIds = step.inputs.visible.split(\",\");\n\t\t\tfor (i = 0; i < visibleActionIds.length; i++) {\n\t\t\t\tvar visibleActionLabel = uiActionFieldValuesMap[visibleActionIds[i]].label.trim();\n\t\t\t\tvar visibleCheckMsg;\n\t\t\t\tif (checkVisibility(gList, visibleActionIds[i], step.inputs.related_list)) {\n\t\t\t\t\tvisibleCheckMsg = isRelatedList ?\n\t\t\t\t\t\tformatMessage(messageMap[SUCCESS_VISIBLE], visibleActionLabel, listLabel, tableName) :\n\t\t\t\t\t\tformatMessage(messageMap[SUCCESS_VISIBLE], visibleActionLabel, listLabel);\n\t\t\t\t} else {\n\t\t\t\t\tvisibleCheckMsg = isRelatedList ?\n\t\t\t\t\t\tformatMessage(messageMap[FAILURE_NOT_VISIBLE], visibleActionLabel, listLabel, tableName) :\n\t\t\t\t\t\tformatMessage(messageMap[FAILURE_NOT_VISIBLE], visibleActionLabel, listLabel);\n\t\t\t\t\tfailed = true;\n\t\t\t\t}\n\n\t\t\t\tmessage += (message ? (\"\\n\") : \"\") + visibleCheckMsg;\n\t\t\t}\n\t\t}\n\n\t\tif (step.inputs.not_visible) {\n\t\t\tvar notVisibleActionIds = step.inputs.not_visible.split(\",\");\n\t\t\tfor (i = 0; i < notVisibleActionIds.length; i++) {\n\t\t\t\tvar notVisibleActionLabel = uiActionFieldValuesMap[notVisibleActionIds[i]].label.trim();\n\t\t\t\tvar notVisibleCheckMsg;\n\t\t\t\tif (!checkVisibility(gList, notVisibleActionIds[i], step.inputs.related_list)) {\n\t\t\t\t\tnotVisibleCheckMsg = isRelatedList ?\n\t\t\t\t\t\tformatMessage(messageMap[SUCCESS_NOT_VISIBLE], notVisibleActionLabel, listLabel, tableName) :\n\t\t\t\t\t\tformatMessage(messageMap[SUCCESS_NOT_VISIBLE], notVisibleActionLabel, listLabel);\n\t\t\t\t} else {\n\t\t\t\t\tnotVisibleCheckMsg = isRelatedList ?\n\t\t\t\t\t\tformatMessage(messageMap[FAILURE_VISIBLE], notVisibleActionLabel, listLabel, tableName) :\n\t\t\t\t\t\tformatMessage(messageMap[FAILURE_VISIBLE], notVisibleActionLabel, listLabel);\n\t\t\t\t\tfailed = true;\n\t\t\t\t}\n\n\t\t\t\tmessage += (message ? (\"\\n\") : \"\") + notVisibleCheckMsg;\n\t\t\t}\n\t\t}\n\n\t\tif (!failed) {\n\t\t\tpassStep(message);\n\t\t\treturn;\n\t\t}\n\n\t\tfailStep(message);\n\t}\n\n\tfunction checkVisibility(gList, actionId, relatedList) {\n\t\tvar uiActionFieldValues = uiActionFieldValuesMap[actionId];\n\t\tif (uiActionFieldValues.active == \"false\")\n\t\t\treturn false;\n\n\t\t// if the list is empty, list bottom UI Action buttons, list choice UI Actions, and list context menu UI Actions are hidden so return false\n\t\tif (isListEmpty(gList) && actionIsHiddenWhenListEmpty(uiActionFieldValues))\n\t\t\treturn false;\n\n\t\t// for UI actions that are only context menu actions right click a cell in the first row\n\t\tif (isOnlyContextMenuAction(uiActionFieldValues)) {\n\t\t\tvar firstRecordId = gList._getRecords()[0].sys_id;\n\t\t\tvar firstRecordElem = gList.getRow(firstRecordId);\n\t\t\tif (!firstRecordElem) {\n\t\t\t\tconsole.log(formatMessage(\"Unable to find first record on the '{0}' list\", listLabel));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tvar cellsToRightClick = firstRecordElem.getElementsByClassName(\"vt\");\n\t\t\tif (cellsToRightClick.length == 0) {\n\t\t\t\tconsole.log(formatMessage(\"Unable to find a cell to right click on the '{0}' list\", listLabel));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// right click record and loop through the context menu UI actions\n\t\t\tg_ui_testing_util.rightClickElement(cellsToRightClick[0]);\n\t\t\tvar contextMenuName = 'context_list_row' + listId;\n\t\t\tvar contextMenu = frameWindow.contextMenus[contextMenuName];\n\t\t\tvar contextMenuChildren = contextMenu.children;\n\t\t\tfor (var i = 0; i < contextMenuChildren.length; i += 1) {\n\t\t\t\tvar child = contextMenuChildren[i];\n\t\t\t\tif (child.getAttribute('item_id') === actionId)\n\t\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\t\t// use gsft_id for banner buttons, bottom buttons, and related links\n\t\t// use ids for list choice actions\n\t\tvar queryString;\n\t\tif (uiActionFieldValues.list_banner_button == \"true\" || uiActionFieldValues.list_button == \"true\" || uiActionFieldValues.list_link == \"true\")\n\t\t\tqueryString = \"[gsft_id='\" + actionId + \"']\";\n\t\telse\n\t\t\tqueryString = \"[id='\" + actionId + \"']\";\n\n\t\tvar listContainerElement = gList.listContainer;\n\t\tvar uiActionElement = listContainerElement.querySelector(queryString);\n\t\tif (!uiActionElement)\n\t\t\treturn false;\n\n\t\treturn isVisible(uiActionElement);\n\t}\n\n\tfunction isListEmpty(gList) {\n\t\treturn gList.totalRows === 0;\n\t}\n\n\t// list context menu, list choice, and list bottom buttons are hidden when the list is empty\n\t// returns true if UI action is hidden when list is empty\n\tfunction actionIsHiddenWhenListEmpty(uiActionFieldValues) {\n\t\treturn (uiActionFieldValues.list_context_menu == \"true\" || uiActionFieldValues.list_choice == \"true\" || uiActionFieldValues.list_button == \"true\") && (uiActionFieldValues.list_banner_button == \"false\" && uiActionFieldValues.list_link == \"false\");\n\t}\n\n\t// returns true if UI action is only a context menu action\n\tfunction isOnlyContextMenuAction(uiActionFieldValues) {\n\t\treturn (uiActionFieldValues.list_banner_button == \"false\" && uiActionFieldValues.list_button == \"false\" && uiActionFieldValues.list_context_menu == \"true\" && uiActionFieldValues.list_choice == \"false\" && uiActionFieldValues.list_link == \"false\");\n\t}\n\n\tfunction isVisible(dom) {\n\t\treturn !dom.hidden && dom.style.visibility != 'hidden';\n\t}\n\n\tfunction passStep(msg) {\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstep.defer.reject();\n\t}\n\n}(step, stepResult));\n","sys_mod_count":"1","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Validates the visibility of a UI Action in a list.</span></p>\n<p class=\"p1\"><span class=\"s1\">You can assert that any number of UI Actions are either visible or not visible.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">A list module or a form with related lists must be open to use this step. The default visible UI Actions can vary depending on the currently impersonated user.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Validates the visibility of a UI Action in a list","sys_update_name":"sys_atf_step_config_012105620fe2330091d0f00c97767ec4","name":"Validate List UI Action Visibility","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\t\n\tvar isRelatedList = !(step.inputs.list_type == \"list\");\n\n\tif (gs.nil(step.inputs.visible.getDisplayValue()) && gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\tdescription = gs.getMessage(\"This step will do nothing. Provide at least one UI action to assert as visible or not visible\");\n\t\treturn description;\n\t}\n\n\tvar relTd = GlideTableDescriptor.get(step.inputs.related_list_table);\n\tvar relatedListTable = step.inputs.related_list_table.getDisplayValue();\n\tif (relTd)\n\t\trelatedListTable = relTd.getLabel();\n\n\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\tvar formTable = step.inputs.table.getDisplayValue();\n\tif (formTd)\n\t\tformTable = formTd.getLabel();\n\n\tif (!gs.nil(step.inputs.visible.getDisplayValue())) {\n\t\tif (isRelatedList)\n\t\t\tdescription = gs.getMessage(\"Confirm that the following UI actions on the '{0}' related list on the '{1}' form are visible: {2}\", [relatedListTable, formTable, step.inputs.visible.getDisplayValue()]);\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Confirm that the following UI actions on the '{0}' list are visible: {1}\", [formTable, step.inputs.visible.getDisplayValue()]);\n\t}\n\n\tif (!gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\tvar notVisibleDescription;\n\t\tif (isRelatedList)\n\t\t\tnotVisibleDescription = gs.getMessage(\"Confirm that the following UI actions on the '{0}' related list on the '{1}' form are not visible: {2}\", [relatedListTable, formTable, step.inputs.not_visible.getDisplayValue()]);\n\t\telse\n\t\t\tnotVisibleDescription = gs.getMessage(\"Confirm that the following UI actions on the '{0}' list are not visible: {1}\", [formTable, step.inputs.not_visible.getDisplayValue()]);\n\t\tdescription += (description ? (\"\\n\") : \"\") + notVisibleDescription;\n\t}\n\n\treturn description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-09-06 18:44:37","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"0200ac2fe72003005c85cd19d2f6a942","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-08-18 22:03:55","sys_name":"Open a Record in List","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7265","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\t// Get the ATFListHelper Object\n\t\tvar alh = new ATFListHelper(step.inputs);\n\t\tvar isRelatedList = alh.isRelatedList();\n\n\t\t// Messages for message map\n\t\tvar OPEN_RECORD_MESSAGE = isRelatedList ?\n\t\t\t\"Opening record with id '{0}' in the '{1}' related list on the '{2}' form\" :\n\t\t\t\"Opening record with id '{0}' in the '{1}' list\";\n\t\tvar OPEN_RECORD_SUCCESS = isRelatedList ?\n\t\t\t\"Successfully opened the record with id '{0}' in the '{1}' related list on the '{2}' form\" :\n\t\t\t\"Successfully opened the record with id '{0}' in the '{1}' list\";\n\t\tvar OPEN_RECORD_FAILURE = isRelatedList ?\n\t\t\t\"FAILURE: Failed to open the record with id '{0}' in the '{1}' related list on the '{2}' form\" :\n\t\t\t\"FAILURE: Failed to open the record with id '{0}' in the '{1}' list\";\n\t\tvar RECORD_NOT_PRESENT_FAILURE = isRelatedList ?\n\t\t\t\"FAILURE: Failed to open the record with id '{0}' in the '{1}' related list on the '{2}' form. Record is not present in the related list\" :\n\t\t\t\"FAILURE: Failed to open the record with id '{0}' in the '{1}' list. Record is not present in the list\";\n\n\t\t// Init the message map\n\t\tvar messageMap = new GwtMessage().getMessages([OPEN_RECORD_MESSAGE, OPEN_RECORD_SUCCESS, OPEN_RECORD_FAILURE, RECORD_NOT_PRESENT_FAILURE]);\n\t\tvar listLabel = step.inputs.list_label;\n\t\tvar recordId = step.inputs.record_id;\n\n\t\tfunction addMessageContext(msg) {\n\t\t\t// Format the step result message with appropriate values depending on the context\n\t\t\tif (isRelatedList)\n\t\t\t\treturn formatMessage(messageMap[msg], recordId, listLabel, step.inputs.table);\n\n\t\t\treturn formatMessage(messageMap[msg], recordId, listLabel);\n\t\t}\n\n\t\t// Get the query string to filter to the record on the list\n\t\tvar filterString = \"sys_id=\" + recordId + \"^EQ\";\n\n\t\t// Set the step status\n\t\tg_ui_testing_util.setTestStepStatusMessage(addMessageContext(OPEN_RECORD_MESSAGE));\n\n\t\t// Applies the filter to the given list to filter out the record to be opened then opens the record\n\t\talh.getListObject()\n\t\t\t.then(function(gList) { return alh.applyFilter(gList, filterString); })\n\t\t\t.then(_openRecord)\n\t\t\t['catch'](function(ex) {\n\t\t\t\tfailStep(alh.getExceptionMessage(ex));\n\t\t\t});\n\n\t\tfunction _openRecord(gList) {\n\t\t\tvar tableName = gList.getTableName();\n\t\t\tvar viewName = \"\";\n\t\t\t// Get the view from the form, this view will be applied to the record being opened\n\t\t\tif (isRelatedList)\n\t\t\t\tviewName = g_ui_testing_util.getTestIFrameGForm().getViewName();\n\t\t\telse {\n\t\t\t\tvar gURL = new GlideURL(g_ui_testing_util.getTestIFrameWindow().location.href);\n\t\t\t\tviewName = decodeURIComponent(gURL.params['sysparm_view']);\n\t\t\t}\n\n\t\t\t// Open the record if it is present else fail the step\n\t\t\tif (gList.totalRows === 1)\n\t\t\t\tg_ui_testing_util.openFormAndAssert(tableName, recordId, viewName)\n\t\t\t\t\t.then(passStep, failStep);\n\t\t\telse\n\t\t\t\tfailStep(addMessageContext(RECORD_NOT_PRESENT_FAILURE));\n\t\t}\n\n\t\t// Function to set the step result to success and also resolve the promise.\n\t\tfunction passStep() {\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = addMessageContext(OPEN_RECORD_SUCCESS);\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\t// Function to set the step result and messages to failure and also reject the promise.\n\t\tfunction failStep(msg) {\n\t\t\tif (!msg)\n\t\t\t\tmsg = addMessageContext(OPEN_RECORD_FAILURE);\n\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = msg;\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"10","active":"true","sys_tags":"","html_description":"<p>Opens a specified record in a list.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">A list module or a form with related lists must be open to use this step. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Opens a specified record in a list","sys_update_name":"sys_atf_step_config_0200ac2fe72003005c85cd19d2f6a942","name":"Open a Record in List","description_generator":"function generateDescription() {\n\tvar description = '';\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar isRelatedList = !(step.inputs.list_type == 'list');\n\tvar record = step.inputs.record_id;\n\tvar relatedListUtil = \"\";\n\tvar relatedListLabel = \"\";\n\n\tif (isRelatedList) {\n\t\trelatedListUtil = new ATFRelatedListUtil();\n\t\trelatedListLabel = relatedListUtil.getRelatedListLabels(step.inputs.table, step.inputs.related_list);\n\t}\n\n\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\tvar formTable = step.inputs.table;\n\tif (formTd)\n\t\tformTable = formTd.getLabel();\n\n\tif (isRelatedList)\n\t\tdescription += gs.getMessage(\"Open the record '{0}' in the '{1}' related list on the '{2}' form\", [record.getDisplayValue(), relatedListLabel, formTable]);\n\telse\n\t\tdescription += gs.getMessage(\"Open the record '{0}' in the '{1}' list\", [record.getDisplayValue(), formTable]);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"true","icon":"icon-article-document color-yellow","sys_updated_on":"2019-03-21 16:17:07","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"0270b8005f30220012b44adb7f46666a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-07-18 20:10:24","sys_name":"Record Query (Deprecated)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"2000","step_execution_generator":"(function executeStep(inputs, outputs, stepResult, timeout) {\n    var mandatoryVariableMessage = \"{0} was not specified\";\n\tif (gs.nil(inputs.table)) {\n\t\tstepResult.setOutputMessage(gs.getMessage(mandatoryVariableMessage, 'Table'));\n\t\tstepResult.setFailed();\n\t\treturn;\n\t}\n\toutputs.table = inputs.table;\n\tif (gs.nil(inputs.field_values)) {\n\t    stepResult.setOutputMessage(gs.getMessage(mandatoryVariableMessage, 'Conditions'));\n\t     stepResult.setFailed();\n\t     return;\n\t}\n\tvar assertType = inputs.assert_type;\n\t// set to preserve existing functionality for tests created before assert types were added\n\tif (!assertType)\n\t\tassertType = 'records_match_query';\n\n\tvar userFriendlyConditions = new global.ATFStepDescriptionGenerator().getConditionDescription(inputs.table, inputs.field_values);\n\tvar query;\n\tif (inputs.enforce_security)\n\t\tquery = new GlideRecordSecure(inputs.table);\n\telse\n\t\tquery = new GlideRecord(inputs.table);\n\tvar counter = 0;\n\twhile (counter <= timeout) {\n\t\tquery.initialize();\n\t\tquery.addEncodedQuery(inputs.field_values);\n\t\tquery._query();\n\n\t\tif (query._next() && assertType != 'no_records_match_query') {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"Successfully found {0} {1} records matching query:\\n{2}\",\n\t\t\t\t\t\t\t\t\t\t\t\t  [query.getRowCount(),\n\t\t\t\t\t\t\t\t\t\t\t\t   inputs.table,\n\t\t\t\t\t\t\t\t\t\t\t\t   userFriendlyConditions]));\n\t\t\tstepResult.setSuccess();\n\t\t\toutputs.table = inputs.table;\n\t\t\toutputs.first_record = query.getUniqueValue();\n\t\t\treturn;\n\t\t}\n\t\tif (query.getRowCount() == 0 && assertType == 'no_records_match_query') {\n\t\t\toutputs.table = inputs.table;\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"Successfully confirmed there are no records matching query:\\n{0}\",\n\t\t\t\t\t\t\t\t\tuserFriendlyConditions));\n\t\t\tstepResult.setSuccess();\n\t\t\treturn;\n\t\t}\n\t\tcounter++;\n\t\tsn_atf.AutomatedTestingFramework.waitOneSecond();\n\t}\n\n\t// timeout exceeded\n\tif (assertType != 'no_records_match_query') {\n\t\tstepResult.setOutputMessage(gs.getMessage(\"FAILURE: No records matching query:\\n{0}\",\n\t\t\t\t\t\t\t\t\tuserFriendlyConditions));\n\t\tstepResult.setFailed();\n\t\treturn;\n\t}\n\n\tif (assertType == 'no_records_match_query') {\n\t\tstepResult.setOutputMessage(gs.getMessage(\"FAILURE: Found {0} {1} records matching query:\\n{2}\",\n\t\t\t\t\t\t\t\t\t\t\t  [query.getRowCount(),\n\t\t\t\t\t\t\t\t\t\t\t   inputs.table,\n\t\t\t\t\t\t\t\t\t\t\t   userFriendlyConditions]));\n\t\tstepResult.setFailed();\n\t}\n}(inputs, outputs, stepResult, timeout));","sys_mod_count":"23","active":"true","sys_tags":"","html_description":"<p>Perform a database query to verify if a record matching the conditions set in this step are met.</p>\n<p><strong>Note: This step has been deprecated, use the new Record Query step.</strong></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Select a record and validate field values.","sys_update_name":"sys_atf_step_config_0270b8005f30220012b44adb7f46666a","name":"Record Query (Deprecated)","description_generator":"(function generateDescription(step) {\n\tvar td = GlideTableDescriptor.get(step.inputs.table);\n\tif (!td) {\n\t\tgs.log(\"Invalid table name in test step: \" + step.inputs.table);\n\t\treturn gs.getMessage(\"Set field values\");\n\t}\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description;\n\tvar assertType = step.inputs.assert_type;\n\tif (assertType == 'no_records_match_query')\n\t\tdescription = gs.getMessage(\"Validate there are not any records in '{0}' matching query:\\n{1}\",\n\t\t\t\t\t\t\t\t\t[step.inputs.table.getDisplayValue(),\n\t\t\t\t\t\t\t\t\t descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values)]);\n\telse\n\t\tdescription = gs.getMessage(\"Validate there is at least one record in '{0}' matching query:\\n{1}\",\n\t\t\t\t\t\t\t\t\t[step.inputs.table.getDisplayValue(),\n\t\t\t\t\t\t\t\t\t descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values)]);\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\treturn description;\n\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:39:43","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"02b5128223230300ab65ff5e17bf658e","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-10 17:58:18","sys_name":"UI Action Visibility Validation (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4800","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar gs = new GwtMessage();\n\t\n\tvar INIT_MESSAGE = gs.getMessage(\"Running UI action visibility test\");\n\tvar FAILED_NO_G_FORM = gs.getMessage(\"FAILURE: A valid form must be open before checking visibility of UI actions\");\n\tvar FAILED_NO_UI_ACTION = gs.getMessage(\"Please provide at least one UI action to assert visibility\");\n\t\n\tfunction message(msg) {\n\t\treturn g_ui_testing_util.setTestStepStatusMessage(msg);\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction onError(msg) {\n\t\tmessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction checkVisibility(inputVarObj) {\n\t\tvar visible, state = false, msg = \"\", err=0;\n\n\t\tif (inputVarObj.ids) {\n\t\t\tvar sysIds = inputVarObj.ids.split(\",\");\n\t\t\tfor (var i = 0; i < sysIds.length; i++) {\n\t\t\t\tvisible = isVisible(sysIds[i]);\n\t\t\t\tif ( (visible && inputVarObj.visible) || (!visible && !inputVarObj.visible) )\n\t\t\t\t\tstate = true;\n\t\t\t\telse if ( (!visible && inputVarObj.visible) || (visible && !inputVarObj.visible) )\n\t\t\t\t\tstate = false;\n\n\t\t\t\tmsg += (msg ? (\"\\n\") : \"\");\n\t\t\t\tif (state == true)\n\t\t\t\t\tmsg += gs.getMessage(\"SUCCESS: UI action '{0}' {1}\", step.inputs.ui_action_names[sysIds[i]], inputVarObj.okMsg);\n\t\t\t\telse {\n\t\t\t\t\tmsg += gs.getMessage(\"FAILURE: UI action '{0}' {1}\", step.inputs.ui_action_names[sysIds[i]], inputVarObj.errMsg);\n\t\t\t\t\terr++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn {msg: msg, err: err};\n\t}\n\n\tfunction isVisible(actionId) {\n\t\tvar document = jQuery(testFrameWindow.document);\n\t\tvar q = \"[gsft_id='\" + actionId + \"']\";\n\t\tvar el = document.find(q);\n\t\tif (el.length > 0 && el.is(':visible')) {\n\t\t\treturn  true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\t// Fail Step if there's no gForm\n\tif (!testFrameWindow.g_form) {\n\t\tonError(FAILED_NO_G_FORM);\n\t\treturn;\n\t}\n\n\t// Initial message\n\tmessage(INIT_MESSAGE);\n\n\tif (!step.inputs.visible && !step.inputs.not_visible) {\n\t\tonError(FAILED_NO_UI_ACTION);\n\t\treturn;\n\t}\n\t\n\tvar states = {\n\t\tvisible: 'is visible',\n\t\tnot_visible: 'is not visible'\n\t};\n\t\n\tvar inputs = [\n\t\t{ids: step.inputs.visible, visible: true, okMsg: states.visible, errMsg: states.not_visible},\n\t\t{ids: step.inputs.not_visible, visible: false, okMsg: states.not_visible, errMsg: states.visible}];\n\n\tvar result, msg = \"\", err = 0;\n\tfor (var i = 0; i < inputs.length; i++) {\n\t\tif (inputs[i].ids) {\n\t\t\tresult = checkVisibility(inputs[i]);\n\t\t\tmsg += (msg ? (\"\\n\") : \"\") + result.msg;\n\t\t\terr = err + result.err;\n\t\t}\n\t}\n\t\n\tif (err > 0) {\n\t\tonError(msg);\n\t} else {\n\t\tonSuccess(msg);\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"37","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Validates whether a UI Action is visible or not on the current form.</span></p>\n<p class=\"p1\"><span class=\"s1\">You can assert that any number of UI Actions are either visible or invisible. </span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Service Portal only supports Server UI Actions. The setRedirectURL() method and &#39;Client&#39; UI Actions are not supported. The default visible UI Actions can vary depending on the currently impersonated user. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"UI Action Visibility Validation (SP)","sys_update_name":"sys_atf_step_config_02b5128223230300ab65ff5e17bf658e","name":"UI Action Visibility Validation (SP)","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\t\n\tif (gs.nil(step.inputs.visible) && gs.nil(step.inputs.visible.getDisplayValue()) && gs.nil(step.inputs.not_visible) && gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\treturn gs.getMessage(\"This step will do nothing. Please provide at least one UI action to assert visibility or invisibility on\");\n\t}\n\t\n\tif (!gs.nil(step.inputs.visible.getDisplayValue())) {\n\t\tdescription = gs.getMessage(\"Confirm that the following UI actions are visible: {0}\", step.inputs.visible.getDisplayValue());\n\t}\n\t\n\tif (!gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following UI actions are not visible: {0}\", step.inputs.not_visible.getDisplayValue());\n\t}\n\t\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n})(step);\n\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2023-09-25 05:00:32","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"05317cd10b10220050192f15d6673af8","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-06-27 20:55:09","sys_name":"Open a New Form","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Opening a new form\",\n\t\t\"Successfully opened the '{0}' view of a new '{1}' form\",\n\t\t\"Successfully opened a new '{0}' form\",\n\t\t\"Successfully opened a new '{0}' form in '{1}'\",\n\t\t\"FAILURE: Failed to open the '{0}' view of a new '{1}' form\",\n\t\t\"FAILURE: Failed to open a new '{0}' form\",\n\t\t\"FAILURE: Failed to open a new '{0}' form in '{1}'\",\n\t\t\"Error validating view by calling TestExecutorAjax.validateFormView\",\n\t\t\"View '{0}' does not exist on the table '{1}'\",\n\t\t\"Table '{0}' does not exist\",\n\t\t\"The form failed to load\"\n\t]);\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Opening a new form\"]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tvar afse = new ATFFormStepExecutor(step.inputs);\n\t\tafse.openNewForm().then(onSuccess, onFailure);\n\n\t\tfunction onSuccess(result) {\n\t\t\tvar message;\n\n\t\t\t// Standard UI result is just a string (already translated)\n\t\t\tif (typeof result === \"string\")\n\t\t\t\tmessage = result;\n\t\t\telse // Workspace result is an object\n\t\t\t\tmessage = formatMessage(messages[\"Successfully opened a new '{0}' form in '{1}'\"], step.inputs.table, step.inputs.workspace_display_name);\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction onFailure(result) {\n\t\t\tvar message;\n\n\t\t\t// Standard UI result is just a string (already translated)\n\t\t\tif (typeof result === \"string\")\n\t\t\t\tmessage = result;\n\t\t\telse {\n\t\t\t\t// The result could be an error, or a failure object with the failure reason\n\t\t\t\tif (result.reason === \"ajax_error\")\n\t\t\t\t\tmessage = messages[\"Error validating view by calling TestExecutorAjax.validateFormView\"];\n\t\t\t\telse if (result.reason === \"invalid_table\")\n\t\t\t\t\tmessage = formatMessage(messages[\"Table '{0}' does not exist\"], step.inputs.table);\n\t\t\t\telse if (result.message) // Could also be a caught exception\n\t\t\t\t\tmessage = result.message;\n\t\t\t\telse // If none of the above apply, use a default message\n\t\t\t\t\tmessage = formatMessage(messages[\"FAILURE: Failed to open a new '{0}' form in '{1}'\"], step.inputs.table, step.inputs.workspace_display_name);\n\t\t\t}\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"34","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Opens a new form for the selected table and Form UI.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p class=\"p1\"><span class=\"s1\">Optionally, you can specify the form’s view <code>name</code>. Keep in mind that this can only be done for users that have access to that view.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Opens a new form in this table","sys_update_name":"sys_atf_step_config_05317cd10b10220050192f15d6673af8","name":"Open a New Form","description_generator":"(function generateDescription(step) {\n\tvar descriptor = new ATFStepDescriptionGenerator();\n\treturn descriptor.getOpenFormDescription(step.inputs.table, step.inputs.view, null, step.inputs.form_ui);\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-user","sys_updated_on":"2017-03-20 22:21:18","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"071ee5b253331200040729cac2dc348d","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-06-07 20:41:17","sys_name":"Impersonate","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.ImpersonationStepRunner","sys_created_by":"admin","order":"100","step_execution_generator":"","sys_mod_count":"20","active":"true","sys_tags":"","html_description":"<p>Impersonates the specified user in the current session for the duration of the test or until another user is impersonated.</p>\n<h4>Additional Considerations</h4>\n<p>The user specified in the &#34;User&#34; field will be outputted for use later in the test.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Pick a correct user to impersonate, a user with the right roles.","sys_update_name":"sys_atf_step_config_071ee5b253331200040729cac2dc348d","name":"Impersonate","description_generator":"(function generateDescription(step) {\n\tif (step.inputs.user.hasMapping())\n\t\treturn gs.getMessage(\"Impersonate the user: {0}\", step.inputs.user.getDisplayValue());\n\n\tvar userGR = new GlideRecord(\"sys_user\");\n\tuserGR.get(step.inputs.user);\n\tvar description = gs.getMessage(\"Impersonate the user: {0} with user Id: {1}\", [userGR.getDisplayValue(), userGR.getValue(\"user_name\")]);\n\n\tif (step.warning_message)\n\t\treturn description += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:28:29","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"095c4877732b03008e6b0d573cf6a717","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-15 18:28:48","sys_name":"Validate Price and Recurring Price (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"3000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_RUNNING_PRICE_VALIDATION = \"Running catalog item price validations\";\n\tvar MESSAGE_KEY_VALIDATION_STEP = \"Validating {0} of the catalog item\";\n\tvar MESSAGE_KEY_FAILURE_EXPECTED = \"FAILURE: Expected {0} to be {1} but is {2}\";\n\tvar MESSAGE_KEY_SUCCESS_VALIDATED = \"SUCCESS: Successfully validated pricing details of the catalog item\";\n\tvar MESSAGE_KEY_FAILED_CATALOG_UTIL = \"FAILURE: Failed to get catalog_util on current form.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_RUNNING_PRICE_VALIDATION, MESSAGE_KEY_VALIDATION_STEP, MESSAGE_KEY_FAILURE_EXPECTED, MESSAGE_KEY_SUCCESS_VALIDATED, MESSAGE_KEY_FAILED_CATALOG_UTIL]);\n\n\tfunction onFailure(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\t\n\tfunction getCatalogUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[MESSAGE_KEY_FAILED_CATALOG_UTIL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction assertPrice(catalogUtil) {\n\t\tvar pricing = catalogUtil.getPrice();\n\t\tfor (var key in step.inputs) {\n\t\t\tif (key == 'catalog_item')\n\t\t\t\tcontinue;\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_VALIDATION_STEP], key));\n\t\t\tif (step.inputs[key] && step.inputs[key] !== pricing[key]) {\n\t\t\t\tvar failMsg = formatMessage(messageMap[MESSAGE_KEY_FAILURE_EXPECTED], key, step.inputs[key], pricing[key]);\n\t\t\t\tonFailure(failMsg);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tonSuccess(messageMap[MESSAGE_KEY_SUCCESS_VALIDATED]);\n\t}\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_RUNNING_PRICE_VALIDATION]);\n\t\n\tgetCatalogUtil().then(assertPrice, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"13","active":"true","sys_tags":"","html_description":"<p>Step to validate price and recurring price of a Catalog Item in Service Portal.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item (SP)” step. This step cannot be used after “Order Catalog Item (SP)” step. <br /><span style=\"color: #ff6600;\">This step can not be used with Record Producers.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Validate Price and Recurring Price (SP)","sys_update_name":"sys_atf_step_config_095c4877732b03008e6b0d573cf6a717","name":"Validate Price and Recurring Price (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.price)\n\t\tdescription += gs.getMessage(\"Validate that price is {0}\", step.inputs.price) + \"\\n\";\n\t\n\tif (step.inputs.recurring_price)\n\t\tdescription += gs.getMessage(\"Validate that recurring price is {0}\", step.inputs.recurring_price) + \"\\n\";\n\n\tif (step.inputs.recurring_frequency)\n\t\tdescription += gs.getMessage(\"Validate that recurring price frequency is {0}\", step.inputs.recurring_frequency) + \"\\n\";\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-26 18:23:58","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"0ae5f9f2739713008e6b0d573cf6a718","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-18 09:30:21","sys_name":"Navigate within Order Guide (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_NAVIGATION = \"Navigating Order guide to given step.\";\n\tvar MESSAGE_KEY_SUCCESSFUL_NAVIGATE = \"SUCCESS: Navigation of Order Guide is successful.\";\n\tvar MESSAGE_KEY_FAILED_TO_NAVIGATE = \"FAILURE: Failed to navigate Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_GUIDE_UTIL = \"FAILURE: Unable to navigate Order Guide, g_form is not defined.\";\n\tvar FAILED_STOP_NAVIGATION = \"FAILURE: Navigation was not blocked by browser.\";\n\tvar SUCCESS_STOP_NAVIGATION = \"SUCCESS: Navigation is successfully blocked by browser submit.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_NAVIGATION, MESSAGE_KEY_SUCCESSFUL_NAVIGATE, MESSAGE_KEY_FAILED_TO_NAVIGATE, MESSAGE_KEY_FAILED_GUIDE_UTIL, FAILED_STOP_NAVIGATION, SUCCESS_STOP_NAVIGATION]);\n\t\n\tfunction onSuccess(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction getCatalogUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction goNext(guideUtil) {\n\t\tguideUtil.navigateToStep(step.inputs.guide_step + '', step.timeout * 1000).then(function (result) { //success case\n\t\t\tstep.inputs.assert_type == 'navigate_success' ? onSuccess(messageMap[MESSAGE_KEY_SUCCESSFUL_NAVIGATE]) : onFailure(messageMap[FAILED_STOP_NAVIGATION]);\n\t\t}, function() {//Error case\n\t\t\tstep.inputs.assert_type == 'navigate_success' ? onFailure(messageMap[MESSAGE_KEY_FAILED_TO_NAVIGATE]) : onSuccess(messageMap[SUCCESS_STOP_NAVIGATION]);\n\t\t});\n\t\t\n\t}\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_NAVIGATION]);\n\tgetCatalogUtil().then(goNext, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"5","active":"true","sys_tags":"","html_description":"<p>Use this step to navigate within an Order Guide</p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened an Order Guide using the &#34;Open an Order Guide (SP)&#34; step to navigate to any of the Order Guide step.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Navigate in Order Guide (SP)","sys_update_name":"sys_atf_step_config_0ae5f9f2739713008e6b0d573cf6a718","name":"Navigate within Order Guide (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"Navigate to \";\n\tswitch('' + step.inputs.guide_step) {\n\t\tcase \"1\":\n\t\t\tdescription += \"'Describe Needs'\";\n\t\t\tbreak;\n\t\tcase \"2\":\n\t\t\tdescription += \"'Choose Options'\";\n\t\t\tbreak;\n\t\tcase \"3\":\n\t\t\tdescription += \"'Summary'\";\n\t\t\tbreak;\n\t}\n\tdescription += \" step.\";\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-08-13 16:40:52","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"0d09dae4c3033300eaac11fe81d3ae1a","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-07-31 18:21:10","sys_name":"Validate Outbound Email Generated by Flow","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.ValidateOutboundEmailFromFlow","sys_created_by":"admin","order":"100","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"7","active":"true","sys_tags":"","html_description":"<div>Filters the Email [sys_email] table to find an email that was sent from a flow during testing.</div>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Finds and verifies an outbound email.","sys_update_name":"sys_atf_step_config_0d09dae4c3033300eaac11fe81d3ae1a","name":"Validate Outbound Email Generated by Flow","description_generator":"(function generateDescription(step) {\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description;\n    var conditions = step.inputs.conditions;\n    if (conditions == '' || conditions == '^EQ')\n        description = gs.getMessage(\"Validate that an email was generated by flow '{0}'\",\n                                    [step.inputs.source_flow.getDisplayValue()]);\n    else\n        description = gs.getMessage(\"Validate that an email was generated by flow '{0}' matching query:\\n{1}\",\n                                    [step.inputs.source_flow.getDisplayValue(),\n                                     descriptionGenerator.getConditionDescription('sys_email', step.inputs.conditions)]);\n    description += descriptionGenerator.getTimeoutDescription(step.timeout);\n    return description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-form color-red","sys_updated_on":"2023-10-12 19:52:21","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"0f4a128297202200abe4bb7503ac4af0","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-07-12 22:44:55","sys_name":"Click a UI Action","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"joel","order":"7200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Clicking a UI action\",\n\t\t\"FAILURE: Cannot submit '{0}' form. There is no form currently open\",\n\t\t\"FAILURE: Cannot submit '{0}' form in '{1}'. There is no form currently open\",\n\t\t\"FAILURE: Failed to find UI action '{0}' on '{1}' form\",\n\t\t\"FAILURE: Failed to find UI action '{0}' on '{1}' form in '{2}'\",\n\t\t\"Successfully confirmed that browser submits '{0}' form to server when clicking UI action '{1}'\",\n\t\t\"Successfully confirmed that browser submits '{0}' form to server when clicking UI action '{1}' in '{2}'\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking UI action '{1}'\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking UI action '{1}' in '{2}'\",\n\t\t\"Successfully clicked UI action '{0}' on '{1}' form\",\n\t\t\"Successfully clicked UI action '{0}' on '{1}' form in '{2}'\",\n\t\t\"FAILURE: UI action not defined in the step\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking UI action '{1}'\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking UI action '{1}' in '{2}'\",\n\t\t\"FAILURE: Browser failed to submit '{0}' form to server when clicking UI action '{1}'\",\n\t\t\"FAILURE: Browser failed to submit '{0}' form to server when clicking UI action '{1}' in '{2}'\",\n\t\t\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking UI action '{1}'\",\n\t\t\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking UI action '{1}' in '{2}'\",\n\t\t\"FAILURE: '{0}' form is not reloaded or redirected when clicking UI action '{1}'\",\n\t\t\"Waiting up to {0} seconds for form submit or page reload\",\n\t\t\"FAILURE: Page could not reload in time after completion of UI action in '{0}'\",\n\t\t\"FAILURE: Unknown error clicking UI action: '{0}'\"\n\t]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Clicking a UI action\"]);\n\n\t// Create a new ATF Form/UI step executor object and call the function to execute step\n\tvar afse = new ATFFormStepExecutor(step.inputs);\n\tafse.clickUIAction(step.timeout).then(passStep, failStep);\n\n\tfunction passStep(promiseReturn) {\n\n\t\tvar message = promiseReturn['msg'];\n\t\tvar recordSysId = promiseReturn['sysId'];\n\t\tvar formTable = promiseReturn['table'];\n\n\t\tif (!message) { // Configurable workspace result\n\t\t\tif (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that browser submits '{0}' form to server when clicking UI action '{1}'\"],  step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking UI action '{1}'\"],  step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"page_reloaded_or_redirected\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking UI action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse\n\t\t\t\tmessage = formatMessage(messages[\"Successfully clicked UI action '{0}' on '{1}' form\"], step.inputs.ui_action.name, step.inputs.table);\n\t\t}\n\n\t\tstepResult.outputs.table = formTable;\n\t\tif (recordSysId && recordSysId != \"-1\")\n\t\t\tstepResult.outputs.record_id = recordSysId;\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(result) {\n\t\tvar msg = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tmsg = result;\n\t\telse if (result.message) // An error was thrown\n\t\t\tmsg = result.message;\n\t\telse { // Configurable workspace result\n\t\t\tif (result.reason === \"action_not_present\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Failed to find UI action '{0}' on '{1}' form\"], step.inputs.ui_action.name, step.inputs.table);\n\t\t\telse if (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Browser failed to submit '{0}' form to server when clicking UI action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking UI action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"page_reloaded_or_redirected\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: '{0}' form is not reloaded or redirected when clicking UI action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Unknown error clicking UI action: '{0}'\"], step.inputs.ui_action.name);\n\t\t}\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"96","active":"true","sys_tags":"","html_description":"<p>Clicks a UI action on the current form.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. After this step, you may no longer use any form steps on the currently opened form as it is expected that this step will close it or move to a different page.</p>\n<p class=\"p1\"><span class=\"s1\">Outputs the table and sys_id of the record on which the action was clicked.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Clicks a UI action on the current form","sys_update_name":"sys_atf_step_config_0f4a128297202200abe4bb7503ac4af0","name":"Click a UI Action","description_generator":"(function generateDescription(step) {\n\tvar td, label, description, value, name, id;\n\tvar isStandardFormUI = !step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\";\n\tvar formUI = \"\";\n\tif (!isStandardFormUI)\n\t\tformUI = step.inputs.form_ui.getDisplayValue();\n\n\tvar workspaceKey = isStandardFormUI ? \"standard\" : \"workspace\";\n\tvar timeoutKey = step.timeout ? \"_timeout\" : \"\";\n\tvar assertKey;\n\ttd = GlideTableDescriptor.get(step.inputs.table);\n\tif (td)\n\t\tlabel = td.getLabel();\n\n\tif (step.inputs.action_type.getValue() == \"declarative_action\") {\n\t\tvar declarativeAction = step.inputs.declarative_action.getRefRecord();\n\t\tif (declarativeAction != null) {\n\t\t\tname = declarativeAction.getDisplayValue(\"label\");\n\t\t\tid = declarativeAction.sys_id;\n\t\t} else {\n\t\t\tgs.error(\"Click a UI action description generation error, could not find ref record '\" + step.inputs.declarative_action + \"'\");\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (gs.nil(step.inputs.declarative_action)) {\n\t\t\tgs.error(\"Click a UI action description generation error, no declarative action set.\");\n\t\t\treturn \"\";\n\t\t}\n\t} else {\n\t\tvar uiAction = step.inputs.ui_action.getRefRecord();\n\t\tif (uiAction != null) {\n\t\t\tname = uiAction.name;\n\t\t\tid = uiAction.sys_id;\n\t\t} else {\n\t\t\tgs.error(\"Click a UI action description generation error, could not find ref record '\" + step.inputs.ui_action + \"'\");\n\t\t\treturn \"\";\n\t\t}\n\n\t\tif (gs.nil(step.inputs.ui_action)) {\n\t\t\tgs.error(\"Click a UI action description generation error, no UI action set.\");\n\t\t\treturn \"\";\n\t\t}\n\t}\n\n\n\tvar messageMap = {\n\t\t\"form_submitted_standard\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server when clicking UI action '{1}'\", [label, name]),\n\t\t\"form_submitted_standard_timeout\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server within {1} of clicking UI action '{2}'\", [label, step.timeout.getDisplayValue(), name]),\n\t\t\"form_submitted_workspace\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server when clicking UI action '{1}' in '{2}'\", [label, name, formUI]),\n\t\t\"form_submitted_workspace_timeout\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server within {1} of clicking UI action '{2}' in '{3}'\", [label, step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"form_cancelled_standard\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server when clicking UI action '{1}'\", [label, name]),\n\t\t\"form_cancelled_standard_timeout\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server within {1} of clicking UI action '{2}'\", [label, step.timeout.getDisplayValue(), name]),\n\t\t\"form_cancelled_workspace\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server when clicking UI action '{1}' in '{2}'\", [label, name, formUI]),\n\t\t\"form_cancelled_workspace_timeout\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server within {1} of clicking UI action '{2}' in '{3}'\", [label, step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"page_reload_standard\" : gs.getMessage(\"Confirm that page reloads or redirects within {0} of clicking UI action '{1}'\", [step.timeout.getDisplayValue(), name]),\n\t\t\"page_reload_workspace\" : gs.getMessage(\"Confirm that page reloads or redirects within {0} of clicking UI action '{1}' in '{2}'\", [step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"workspace\" : gs.getMessage(\"Click UI action '{0}' on '{1}' form in '{2}'\", [name, label, formUI]),\n\t\t\"standard\" : gs.getMessage(\"Click UI action '{0}' on '{1}' form\", [name, label])\n\t};\n\n\t// Get the messages according to the assert type\n\tif (step.inputs.assert_type == 'form_submitted_to_server') {\n\t\tassertKey = \"form_submitted_\";\n\t\tdescription = messageMap[assertKey + workspaceKey + timeoutKey];\n\t} else if  (step.inputs.assert_type == 'form_submission_canceled_in_browser') {\n\t\tassertKey = \"form_cancelled_\";\n\t\tdescription = messageMap[assertKey + workspaceKey + timeoutKey];\n\t} else if (step.inputs.assert_type == 'page_reloaded_or_redirected') {\n\t\tassertKey = \"page_reload_\";\n\t\tdescription = messageMap[assertKey + workspaceKey];\n\t}\n\telse\n\t\tdescription = messageMap[workspaceKey];\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-blue","sys_updated_on":"2017-03-20 22:21:26","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"14872288df60220062fe6c7a4df26319","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-06 18:35:25","sys_name":"Record Insert","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.recordactions.RecordInsertActionStepRunner","sys_created_by":"nick.leclair","order":"2100","step_execution_generator":"","sys_mod_count":"13","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Inserts a record into a table. Specify the field values to set on the new record.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Outputs the table and the sys_id of the new record.</span></p>\n<p class=\"p3\"> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Insert a record to the table.","sys_update_name":"sys_atf_step_config_14872288df60220062fe6c7a4df26319","name":"Record Insert","description_generator":"(function generateDescription(step) {\n\tvar assertType = step.inputs.assert_type;\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description = gs.getMessage(\"Insert a record into '{0}' with the following values:\\n\", step.inputs.table);\n\tdescription += descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values);\n\tif (assertType == 'record_not_inserted')\n\t\tdescription += \"\\n\" + gs.getMessage(\"Confirm the record was not inserted\");\n\telse\n\t\tdescription += \"\\n\" + gs.getMessage(\"Confirm the record was successfully inserted\");\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-green","sys_updated_on":"2017-03-20 22:21:31","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"17a72288df60220062fe6c7a4df26397","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-06 18:36:36","sys_name":"Record Update","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.recordactions.RecordUpdateActionStepRunner","sys_created_by":"nick.leclair","order":"2200","step_execution_generator":"","sys_mod_count":"17","active":"true","sys_tags":"","html_description":"<p>Changes field values on a record on the server.</p>\n<h4>Additional Considerations</h4>\n<p>It is strongly advised to follow this step with a &#34;Record Validation&#34; step to ensure that the changes were applied.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Update a record in the table.","sys_update_name":"sys_atf_step_config_17a72288df60220062fe6c7a4df26397","name":"Record Update","description_generator":"(function generateDescription(step) {\n\tvar assertType = step.inputs.assert_type;\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description = gs.getMessage(\"Update a record in '{0}' with the following values:\\n\", step.inputs.table);\n\tdescription += descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values);\n\tif (assertType == 'record_not_updated')\n\t\tdescription += \"\\n\" + gs.getMessage(\"Confirm the record was not updated\");\n\telse\n\t\tdescription += \"\\n\" + gs.getMessage(\"Confirm the record was successfully updated\");\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-check-circle color-yellow-light","sys_updated_on":"2020-08-14 18:27:52","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"1b97cd31872022008182c9ded0e3ece5","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-07-11 22:05:42","sys_name":"Field Values Validation","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"maint","order":"4500","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tnew ATFFormStepExecutor(step.inputs)\n\t\t\t.validateFieldValues(step.timeout, step.sys_id, step.test_result_id)\n\t\t\t.then(onSuccess, onFail);\n\n\t\tfunction onSuccess(msg) {\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = msg;\n\t\t\tstepResult.status = \"success\";\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction onFail(reason) {\n\t\t\tstepResult.success = false;\n\n\t\t\t// The helper rejects with an Error if an error occurs, and with a string if the form simply didn't match\n\t\t\tif (reason instanceof Error) {\n\t\t\t\tstepResult.status = \"error\";\n\t\t\t\tstepResult.message = reason.message;\n\t\t\t} else {\n\t\t\t\tstepResult.status = \"failure\";\n\t\t\t\tstepResult.message = reason;\n\t\t\t}\n\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\t\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"44","active":"true","sys_tags":"","html_description":"<p>Validates field values on the current form.</p>\n<h4>Additional Considerations</h4>\n<p><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. It is recommended to not run this step directly after a &#34;Submit a Form&#34; or &#34;Click a UI Action&#34; step.</p>\n<p>Several conditions can be applied to the same field, if desired.</p>\n<p>This step can be used in any order with the &#34;Set Field Values&#34;, &#34;Field State Validation&#34;, and &#34;UI Action Visibility&#34; steps.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Validates field values on the current form.","sys_update_name":"sys_atf_step_config_1b97cd31872022008182c9ded0e3ece5","name":"Field Values Validation","description_generator":"(function generateDescription(step) {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description;\n\n\tif (!step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\")\n\t\tdescription = gs.getMessage(\"Validate that the form matches the following condition:\") + \"\\n\";\n\telse\n\t\tdescription = gs.getMessage(\"Validate that the form in '{0}' matches the following condition:\", step.inputs.form_ui.getDisplayValue()) + \"\\n\";\n\n\tdescription += descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.conditions);\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\treturn description;\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-26 18:50:15","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"1df5d27073a71300688e0d573cf6a751","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-24 16:56:21","sys_name":"Review Order Guide Summary (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4500","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_VALIDATE_ITEMS = \"Validating items included in Order guide.\";\n\tvar MESSAGE_KEY_SUCCESSFUL_VALIDATE = \"SUCCESS: Successfully validated all items and price of Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_TO_VALIDATE = \"FAILURE: Failed to validate some items in Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_GUIDE_UTIL = \"FAILURE: Unable to validate, g_form is not defined.\";\n\tvar MESSAGE_KEY_FAILED_PRICE_VALIDATE = \"FAILURE: Failed to validate price of Order Guide.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_VALIDATE_ITEMS, MESSAGE_KEY_SUCCESSFUL_VALIDATE, MESSAGE_KEY_FAILED_TO_VALIDATE, MESSAGE_KEY_FAILED_GUIDE_UTIL, MESSAGE_KEY_FAILED_PRICE_VALIDATE]);\n\t\n\tfunction onSuccess(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction getGuideUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == undefined) {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction validateItems(guideUtil) {\n\t\tvar guideStage = 2;\n\t\tif (guideUtil.validateIncludedList(step.inputs.catalog_items + '', guideStage)) {\n\t\t\tif (step.inputs.price === '')\n\t\t\t\tonSuccess(messageMap[MESSAGE_KEY_SUCCESSFUL_VALIDATE]);\n\t\t\telse if (guideUtil.getGuidePrice() === step.inputs.price)\n\t\t\t\tonSuccess(messageMap[MESSAGE_KEY_SUCCESSFUL_VALIDATE]);\n\t\t\telse\n\t\t\t\tonFailure(messageMap[MESSAGE_KEY_FAILED_PRICE_VALIDATE]);\n\t\t}\n\t\telse\n\t\t\tonFailure(messageMap[MESSAGE_KEY_FAILED_TO_VALIDATE]);\n\t}\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_VALIDATE_ITEMS]);\n\tgetGuideUtil().then(validateItems, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>Review Order Guide Summary in Service Portal</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the order guide and are on the &#39;Summary&#39; stage.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Review Order Guide Summary (SP)","sys_update_name":"sys_atf_step_config_1df5d27073a71300688e0d573cf6a751","name":"Review Order Guide Summary (SP)","description_generator":"function generateDescription() {\n    var description = \"Validate that following will be ordered: \";\n\n\tif (step.inputs.catalog_items.hasMapping())\n\t\treturn description += step.inputs.catalog_items.getDisplayValue();\n\n\tvar gr = new GlideRecord('sc_cat_item');\n\tgr.addQuery('sys_id', 'IN', step.inputs.catalog_items + '');\n\tgr.query();\n\twhile (gr.next())\n\t\tdescription += gr.name + ', ';\n\treturn description.slice(0, -2);\n}\ngenerateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-search color-yellow-light","sys_updated_on":"2023-10-02 22:22:24","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"1dfece935332120028bc29cac2dc3478","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-04-20 19:18:13","sys_name":"Field State Validation","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4600","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\t\tvar messages = getMessages([\n\t\t\t\"Validating field states\",\n\t\t\t\"FAILURE: Unable to perform field state validation because g_form is not defined. A valid form must be open before running assertions\",\n\t\t\t\"FAILURE: Unable to check if field '{0}' is {1}. That field is not present on the form\",\n\t\t\t\"FAILURE: Expected field '{0}' to be {1} but it was not {2}\",\n\t\t\t\"FAILURE: Expected field '{0}' to not be {1} but it was {2}\",\n\t\t\t\"FAILURE: Type of the form on the page is incorrect\",\n\t\t\t\"Successfully validated all field states\",\n\t\t\t\"Successfully validated all field states in '{0}'\",\n\t\t\t\"Failed while validating the following states in '{0}':\"\n\t\t]);\n\n\t\tassertionObject.canMutatePage = step.can_mutate_page;\n\n\t\tvar formStepExecutor = new ATFFormStepExecutor(step.inputs);\n\t\tformStepExecutor.validateFieldState(step.timeout).then(handleSuccess, handleFailure);  // retryCount\n\n\t\tfunction handleFailure(result) {\n\t\t\tvar failMessage = \"\";\n\n\t\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\t\tfailMessage = result;\n\t\t\telse if (result.message) // Conventional error\n\t\t\t\tfailMessage = result.message;\n\t\t\telse { // Workspace result\n\t\t\t\tvar failures = result.failures;\n\n\t\t\t\tfailMessage = \"\";\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.mandatory, \"mandatory\", true);\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.not_mandatory, \"mandatory\", false);\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.read_only, \"read-only\", true);\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.not_read_only, \"read-only\", false);\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.visible, \"visible\", true);\n\t\t\t\tfailMessage = appendFailures(failMessage, failures.not_visible, \"visible\", false);\n\t\t\t}\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(failMessage);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = failMessage;\n\t\t\tstep.defer.reject();\n\t\t}\n\n\t\tfunction handleSuccess(message) {\n\t\t\tif (typeof message !== \"string\") // Workspace result\n\t\t\t\tmessage = messages[\"Successfully validated all field states\"];\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction appendFailures(message, failures, property, expectedValue) {\n\t\t\tif (!failures)\n\t\t\t\treturn message;\n\n\t\t\tfailures.forEach(function(fieldName) {\n\t\t\t\tif (message.length > 0)\n\t\t\t\t\tmessage += \"\\n\";\n\n\t\t\t\tif (expectedValue)\n\t\t\t\t\tmessage += formatMessage(messages[\"FAILURE: Expected field '{0}' to be {1} but it was not {2}\"], fieldName, property, property);\n\t\t\t\telse\n\t\t\t\t\tmessage += formatMessage(messages[\"FAILURE: Expected field '{0}' to not be {1} but it was {2}\"], fieldName, property, property);\n\t\t\t});\n\n\t\t\treturn message;\n\t\t}\n\n\t};\n})(step, stepResult, assertionObject);","sys_mod_count":"52","active":"true","sys_tags":"","html_description":"<p>Validates states of the desired fields.</p>\n<p>The field states can be one (or more) of mandatory, not mandatory, read only, not read only, visible and not visible.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p2\"><span class=\"s1\">If a timeout is specified, the Client Test Runner will check the validation conditions every second until the timeout has been reached or the conditions are met.</span></p>\n<p class=\"p2\"><span class=\"s1\">If a timeout is exceeded or one of the validations is not correct the step will fail.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Edit the mandatory, non mandatory, read only, non read only, visible and non visible fields.","sys_update_name":"sys_atf_step_config_1dfece935332120028bc29cac2dc3478","name":"Field State Validation","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\tvar table = step.inputs.table;\n\n\tif (step.inputs.form_ui.toString() === \"standard_ui\")\n\t\tdescription = GlideSysMessage.format(\"Assert the following:\");\n\telse\n\t\tdescription = GlideSysMessage.format(\"Assert the following in '{0}':\", step.inputs.form_ui.getDisplayValue());\n\n\tvar descGenerator = new ATFStepDescriptionGenerator();\n\tif (!gs.nil(step.inputs.visible))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are visible: {0}\", descGenerator.getFields(step.inputs.visible, table));\n\n\tif (!gs.nil(step.inputs.not_visible))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are not visible: {0}\", descGenerator.getFields(step.inputs.not_visible, table));\n\n\tif (!gs.nil(step.inputs.read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are read only: {0}\", descGenerator.getFields(step.inputs.read_only, table));\n\n\tif (!gs.nil(step.inputs.not_read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are not read only: {0}\", descGenerator.getFields(step.inputs.not_read_only, table));\n\n\tif (!gs.nil(step.inputs.mandatory))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are mandatory: {0}\", descGenerator.getFields(step.inputs.mandatory, table));\n\n\tif (step.inputs.not_mandatory)\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"The following fields are not mandatory: {0}\", descGenerator.getFields(step.inputs.not_mandatory, table));\n\n\n\tvar timeoutDescription = descGenerator.getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-08-13 13:02:00","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"1ebb17799f1303002528d4b4232e70c0","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-12-28 18:07:16","sys_name":"Variable State Validation (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"2500","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_VALIDATIONS = \"Running Field State Validations\";\n\tvar FAIL_MSG_NO_GFORM = \"FAILURE: Unable to perform field validation because g_form is not defined. A valid form must be open before running assertions\";\n\tvar FAIL_MSG_NOT_ON_FORM = \"FAILURE: Unable to check if field '{0}' is {1}. That field is not present on the form. See screenshot\";\n\tvar FAIL_MSG_FIELD_EXPECTED = \"FAILURE: Expected field '{0}' to be {1} but it was not {2}. See screenshot\";\n\tvar FAIL_MSG_FIELD_NOT_EXPECTED = \"FAILURE: Expected field '{0}' to not be {1} but it was {2}. See screenshot\";\n\tvar SUCCESS_MSG = \"Successfully validated all field assertions.\";\n\tvar FAIL_MSG = \"FAILURE: One or more fields failed to validate correctly.\";\n\n\tvar messageMap = new GwtMessage().getMessages([FAIL_MSG_NO_GFORM, FAIL_MSG_NOT_ON_FORM, FAIL_MSG_FIELD_EXPECTED, FAIL_MSG_FIELD_NOT_EXPECTED, SUCCESS_MSG, FAIL_MSG, MESSAGE_KEY_RUNNING_VALIDATIONS]);\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_RUNNING_VALIDATIONS]);\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\t//Only initialize an interval if we need one\n\tvar utilInterval = null;\n\tvar assertInterval = null;\n\tif (retryCount > 0) {\n\t\tutilInterval = g_ui_testing_util._getAngularInjector(\"$interval\");\n\t\tassertInterval = utilInterval(validateFields, 1000);\n\t}\n\telse {\n\t\tvalidateFields(0);\n\t}\n\n\tfunction validateFields(iterationCount) {\n\t\t// reset the step result values to support being called multiple times\n\t\tstepResult.success = true;\n\t\tstepResult.message = \"\";\n\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameWindow().g_form;\n\t\tif (!theGForm) { // g_form is not defined, fail the step\n\t\t\tstepResult.success = false;\n\t\t\tmessage = messageMap[FAIL_MSG_NO_GFORM];\n\t\t} else {\n\t\t\t// Mandatory\n\t\t\tassertFields(\"mandatory\", true, step.inputs.mandatory);\n\t\t\tassertFields(\"mandatory\", false, step.inputs.not_mandatory);\n\n\t\t\t// Read Only\n\t\t\tassertFields(\"read only\", true, step.inputs.read_only);\n\t\t\tassertFields(\"read only\", false, step.inputs.not_read_only);\n\n\t\t\t// visible\n\t\t\tassertFields(\"visible\", true, step.inputs.visible);\n\t\t\tassertFields(\"visible\", false, step.inputs.not_visible);\n\t\t}\n\n\t\tif(stepResult.success) {\n\t\t\tif(utilInterval != null)\n\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\tstepResult.message = messageMap[SUCCESS_MSG];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[SUCCESS_MSG]);\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tif (iterationCount >= retryCount || utilInterval == null) {\n\t\t\t\tif (utilInterval != null)\n\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[FAIL_MSG]);\n\t\t\t\tstep.defer.reject();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Asserts something about a list of fields\n\t * @param assertType \"mandatory\", \"read only\", \"visible\"\n\t * @param expected boolean, for supporting negative cases\n\t * @param fieldList comma separated list of field names\n\t */\n\tfunction assertFields(assertType, expected, fieldList){\n\t\tif (!fieldList)\n\t\t\treturn;\n\n\t\tvar fieldNames = fieldList.split(\",\");\n\t\tfor (var i = 0; i < fieldNames.length; i++) {\n\t\t\tvar assertResult = assertField(assertType, expected, \"IO:\" + fieldNames[i]);\n\t\t\tif (!assertResult.success) {\n\t\t\t\tstepResult.success = false;\n\t\t\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + assertResult.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Asserts someting about a field\n\t * @param assertType \"mandatory\", \"read only\", \"visible\"\n\t * @param expected boolean, for supporting negative cases\n\t * @param field the field name to use\n\t * @returns {{success: boolean, message: string}}\n\t */\n\tfunction assertField(assertType, expected, field) {\n\t\tfunction getVisibility(field) {\n\t\t\tif (!field)\n\t\t\t\treturn false;\n\n\t\t\tif (!field._visible || !field._parent)\n\t\t\t\treturn field._visible;\n\t\t\treturn getVisibility(theGForm.getField(field._parent));\n\t\t}\n\n\t\tvar result = {\n\t\t\tsuccess: true,\n\t\t\tmessage: \"\"\n\t\t};\n\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameWindow().g_form;\n\n\t\tif (!theGForm.hasField(field) && \"visible\" != assertType) { // field is not present on the form (but don't fail if we are checking visibility)\n\t\t\tresult.success = false;\n\t\t\tresult.message = formatMessage(messageMap[FAIL_MSG_NOT_ON_FORM], theGForm.getLabel(field) || field, assertType);\n\t\t\treturn result;\n\t\t}\n\n\t\tvar actualValue;\n\n\t\tif (\"mandatory\" == assertType)\n\t\t\tactualValue = theGForm.isMandatory(field);\n\t\telse if (\"read only\" == assertType)\n\t\t\tactualValue = theGForm.isReadOnly(field);\n\t\telse if (\"visible\" == assertType){\n\t\t\tvar fromField = theGForm.getField(field);\n\t\t\tactualValue = getVisibility(fromField);\n\t\t}\n\t\tif (expected != actualValue){ // failed\n\t\t\tresult.success = false;\n\t\t\tvar failMessage = (expected)? messageMap[FAIL_MSG_FIELD_EXPECTED] : messageMap[FAIL_MSG_FIELD_NOT_EXPECTED];\n\t\t\tresult.message = formatMessage(failMessage, theGForm.getLabel(field) || field, assertType, assertType);\n\t\t}\n\t\treturn result;\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"8","active":"true","sys_tags":"","html_description":"<p>Validates states of the desired variables.</p>\n<p>The variable states can be one (or more) of mandatory, not mandatory, read only, not read only, visible and not visible.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p2\"><span class=\"s1\">If a timeout is specified, the Client Test Runner will check the validation conditions every second until the timeout has been reached or the conditions are met.</span></p>\n<p class=\"p2\"><span class=\"s1\">If a timeout is exceeded or one of the validations is not correct the step will fail.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Edit the mandatory, non mandatory, read only, non read only, visible and non visible variables.","sys_update_name":"sys_atf_step_config_1ebb17799f1303002528d4b4232e70c0","name":"Variable State Validation (SP)","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tvar scAtfUtil = new SCATFUtil();\n\tif (!gs.nil(step.inputs.visible))\n\t\tdescription = gs.getMessage(\"Confirm that the following variables are visible: {0}\", step.inputs.visible.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.not_visible))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not visible: {0}\", step.inputs.not_visible.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are read only: {0}\", step.inputs.read_only.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.not_read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not read only: {0}\", step.inputs.not_read_only.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.mandatory))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are mandatory: {0}\", step.inputs.mandatory.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (step.inputs.not_mandatory)\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not mandatory: {0}\", step.inputs.not_mandatory.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tdescription += \"\\n\";\n\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n}\n generateDescription(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-yellow","sys_updated_on":"2017-03-20 22:21:41","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"1f39a288df60220062fe6c7a4df2639d","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-06 18:43:30","sys_name":"Record Validation","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.recordactions.RecordValidateActionStepRunner","sys_created_by":"nick.leclair","order":"2400","step_execution_generator":"","sys_mod_count":"18","active":"true","sys_tags":"","html_description":"<p>Validates that a record meets the specified conditions on the server-side. </p>\n<p>Several conditions can be applied to the same field, if desired.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Select a record and validate field values.","sys_update_name":"sys_atf_step_config_1f39a288df60220062fe6c7a4df2639d","name":"Record Validation","description_generator":"(function generateDescription(step) {\n\tvar assertType = step.inputs.assert_type;\n\tif (assertType == 'record_not_found')\n\t\treturn gs.getMessage(\"Validate that record '{0}' does not exist\", step.inputs.record_id.getDisplayValue());\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description = GlideSysMessage.format(\"Validate record from table '{0}' matches the following condition:\", step.inputs.table) + \"\\n\";\n\tdescription += descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values);\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-19 12:14:33","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"2098710873631300688e0d573cf6a7d7","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-22 06:54:18","sys_name":"Review Item in Order Guide (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"5000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_OPEN_ITEM = \"Expanding the catalog item.\";\n\tvar MESSAGE_KEY_SUCCESSFUL_EXPANDED = \"SUCCESS: Item is expanded and \" + (step.inputs.included == 'true' ? 'included.' : 'excluded.');\n\tvar MESSAGE_KEY_FAILED_TO_EXPAND = \"FAILURE: Item is not present in the Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_GUIDE_UTIL = \"FAILURE: Unable to validate, g_form is not defined.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_OPEN_ITEM, MESSAGE_KEY_SUCCESSFUL_EXPANDED, MESSAGE_KEY_FAILED_TO_EXPAND, MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\n\tfunction onSuccess(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction getGuideUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == undefined) {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction openItem(guideUtil) {\n\t\tguideUtil.openItem(step.inputs.catalog_item + '', step.inputs.included, step.timeout * 1000).then(\n\t\t\tfunction() {\n\t\t\t\tonSuccess(messageMap[MESSAGE_KEY_SUCCESSFUL_EXPANDED]);\n\t\t\t},\n\t\t\tfunction() {\n\t\t\t\tonFailure(messageMap[MESSAGE_KEY_FAILED_TO_EXPAND]);\n\t\t});\t\t\n\t}\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_OPEN_ITEM]);\n\tgetGuideUtil().then(openItem, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"17","active":"true","sys_tags":"","html_description":"<p>Review individual items in the Order Guide and choose to include the item or not</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the order guide and are on the &#39;Choose Options&#39; stage.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Review Item in Order Guide (SP)","sys_update_name":"sys_atf_step_config_2098710873631300688e0d573cf6a7d7","name":"Review Item in Order Guide (SP)","description_generator":"function generateDescription() {\n    var description = \"Open '\";\n\tvar itemName = step.inputs.catalog_item.getDisplayValue();\n\tdescription += itemName;\n\tdescription += \"' catalog item & \" + (step.inputs.included ? 'include' : 'exclude') + ' this item.';\n\treturn description;\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:44:26","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"22aed143dfe0220062fe6c7a4df2639d","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-07-15 20:59:00","sys_name":"Click Modal Button","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"nick.leclair","order":"7000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tnew ATFFormStepExecutor(step.inputs)\n\t\t\t.clickModalButton(step.timeout)\n\t\t\t.then(handleSuccess, handleFailure);\n\n\t\tfunction handleSuccess(message) {\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction handleFailure(message) {\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"100","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Clicks a button within a modal in the specified Form UI. Optionally sets field values for modals in a workspace UI.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p class=\"p1\"><span class=\"s1\">In the standard platform UI, this step clicks the button by id on the specified modal UI page and validates the following:</span></p>\n<ul style=\"list-style-position: inside;\"><li class=\"p1\"><span class=\"s1\">UI page was opened in a modal</span></li><li class=\"p1\"><span class=\"s1\">Button is visible and enabled</span></li></ul>\n<p class=\"p1\"><span class=\"s1\">In a workspace UI, this step clicks the <code>Confirm</code> or <code>Cancel</code> action within the modal, and optionally sets field values.</span></p>\n<ul style=\"list-style-position: inside;\"><li class=\"p1\">Only modals opened with the following <span class=\"s1\"><code>g_modal</code></span> functions are supported:<span class=\"s1\"> <code>alert</code>, <code>confirm</code>, <code>confirmDestroy</code>, <code>showFields</code></span></li></ul>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Timeout</code> field to specify the time to wait for the modal and button to appear.</span></p>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Assertion timeout</code> field to specify the time to wait for the assertion to pass or fail after clicking the button.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Edit the Click Modal step to supply information about the modal.","sys_update_name":"sys_atf_step_config_22aed143dfe0220062fe6c7a4df2639d","name":"Click Modal Button","description_generator":"function generateDescription() {\n\tvar ui_page, button; \n\tif (step.inputs.ui_page != null || step.inputs.ui_page != \"\")\n\t\tui_page = step.inputs.ui_page.getDisplayValue();\n\t\n\tif (step.inputs.button != null)\n\t\tbutton = step.inputs.button;\n\n\tvar isStandardFormUI = !step.inputs.form_ui || step.inputs.form_ui == 'standard_ui';\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description = '';\n\tif (isStandardFormUI)\n\t\tdescription = gs.getMessage(\"Click on the button with id '{0}' within the modal UI page '{1}'\", [button, ui_page]);\n\telse {\n\t\tvar formUI = step.inputs.form_ui.getDisplayValue();\n\t\tvar modalAction = step.inputs.modal_action.getDisplayValue();\n\t\tif (step.inputs.modal_values) {\n\t\t\tvar modalValues = JSON.parse(step.inputs.modal_values);\n\t\t\tvar keys = Object.keys(modalValues);\n\t\t\tdescription += gs.getMessage(\"Set the values within the modal in '{0}' as follows:\", [formUI]) + '\\n';\n\t\t\tfor (var i = 0; i < keys.length; i += 1)\n\t\t\t\tdescription += gs.getMessage(\"{0} = '{1}'\", [keys[i], modalValues[keys[i]]]) + '\\n';\n\n\t\t\tdescription += '\\n';\n\t\t\tdescription += gs.getMessage(\"Click the '{0}' modal action\", [modalAction]);\n\t\t} else\n\t\t\tdescription += gs.getMessage(\"Click the '{0}' modal action within the modal in '{1}'\", [modalAction, formUI]);\n\t}\n\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\n\tif (step.inputs.assert_type == 'page_reloaded') {\n\t\tif (!step.inputs.assertion_timeout)\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is closed and page is reloaded or redirected\");\n\t\telse\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is closed and page is reloaded or redirected within {0}\", step.inputs.assertion_timeout.getDisplayValue());\n\t} else if (step.inputs.assert_type == 'page_not_reloaded') {\n\t\tif (!step.inputs.assertion_timeout)\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is closed and page not reloaded or redirected\");\n\t\telse\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is closed and page not reloaded or redirected after {0}\", step.inputs.assertion_timeout.getDisplayValue());\n\t} else if (step.inputs.assert_type == 'modal_not_closed') {\n\t\tif (!step.inputs.assertion_timeout)\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is not closed\");\n\t\telse\n\t\t\tdescription += '\\n' + gs.getMessage(\"Assert the modal is not closed after {0}\", step.inputs.assertion_timeout.getDisplayValue());\n\t}\n\n\treturn description;\n}\n\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-04 04:15:44","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"2516c0e1c332220076173b0ac3d3ae39","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-10-30 19:04:20","sys_name":"Open a Catalog Item","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1300","step_execution_generator":"\n\t(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n//messages for message map\n\tvar MESSAGE_KEY_OPENING = \"Opening\";\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = \"Successfully opened\";\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = \"FAILURE: Failed to open\";\n\tvar MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM = \"{0} the '{1}'\";\n\tvar MESSAGE_KEY_NULL_ID = \"FAILURE: Failed to open the '{0}' with the id 'null'\";\n\tvar MESSAGE_KEY_INCORRECT_ID = \"A sys_id was expected, however none was present. Please ensure that you are passing in the sys_id of catalog item correctly\";\n\t//init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_OPENING, MESSAGE_KEY_SUCCESSFULY_OPENED, MESSAGE_KEY_FAILED_TO_OPEN, MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM, MESSAGE_KEY_NULL_ID, MESSAGE_KEY_INCORRECT_ID]);\n\ng_ui_testing_util.setTestStepStatusMessage(getStepMessageWithPrefix(messageMap[MESSAGE_KEY_OPENING]));\n\n\tfunction onSuccess() {\n\t\tvar message = getStepMessageWithPrefix(messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction onFailure(reason) {\n\t\tvar message = getStepMessageWithPrefix(messageMap[MESSAGE_KEY_FAILED_TO_OPEN]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message = message + \"\\n\" + reason;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction getStepMessageWithPrefix(prefix) {\n\t\tvar description;\n\t\tdescription = formatMessage(messageMap[MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM], [prefix, \"catalog item\"]);\n\t\treturn description;\n\t}\n\n\tfunction openForm() {\n\n        g_ui_testing_util.openCatalogItem(step.inputs.catalog_item)\n\t\t\t.then(onSuccess, onFailure);\n    }\n\n    if (!step.inputs.catalog_item){\n        message = formatMessage(messageMap[MESSAGE_KEY_NULL_ID], \"catalog item\");\n        var reason = formatMessage(messageMap[MESSAGE_KEY_INCORRECT_ID]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message = message + \"\\n\" + reason;\n\t\tstep.defer.reject();\n\t\treturn;\n\t} else {\n\t\topenForm();\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"11","active":"true","sys_tags":"","html_description":"<p>Opens a catalog item.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the item.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Open a catalog item.","sys_update_name":"sys_atf_step_config_2516c0e1c332220076173b0ac3d3ae39","name":"Open a Catalog Item","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n\tvar catItemName = step.inputs.catalog_item.getDisplayValue();\n    var description = gs.getMessage(\"Open '{0}' catalog item\", catItemName);\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2024-09-30 06:44:46","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"26302752a33012100df567d1361e61ef","class_type":"java","sys_updated_by":"admin","sys_created_on":"2024-09-24 23:37:09","sys_name":"Set Output Variables","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.SetOutputVariablesStepRunner","sys_created_by":"admin","order":"80","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//\n//            // When writing scripts in ATF, use waitOneSecond() instead of gs.sleep()\n//            // since gs.sleep() may not work in non-global scopes\n//            sn_atf.AutomatedTestingFramework.waitOneSecond();\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>Sets the output variables for the current reusable test</p>\n<h4>Additional Considerations</h4>\n<p>Reusable output variables can be created in the reusable test form and populated with values in this step</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Sets the output variables for the current reusable test","sys_update_name":"sys_atf_step_config_26302752a33012100df567d1361e61ef","name":"Set Output Variables","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\t// your code here\n\treturn description;\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-yellow","sys_updated_on":"2019-08-21 21:54:09","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"263313e4c3123300eaac11fe81d3aef9","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-06-24 15:48:24","sys_name":"Generate Random String","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.RandomDataRunner","sys_created_by":"admin","order":"2700","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"8","active":"true","sys_tags":"","html_description":"<p>Generates a string that can be used as test data for another test step. By default, the string is 10 characters long. The maximum length of the string is 10,000 characters.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Generate a random string.","sys_update_name":"sys_atf_step_config_263313e4c3123300eaac11fe81d3aef9","name":"Generate Random String","description_generator":"(function generateDescription(step) {\n\tvar description = gs.getMessage(\"Generate string of length: {0}\", step.inputs.length.getDisplayValue());\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-10-29 09:20:34","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"2c8882759f1303002528d4b4232e708a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-12-28 12:03:41","sys_name":"Validate Variable Values (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1600","step_execution_generator":"\t(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_VALIDATION = \"Running variable value validation\";\n\tvar MESSAGE_KEY_SERVER_MISSING_VALS = \"The server response was missing one or more values.\";\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_RUNNING_VALIDATION, MESSAGE_KEY_SERVER_MISSING_VALS]);\n\tg_ui_testing_util.setTestStepStatusMessage(messages[MESSAGE_KEY_RUNNING_VALIDATION]);\n\t\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tvar utilInterval = null;\n\tvar assertInterval = null;\n\n\tif (retryCount > 0) {\n\t\tutilInterval = g_ui_testing_util._getAngularInjector(\"$interval\");\n\t\tassertInterval = utilInterval(assertForm, 1000);\n\t}\n\telse {\n\t\tassertForm(0);\n\t}\n\n\tfunction assertForm(iterationCount) {\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar conditionEvalAjax = new GlideAjax(\"com.glide.automated_testing_framework.processors.SCATFConditionEvaluator\");\n\t\tvar serializedForm = testFrameWindow.g_form.serialize().map(function(field){ return field.variable_name + \"=\" + encodeURIComponent(field.value);}).join(\"&\");\n\t\tconditionEvalAjax.addEncodedString(serializedForm);\n\t\tconditionEvalAjax.addParam(\"sysparm_step_id\", step.sys_id);\n\t\tconditionEvalAjax.addParam(\"sysparm_test_result_id\", step.test_result_id);\n\t\tconditionEvalAjax.getXML(handleConditionEvalAjaxResponse);\n\n\t\tfunction handleConditionEvalAjaxResponse(response){\n\t\t\ttry{\n\t\t\t\tvar evaluationResult = response.responseXML.getElementsByTagName(\"evaluation_result\")[0];\n\t\t\t\tvar evalStatus = evaluationResult.getAttribute(\"status\");\n\t\t\t\tvar evalMessage = evaluationResult.getAttribute(\"message\");\n\n\t\t\t\tstepResult.success = (\"success\" === evalStatus);\n\t\t\t\tstepResult.status = evalStatus;\n\t\t\t\tstepResult.message = evalMessage;\n\t\t\t}catch(e){\n\t\t\t\tstepResult.success = false;\n\t\t\t\tstepResult.status = \"error\";\n\t\t\t\tstepResult.message = messages[MESSAGE_KEY_SERVER_MISSING_VALS];\n\t\t\t}\n\n\t\t\tif(stepResult.success) {\n\t\t\t\tif (utilInterval != null)\n\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\t\tstep.defer.resolve();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (iterationCount >= retryCount || utilInterval == null) {\n\t\t\t\t\tif (utilInterval != null)\n\t\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\t\t\tstep.defer.reject();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"8","active":"true","sys_tags":"","html_description":"<p>Validates variable values on the current Catalog Item or Record Producer</p>\n<h4>Additional Considerations</h4>\n<p><strong>Catalog Item</strong> - In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item” step. This step cannot be used after “Order Catalog Item” step.</p>\n<p><strong>Record Producer</strong>  - In order to use this step you must have already opened a Record Producer page using the “Open a Record Producer” step. This step cannot be used after “Submit Record Producer” step.</p>\n<p>Several conditions can be applied to the same variable, if desired</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Validates Variable values on the Catalog Item.","sys_update_name":"sys_atf_step_config_2c8882759f1303002528d4b4232e708a","name":"Validate Variable Values (SP)","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description = gs.getMessage(\"Validate that the answer match the following condition:\") + \"\\n\";\n\tvar scAtfUtil = new SCATFUtil();\n\tdescription += scAtfUtil.getValueValidationDescription(step.inputs.catalog_conditions);\n\t//Use breadcrumbs to generate the query english text\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-10-09 21:27:19","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"2d82e3c7531400109e02ddeeff7b12a7","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-10-09 21:27:19","sys_name":"Record Query","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.recordactions.RecordQueryActionStepRunner","sys_created_by":"admin","order":"2000","step_execution_generator":"","sys_mod_count":"2","active":"true","sys_tags":"","html_description":"<p>Perform a database query to verify if a record matching the conditions set in this step are met.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Select a record and validate field values.","sys_update_name":"sys_atf_step_config_2d82e3c7531400109e02ddeeff7b12a7","name":"Record Query","description_generator":"(function generateDescription(step) {\n\tvar td = GlideTableDescriptor.get(step.inputs.table);\n\tif (!td) {\n\t\tgs.log(\"Invalid table name in test step: \" + step.inputs.table);\n\t\treturn gs.getMessage(\"Set field values\");\n\t}\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description;\n\tvar assertType = step.inputs.assert_type;\n\tif (assertType == 'no_records_match_query')\n\t\tdescription = gs.getMessage(\"Validate there are not any records in '{0}' matching query:\\n{1}\",\n\t\t\t\t\t\t\t\t\t[step.inputs.table.getDisplayValue(),\n\t\t\t\t\t\t\t\t\t descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values)]);\n\telse\n\t\tdescription = gs.getMessage(\"Validate there is at least one record in '{0}' matching query:\\n{1}\",\n\t\t\t\t\t\t\t\t\t[step.inputs.table.getDisplayValue(),\n\t\t\t\t\t\t\t\t\t descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values)]);\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\treturn description;\n\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-05-28 08:57:25","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"2e4229b48703030070870cf888cb0b5c","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-12-12 20:31:47","sys_name":"Set Variable Values (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1300","step_execution_generator":"(function(step, stepResult, assertionObject) {\n\n    assertionObject.executeStep = function(step, stepResult) {\n        var MESSAGE_KEY_SETTING_FIELDS = \"Setting field values\";\n        var MESSAGE_KEY_FAILED_NO_G_FORM = \"FAILURE: Unable to set values, g_form is not defined. A valid form must be open before setting values\";\n        var MESSAGE_KEY_SKIP_SETTING = \"Skipping setting a value, no field or value was given\";\n        var MESSAGE_KEY_SKIP_SETTING_TO_VAL = \"Skipping setting field to value '{0}', no field was given\";\n        var MESSAGE_KEY_NOT_EDITABLE_FIELD = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not editable. See screenshot\";\n        var MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not present on the form. See screenshot\";\n        var MESSAGE_KEY_SUCCESSFULLY_SET_TO = \"Successfully set field '{0}' to value '{1}'\";\n        var MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF = \"Successfully set field '{0}' to valid reference value '{1}'\";\n        var MESSAGE_KEY_FAILURE_INVALID_REF = \"FAILURE: Failed to set field '{0}' to value '{1}' because the reference is NOT valid.\";\n\n        function updateStepResultMessage(message) {\n            stepResult.message += (stepResult.message ? (\"\\n\") : \"\") + message;\n        }\n\n        function passStep() {\n            g_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n            stepResult.success = true;\n            step.defer.resolve();\n        }\n\n        function failStep(reason) {\n            g_ui_testing_util.setTestStepStatusMessage(reason);\n            stepResult.success = false;\n            updateStepResultMessage(reason);\n            step.defer.reject();\n        }\n\n        var messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SETTING_FIELDS, MESSAGE_KEY_FAILED_NO_G_FORM, MESSAGE_KEY_SKIP_SETTING, MESSAGE_KEY_SKIP_SETTING_TO_VAL, MESSAGE_KEY_NOT_EDITABLE_FIELD, MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT, MESSAGE_KEY_SUCCESSFULLY_SET_TO, MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF, MESSAGE_KEY_FAILURE_INVALID_REF]);\n\n        g_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SETTING_FIELDS]));\n\n        var testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n        if (!testFrameWindow.g_form) {\n            failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_FORM]));\n            return;\n        }\n\n        var terms = [];\n        var decodeFieldValuesAjax = new GlideAjax('VariableQueryParser');\n        decodeFieldValuesAjax.addParam('sysparm_name', 'sys_atf_step.inputs.variable_conditions');\n        decodeFieldValuesAjax.addParam('sysparm_chars', step.inputs.variable_values);\n        decodeFieldValuesAjax.getXML(function(decodeFieldValues) {\n            var fieldValues = decodeFieldValues.responseXML.getElementsByTagName(\"item\");\n            for (var i = 0; i < fieldValues.length; i++) {\n                if (!fieldValues[i].getAttribute(\"field\"))\n                    continue;\n                var term = {};\n                term['field'] = fieldValues[i].getAttribute(\"field\");\n                term['value'] = fieldValues[i].getAttribute(\"value\");\n                term['display_value'] = fieldValues[i].getAttribute('display_value');\n                terms[i] = term;\n            }\n            setFieldValues();\n        });\n\n        function isTermValid(term) {\n            return (null != term && term['field']);\n        }\n\n        function isChoiceField(field) {\n            return testFrameWindow.g_form.isChoiceField(field);\n        }\n\n        function isValidChoice(field, value) {\n            return testFrameWindow.g_form.isValidChoice(field, value);\n        }\n\n        function isDurationField(field) {\n            return testFrameWindow.g_form.getField(field).type == 'glide_duration';\n        }\n\n        function isGlideListField(field) {\n            return testFrameWindow.g_form.getField(field).type == 'glide_list';\n        }\n\n        function checkValueSet(field, value) {\n            var $q = g_ui_testing_util._getAngularInjector(\"$q\");\n            var checkValueDefer = $q.defer();\n\n            var fld = testFrameWindow.g_form.getField(field);\n\n            // Currently, only need to do this to validate non-empty reference fields...\n            if (value != '' && (fld.type === 'reference' || fld.type === 'domain_id')) {\n                testFrameWindow.g_form.getRef(field, checkValidReference);\n            } else { // nothing else to check, resolve and log success\n                checkValueSuccess(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET_TO], testFrameWindow.g_form.getLabel(field), value));\n            }\n\n            function checkValueSuccess(message) {\n                updateStepResultMessage(message);\n                checkValueDefer.resolve();\n            }\n\n            function checkValueFailure(message) {\n                checkValueDefer.reject(message);\n            }\n\n            function checkValidReference(data) {\n                if (data._error) {\n                    checkValueFailure(formatMessage(messageMap[MESSAGE_KEY_FAILURE_INVALID_REF], testFrameWindow.g_form.getLabel(field), value));\n                } else {\n                    checkValueSuccess(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF], testFrameWindow.g_form.getLabel(field), testFrameWindow.g_form.getDisplayValue(field)));\n                }\n            }\n\n            return checkValueDefer.promise;\n        }\n\n        // we need a promise loop here because the check field validation logic can be asynchronous\n        function setFieldValues() {\n            var $q = g_ui_testing_util._getAngularInjector(\"$q\");\n            var firstPromise = $q.when(); // Need something to start the loop.\n\n            var promiseChain = terms.reduce(function(previousPromise, currentTerm) {\n                return previousPromise.then(function() {\n                    if (!isTermValid(currentTerm)) {\n                        if (currentTerm == null) {\n                            updateStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING]));\n                        } else if (!currentTerm['field']) {\n                            updateStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING_TO_VAL], currentTerm['value']));\n                        }\n                        return $q.when(); // if a term has no field/value, then just ignore it\n                    }\n\n                    var field = currentTerm.field;\n                    var value = currentTerm.value;\n                    var displayValue = currentTerm.display_value;\n                    // fail if field does not exists\n                    if (!testFrameWindow.g_form.hasField(field)) {\n                        return $q.reject(formatMessage(messageMap[MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT], testFrameWindow.g_form.getLabel(field), value));\n                    }\n\n                    // fail if field is read only\n                    if (testFrameWindow.g_form.isReadOnly(field)) {\n                        return $q.reject(formatMessage(messageMap[MESSAGE_KEY_NOT_EDITABLE_FIELD], testFrameWindow.g_form.getLabel(field), value));\n                    }\n\n                    // fail if we're trying to set the value of a choice field to an invalid choice\n                    if (isChoiceField(field) && !isValidChoice(field, value)) {\n                        return $q.reject(formatMessage(\"FAILURE: Unable to set field '{0}' to value '{1}'. Value '{1}' is not currently a valid choice.\", testFrameWindow.g_form.getLabel(field), value));\n                    }\n\n                    if (isDurationField(field)) {\n                        var duration = new GlideDuration(value);\n                        value = duration.getDays() + \" \" + duration.getHours() + \":\" + duration.getMinutes() + \":\" + duration.getSeconds();\n                    }\n\n                    if (isGlideListField(field) && value) {\n                    \tvalue = value.split(',').filter(function(val) {\n                    \t\treturn val.trim().length !== 0;\n                    \t}).join();\n                    }\n\n\t\t\t\t\tif (displayValue)\n\t\t\t\t\t\ttestFrameWindow.g_form.setValue(field, value, displayValue);\n\t\t\t\t\telse\n\t\t\t\t\t\ttestFrameWindow.g_form.setValue(field, value);\n\n                    return checkValueSet(field, value);\n                });\n            }, firstPromise).then(passStep, failStep);\n        }\n\n    };\n    assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"16","active":"true","sys_tags":"","html_description":"<p>Sets variable values on the current Catalog Item or Record Producer page</p>\n<h4>Additional Considerations</h4>\n<p><strong>Catalog Item</strong> - In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item (SP)” step. This step cannot be used after “Order Catalog Item” step.<br /><br /><strong>Record Producer</strong>  - In order to use this step you must have already opened a Record Producer page using the “Open a Record Producer (SP)” step. This step cannot be used after “Submit Record Producer” step.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Set Variable Values (SP)","sys_update_name":"sys_atf_step_config_2e4229b48703030070870cf888cb0b5c","name":"Set Variable Values (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.variable_values && step.inputs.variable_set.getDisplayValue() == '')\n\t\tdescription = gs.getMessage(\"Answer the questions on the form as follows:\");\n\telse\n\t\tdescription = gs.getMessage(\"Answer the questions on the form for variable set '{0}' as follows:\", step.inputs.variable_set.getDisplayValue());\n\tdescription += \"\\n\";\n\tdescription += new SCATFUtil().getValueValidationDescription(step.inputs.variable_values);\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:40","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"2f4fa7309f132200ef4afa7dc67fcf0f","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 00:36:35","sys_name":"Assert Status Code","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertStatusCodeStepRunner","sys_created_by":"admin","order":"6000","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"6","active":"true","sys_tags":"","html_description":"<p>Assert the HTTP response status code. Select the comparison operation and specify the numeric value of the expected status code.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the HTTP response status code is equals to a specified value","sys_update_name":"sys_atf_step_config_2f4fa7309f132200ef4afa7dc67fcf0f","name":"Assert Status Code","description_generator":"function generateDescription() {\n\treturn gs.getMessage(\"Assert a response status code {0} '{1}'\", [\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), step.inputs.status_code]);\n}\ngenerateDescription();","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-20 07:38:54","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"323ca6e1c3b2220076173b0ac3d3aec1","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-10-31 07:15:25","sys_name":"Set Variable Values","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4100","step_execution_generator":"\n(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SETTING_FIELDS = \"Setting field values\";\n\tvar MESSAGE_KEY_FAILED_NO_G_FORM = \"FAILURE: Unable to set values, g_form is not defined. A valid form must be open before setting values\";\n\tvar MESSAGE_KEY_SKIP_SETTING = \"Skipping setting a value, no field or value was given\";\n\tvar MESSAGE_KEY_SKIP_SETTING_TO_VAL = \"Skipping setting field to value '{0}', no field was given\";\n\tvar MESSAGE_KEY_NOT_EDITABLE_FIELD = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not editable. See screenshot\";\n\tvar MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not present on the form. See screenshot\";\n\tvar MESSSAGE_KEY_SUCCESSFULLY_SET_TO = \"Successfully set field '{0}' to value '{1}'\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF = \"Successfully set field '{0}' to valid reference value '{1}'\";\n\tvar MESSAGE_KEY_FAILURE_INVALID_REF = \"FAILURE: Failed to set field '{0}' to value '{1}' because the reference is NOT valid.\";\n\t//init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SETTING_FIELDS, MESSAGE_KEY_FAILED_NO_G_FORM, MESSAGE_KEY_SKIP_SETTING, MESSAGE_KEY_SKIP_SETTING_TO_VAL, MESSAGE_KEY_NOT_EDITABLE_FIELD, MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT, MESSSAGE_KEY_SUCCESSFULLY_SET_TO, MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF, MESSAGE_KEY_FAILURE_INVALID_REF]);\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SETTING_FIELDS]));\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\tif (!testFrameWindow.g_form) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_FORM]));\n\t\treturn;\n\t}\n\tvar table = testFrameWindow.g_form.getTableName();\n\tvar sys_id = testFrameWindow.g_form.getUniqueValue();\n\tvar terms = [];\n\tvar decodeFieldValuesAjax = new GlideAjax('VariableQueryParser');\n\tdecodeFieldValuesAjax.addParam('sysparm_name', 'sys_atf_step.inputs.variable_conditions');\n\tdecodeFieldValuesAjax.addParam('sysparm_chars', step.inputs.variable_values);\n\tdecodeFieldValuesAjax.getXML(function (decodeFieldValues) {\n\t\tif(isVEFlow()){\n\t\tvar fieldValues = decodeFieldValues.responseXML.getElementsByTagName(\"item\");\n\t\t\t\tvar nameMap = testFrameWindow.g_sc_form.nameMap;\n\t\tfor (var i=0; i < fieldValues.length; i++) {\n\t\t\t\t\tif (!fieldValues[i].getAttribute('field'))\n\t\t\t\tcontinue;\n\t\t\tvar term = {};\n\t\t\t\t\tvar currentField = fieldValues[i].getAttribute('field');\n\t\t\t\t\tfor(j = 0; j < nameMap.length; j++) {\n\t\t\t\t\t\tvar veQuestionFieldID = 'IO:'+nameMap[j].questionID;\n\t\t\t\t\t\tif(veQuestionFieldID == currentField)\n\t\t\t\t\t\t\tcurrentField = nameMap[j].realName;\n\t\t\t\t\t}\n\t\t\t\t\tterm['field'] = currentField;\n\t\t\tterm['value'] = fieldValues[i].getAttribute(\"value\");\n\t\t\tterms[i] = term;\n\t\t}\n\t\tsetFieldValues();\n\t\t} else {\n\t\t\tvar fieldValues = decodeFieldValues.responseXML.getElementsByTagName(\"item\");\n\t\t\tfor (var i=0; i < fieldValues.length; i++) {\n\t\t\t\tif (!fieldValues[i].getAttribute('field'))\n\t\t\t\t\tcontinue;\n\t\t\t\tvar term = {};\n\t\t\t\tterm['field'] = fieldValues[i].getAttribute('field');\n\t\t\t\tterm['value'] = fieldValues[i].getAttribute(\"value\");\n\t\t\t\tterms[i] = term;\n\t\t\t}\n\t\t\tsetFieldValues();\n\t\t}\n\t});\n\n\t// we need a promise loop here because the check field validation logic can be asynchronous\n    function setFieldValues() {\n\t\tvar $q = g_ui_testing_util._getAngularInjector(\"$q\");\n\t\tvar firstPromise = $q.when(); // Need something to start the loop.\n\t\tvar promiseChain = terms.reduce(function(previousPromise, currentTerm) {\n\t\t\treturn previousPromise\n\t\t\t\t\t.then(function() {\n\t\t\t\t\t\tif(!isTermValid(currentTerm)) {\n\t\t\t\t\t\t\tif (currentTerm == null)\n\t\t\t\t\t\t\t\tupdateSetValueStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING]));\n\t\t\t\t\t\t\telse if (!currentTerm['field'])\n\t\t\t\t\t\t\t\tupdateSetValueStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING_TO_VAL], currentTerm['value']));\n\t\t\t\t\t\t\treturn $q.when(); // if a term has no field/value, then just ignore it\n\t\t\t\t\t\t}\n\n\t\t\t\t\n\t\t\t\t\t\tvar field = getFieldName(currentTerm.field);\n\t\t\t\t\t\tvar value = currentTerm.value;\n\t\t\t\t\t\tvar fieldGE;\n\t\t\t\t\t\tvar control;\n\t\t\t\t\t\tvar form = getCatalogForm();\n\t\t\t\t\t\tfieldGE = form.getGlideUIElement(field);\n\t\t\t\t\t\tcontrol = form.getControl(field);\n\n\t\t\t\t\t\t//fail if we're trying to set the value of a readOnly field\n\t\t\t\t\t\tif (fieldGE && control) {\n\t\t\t\t\t\t\tif (control.hasAttribute(\"readonly\") && control.getAttribute(\"readonly\") == \"readonly\")\n\t\t\t\t\t\t\t\treturn $q.reject(formatMessage(messageMap[MESSAGE_KEY_NOT_EDITABLE_FIELD],\n\t\t\t\t\t\t\t\t\tform.resolveLabelNameMap(field), value));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//fail if we're trying to set the value of a choice field to an invalid choice\n\t\t\t\t\t\tif (isChoiceField(control) && !isValidChoice(field, value))\n\t\t\t\t\t\t\treturn $q.reject(formatMessage(\"FAILURE: Unable to set field '{0}' to value '{1}'. Value '{1}' is not currently a valid choice.\",\n\t\t\t\t\t\t\t\tform.resolveLabelNameMap(field), value));\n\t\t\t\t\t\tif (isDurationField(fieldGE)) {\n\t\t\t\t\t\t\tvar duration = new GlideDuration(value); //Duration Variable needs to be formated in ddd HH:MM:SS\n\t\t\t\t\t\t\tvalue = duration.getDays() + \" \" + duration.getHours() + \":\" + duration.getMinutes() + \":\" + duration.getSeconds();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tform.setValue(field, value);\n\t\t\t\t\t\treturn checkValueSet(field, value);\n\t\t\t\t\n\t\t\t});\n\t\t}, firstPromise).then(passStep, failStep);\n    }\n    \n    function getFieldName(field){\n\t\tif(isVEFlow() && testFrameWindow.g_sc_form){\n\t\t\treturn testFrameWindow.g_sc_form.resolvePrettyNameMap(field);\n\t\t}\n\t\treturn field;\n\t}\n\n\tfunction isChoiceField(control) {\n\t\tif (control && (control.options || control.type === 'radio'))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\t\n\tfunction isDurationField(ge) {\n\t\tif (ge && ge.type == 'glide_duration')\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tfunction isValidChoice(field, value) {\n\t\tvar g_form = getCatalogForm();\n\t\tif (g_form.getOption(field, value))\n\t\t\treturn true;\n\t\tvar choices = g_form.getControls(field);\n\t\tfor(var i = 0; i < choices.length; i++)\n\t\t\tif (choices[i].value === value)\n\t\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\tfunction isTermValid(term) {\n\t\treturn (null != term && term['field']);\n\t}\n\n\tfunction checkValueSet(field, value) {\n\t\tvar $q = g_ui_testing_util._getAngularInjector(\"$q\");\n\t\tvar checkValueDefer = $q.defer();\n\n\t\tvar form = getCatalogForm();\n\n\t\tvar ed = form.getGlideUIElement(field);\n\n\t\tif (ed == null) //field is not present on the form, so fail\n\t\t\tcheckValueFailure(formatMessage(messageMap[MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT],\n\t\t\t\tform.resolveLabelNameMap(field), value));\n\t\t// Currently, only need to do this to validate reference fields...\n        else if (ed.type === 'reference' || ed.type === 'domain_id')\n\t\t\tform.getReference(field, checkValidReference);\n\t\telse // nothing else to check, resolve and log success\n\t\t\tcheckValueSuccess(formatMessage(messageMap[MESSSAGE_KEY_SUCCESSFULLY_SET_TO], form.resolveLabelNameMap(field), value));\n\n\t\treturn checkValueDefer.promise;\n\n\t\tfunction checkValidReference(refGR) {\n\t        if (refGR.currentRow != -1) //this is a valid reference\n\t            checkValueSuccess(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF], form.resolveLabelNameMap(field), form.getDisplayBox(field).value));\n\t        else\n\t            checkValueFailure(formatMessage(messageMap[MESSAGE_KEY_FAILURE_INVALID_REF], form.resolveLabelNameMap(field), value));\n\t\t}\n\n\t\tfunction checkValueSuccess(message) {\n\t\t\tupdateSetValueStepResultMessage(message);\n\t\t\tcheckValueDefer.resolve();\n\t\t}\n\n\t\tfunction checkValueFailure(message) {\n            checkValueDefer.reject(message);\n        }\n    }\n\n\tfunction updateSetValueStepResultMessage(message) {\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + message;\n\t}\n\n\tfunction passStep() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n   \t}\n\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tupdateSetValueStepResultMessage(reason);\n\t\tstep.defer.reject();\n   \t}\n\t\n\tfunction isVEFlow() {\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameGForm();\n\t\tif(!theGForm)\n\t\t\treturn false;\n\n\t\tvar table = theGForm.getTableName();\n\t\tif (table != 'ni')\n\t\t\treturn true;\n\t\t\n\t\telse\n\t\t\treturn false;\n\t}\n\n\tfunction getCatalogForm() {\n\t\tvar form = g_ui_testing_util.getTestIFrameGForm();\n\t\tif(isVEFlow() && testFrameWindow.g_sc_form)\n\t\t\tform = testFrameWindow.g_sc_form;\n\t\treturn form;\n\t}\n   \t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n\t\n})(step, stepResult, assertionObject);","sys_mod_count":"19","active":"true","sys_tags":"","html_description":"<p>Sets variable values on the current Catalog Item or Record Producer page or a form containing variable editor</p>\n<h4>Additional Considerations</h4>\n<p><strong>Catalog Item</strong> - This step can be used to set the variables values in-between the “Open a Catalog Item” and “Order Catalog Item” step or can be used after opening a from (using the &#39;Open an Existing Record&#39; step) containing the variable editor.<br /><br /><strong>Record Producer</strong>  - This step can be used to set the variables values in-between the “Open a Record Producer” and “Submit Record Producer” step or can be used after opening the target record from (using the &#39;Open an Existing Record&#39; step) containing the variable editor.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Set variable values on a Catalog Item page","sys_update_name":"sys_atf_step_config_323ca6e1c3b2220076173b0ac3d3aec1","name":"Set Variable Values","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n\tvar description = \"\";\n\tif (step.inputs.variable_values)\n\t\tdescription = gs.getMessage(\"Answer the questions on the form as follows:\") + \"\\n\";\n\tdescription += new SCATFUtil().getValueValidationDescription(step.inputs.variable_values);\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-08-12 18:09:43","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"32911152c3833300eaac11fe81d3ae82","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-08-05 23:41:44","sys_name":"Validate Outbound Email","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.ValidateOutboundEmail","sys_created_by":"admin","order":"100","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"4","active":"true","sys_tags":"","html_description":"<p>Filters the Email [sys_email] table to find an email that was sent during testing.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Finds and verifies an outbound email.","sys_update_name":"sys_atf_step_config_32911152c3833300eaac11fe81d3ae82","name":"Validate Outbound Email","description_generator":"(function generateDescription(step) {\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description;\n    var conditions = step.inputs.conditions;\n    if (conditions == '' || conditions == '^EQ')\n        description = gs.getMessage(\"Validate that an email was generated.\");\n    else\n        description = gs.getMessage(\"Validate that an email was generated matching query:\\n{0}\",\n\t\t\t[descriptionGenerator.getConditionDescription('sys_email', step.inputs.conditions)]);\n    description += descriptionGenerator.getTimeoutDescription(step.timeout);\n    return description;\n\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-26 15:27:34","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"33f637e8c3ba220076173b0ac3d3aee1","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-10-28 10:05:25","sys_name":"Variable State Validation","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"5100","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_VALIDATIONS = \"Running Field State Validations\";\n\tvar FAIL_MSG_NO_GFORM = \"FAILURE: Unable to perform field validation because g_form is not defined. A valid form must be open before running assertions\";\n\tvar FAIL_MSG_NOT_ON_FORM = \"FAILURE: Unable to check if field '{0}' is {1}. That field is not present on the form. See screenshot\";\n\tvar FAIL_MSG_FIELD_EXPECTED = \"FAILURE: Expected field '{0}' to be {1} but it was not {2}. See screenshot\";\n\tvar FAIL_MSG_FIELD_NOT_EXPECTED = \"FAILURE: Expected field '{0}' to not be {1} but it was {2}. See screenshot\";\n\tvar SUCCESS_MSG = \"Successfully validated all field assertions.\";\n\tvar FAIL_MSG = \"FAILURE: One or more fields failed to validate correctly.\";\n\n\tvar messageMap = new GwtMessage().getMessages([FAIL_MSG_NO_GFORM, FAIL_MSG_NOT_ON_FORM, FAIL_MSG_FIELD_EXPECTED, FAIL_MSG_FIELD_NOT_EXPECTED, SUCCESS_MSG, FAIL_MSG, MESSAGE_KEY_RUNNING_VALIDATIONS]);\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_RUNNING_VALIDATIONS]);\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\t//Only initialize an interval if we need one\n\tvar utilInterval = null;\n\tvar assertInterval = null;\n\tif (retryCount > 0) {\n\t\tutilInterval = g_ui_testing_util._getAngularInjector(\"$interval\");\n\t\tassertInterval = utilInterval(validateFields, 1000);\n\t}\n\telse {\n\t\tvalidateFields(0);\n\t}\n\n\tfunction validateFields(iterationCount) {\n\t\t// reset the step result values to support being called multiple times\n\t\tstepResult.success = true;\n\t\tstepResult.message = \"\";\n\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameGForm();\n\t\tif (!theGForm) { // g_form is not defined, fail the step\n\t\t\tstepResult.success = false;\n\t\t\tmessage = messageMap[FAIL_MSG_NO_GFORM];\n\t\t} else {\n\n\t\t\tif (isVEFlow()) { \n\t\t\t\tstep.inputs.mandatory = processFields(step.inputs.mandatory);\n\t\t\t\tstep.inputs.not_mandatory = processFields(step.inputs.not_mandatory);\n\n\t\t\t\tstep.inputs.read_only = processFields(step.inputs.read_only);\n\t\t\t\tstep.inputs.not_read_only = processFields(step.inputs.not_read_only);\n\n\t\t\t\tstep.inputs.visible = processFields(step.inputs.visible);\n\t\t\t\tstep.inputs.not_visible = processFields(step.inputs.not_visible);\n\t\t\t}\n\n\t\t\t// Mandatory\n\t\t\tassertFields(\"mandatory\", true, step.inputs.mandatory);\n\t\t\tassertFields(\"mandatory\", false, step.inputs.not_mandatory);\n\n\t\t\t// Read Only\n\t\t\tassertFields(\"read only\", true, step.inputs.read_only);\n\t\t\tassertFields(\"read only\", false, step.inputs.not_read_only);\n\n\t\t\t// visible\n\t\t\tassertFields(\"visible\", true, step.inputs.visible);\n\t\t\tassertFields(\"visible\", false, step.inputs.not_visible);\n\t\t}\n\n\t\tif(stepResult.success) {\n\t\t\tif(utilInterval != null)\n\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\tstepResult.message = messageMap[SUCCESS_MSG];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[SUCCESS_MSG]);\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tif (iterationCount >= retryCount || utilInterval == null) {\n\t\t\t\tif (utilInterval != null)\n\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[FAIL_MSG]);\n\t\t\t\tstep.defer.reject();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Asserts something about a list of fields\n\t * @param assertType \"mandatory\", \"read only\", \"visible\"\n\t * @param expected boolean, for supporting negative cases\n\t * @param fieldList comma separated list of field names\n\t */\n\tfunction assertFields(assertType, expected, fieldList){\n\t\tif (!fieldList)\n\t\t\treturn;\n\n\t\tvar fieldNames = fieldList.split(\",\");\n\t\tfor (var i = 0; i < fieldNames.length; i++) {\n\t\t\tvar assertResult;\n\t\t\tif(isVEFlow())\n\t\t\t\tassertResult = assertField(assertType, expected, fieldNames[i]);\n\t\t\telse\n\t\t\t\tassertResult = assertField(assertType, expected, \"IO:\" + fieldNames[i]);\n\t\t\tif (!assertResult.success) {\n\t\t\t\tstepResult.success = false;\n\t\t\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + assertResult.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Asserts someting about a field\n\t * @param assertType \"mandatory\", \"read only\", \"visible\"\n\t * @param expected boolean, for supporting negative cases\n\t * @param field the field name to use\n\t * @returns {{success: boolean, message: string}}\n\t */\n\tfunction assertField(assertType, expected, field) {\n\t\tvar result = {\n\t\t\tsuccess: true,\n\t\t\tmessage: \"\"\n\t\t};\n\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameGForm();\n\t\tvar scForm = g_ui_testing_util.getTestIFrameWindow().g_sc_form;\n\t\t\t if(isVEFlow() && scForm)\n\t\t\t\ttheGForm = scForm;\n\n\t\tvar fieldGE = theGForm.getGlideUIElement(field);\n\t\tif (fieldGE == null && \"visible\" != assertType) { // field is not present on the form (but don't fail if we are checking visibility)\n\t\t\tresult.success = false;\n\t\t\tresult.message = formatMessage(messageMap[FAIL_MSG_NOT_ON_FORM], theGForm.resolveLabelNameMap(field), assertType);\n\t\t\treturn result;\n\t\t}\n\n\t\tvar actualValue;\n\t\tvar control = theGForm.getControl(field);\n\t\tif (!control)\n\t\t\tcontrol = theGForm.getNiBox(field);\n\n\t\tif (\"mandatory\" == assertType)\n\t\t\tactualValue = !!theGForm.isMandatory(field);\n\t\telse if (\"read only\" == assertType)\n\t\t\tactualValue = (!fieldGE || !control) ? false : !!theGForm.isReadOnly(fieldGE, control);\n\t\telse if (\"visible\" == assertType)\n\t\t\tactualValue = (!fieldGE || !control) ? false : !!theGForm.isVisible(fieldGE, control);\n\n\t\tif (expected != actualValue){ // failed\n\t\t\tresult.success = false;\n\t\t\tvar failMessage = (expected)? messageMap[FAIL_MSG_FIELD_EXPECTED] : messageMap[FAIL_MSG_FIELD_NOT_EXPECTED];\n\t\t\tresult.message = formatMessage(failMessage, theGForm.resolveLabelNameMap(field), assertType, assertType);\n\t\t}\n\t\treturn result;\n\t}\n\t\n\tfunction processFields(fieldCSVString) {\n\t\tif(!fieldCSVString)\n\t\t\treturn fieldCSVString;\n\t\tvar nameMap = g_ui_testing_util.getTestIFrameWindow().g_sc_form.nameMap;\n\n\t\tvar fieldNames = fieldCSVString.split(\",\");\n\t\tfor(var i=0; i<fieldNames.length; i++) {\n\t\t\tcurrentField = fieldNames[i];\n\t\t\tfor(j=0; j<nameMap.length; j++) {\n\t\t\t\tvar veQuestionFieldID = nameMap[j].questionID;\n\t\t\t\tif(veQuestionFieldID && veQuestionFieldID.includes(currentField))\n\t\t\t\t\tfieldNames[i] = nameMap[j].realName;\n\t\t\t}\n\t\t}\n\t\treturn fieldNames.join();\n\t}\n\n\tfunction isVEFlow() {\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameGForm();\n\t\tif(!theGForm)\n\t\t\treturn false;\n\n\t\tvar table = theGForm.getTableName();\n\t\tif (table != 'ni')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"11","active":"true","sys_tags":"","html_description":"<p>Validates states of the desired variables.</p>\n<p>The variable states can be one (or more) of mandatory, not mandatory, read only, not read only, visible and not visible.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p2\"><span class=\"s1\">If a timeout is specified, the Client Test Runner will check the validation conditions every second until the timeout has been reached or the conditions are met.</span></p>\n<p class=\"p2\"><span class=\"s1\">If a timeout is exceeded or one of the validations is not correct the step will fail.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Edit the mandatory, non mandatory, read only, non read only, visible and non visible variables.","sys_update_name":"sys_atf_step_config_33f637e8c3ba220076173b0ac3d3aee1","name":"Variable State Validation","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tvar scAtfUtil = new SCATFUtil();\n\tif (!gs.nil(step.inputs.visible))\n\t\tdescription = gs.getMessage(\"Confirm that the following variables are visible: {0}\", step.inputs.visible.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.not_visible))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not visible: {0}\", step.inputs.not_visible.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are read only: {0}\", step.inputs.read_only.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.not_read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not read only: {0}\", step.inputs.not_read_only.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (!gs.nil(step.inputs.mandatory))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are mandatory: {0}\", step.inputs.mandatory.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tif (step.inputs.not_mandatory)\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following variables are not mandatory: {0}\", step.inputs.not_mandatory.split(\",\").map(scAtfUtil.getVariableDisplayName).join(\", \"));\n\n\tdescription += \"\\n\";\n\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n}\n generateDescription(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-04-02 05:14:50","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"38907e937322130007d738682bf6a742","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-06-12 20:32:39","sys_name":"Component State Validation (Custom UI)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1305","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar MESSAGE_KEY_VALIDATING = \"Running component state validation\";\n\tvar MESSAGE_KEY_FAILED_NO_G_AUTOMATE = \"FAILURE: Unable to validate state, g_automate is not defined\";\n\tvar MESSAGE_KEY_FAILED_NO_COMPONENT = \"FAILURE: Unable to validate state of component '{0}', component not found\";\n\tvar MESSAGE_KEY_FAILED_NO_METHOD = \"FAILURE: Unable to validate state of component '{0}', method with name 'isDisabled' was not found\";\n\tvar MESSAGE_KEY_FAILED_ERROR = \"FAILURE: Unable to validate state of component '{0}', error during method call\";\n\tvar MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE = \"FAILURE: Unable to validate state of component '{0}'. Error during method call: {1}\\n{2}\";\n\tvar MESSAGE_KEY_SUCCESS = \"Successfully validated state of component '{0}' as {1}\";\n\tvar MESSAGE_KEY_FAILURE = \"FAILURE: Expected state of component '{0}' to be {1} but was {2}\";\n\n\t// init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_VALIDATING, MESSAGE_KEY_FAILED_NO_G_AUTOMATE, MESSAGE_KEY_FAILED_NO_COMPONENT, MESSAGE_KEY_FAILED_NO_METHOD, MESSAGE_KEY_FAILED_ERROR, MESSAGE_KEY_SUCCESS, MESSAGE_KEY_FAILURE]);\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_VALIDATING]));\n\t\n\t//initiate gAutomate\n\tvar gAutomate = window.top.g_automate;\n\tif (!gAutomate) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_AUTOMATE]));\n\t\treturn;\n\t}\n\n\t// initialize user input and gAutomate info\n\tvar mugshot = getMugshot(step.inputs.component);\n\tvar mugshotLabel = JSON.parse(mugshot).sn_atf_mugshot_short_description;\n\tvar mugshotLongDesc = JSON.parse(mugshot).sn_atf_mugshot_long_description;\n\n\tassertionObject.beforeExecuteStep = function() {\n\t\tvar defer = g_ui_testing_util.q().defer();\n\t\tgAutomate.findComponent(mugshot)\n\t\t.then(function(componentObj) {\n\t\t\tvar component = componentObj.component;\n\t\t\tif (!component)\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\n\t\t\treturn defer.resolve();\n\t\t})\n\t\t.catch(function(error) {\n\t\t\tif (error.message === \"component_not_found\")\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\t\t\telse if (error.message && error.stack)\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], mugshotLongDesc, error.message, error.stack));\n\n\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t});\n\n\t\treturn defer.promise;\n\t};\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tgAutomate.scrollIntoView(mugshot)\n\t\t.then(function() {\n\t\t\tvar assertType = step.inputs.assert_type;\n\t\t\tgAutomate.isDisabled(mugshot)\n\t\t\t.then(function(answer) {\n\t\t\t\tif (assertType === \"read_only\" || assertType === \"disabled\") {\n\t\t\t\t\tif (answer)\n\t\t\t\t\t\treturn passStep(formatMessage(messageMap[MESSAGE_KEY_SUCCESS], mugshotLabel, assertType.replace(\"_\", \" \")));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILURE], mugshotLongDesc, assertType.replace(\"_\", \" \"), assertType === \"read_only\" ? \"editable\" : \"enabled\"));\n\t\t\t\t} else if (assertType === \"editable\" || assertType === \"enabled\") {\n\t\t\t\t\tif (!answer)\n\t\t\t\t\t\treturn passStep(formatMessage(messageMap[MESSAGE_KEY_SUCCESS], mugshotLabel, assertType));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILURE], mugshotLongDesc, assertType, assertType === \"editable\" ? \"read only\" : \"disabled\"));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\thandleFailure(error);\n\t\t\t});\n\t\t});\n\t};\n\n\tfunction getMugshot(componentHash){\n\t\tvar mugshots = step.mugshots_cache_json ? JSON.parse(step.mugshots_cache_json):{};\n\t\treturn mugshots[componentHash] || componentHash;\n\t}\n\n\tfunction handleFailure(error) {\n\t\tswitch (error.message) {\n\t\t\tcase \"component_not_found\":\n\t\t\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\t\t\t\treturn;\n\t\t\tcase \"method_not_supported\":\n\t\t\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_METHOD], mugshotLongDesc));\n\t\t\t\treturn;\n\t\t\tdefault:\n\t\t\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t\t\treturn;\n\t\t}\n\t}\n\n\tfunction passStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = true;\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + reason;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + reason;\n\t\tstep.defer.reject();\n\t}\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"31","active":"true","sys_tags":"","html_description":"<p>Validates states of the desired components</p>\n<p>The component states can be either read only or not read only</p>\n<h4>Additional Considerations</h4>\n<p class=\"p2\"><span class=\"s1\">If a timeout is specified, the Client Test Runner will check the validation conditions every second until the timeout has been reached or the conditions are met</span></p>\n<p class=\"p2\"><span class=\"s1\">If a timeout is exceeded or one of the validations is not correct the step will fail</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Edit the component and assert type fields.","sys_update_name":"sys_atf_step_config_38907e937322130007d738682bf6a742","name":"Component State Validation (Custom UI)","description_generator":"function generateDescription(step) {\n    var mugshotLabel = new ATFCustomUIHelper().getComponentDescriptionFromCache(step.inputs.component, step.mugshots_cache_json);\n\tvar use_label_path = GlideProperties.getBoolean('sn_atf.element.use_label_path', true);\n\t\n\tif (use_label_path === true) {\n\t\tvar labelPath = new ATFCustomUIHelper().getComponentLabelPathFromCache(step.inputs.component, step.mugshots_cache_json);\n\t\tif (labelPath)\n\t\t\treturn gs.getMessage(\"ATF_CUSTOM_UI:Confirm that the '{0}' component is {1}, Page area: '{2}'\", [mugshotLabel, step.inputs.assert_type.replace(\"_\", \" \"), labelPath]);\n\t}\n\t\n\treturn gs.getMessage(\"Confirm that the '{0}' component is {1}\", [mugshotLabel, step.inputs.assert_type.replace(\"_\", \" \")]);\n}\ngenerateDescription(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-script","sys_updated_on":"2017-03-20 22:21:49","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"41de4a935332120028bc29cac2dc349a","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-04-20 19:17:51","sys_name":"Run Server Side Script","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.JasmineScriptTestRunner","sys_created_by":"admin","order":"2500","step_execution_generator":"","sys_mod_count":"24","active":"true","sys_tags":"","html_description":"<p>Executes a script on the server.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Type server side scripts to run.","sys_update_name":"sys_atf_step_config_41de4a935332120028bc29cac2dc349a","name":"Run Server Side Script","description_generator":"(function generateDescription(step) {\n    var description = gs.getMessage(\"Run Server Side Validation Script\");\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-03-27 00:29:57","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"475e0de3d732130089fca2285e610361","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-06-25 18:00:54","sys_name":"Assert Text on Page (Custom UI)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1050","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\tassertionObject.executeStep = function (step, stepResult) {\n\tvar MESSAGE_KEY_ASSERTING_TEXT_ON_PAGE = \"Asserting that text is on the page\";\n\tvar MESSAGE_KEY_FAILED_NO_G_AUTOMATE = \"FAILURE: Unable to assert text on page, g_automate was not defined\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_ASSERT_ON_PAGE = \"Successfully asserted text '{0}' was on the page\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_ASSERT_NOT_ON_PAGE = \"Successfully asserted text '{0}' was not on the page\";\n\tvar MESSAGE_KEY_FAILED_ASSERT_ON_PAGE = \"FAILURE: Text '{0}' was not on the page.\";\n\tvar MESSAGE_KEY_FAILED_ASSERT_NOT_ON_PAGE = \"FAILURE: Text '{0}' was on the page.\";\n\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ASSERTING_TEXT_ON_PAGE, MESSAGE_KEY_FAILED_NO_G_AUTOMATE, MESSAGE_KEY_SUCCESSFULLY_ASSERT_ON_PAGE, MESSAGE_KEY_SUCCESSFULLY_ASSERT_NOT_ON_PAGE, MESSAGE_KEY_FAILED_ASSERT_ON_PAGE, MESSAGE_KEY_FAILED_ASSERT_NOT_ON_PAGE]);\n\n\tvar text = step.inputs.text;\n\tvar version = step.inputs.mugshot_version;\n\tvar assertOnPage = step.inputs.assert_type + '' === \"text_on_page\";\n\tvar retryCount = step.timeout;\n\tvar iterationCount = 0;\n\tvar gAutomate;\n\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_ASSERTING_TEXT_ON_PAGE]));\n\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tcheckIfTextOnPage();\n\n\tfunction checkIfTextOnPage() {\n\t\tgAutomate = window.top.g_automate;\n\n\t\tif (!gAutomate)\n\t\t\tretryOrFailStep(messageMap[MESSAGE_KEY_FAILED_NO_G_AUTOMATE]);\n\t\telse {\n\t\t\tgAutomate.pageHasTextAsync(text, version).then(function(result) {\n\t\t\t\tif (result === assertOnPage) { // We got the result we were looking for\n\t\t\t\t\tif (assertOnPage)\n\t\t\t\t\t\treturn passStep(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_ASSERT_ON_PAGE], [text]));\n\t\t\t\t\telse\n\t\t\t\t\t\treturn passStep(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_ASSERT_NOT_ON_PAGE], [text]));\n\t\t\t\t}\n\t\t\t\telse // We didn't get the result we were looking for\n\t\t\t\t\tif (assertOnPage)\n\t\t\t\t\t\tretryOrFailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_ASSERT_ON_PAGE], [text]));\n\t\t\t\t\telse\n\t\t\t\t\t\tretryOrFailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_ASSERT_NOT_ON_PAGE], [text]));\n\t\t\t},\n\t\t\tfunction(ex) {\n\t\t\t\tvar exMessage = \"\";\n\t\t\t\tif (typeof ex === \"string\")\n\t\t\t\t\texMessage = ex;\n\t\t\t\telse if (ex)\n\t\t\t\t\texMessage = ex.message;\n\n\t\t\t\tfailStep(exMessage);\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction retryOrFailStep(messageForFailure) {\n\t\tif (iterationCount < retryCount) { // Retry if we have not run out of tries\n\t\t\titerationCount++;\n\t\t\tsetTimeout(checkIfTextOnPage, 1000);\n\t\t}\n\t\telse // Out of tries\n\t\t\tfailStep(messageForFailure);\n\t}\n    \n\tfunction passStep(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t};\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"37","active":"true","sys_tags":"","html_description":"<p>Assert that the specified text is or is not on a custom UI page.</p>\n<h4>Additional Considerations</h4>\n<p>If a timeout is specified, the Client Test Runner will check for the presence or absence of the text every second until the timeout has been reached.</p>\n<p>In order to use this step you must have already opened a custom UI page. This step can be used in any order with the &#34;Set Component Values&#34; and &#34;Component Value Validation&#34; steps.</p>\n<p>To assert the value of inputs, use the &#34;Component Value Validation&#34; step.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Assert that text is or is not on a custom UI page","sys_update_name":"sys_atf_step_config_475e0de3d732130089fca2285e610361","name":"Assert Text on Page (Custom UI)","description_generator":"(function generateDescription(step) {\n\tvar ASSERT_THAT_TEXT_IS_ON_PAGE = \"Assert that the text '{0}' is on the page.\";\n\tvar ASSERT_THAT_TEXT_NOT_ON_PAGE = \"Assert that the text '{0}' is not on the page.\";\n\n\tvar text = step.inputs.text;\n\tvar assertOnPage = step.inputs.assert_type + '' === \"text_on_page\";\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar timeoutDescription = descriptionGenerator.getTimeoutDescription(step.timeout);\n\n\tif (assertOnPage)\n\t\treturn gs.getMessage(ASSERT_THAT_TEXT_IS_ON_PAGE, [text]) + timeoutDescription;\n\telse\n\t\treturn gs.getMessage(ASSERT_THAT_TEXT_NOT_ON_PAGE, [text]) + timeoutDescription;\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-07-20 22:35:07","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"48c07cc7679313008b52f3b457415a3d","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-18 23:35:09","sys_name":"Validate enrollment status","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"20000","step_execution_generator":"(function executeStep(inputs, outputs, stepResult, timeout) {\n\tvar userId = inputs.user;\n\tvar processId = inputs.process;\n\t\n\tvar enrollMgr = new SNC.PwdEnrollmentManager();\n\tvar processManager = new SNC.PwdProcessManager();\n\t\n\t// User does not belong to this process\n\tif (!enrollMgr.doesUserBelongToProcess(userId, processId)) {\n\t\tstepResult.setOutputMessage(gs.getMessage(\"User {0} does not belong to proces {1}\", [userId, processId]));\n        stepResult.setFailed();\n\t\treturn;\n\t}\n\t\n\tvar enrolledVers = [];\n\tvar verId;\n\t\n\t// Check mandatory verifications\n\tvar mandatoryVers = processManager.getProcessVerificationIdsByMandatoryFlag(processId, true).toArray();\n\tfor (var i = 0; i < mandatoryVers.length; i++) {\n\t\tverId = mandatoryVers[i];\n\t\tif (!enrollMgr.isUserEnrolledByVerificationId(userId, verId)) {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"User {0} is not enrolled with mandatory verification {1}\", [userId, verId]));\n            stepResult.setFailed();\n\t\t    return;\n\t\t}\n\t\tenrolledVers.push(verId);\n\t}\n\t\n\t// Check optional verifications\n\tvar optionalVers = processManager.getProcessVerificationIdsByMandatoryFlag(processId, false).toArray();\n\tfor (var j = 0; j < optionalVers.length; j++) {\n\t\tverId = optionalVers.get[j];\n\t\tif (enrollMgr.isUserEnrolledByVerificationId(userId, verId)) {\n\t\t\tenrolledVers.push(verId);\n\t\t}\n\t}\n\t\n\tvar process = new SNC.PwdProcess(processId);\n\tif (enrolledVers.length < process.getMinVerifications()) {\n\t\tstepResult.setOutputMessage(gs.getMessage(\"User {0} is not enrolled with process {1}\", [userId, processId]));\n        stepResult.setFailed();\n\t\treturn;\n\t}\n\t\n\tstepResult.setSuccess();\n\t\n\t\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"7","active":"false","sys_tags":"","html_description":"<p>Validate the given user is enrolled with all verifications of the given password reset process.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/421beb3304352210559073c06a02f7ef","value":"421beb3304352210559073c06a02f7ef"},"template_reminder":"Validate a user is enrolled with a password reset process.","sys_update_name":"sys_atf_step_config_48c07cc7679313008b52f3b457415a3d","name":"Validate enrollment status","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = gs.getMessage('Assert that user \"{0}\" is enrolled with process \"{1}\"',\n\t\t\t\t\t[step.inputs.user.getDisplayValue(), step.inputs.process.getDisplayValue()]);\n\t\n\treturn description;\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:46","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"49213f709f132200ef4afa7dc67fcfd0","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 00:44:36","sys_name":"Assert Status Code Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertStatusCodeNameStepRunner","sys_created_by":"admin","order":"6100","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"7","active":"true","sys_tags":"","html_description":"<p>Assert the HTTP response status code name is equals to or contains a specified value. Select the comparison operation and specify the expected value of the status code name.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the HTTP response status code name is equals to or contains a specified value","sys_update_name":"sys_atf_step_config_49213f709f132200ef4afa7dc67fcfd0","name":"Assert Status Code Name","description_generator":"function generateDescription() {\n\treturn gs.getMessage(\"Assert a response status code name {0} '{1}'\", [\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), \n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.code_name, 50)]);\n}\ngenerateDescription();","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-form color-red","sys_updated_on":"2023-10-19 22:06:09","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"49e34cbe433131106580a9bb1cb8f25c","class_type":"script","sys_updated_by":"admin","sys_created_on":"2023-10-13 21:26:42","sys_name":"Click a Declarative Action","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7250","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Clicking a declarative action\",\n\t\t\"FAILURE: Cannot submit '{0}' form. There is no form currently open\",\n\t\t\"FAILURE: Cannot submit '{0}' form in '{1}'. There is no form currently open\",\n\t\t\"FAILURE: Failed to find declarative action '{0}' on '{1}' form\",\n\t\t\"FAILURE: Failed to find declarative action '{0}' on '{1}' form in '{2}'\",\n\t\t\"Successfully confirmed that browser submits '{0}' form to server when clicking declarative action '{1}'\",\n\t\t\"Successfully confirmed that browser submits '{0}' form to server when clicking declarative action '{1}' in '{2}'\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking declarative action '{1}'\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking declarative action '{1}' in '{2}'\",\n\t\t\"Successfully clicked declarative action '{0}' on '{1}' form\",\n\t\t\"Successfully clicked declarative action '{0}' on '{1}' form in '{2}'\",\n\t\t\"FAILURE: Declarative action not defined in the step\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking declarative action '{1}'\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking declarative action '{1}' in '{2}'\",\n\t\t\"FAILURE: Browser failed to submit '{0}' form to server when clicking declarative action '{1}'\",\n\t\t\"FAILURE: Browser failed to submit '{0}' form to server when clicking declarative action '{1}' in '{2}'\",\n\t\t\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking declarative action '{1}'\",\n\t\t\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking declarative action '{1}' in '{2}'\",\n\t\t\"FAILURE: '{0}' form is not reloaded or redirected when clicking declarative action '{1}'\",\n\t\t\"Waiting up to {0} seconds for form submit or page reload\",\n\t\t\"FAILURE: Page could not reload in time after completion of declarative action in '{0}'\",\n\t\t\"FAILURE: Unknown error clicking declarative action: '{0}'\"\n\t]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Clicking a declarative action\"]);\n\n\t// Create a new ATF Form/UI step executor object and call the function to execute step\n\tvar afse = new ATFFormStepExecutor(step.inputs);\n\tafse.clickUIAction(step.timeout).then(passStep, failStep);\n\n\tfunction passStep(promiseReturn) {\n\n\t\tvar message = promiseReturn['msg'];\n\t\tvar recordSysId = promiseReturn['sysId'];\n\t\tvar formTable = promiseReturn['table'];\n\n\t\tif (!message) { // Configurable workspace result\n\t\t\tif (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that browser submits '{0}' form to server when clicking declarative action '{1}'\"],  step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking declarative action '{1}'\"],  step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"page_reloaded_or_redirected\")\n\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that '{0}' form is reloaded or redirected when clicking declarative action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse\n\t\t\t\tmessage = formatMessage(messages[\"Successfully clicked declarative action '{0}' on '{1}' form\"], step.inputs.ui_action.name, step.inputs.table);\n\t\t}\n\n\t\tstepResult.outputs.table = formTable;\n\t\tif (recordSysId && recordSysId != \"-1\")\n\t\t\tstepResult.outputs.record_id = recordSysId;\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(result) {\n\t\tvar msg = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tmsg = result;\n\t\telse if (result.message) // An error was thrown\n\t\t\tmsg = result.message;\n\t\telse { // Configurable workspace result\n\t\t\tif (result.reason === \"action_not_present\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Failed to find declarative action '{0}' on '{1}' form\"], step.inputs.ui_action.name, step.inputs.table);\n\t\t\telse if (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Browser failed to submit '{0}' form to server when clicking declarative action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Browser failed to block submission of '{0}' form to server when clicking declarative action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse if (step.inputs.assert_type === \"page_reloaded_or_redirected\")\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: '{0}' form is not reloaded or redirected when clicking declarative action '{1}'\"], step.inputs.table, step.inputs.ui_action.name);\n\t\t\telse\n\t\t\t\tmsg = formatMessage(messages[\"FAILURE: Unknown error clicking declarative action: '{0}'\"], step.inputs.ui_action.name);\n\t\t}\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"0","active":"true","sys_tags":"","html_description":"<p>Clicks a declarative action on the current form.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. After this step, you may no longer use any form steps on the currently opened form as it is expected that this step will close it or move to a different page.</p>\n<p class=\"p1\"><span class=\"s1\">Outputs the table and sys_id of the record on which the action was clicked.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Clicks a UI action on the current form","sys_update_name":"sys_atf_step_config_49e34cbe433131106580a9bb1cb8f25c","name":"Click a Declarative Action","description_generator":"(function generateDescription(step) {\n\tvar td, label, description, value, name, id;\n\tvar isStandardFormUI = !step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\";\n\tvar formUI = \"\";\n\tif (!isStandardFormUI)\n\t\tformUI = step.inputs.form_ui.getDisplayValue();\n\n\tvar workspaceKey = isStandardFormUI ? \"standard\" : \"workspace\";\n\tvar timeoutKey = step.timeout ? \"_timeout\" : \"\";\n\tvar assertKey;\n\ttd = GlideTableDescriptor.get(step.inputs.table);\n\tif (td)\n\t\tlabel = td.getLabel();\n\n\tvar declarativeAction = step.inputs.declarative_action.getRefRecord();\n\tif (declarativeAction != null) {\n\t\tname = declarativeAction.getDisplayValue(\"label\");\n\t\tid = declarativeAction.sys_id;\n\t} else {\n\t\tgs.error(\"Click a declarative action description generation error, could not find ref record '\" + step.inputs.declarative_action + \"'\");\n\t\treturn \"\";\n\t}\n\n\tif (gs.nil(step.inputs.declarative_action)) {\n\t\tgs.error(\"Click a declarative action description generation error, no declarative action set.\");\n\t\treturn \"\";\n\t}\n\n\n\tvar messageMap = {\n\t\t\"form_submitted_standard\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server when clicking declarative action '{1}'\", [label, name]),\n\t\t\"form_submitted_standard_timeout\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server within {1} of clicking declarative action '{2}'\", [label, step.timeout.getDisplayValue(), name]),\n\t\t\"form_submitted_workspace\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server when clicking declarative action '{1}' in '{2}'\", [label, name, formUI]),\n\t\t\"form_submitted_workspace_timeout\" : gs.getMessage(\"Confirm that browser submits '{0}' form to server within {1} of clicking declarative action '{2}' in '{3}'\", [label, step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"form_cancelled_standard\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server when clicking declarative action '{1}'\", [label, name]),\n\t\t\"form_cancelled_standard_timeout\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server within {1} of clicking declarative action '{2}'\", [label, step.timeout.getDisplayValue(), name]),\n\t\t\"form_cancelled_workspace\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server when clicking declarative action '{1}' in '{2}'\", [label, name, formUI]),\n\t\t\"form_cancelled_workspace_timeout\" : gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server within {1} of clicking declarative action '{2}' in '{3}'\", [label, step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"page_reload_standard\" : gs.getMessage(\"Confirm that page reloads or redirects within {0} of clicking declarative action '{1}'\", [step.timeout.getDisplayValue(), name]),\n\t\t\"page_reload_workspace\" : gs.getMessage(\"Confirm that page reloads or redirects within {0} of clicking declarative action '{1}' in '{2}'\", [step.timeout.getDisplayValue(), name, formUI]),\n\t\t\"workspace\" : gs.getMessage(\"Click declarative action '{0}' on '{1}' form in '{2}'\", [name, label, formUI]),\n\t\t\"standard\" : gs.getMessage(\"Click declarative action '{0}' on '{1}' form\", [name, label])\n\t};\n\n\t// Get the messages according to the assert type\n\tif (step.inputs.assert_type == 'form_submitted_to_server') {\n\t\tassertKey = \"form_submitted_\";\n\t\tdescription = messageMap[assertKey + workspaceKey + timeoutKey];\n\t} else if  (step.inputs.assert_type == 'form_submission_canceled_in_browser') {\n\t\tassertKey = \"form_cancelled_\";\n\t\tdescription = messageMap[assertKey + workspaceKey + timeoutKey];\n\t} else if (step.inputs.assert_type == 'page_reloaded_or_redirected') {\n\t\tassertKey = \"page_reload_\";\n\t\tdescription = messageMap[assertKey + workspaceKey];\n\t}\n\telse\n\t\tdescription = messageMap[workspaceKey];\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-04-03 22:48:55","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"52c6cdb3b710330044026848ee11a91d","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-03-26 21:52:57","sys_name":"Add Attachments to Existing Record","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.AddAttachmentStepRunner","sys_created_by":"admin","order":"2800","step_execution_generator":"","sys_mod_count":"25","active":"true","sys_tags":"","html_description":"<p>Adds attachments to the specified record.</p>\n<h4>Additional Considerations</h4>\n<p>At least one attachment is required.</p>\n<p>This step is only executed on the server and has no UI associated with it. If it is intended to be used with &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps, then &#34;Add Attachments to Form&#34; should be used instead.</p>\n<p>The specified record must exist prior to this step running. If adding attachments to a form that has not been submitted yet, use &#34;Add Attachments to Form&#34; instead.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Adds attachments to the specified record.","sys_update_name":"sys_atf_step_config_52c6cdb3b710330044026848ee11a91d","name":"Add Attachments to Existing Record","description_generator":"function generateDescription() {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\n\t// If this is GEM use the GEM value directly\n\t// Otherwise get the display value of the record itself\n\tvar recordName = \"\";\n\tif (step.inputs.record_id.hasMapping())\n\t\trecordName = step.inputs.record_id.getDisplayValue();\n\telse {\n\t\tvar gr = new GlideRecord(step.inputs.table);\n\t\tif (gr.get(step.inputs.record_id))\n\t\t\trecordName = gr.getDisplayValue();\n\t}\n\n\tvar description = gs.getMessage(\"Adds the following attachments to record '{0}' on table '{1}':\", [recordName, step.inputs.table]);\n\n\t// Get the attachments list\n    description += descriptionGenerator.getAttachmentsForRecord(step.getUniqueValue());\n\n\t// Add warning message if there is one\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-02-21 14:29:34","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"5415748677120010e46abe41a910616a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2020-01-13 16:19:25","sys_name":"Add Attachments to Form (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4800","step_execution_generator":"(function (step, stepResult, assertionObject) {\n  assertionObject.executeStep = function(step, stepResult) {\n\tvar MSG_NO_G_FORM = \"FAILURE: A valid form must be open in order to upload an attachment\";\n\n\tvar translator = new GwtMessage();\n\tvar msgMap = translator.getMessages([\n\t\tMSG_NO_G_FORM\n\t]);\n\n\t// Find g_form -- if no form is loaded fail immediately\n\tvar g_form = g_ui_testing_util.getTestIFrameGForm();\n\tif (!g_form) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = msgMap[MSG_NO_G_FORM];\n\t\tstep.defer.reject();\n\t\treturn;\n\t}\n\tstep.portalPage = g_form.$rootScope.page.id;\n\tstep.pageId = g_form.$rootScope.page.sys_id;\n\n\t// Get table name and sys_id information from g_form\n\tvar table = g_form.getTableName();\n\tvar targetID = g_form.getUniqueValue();\n\tif (!table && step.pageId == \"9f12251147132100ba13a5554ee490f4\")\n\t    table = \"sc_cat_item\";\n\n\t// Make the AJAX call to copy the attachments over to the current record\n\tvar ajax = new GlideAjax(\"TestExecutorAjax\");\n\tajax.addParam(\"sysparm_name\", \"uploadAttachments\");\n\tajax.addParam(\"sysparm_table\", table);\n\tajax.addParam(\"sysparm_target_id\", targetID);\n\tajax.getXML(function() {\n\t\tvar answer = JSON.parse(ajax.getAnswer());\n\n\t\t// Regardless of success/failure an output message (already translated) is always specified in the result\n\t\tstepResult.message = answer.output;\n\n\t\tif (answer.success) {\n\t\t\tvar testWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\t\tif (step.portalPage != \"form\" || targetID == -1)\n\t\t\t\taddAttachmentNameToForm(answer.attachments, step.portalPage);\n\t\t\tstepResult.success = true;\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tstepResult.success = false;\n\t\t\tstep.defer.reject();\n\t\t}\n\t});\n\n\tfunction addAttachmentNameToForm(attachments, portalPage) {\n\t\tvar testFrameDocument = jQuery(\"#testFrame\").contents();\n\t\tvar parentElement = testFrameDocument.find(\"sp-attachment-button\").parent();\n\t\tvar divEle = jQuery('<div></div>');\n\t\tvar ulEle = jQuery('<ul class=\"list-group\"></ul>');\n\t\tdivEle.append(ulEle);\n\t\tfor (var i = 0; i < attachments.length; i++) {\n\t\t\tvar attachmentLink = '<a href=\"sys_attachment.do?sys_id=' + attachments[i].sys_id + '\" style=\"margin-right:4px;\"><img src=\"' + attachments[i].icon + '\" alt=\"\" />' + attachments[i].name + '</a>';\n\t\t\tvar liEle = jQuery('<li class=\"list-group-item\"></li>');\n\t\t\tliEle.append(attachmentLink);\n\t\t\tulEle.append(liEle);\n\t\t}\n\t\tif (portalPage == \"form\")\n\t\t\tparentElement = testFrameDocument.find(\"sp-variable-layout\").parent()[0];\n\t\tdivEle.insertBefore(parentElement);\n\t}\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"85","active":"true","sys_tags":"","html_description":"<p>Adds attachments to the current form in portal.</p>\n<h4>Additional Considerations</h4>\n<p>At least one attachment is required.</p>\n<p>In order to use this step you must have already opened a form using the &#34;Open a Form(SP)&#34; or &#34;Open Service Portal Page&#34; steps. This step also cannot be used after a &#34;Submit Form&#34; step or &#34;Click a UI Action&#34; step has been used.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Adds attachments to the current form ","sys_update_name":"sys_atf_step_config_5415748677120010e46abe41a910616a","name":"Add Attachments to Form (SP)","description_generator":"function generateDescription() {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description = gs.getMessage(\"Adds the following attachments to the current form:\");\n\tdescription += descriptionGenerator.getAttachmentsForRecord(step.getUniqueValue());\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-02-14 12:08:38","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"550270f2c310320076173b0ac3d3aeec","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-01-17 09:02:12","sys_name":"Add Item to Shopping Cart","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"\n      (function (step, stepResult, assertionObject) {\n       assertionObject.executeStep = function(step, stepResult) {\n        var ADD_TO_CART = \"Add to Cart\";\n        var MESSAGE_KEY_ADD_TO_CART_STEP = \"Performing '{0}' action\";\n        var MESSAGE_KEY_CANNOT_SUBMIT = \"FAILURE: There is no item currently open. See screenshot\";\n        var MESSAGE_KEY_UNKNOWN_ASSERT_TYPE = \"FAILURE: Assert type cannot be empty\";\n        var MESSAGE_KEY_SUCCESS_CANNOT_ADD_TO_CART = \"Success: Unable to add item to Shopping cart\";\n        var MESSAGE_KEY_SUCCESS_CAN_ADD_TO_CART = \"Success: Item added to Shopping cart\";\n        var MESSAGE_KEY_FAIL_CAN_ADD_TO_CART = \"FAILURE: Item can be added to Shopping cart\";\n        var MESSAGE_KEY_FAIL_CANNOT_ADD_TO_CART = \"FAILURE: Item cannot be added to Shopping cart\";\n        var MESSAGE_KEY_FORM_NOT_FOUND = \"FAILURE: Glide Form was not present\";\n        var MESSAGE_KEY_FAIL_ACTION_ELEMENT = \"FAILURE: Cannot find '{0}' button. See screenshot\";\n        var MESSAGE_KEY_FAIL_TIME_OUT_EXCEEDED = \"FAILURE: Timeout exceeded while adding item to shopping cart\";\n\n        var messageMap = new GwtMessage().getMessages([\"Add to Cart\", \"Performing '{0}' action\", \"FAILURE: There is no item currently open. See screenshot\", \"FAILURE: Assert type cannot be empty\", \"FAILURE: Glide Form was not present\", \"Success: Unable to add item to Shopping cart\", \"Success: Item added to Shopping cart\", \"FAILURE: Item can be added to Shopping cart\", \"FAILURE: Item cannot be added to Shopping cart\", \"FAILURE: Glide Form was not present\", \"FAILURE: Cannot find '{0}' button. See screenshot\", \"FAILURE: Timeout exceeded while adding item to shopping cart\"]);\n\n        function _getBoolean(value) {\n            if (value === 'true') {\n                value = true;\n            } else if (value === 'false') {\n                value = false;\n            }\n            return value ? true : false;\n        }\n\n        var stepDone = false;\n        var timeoutExceeded = false;\n        var buttonId = \"oi_add_to_cart_button\";\n        if (step.catalog_data && !_getBoolean(step.catalog_data.use_sc_layout))\n            buttonId = \"add_to_cart_button\";\n\n\n        // set initial status message\n        g_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_ADD_TO_CART_STEP], messageMap[ADD_TO_CART]));\n\n        var testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n        if (typeof(testFrameWindow.gel) == 'undefined') {\n            message = messageMap[MESSAGE_KEY_CANNOT_SUBMIT];\n            g_ui_testing_util.setTestStepStatusMessage(message);\n            stepResult.success = false;\n            stepResult.message = message;\n            stepDone = true;\n            step.defer.reject();\n            return;\n        }\n        var secondsWaited = 0;\n\n        function waitForGForm(successHandler, failureHandler) {\n            if (secondsWaited > 30)\n                return failureHandler();\n            if (g_ui_testing_util.getTestIFrameGForm())\n                return successHandler();\n            secondsWaited++;\n            console.log(\"Failed to find g_form on the page \" + secondsWaited + \" time(s). Retrying in one second...\");\n            setTimeout(waitForGForm.bind(this, successHandler, failureHandler), 1000);\n        }\n\n        var url = testFrameWindow.location.href;\n        // If cat item is opened from incident, g_form might not be available readily\n        if (url.indexOf('sysparm_parent_sys_id') > 0)\n            waitForGForm(proceedWithStepProcessing, gFormFailure);\n        else\n            proceedWithStepProcessing();\n\n\n        function gFormFailure() {\n            message = messageMap[MESSAGE_KEY_FORM_NOT_FOUND];\n            stepResult.success = false;\n            stepResult.message = message;\n            stepDone = true;\n            step.defer.reject();\n            return;\n        }\n\n        function cartResponseATF(resp) {\n            if (!timeoutExceeded) {\n                var xml = resp.responseXML;\n                var error = xml.getElementsByTagName(\"error\");\n                if (error.length > 0) {\n                    var msg = error.msg;\n                    stepResult.success = false;\n                    stepResult.message = msg;\n                    stepDone = true;\n                    step.defer.reject();\n                    return;\n                }\n                var g_form = g_ui_testing_util.getTestIFrameGForm();\n                var newGuid = g_form.getValue(\"sysparm_item_guid\");\n                var catItem = xml.getElementsByTagName(\"cat_item\");\n                var itemGuid = catItem.length > 0 ? catItem[0].getAttribute(\"item_guid\") : '';\n\n                if (newGuid == itemGuid) {\n                    stepResult.success = true;\n                    stepResult.message = messageMap[MESSAGE_KEY_SUCCESS_CAN_ADD_TO_CART];\n                    stepDone = true;\n                    step.defer.resolve();\n                    return;\n                } else {\n                    stepResult.success = false;\n                    stepResult.message = messageMap[MESSAGE_KEY_FAIL_CANNOT_ADD_TO_CART];\n                    stepDone = true;\n                    step.defer.reject();\n                    return;\n                }\n            }\n\n        }\n\n        function checkStepAfterTimeOut() {\n            if (!stepDone) {\n                timeoutExceeded = true;\n                stepResult.success = false;\n                stepResult.message = messageMap[MESSAGE_KEY_FAIL_TIME_OUT_EXCEEDED];\n                stepDone = true;\n                step.defer.reject();\n                return;\n            }\n        }\n\n        function proceedWithStepProcessing() {\n            var g_form = g_ui_testing_util.getTestIFrameGForm();\n            if (!g_form) \n                return gFormFailure();\n\t\t\t\n            var formSysId = g_form.getValue(\"sysparm_item_guid\");\n\n            testFrameWindow.CustomEvent.observe(\"catalog_cart_changed\", cartResponseATF.bind(this));\n\n            var timeOut = step.timeout;\n            if (isNaN(timeOut))\n                timeOut = 0;\n            if (timeOut > 0) {\n                setTimeout(checkStepAfterTimeOut, 1000 * timeOut);\n            }\n\n            if (!g_form.catalogOnSubmit()) {\n                if (step.inputs.assert_type === 'form_submission_cancelled_in_browser') {\n                    // we expected the form submission to fail and it did. So step PASSED\n                    message = messageMap[MESSAGE_KEY_SUCCESS_CANNOT_ADD_TO_CART];\n                    g_ui_testing_util.setTestStepStatusMessage(message);\n                    stepResult.success = true;\n                    stepResult.message = message;\n                    stepDone = true;\n                    step.defer.resolve();\n                } else if (step.inputs.assert_type === 'form_submitted_to_server') {\n                    // we expected the form to submit successfully but it did not. Step FAILED\n                    message = messageMap[MESSAGE_KEY_FAIL_CANNOT_ADD_TO_CART];\n                    g_ui_testing_util.setTestStepStatusMessage(message);\n                    stepResult.success = false;\n                    stepResult.message = message;\n                    stepDone = true;\n                    step.defer.reject();\n                } else {\n                    //Assert type none means successful form submission\n                    message = messageMap[MESSAGE_KEY_UNKNOWN_ASSERT_TYPE];\n                    g_ui_testing_util.setTestStepStatusMessage(message);\n                    stepResult.success = false;\n                    stepResult.message = message;\n                    stepDone = true;\n                    step.defer.reject();\n                }\n            } else {\n                if (step.inputs.assert_type === 'form_submission_cancelled_in_browser') {\n                    message = messageMap[MESSAGE_KEY_FAIL_CAN_ADD_TO_CART];\n                    stepResult.success = false;\n                    stepResult.message = message;\n                    stepDone = true;\n                    step.defer.reject();\n                    return;\n                }\n                var actionElement = testFrameWindow.gel(buttonId);\n                if (actionElement && actionElement.onclick) {\n                    stepResult.outputs.cart_item_id = formSysId;\n                    actionElement.onclick();\n                } else {\n                    message = formatMessage(messageMap[MESSAGE_KEY_FAIL_ACTION_ELEMENT], messageMap[ADD_TO_CART]);\n                    stepResult.success = false;\n                    stepResult.message = message;\n                    stepDone = true;\n                    step.defer.reject();\n                }\n            }\n        }\n\n    };\n    assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"11","active":"true","sys_tags":"","html_description":"<p>Add item to <code>Shopping Cart</code></p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened a Catalog Item page using the “Open a Catalog Item” step. After this step, you may no longer use any form steps on the currently opened catalog item as this step will close it.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Add Catalog Item to Shopping Cart","sys_update_name":"sys_atf_step_config_550270f2c310320076173b0ac3d3aeec","name":"Add Item to Shopping Cart","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Add item to cart and confirm addition of item to cart\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Add item to cart and confirm addition is canceled in browser\");\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-07-19 09:01:03","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"559099f287131300b179480688cb0b1a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-18 08:00:42","sys_name":"Add Order Guide to Shopping Cart (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_ADD_TO_CART_STEP = \"Performing 'Add to cart' action\";\n\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before submission\";\n\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser failed to block submission of form to server\";\n\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of form to server\";\n\tvar FAILED_SUBMIT = \"FAILURE: Failed to Add the order guide to cart.\";\n\tvar SUCCESS_SUBMIT = \"SUCCESS: Order guide was successfully added to cart.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ADD_TO_CART_STEP, FAILED_NO_G_FORM, FAILED_BROWSER_BLOCK_SUBMIT, SUCCESS_CONFIRM_BROWSER_BLOCK, FAILED_SUBMIT, SUCCESS_SUBMIT]);\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ADD_TO_CART_STEP]);\n\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getOrderGuideUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction assertAddToCart(orderGuideUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\t\n\t\torderGuideUtil.addToCart().then(function(response) {\n\t\t\tif (assertType == \"form_submitted_to_server\") {\n\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t}\n\t\t\telse\n\t\t\t\tonFailure(FAILED_BROWSER_BLOCK_SUBMIT);\n\t\t}, function() {\n\t\t\tif (assertType == \"form_submission_cancelled_in_browser\")\n\t\t\t\tonSuccess(SUCCESS_CONFIRM_BROWSER_BLOCK);\n\t\t\telse\n\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t});\n\t}\n\tgetOrderGuideUtil().then(assertAddToCart, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"2","active":"true","sys_tags":"","html_description":"<p>Add order Guide to Shopping Cart</p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened an Order Guide and should have navigated to the Summary section using the other ATF steps available.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Add Order Guide to Shopping Cart (SP)","sys_update_name":"sys_atf_step_config_559099f287131300b179480688cb0b1a","name":"Add Order Guide to Shopping Cart (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Add order guide to cart and confirm addition of order guide to cart\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Add order guide to cart and confirm addition is canceled in browser\");\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-yellow","sys_updated_on":"2017-03-20 22:21:53","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"58ab71985f30220012b44adb7f46661e","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-19 20:17:16","sys_name":"Log","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.LogRunner","sys_created_by":"admin","order":"2700","step_execution_generator":"","sys_mod_count":"10","active":"true","sys_tags":"","html_description":"<p>Logs a message that can contain a variable or other information pertaining to the test. This message will be stored as a step result upon test completion.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Log an output.","sys_update_name":"sys_atf_step_config_58ab71985f30220012b44adb7f46661e","name":"Log","description_generator":"(function generateDescription(step) {\n\tvar description = gs.getMessage(\"Log: {0}\", step.inputs.log.getDisplayValue());\n\treturn description;\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-10-29 09:21:13","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"5a36c681c37e220076173b0ac3d3aecf","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-10-29 15:07:38","sys_name":"Validate Variable Values","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"5000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_VALIDATION = \"Running variable value validation\";\n\tvar MESSAGE_KEY_SERVER_MISSING_VALS = \"The server response was missing one or more values.\";\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_RUNNING_VALIDATION, MESSAGE_KEY_SERVER_MISSING_VALS]);\n\tg_ui_testing_util.setTestStepStatusMessage(messages[MESSAGE_KEY_RUNNING_VALIDATION]);\n\t\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tvar utilInterval = null;\n\tvar assertInterval = null;\n\n\tif (retryCount > 0) {\n\t\tutilInterval = g_ui_testing_util._getAngularInjector(\"$interval\");\n\t\tassertInterval = utilInterval(assertForm, 1000);\n\t}\n\telse {\n\t\tassertForm(0);\n\t}\n\n\tfunction assertForm(iterationCount) {\n\t\tvar conditionEvalAjax = new GlideAjax(\"com.glide.automated_testing_framework.processors.SCATFConditionEvaluator\");\n\t\tif(isVEFlow() && g_ui_testing_util.getTestIFrameWindow().g_sc_form)\n\t\t\tconditionEvalAjax.addEncodedString(g_ui_testing_util.getTestIFrameWindow().g_sc_form.serialize());\n\t\telse\n\t\t\tconditionEvalAjax.addEncodedString(g_ui_testing_util.getTestIFrameGForm().serialize());\n\t\tconditionEvalAjax.addParam(\"sysparm_step_id\", step.sys_id);\n\t\tconditionEvalAjax.addParam(\"sysparm_test_result_id\", step.test_result_id);\n\t\tconditionEvalAjax.getXML(handleConditionEvalAjaxResponse);\n\n\t\tfunction handleConditionEvalAjaxResponse(response){\n\t\t\ttry{\n\t\t\t\tvar evaluationResult = response.responseXML.getElementsByTagName(\"evaluation_result\")[0];\n\t\t\t\tvar evalStatus = evaluationResult.getAttribute(\"status\");\n\t\t\t\tvar evalMessage = evaluationResult.getAttribute(\"message\");\n\n\t\t\t\tstepResult.success = (\"success\" === evalStatus);\n\t\t\t\tstepResult.status = evalStatus;\n\t\t\t\tstepResult.message = evalMessage;\n\t\t\t}catch(e){\n\t\t\t\tstepResult.success = false;\n\t\t\t\tstepResult.status = \"error\";\n\t\t\t\tstepResult.message = messages[MESSAGE_KEY_SERVER_MISSING_VALS];\n\t\t\t}\n\n\t\t\tif(stepResult.success) {\n\t\t\t\tif (utilInterval != null)\n\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\t\tstep.defer.resolve();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (iterationCount >= retryCount || utilInterval == null) {\n\t\t\t\t\tif (utilInterval != null)\n\t\t\t\t\t\tutilInterval.cancel(assertInterval);\n\t\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\t\t\tstep.defer.reject();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction isVEFlow() {\n\t\tvar theGForm = g_ui_testing_util.getTestIFrameGForm();\n\t\tif(!theGForm)\n\t\t\treturn false;\n\n\t\tvar table = theGForm.getTableName();\n\t\tif (table != 'ni')\n\t\t\treturn true;\n\t\telse\n\t\t\treturn false;\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"12","active":"true","sys_tags":"","html_description":"<p>Validates variable values on the Catalog Item, Record Producer pages or a page containing a variable editor.</p>\n<h4>Additional Considerations</h4>\n<p><strong>Catalog Item</strong> - This step can be used only in-between “Open a Catalog Item” step and “Order Catalog Item” step or after opening a page containing the variable editor using the &#34;Open Existing Record&#34; step. .</p>\n<p><strong>Record Producer</strong>  -This step can be used only in-between  “Open a Record Producer” and “Submit Record Producer” step or after opening the target record page containing the variable editor using the &#34;Open Existing Record&#34; step.</p>\n<p>Several conditions can be applied to the same variable, if desired</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Validates Variable values on the Catalog Item.","sys_update_name":"sys_atf_step_config_5a36c681c37e220076173b0ac3d3aecf","name":"Validate Variable Values","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description = gs.getMessage(\"Validate that the answer match the following condition:\") + \"\\n\";\n\tvar scAtfUtil = new SCATFUtil();\n\tdescription += scAtfUtil.getValueValidationDescription(step.inputs.catalog_conditions);\n\t//Use breadcrumbs to generate the query english text\n\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-form color-green","sys_updated_on":"2023-09-25 05:15:32","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"5f2e0e535332120028bc29cac2dc34d3","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-04-20 19:15:46","sys_name":"Open an Existing Record","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1100","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Opening an existing record\",\n\t\t\"Successfully opened the '{0}' view of the '{1}' form with id '{2}'\",\n\t\t\"FAILURE: Failed to open the '{0}' view of the '{1}' form with id '{2}'\",\n\t\t\"Successfully opened the '{0}' form with id '{1}'\",\n\t\t\"FAILURE: Failed to open the '{0}' form with id '{1}'\",\n\t\t\"Successfully opened the '{0}' form with id '{1}' in '{2}'\",\n\t\t\"FAILURE: Failed to open the '{0}' form with id '{1}' in '{2}'\",\n\t\t\"Table '{0}' does not have a record with id '{1}'\",\n\t\t\"A sys_id was expected, however none was present. Please ensure that you are passing in the document id correctly\",\n\t\t\"Error validating view by calling TestExecutorAjax.validateFormView\",\n\t\t\"View '{0}' does not exist on the table '{1}'\",\n\t\t\"Table '{0}' does not exist\",\n\t\t\"The form failed to load\"\n\t]);\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Opening an existing record\"]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tvar afse = new ATFFormStepExecutor(step.inputs);\n\t\tafse.openExistingRecord().then(onSuccess, onFailure);\n\n\t\tfunction onSuccess(result) {\n\t\t\tvar message;\n\n\t\t\tif (typeof result === \"string\") // Standard UI result is just a string (already translated)\n\t\t\t\tmessage = result;\n\t\t\telse // Workspace result is an object\n\t\t\t\tmessage = formatMessage(messages[\"Successfully opened the '{0}' form with id '{1}' in '{2}'\"], step.inputs.table, step.inputs.record_id, step.inputs.workspace_display_name);\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction onFailure(result) {\n\t\t\tvar message;\n\n\t\t\tif (typeof result === \"string\") // Standard UI result is just a string (already translated)\n\t\t\t\tmessage = result;\n\t\t\telse {\n\t\t\t\tif (result.reason === \"no_sys_id\")\n\t\t\t\t\tmessage = formatMessage(messages[\"A sys_id was expected, however none was present. Please ensure that you are passing in the document id correctly\"]);\n\t\t\t\telse if (result.reason === \"ajax_error\")\n\t\t\t\t\tmessage = messages[\"Error validating view by calling TestExecutorAjax.validateFormView\"];\n\t\t\t\telse if (result.reason === \"invalid_table\")\n\t\t\t\t\tmessage = formatMessage(messages[\"Table '{0}' does not exist\"], step.inputs.table);\n\t\t\t\telse if (result.reason === \"invalid_sys_id\")\n\t\t\t\t\tmessage = formatMessage(messages[\"Table '{0}' does not have a record with id '{1}'\"], step.inputs.table, step.inputs.record_id);\n\t\t\t\telse if (result.message) // Could also be a caught exception\n\t\t\t\t\tmessage = result.message;\n\t\t\t\telse // If none of the above applies, use a default message\n\t\t\t\t\tmessage = formatMessage(messages[\"FAILURE: Failed to open the '{0}' form with id '{1}' in '{2}'\"], step.inputs.table, step.inputs.record_id, step.inputs.workspace_display_name);\n\t\t\t}\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"49","active":"true","sys_tags":"","html_description":"<p>Opens an existing record it the selected table and Form UI.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p class=\"p1\"><span class=\"s1\">Optionally, you can specify the form’s view <code>name</code>. Keep in mind that this can only be done for users that have access to that view.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Opens an existing record in this table","sys_update_name":"sys_atf_step_config_5f2e0e535332120028bc29cac2dc34d3","name":"Open an Existing Record","description_generator":"(function generateDescription(step) {\n\tvar descriptor = new ATFStepDescriptionGenerator();\n\tvar description = descriptor.getOpenFormDescription(step.inputs.table, step.inputs.view, step.inputs.record_id.getDisplayValue(), step.inputs.form_ui);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-06 08:50:41","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"60a41086b31023003e5362ff86a8dc28","class_type":"java","sys_updated_by":"admin","sys_created_on":"2018-09-03 11:32:23","sys_name":"Responsive Dashboard Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.dashboards.DashboardVisibilityStepRunner","sys_created_by":"admin","order":"920","step_execution_generator":"","sys_mod_count":"5","active":"true","sys_tags":"","html_description":"<p>Confirm a dashboard is or is not visible to the test user</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2bfb23b704352210559073c06a02f7b7","value":"2bfb23b704352210559073c06a02f7b7"},"template_reminder":"Confirm a dashboard is or is not visible to the test user","sys_update_name":"sys_atf_step_config_60a41086b31023003e5362ff86a8dc28","name":"Responsive Dashboard Visibility","description_generator":"(function generateDescription() {\n   var isVisible = step.inputs.assert_type;\n\tvar assertIsVisible = (isVisible == 'dashboard_is_visible');\n\t\n\tif (assertIsVisible)\n\t\treturn gs.getMessage(\"Confirm the dashboard '{0}' is visible\",\n\t\t\t\t\t\t\t step.inputs.dashboard_id.getDisplayValue());\n\telse\n\t\treturn gs.getMessage(\"Confirm the dashboard '{0}' is not visible\",\n\t\t\t\t\t\t\t step.inputs.dashboard_id.getDisplayValue());\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/ac3c433ab31023003e5362ff86a8dcb1","value":"ac3c433ab31023003e5362ff86a8dcb1"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-11-09 22:27:47","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"6228cf753752030064a52f3c8e41f1a8","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-11-08 23:44:53","sys_name":"Application Menu Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8990","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n    var MESSAGE_KEY_RUNNING_APPLICATION_VISIBILITY = \"Verifying application menu visibility\";\n\tvar MESSAGE_KEY_INVALID_ASSERT_TYPE = \"Invalid assert type {0}\";\n\tvar SUCCESS_MSG_APPS_VISIBLE = \"Successfully validated that the following application menus were visible: {0}\";\n\tvar SUCCESS_MSG_APPS_NOT_VISIBLE = \"Successfully validated that the following application menus were not visible: {0}\";\n\tvar SUCCESS_MSG_ONLY_APPS_VISIBLE = \"Successfully validated that only the following application menus were visible: {0}\";\n\tvar SUCCESS_MSG_ONLY_APPS_NOT_VISIBLE = \"Successfully validated that only the following application menus were not visible: {0}\";\n\tvar FAILURE_CALCULATING_NOT_VISIBLE = \"Error calculating not visible application menus\";\n\tvar FAILURE_MSG_APPS_VISIBLE = \"FAILURE: Expected the following application menus to be visible but they were not visible: {0}\";\n\tvar FAILURE_MSG_APPS_NOT_VISIBLE = \"FAILURE: Expected the following application menus to not be visible but they were visible: {0}\";\n\tvar FAILURE_MSG_ADDITIONAL_APPS_NOT_VISIBLE = \"FAILURE: Found additional application menus that were not visible: {0}\";\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_RUNNING_APPLICATION_VISIBILITY,  MESSAGE_KEY_INVALID_ASSERT_TYPE,\n\t\tSUCCESS_MSG_APPS_VISIBLE, SUCCESS_MSG_APPS_NOT_VISIBLE, SUCCESS_MSG_ONLY_APPS_VISIBLE, SUCCESS_MSG_ONLY_APPS_NOT_VISIBLE,\n\t\tFAILURE_CALCULATING_NOT_VISIBLE, FAILURE_MSG_APPS_VISIBLE, FAILURE_MSG_APPS_NOT_VISIBLE, FAILURE_MSG_ADDITIONAL_APPS_NOT_VISIBLE]);\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[MESSAGE_KEY_RUNNING_APPLICATION_VISIBILITY]);\n\n\tvar visibleAssertionPassed = true;\n\tvar notVisibleAssertionPassed = true;\n\tvar leftNavUtil = new ATFLeftNavUtil();\n\tleftNavUtil.openNavigator(assertApplicationVisibility, step.inputs.navigator);\n\n\tfunction assertApplicationVisibility() {\n\t\tg_ui_testing_util.clearTestIFrameOnloadFunction();\n\t\tleftNavUtil.getLeftNavJSON(step.inputs.navigator).then(function(response) {\n\t\t\tvar visibleMsg = runVisibleAssertions(response);\n\t\t\tvar notVisibleMsg = runNotVisibleAssertions(response);\n\t\t\tvar resultMsg = '';\n\t\t\tif ((visibleAssertionPassed && notVisibleAssertionPassed)\n\t\t\t\t\t|| (!visibleAssertionPassed && !notVisibleAssertionPassed))\n\t\t\t\tresultMsg = visibleMsg + (visibleMsg && notVisibleMsg ? '\\n\\n' : '') + notVisibleMsg;\n\t\t\telse if (!visibleAssertionPassed && notVisibleAssertionPassed)\n\t\t\t\tresultMsg = visibleMsg;\n\t\t\telse if (visibleAssertionPassed && !notVisibleAssertionPassed)\n\t\t\t\tresultMsg = notVisibleMsg;\n\n\t\t\tstepResult.message = resultMsg;\n\t\t\tstepResult.success = visibleAssertionPassed && notVisibleAssertionPassed;\n\t\t\tif (stepResult.success)\n\t\t\t\tstep.defer.resolve();\n\t\t\telse\n\t\t\t\tstep.defer.reject();\n\t\t})['catch'](function (e) {\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = e;\n\t\t\tstep.defer.reject();\n\t\t});\n\t}\n\n\tfunction runVisibleAssertions(leftNavJSON) {\n\t\tvar msg = '';\n\t\tif (step.inputs.visible_applications) {\n\t\t\tvar apps = step.inputs.visible_applications.split(',');\n\t\t\tswitch (step.inputs.visible_assert_type) {\n\t\t\t\tcase 'at_least_applications_visible':\n\t\t\t\t\tmsg = assertAtLeastVisible(apps, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'only_applications_visible':\n\t\t\t\t\tmsg = assertOnlyVisible(apps, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvisibleAssertionPassed = false;\n\t\t\t\t\tmsg = formatMessage(messages[MESSAGE_KEY_INVALID_ASSERT_TYPE], step.inputs.visible_assert_type);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tfunction runNotVisibleAssertions(leftNavJSON) {\n\t\tvar msg = '';\n\t\tif (step.inputs.not_visible_applications) {\n\t\t\tvar apps = step.inputs.not_visible_applications.split(',');\n\t\t\tswitch (step.inputs.not_visible_assert_type) {\n\t\t\t\tcase 'at_least_applications_not_visible':\n\t\t\t\t\tmsg = assertAtLeastNotVisible(apps, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'only_applications_not_visible':\n\t\t\t\t\tmsg = assertOnlyNotVisible(apps, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tnotVisibleAssertionPassed = false;\n\t\t\t\t\tmsg = formatMessage(messages[MESSAGE_KEY_INVALID_ASSERT_TYPE], step.inputs.not_visible_assert_type);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tfunction assertAtLeastVisible(apps, leftNavJSON) {\n\t\tvar appsFound = leftNavUtil.findApplications(apps, leftNavJSON);\n\t\tif (appsFound.length == apps.length)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_APPS_VISIBLE], convertAppIdsToTitles(appsFound, true));\n\n\t\t// figure out which application(s) were not visible\n\t\tfor (var i = 0; i < appsFound.length; i += 1) {\n\t\t\tvar index = apps.indexOf(appsFound[i]);\n\t\t\tif (index != -1)\n\t\t\t\tapps.splice(index, 1);\n\t\t}\n\n\t\tvisibleAssertionPassed = false;\n\t\treturn formatMessage(messages[FAILURE_MSG_APPS_VISIBLE], convertAppIdsToTitles(apps, true));\n\t}\n\n\tfunction assertAtLeastNotVisible(apps, leftNavJSON) {\n\t\tvar msg = '';\n\t\tvar appsFound = leftNavUtil.findApplications(apps, leftNavJSON);\n\t\tif (appsFound.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_APPS_NOT_VISIBLE], convertAppIdsToTitles(apps, false));\n\n\t\tnotVisibleAssertionPassed = false;\n\t\treturn formatMessage(messages[FAILURE_MSG_APPS_NOT_VISIBLE], convertAppIdsToTitles(appsFound, false));\n\t}\n\n\tfunction assertOnlyVisible(apps, leftNavJSON) {\n\t\tfor (var i = 0; i < leftNavJSON.length; i += 1) {\n\t\t\tvar index = apps.indexOf(leftNavJSON[i].id);\n\t\t\tif (index != -1) {\n\t\t\t\tapps.splice(index, 1);\n\t\t\t\tleftNavJSON.splice(i, 1);\n\t\t\t\ti -= 1;\n\t\t\t}\n\t\t}\n\n\t\tif (apps.length == 0 && leftNavJSON.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_ONLY_APPS_VISIBLE], convertAppIdsToTitles(step.inputs.visible_applications.split(','), true));\n\n\t\tvar failureMsg = '';\n\t\tif (apps.length > 0)\n\t\t\tfailureMsg += formatMessage(messages[FAILURE_MSG_APPS_VISIBLE], convertAppIdsToTitles(apps, true));\n\n\t\tif (leftNavJSON.length > 0) {\n\t\t\tvar failures = [];\n\t\t\tfor (i = 0; i < leftNavJSON.length; i += 1) {\n\t\t\t\tif (step.inputs.navigator === 'polaris')\n\t\t\t\t\tfailures.push(leftNavJSON[i].label);\n\t\t\t\telse\n\t\t\t\t\tfailures.push(leftNavJSON[i].title);\n\t\t\t}\n\n\t\t\tfailureMsg += (failureMsg ? (\"\\n\\n\") : \"\") + formatMessage(messages[FAILURE_MSG_APPS_NOT_VISIBLE], failures.join(', '));\n\t\t}\n\n\t\tvisibleAssertionPassed = false;\n\t\treturn failureMsg;\n\t}\n\n\tfunction assertOnlyNotVisible(apps, leftNavJSON) {\n\t\tvar appIds = [];\n\t\tfor (var i = 0 ; i < leftNavJSON.length; i += 1)\n\t\t\tappIds.push(leftNavJSON[i].id);\n\n\t\tvar ga = new GlideAjax('ATFLeftNavUtil');\n\t\tga.addParam('sysparm_name', 'getNotVisibleApplications');\n\t\tga.addParam('sysparm_visible_applications', appIds.join(','));\n\t\tga.getXMLWait();\n\t\tvar notVisibleApps = ga.getAnswer();\n\t\tif (!notVisibleApps) {\n\t\t\tnotVisibleAssertionPassed = false;\n\t\t\treturn messages[FAILURE_CALCULATING_NOT_VISIBLE];\n\t\t}\n\n\t\tnotVisibleApps = JSON.parse(notVisibleApps);\n\t\tfor (i = 0; i < notVisibleApps.length; i += 1) {\n\t\t\tvar index = apps.indexOf(notVisibleApps[i].id);\n\t\t\tif (index != -1) {\n\t\t\t\tapps.splice(index, 1);\n\t\t\t\tnotVisibleApps.splice(i, 1);\n\t\t\t\ti -= 1;\n\t\t\t}\n\t\t}\n\n\t\tif (apps.length == 0 && notVisibleApps.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_ONLY_APPS_NOT_VISIBLE],\n\t\t\t\tconvertAppIdsToTitles(step.inputs.not_visible_applications.split(','), false));\n\n\t\tvar failureMsg = '';\n\t\tif (apps.length > 0)\n\t\t\tfailureMsg += formatMessage(messages[FAILURE_MSG_APPS_NOT_VISIBLE],\n\t\t\t\tconvertAppIdsToTitles(apps, false));\n\n\t\tif (notVisibleApps.length > 0) {\n\t\t\tvar failures = [];\n\t\t\tfor (i = 0; i < notVisibleApps.length; i += 1)\n\t\t\t\tfailures.push(notVisibleApps[i].title);\n\n\t\t\tfailureMsg += (failureMsg ? (\"\\n\\n\") : \"\") + formatMessage(messages[FAILURE_MSG_ADDITIONAL_APPS_NOT_VISIBLE], failures.join(', '));\n\t\t}\n\n\t\tnotVisibleAssertionPassed = false;\n\t\treturn failureMsg;\n\t}\n\n\tfunction convertAppIdsToTitles(appIdArr, isVisibleAssertType) {\n\t\tvar titleArr = isVisibleAssertType ? step.inputs.visible_application_titles : step.inputs.not_visible_application_titles;\n\t\tif (!titleArr)\n\t\t\treturn appIdArr.join(', ');\n\n\t\tvar appTitles = [];\n\t\tfor (var i = 0; i < appIdArr.length; i += 1)\n\t\t\tappTitles.push(titleArr[appIdArr[i]]);\n\n\t\treturn appTitles.join(', ');\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>Verifies visibility of application menus in the left navigation bar</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/ae89677b04f12210559073c06a02f735","value":"ae89677b04f12210559073c06a02f735"},"template_reminder":"Verifies visibility of application menus in the left navigation bar","sys_update_name":"sys_atf_step_config_6228cf753752030064a52f3c8e41f1a8","name":"Application Menu Visibility","description_generator":"(function generateDescription(step) {\n\tvar description = '';\n\tvar leftNavUtil = new ATFLeftNavUtil();\n\tvar navDisplayValue = step.inputs.navigator.getDisplayValue();\n\n\tif (step.inputs.visible_applications.hasMapping())\n\t\tdescription = getVisibleDescription(step.inputs.visible_applications.getDisplayValue());\n\telse if (step.inputs.visible_applications) {\n\t\tvar visibleAppTitles = leftNavUtil.getTitles('sys_app_application', step.inputs.visible_applications.split(','));\n\t\tvisibleAppTitles = visibleAppTitles.join(', ');\n\t\tdescription = getVisibleDescription(visibleAppTitles);\n\t}\n\n\tif (step.inputs.not_visible_applications.hasMapping())\n\t\tdescription += getNotVisibleDescription(step.inputs.not_visible_applications.getDisplayValue());\n\telse if (step.inputs.not_visible_applications) {\n\t\tvar notVisibleAppTitles = leftNavUtil.getTitles('sys_app_application', step.inputs.not_visible_applications.split(','));\n\t\tnotVisibleAppTitles = notVisibleAppTitles.join(', ');\n\t\tdescription += getNotVisibleDescription(notVisibleAppTitles);\n\t}\n\n\tfunction getVisibleDescription(visibleAppTitles) {\n\t\tvar visibleAssertType = step.inputs.visible_assert_type + '';\n\t\tswitch (visibleAssertType) {\n\t\t\tcase 'at_least_applications_visible':\n\t\t\t\treturn gs.getMessage('Confirm that at least the following application menus are visible in {0}: {1}', [navDisplayValue, visibleAppTitles]);\n\t\t\tcase 'only_applications_visible':\n\t\t\t\treturn gs.getMessage('Confirm that only the following application menus are visible in {0}: {1}', [navDisplayValue, visibleAppTitles]);\n\t\t\tdefault:\n\t\t\t\treturn gs.getMessage('Unknown visible assert type: {0}', visibleAssertType);\n\t\t}\n\t}\n\n\tfunction getNotVisibleDescription(notVisibleAppTitles) {\n\t\tvar notVisibleAssertType = step.inputs.not_visible_assert_type + '';\n\t\tswitch (notVisibleAssertType) {\n\t\t\tcase 'at_least_applications_not_visible':\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Confirm that at least the following application menus are not visible in {0}: {1}', [navDisplayValue, notVisibleAppTitles]);\n\t\t\tcase 'only_applications_not_visible':\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Confirm that only the following application menus are not visible in {0}: {1}', [navDisplayValue, notVisibleAppTitles]);\n\t\t\tdefault:\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Unknown visible assert type: {0}', notVisibleAssertType);\n\t\t}\n\t}\n\n\tif (gs.nil(description))\n\t\tdescription = gs.getMessage(\"This step will do nothing. Provide at least one application menu to assert as visible or not visible\");\n\n\treturn description;\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/92af89573702030064a52f3c8e41f1aa","value":"92af89573702030064a52f3c8e41f1aa"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-02-04 22:20:24","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"6932ee40b760330044026848ee11a960","class_type":"script","sys_updated_by":"admin","sys_created_on":"2019-03-27 23:07:55","sys_name":"Add Attachments to Form","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4800","step_execution_generator":"(function (step, stepResult, assertionObject) {\n  assertionObject.executeStep = function(step, stepResult) {\n\tvar MSG_NO_G_FORM = \"FAILURE: A valid form must be open in order to upload an attachment\";\n\n\tvar translator = new GwtMessage();\n\tvar msgMap = translator.getMessages([\n\t\tMSG_NO_G_FORM\n\t]);\n\n\t// Find g_form -- if no form is loaded fail immediately\n\tvar g_form = g_ui_testing_util.getFormWindow().g_form;\n\tif (!g_form) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = msgMap[MSG_NO_G_FORM];\n\t\tstep.defer.reject();\n\t\treturn;\n\t}\n\n\t// Get table name and sys_id information from g_form\n\tvar table = g_form.tableName;\n\tvar targetID = g_form.getUniqueValue();\n\n\t// Make the AJAX call to copy the attachments over to the current record\n\tvar ajax = new GlideAjax(\"TestExecutorAjax\");\n\tajax.addParam(\"sysparm_name\", \"uploadAttachments\");\n\tajax.addParam(\"sysparm_table\", table);\n\tajax.addParam(\"sysparm_target_id\", targetID);\n\tajax.getXML(function() {\n\t\tvar answer = JSON.parse(ajax.getAnswer());\n\n\t\t// Regardless of success/failure an output message (already translated) is always specified in the result\n\t\tstepResult.message = answer.output;\n\n\t\tif (answer.success) {\n\t\t\tvar testWindow = g_ui_testing_util.getFormWindow();\n\n\t\t\t// The page cannot be refreshed to display the new attachments as the user might end up losing data (e.g. from a \"Set Field Values\" step)\n\t\t\t// Instead the attachments are added to the form using the standard addAttachmentNameToForm API, which has the following signature:\n\t\t\t// addAttachmentNameToForm(sysid, name, hoverText, image, showRename, showView, showPopup)\n\t\t\tanswer.attachments.forEach(function(attachment) {\n\t\t\t\ttestWindow.addAttachmentNameToForm(attachment.sys_id, attachment.name, \"\", attachment.icon, \"true\", \"true\", \"true\");\n\t\t\t});\n\n\t\t\tstepResult.success = true;\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tstepResult.success = false;\n\t\t\tstep.defer.reject();\n\t\t}\n\t});\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"20","active":"true","sys_tags":"","html_description":"<p>Adds attachments to the current form.</p>\n<h4>Additional Considerations</h4>\n<p>At least one attachment is required.</p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. This step also cannot be used after a &#34;Submit Form&#34; step or &#34;Click a UI Action&#34; step has been used.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Adds attachments to the current form.","sys_update_name":"sys_atf_step_config_6932ee40b760330044026848ee11a960","name":"Add Attachments to Form","description_generator":"function generateDescription() {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description = gs.getMessage(\"Adds the following attachments to the current form:\");\n\tdescription += descriptionGenerator.getAttachmentsForRecord(step.getUniqueValue());\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:31:00","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"697ce2d87323030076860d573cf6a708","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-05 09:07:52","sys_name":"Set Catalog Item Quantity (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SET_QUANTITY = \"Setting quantity to {0}\";\n\tvar MESSAGE_KEY_ERROR_NO_GFORM = \"ERROR: Cannot find g_form on page\";\n\tvar MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL = \"Successfully set quantity of the item to {0}\";\n\tvar MESSAGE_KEY_QUANTITY_ERROR = \"FAILURE: Expected quantity value to be {0} but found {1}\";\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SET_QUANTITY, MESSAGE_KEY_ERROR_NO_GFORM, MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL, MESSAGE_KEY_QUANTITY_ERROR]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SET_QUANTITY], step.inputs.quantity));\n\t\n\tfunction onSuccess(message) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(message) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = false;\n\t\tstepResult.message = message;\n\t\tstep.defer.reject();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif(typeof testFrameWindow.catalog_util == undefined) {\n\t\t\t\tcount++;\n\t\t\t\tif(count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\treturn deferred.reject(MESSAGE_KEY_ERROR_NO_GFORM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\treturn deferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\n\t}\n\t\n\tfunction setAndAssertQuantity(catalogUtil) {\n\t\tcatalogUtil.setQuantity(parseInt(step.inputs.quantity));\n\t\tvar actualQuantity = catalogUtil.getQuantity();\n\t\tif (actualQuantity == step.inputs.quantity)\n\t\t\tonSuccess(formatMessage(MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL, step.inputs.quantity));\n\t\telse\n\t\t\tonFailure(formatMessage(MESSAGE_KEY_QUANTITY_ERROR, [step.inputs.quantity, actualQuantity]));\n\t}\n\t\n\tgetUtil().then(setAndAssertQuantity, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"18","active":"true","sys_tags":"","html_description":"<p>Sets quantity value on the currently open catalog item.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item (SP)” step. This step cannot be used after “Order Catalog Item (SP)” step.<br /><span style=\"color: #ff6600;\">This step can not be used with Record Producers or items within an Order Guide.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Set Catalog Item Quantity (SP)","sys_update_name":"sys_atf_step_config_697ce2d87323030076860d573cf6a708","name":"Set Catalog Item Quantity (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = gs.getMessage(\"Set quantity to {0}\", step.inputs.quantity);\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-24 10:46:33","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"6ad01e9387131300b179480688cb0b8f","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-20 00:49:40","sys_name":"Submit an Order Guide (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"(function executeStep(step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_ORDER_NOW_STEP = \"Performing 'Order Now' action\";\n\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\";\n\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser failed to block submission of form to server\";\n\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of form to server\";\n\tvar FAILED_SUBMIT = \"FAILURE: Failed to Submit the order guide.\";\n\tvar SUCCESS_SUBMIT = \"SUCCESS: Order guide was successfully submitted.\";\n\tvar FAILED_CHECKOUT_MODAL = \"FAILURE: Failed to load checkout modal on the form.\";\n\tvar FAILED_VALIDATION = \"FAILURE: Validations failed. Failed to order the order guide.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ORDER_NOW_STEP, FAILED_NO_G_FORM, FAILED_BROWSER_BLOCK_SUBMIT, SUCCESS_CONFIRM_BROWSER_BLOCK, FAILED_SUBMIT, SUCCESS_SUBMIT, FAILED_CHECKOUT_MODAL, FAILED_VALIDATION]);\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ORDER_NOW_STEP]);\n\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getOrderGuideUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 1000);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction getCheckoutUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.checkout_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_CHECKOUT_MODAL);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.checkout_util);\t\n\t\t\t}\n\t\t}, 1000);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction assertCheckoutModal(checkoutUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\tcheckoutUtil.checkout().then(function(result) {\n\t\t\tif (typeof result.number == \"undefined\") {\n\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t}\n\t\t}, onFailure);\n\t}\n\t\n\tfunction assertOrderGuide(orderGuideUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\t\n\t\torderGuideUtil.submitOrderGuide().then(function(result) {\n\t\t\tif(assertType == \"form_submitted_to_server\") {\n\t\t\t\tif (result && result.single_step) {\n\t\t\t\t\tif (typeof result.number == \"undefined\" && typeof result.request_number == \"undefined\") {\n\t\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t\telse if (result.request_number) {\n\t\t\t\t\t\tstepResult.outputs.table = \"sc_request\";\n\t\t\t\t\t\tstepResult.outputs.record_id = result.request_id;\n\t\t\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tgetCheckoutUtil().then(assertCheckoutModal, onFailure);\n\t\t\t}\n\t\t\telse\n\t\t\t\tonFailure(FAILED_BROWSER_BLOCK_SUBMIT);\n\t\t}, function() {\n\t\t\tif(assertType == \"form_submission_cancelled_in_browser\")\n\t\t\t\tonSuccess(SUCCESS_CONFIRM_BROWSER_BLOCK);\n\t\t\telse\n\t\t\t\tonFailure(FAILED_VALIDATION);\n\t\t});\n\t}\n\tgetOrderGuideUtil().then(assertOrderGuide, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"5","active":"true","sys_tags":"","html_description":"<p>Click <code>Order Now</code> to order an Order Guide</p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened an Order Guide and should have navigated to the Summary section using the other ATF steps available.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Submit an Order Guide (SP)","sys_update_name":"sys_atf_step_config_6ad01e9387131300b179480688cb0b8f","name":"Submit an Order Guide (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Submit an order guide and confirm that ordering is successful\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Submit an order guide and confirm that ordering is canceled in browser\");\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:42:02","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"70a083b0c323220076173b0ac3d3aee8","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-12-05 07:30:15","sys_name":"Validate Price and Recurring Price","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"5200","step_execution_generator":"\n\t(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_RUNNING_PRICE_VALIDATION = \"Running catalog item price validations\";\n\tvar MESSAGE_KEY_VALIDATION_STEP = \"Validating {0} of the catalog item\";\n\tvar MESSAGE_KEY_ERROR_CART_NOT_FOUND = \"ERROR: Cannot validate price of the item\";\n\tvar MESSAGE_KEY_ERROR_PRICE_DISABLED = \"ERROR: Cannot validate price of the item. Price details not visible on cart\";\n\tvar MESSAGE_KEY_FAILURE_EXPECTED = \"FAILURE: Expected {0} to be {1} but is {2}\";\n\tvar MESSAGE_KEY_FAILURE_VALIDATION = \"FAILURE: Validation failed on one or more pricing details\";\n\tvar MESSAGE_KEY_SUCCESS_VALIDATED = \"SUCCESS: Successfully validated pricing details of the catalog item\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_RUNNING_PRICE_VALIDATION, MESSAGE_KEY_VALIDATION_STEP, MESSAGE_KEY_ERROR_CART_NOT_FOUND, MESSAGE_KEY_ERROR_PRICE_DISABLED, MESSAGE_KEY_FAILURE_EXPECTED, MESSAGE_KEY_FAILURE_VALIDATION, MESSAGE_KEY_SUCCESS_VALIDATED]);\n\n\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_RUNNING_PRICE_VALIDATION]);\n\n\tfunction assertField(expectedVal, actualVal, failMsg) {\n\t\tif (expectedVal != actualVal) {\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message += (stepResult.message ? \"\\n\" : \"\") + failMsg;\n\t\t}\n\t}\n\tfunction validatePriceOfItem() {\n\t\tstepResult.success = true;\n\t\tstepResult.message = \"\";\n\t\tvar failMsg = \"\";\n\n\t\tif (step.inputs.price) {\n\t\t\tfailMsg = formatMessage(messageMap[MESSAGE_KEY_FAILURE_EXPECTED], 'price', step.inputs.price, g_cart.price_subtotal);\n\t\t\tassertField(step.inputs.price, g_cart.price_subtotal, failMsg);\n\t\t}\n\n\t\tif (step.inputs.recurring_price) {\n\t\t\tfailMsg = formatMessage(messageMap[MESSAGE_KEY_FAILURE_EXPECTED], 'recurring price', step.inputs.recurring_price, g_cart.recurring_price_subtotal);\n\t\t\tassertField(step.inputs.recurring_price, g_cart.recurring_price_subtotal, failMsg);\n\t\t}\n\n\t\tif (step.inputs.recurring_frequency) {\n\t\t\tfailMsg = formatMessage(messageMap[MESSAGE_KEY_FAILURE_EXPECTED], 'recurring frequency', step.inputs.recurring_frequency, g_cart.recurring_frequency_subtotal);\n\t\t\tassertField(step.inputs.recurring_frequency, g_cart.recurring_frequency_subtotal, failMsg);\n\t\t}\n\n\t\tif (stepResult.success) {\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_SUCCESS_VALIDATED]);\n\t\t\tstepResult.message = messageMap[MESSAGE_KEY_SUCCESS_VALIDATED];\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILURE_VALIDATION]);\n\t\t\tstep.defer.reject();\n\t\t}\n\t}\n\n\tvar g_cart = g_ui_testing_util.getTestIFrameWindow().g_cart;\n\tif (!g_cart || !g_cart.showCart) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ERROR_CART_NOT_FOUND]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_ERROR_CART_NOT_FOUND];\n\t\tstep.defer.reject();\n\t} else\n\t\tvalidatePriceOfItem();\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"28","active":"true","sys_tags":"","html_description":"<p>Step to validate price and recurring price of a Catalog Item.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item” step. This step cannot be used after “Order Catalog Item” step. <br /><span style=\"color: #ff6600;\">This step can not be used with Record Producers.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Validate Price and Recurring Price of a catalog item","sys_update_name":"sys_atf_step_config_70a083b0c323220076173b0ac3d3aee8","name":"Validate Price and Recurring Price","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n\tvar description = \"\";\n\tif (step.inputs.price)\n\t\tdescription += gs.getMessage(\"Validate that price is {0}\", step.inputs.price) + \"\\n\";\n\t\n\tif (step.inputs.recurring_price)\n\t\tdescription += gs.getMessage(\"Validate that recurring price is {0}\", step.inputs.recurring_price) + \"\\n\";\n\n\tif (step.inputs.recurring_frequency)\n\t\tdescription += gs.getMessage(\"Validate that recurring price frequency is {0}\", step.inputs.recurring_frequency) + \"\\n\";\n\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-04 04:17:26","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"77409f72c300320076173b0ac3d3ae19","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-01-05 10:22:28","sys_name":"Open a Record Producer","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1400","step_execution_generator":"\n    (function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_OPENING = \"Opening Record Producer\";\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = \"Successfully opened\";\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = \"FAILURE: Failed to open\";\n\tvar MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM = \"{0} the '{1}'\";\n\tvar MESSAGE_KEY_NULL_ID = \"FAILURE: Failed to open the '{0}' with the id 'null'\";\n\tvar MESSAGE_KEY_INCORRECT_ID = \"A sys_id was expected, however none was present. Please ensure that you are passing in the sys_id of the record producer correctly\";\n\t//init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_OPENING, MESSAGE_KEY_SUCCESSFULY_OPENED, MESSAGE_KEY_FAILED_TO_OPEN, MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM, MESSAGE_KEY_NULL_ID, MESSAGE_KEY_INCORRECT_ID]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_OPENING]);\n\n\tfunction onSuccess() {\n\t\tvar message = getStepMessageWithPrefix(messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction onFailure(reason) {\n\t\tvar message = getStepMessageWithPrefix(messageMap[MESSAGE_KEY_FAILED_TO_OPEN]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message = message + \"\\n\" + reason;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction getStepMessageWithPrefix(prefix) {\n\t\treturn formatMessage(messageMap[MESSAGE_KEY_MESSAGE_WITH_PREFIX_EXISTING_FORM], [prefix, \"record producer\"]);\n\t}\n\n\tfunction openForm() {\n\n        g_ui_testing_util.openCatalogItem(step.inputs.catalog_item)\n\t\t\t.then(onSuccess, onFailure);\n    }\n\n    if (!step.inputs.catalog_item){\n        message = formatMessage(messageMap[MESSAGE_KEY_NULL_ID], \"record producer\");\n        var reason = formatMessage(messageMap[MESSAGE_KEY_INCORRECT_ID]);\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message = message + \"\\n\" + reason;\n\t\tstep.defer.reject();\n\t} else {\n\t\topenForm();\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"15","active":"true","sys_tags":"","html_description":"<p>Opens a Record Producer.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the record producer.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Open a Record Producer","sys_update_name":"sys_atf_step_config_77409f72c300320076173b0ac3d3ae19","name":"Open a Record Producer","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var producerItemName = step.inputs.catalog_item.getDisplayValue();\n    var description = gs.getMessage(\"Open '{0}' Record Producer\", producerItemName);\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-11-08 13:46:41","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"775638f29f3203002899d4b4232e70e5","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-12-06 12:10:43","sys_name":"Open a Record Producer (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = \"Successfully opened Record Producer page\";\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = \"FAILURE: Failed to open Record Producer page\";\n\tvar MESSAGE_KEY_FAILED_TO_LOAD_GFORM = \"FAILURE: Failed to open Record Producer. Either you don't have access to the Record Producer or g_form is not defined\";\n\tvar MESSAGE_KEY_OPENING = \"Opening Record Producer\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SUCCESSFULY_OPENED, MESSAGE_KEY_FAILED_TO_OPEN, MESSAGE_KEY_FAILED_TO_LOAD_GFORM, MESSAGE_KEY_OPENING]);\n\t\n\tfunction onSuccess() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED]);\n\t\tstepResult.success = true;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED];\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_OPEN]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_OPEN];\n\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction onGFormFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM];\n\t\t\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction gFormLoaded() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.g_form === 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 10) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve();\n\t\t\t}\n\t\t}, 2000);\n\t\treturn deferred.promise;\n\t}\n\t\n\tstep.timeout = step.timeout || 30;\n\tvar wait_timeout = step.timeout * 1000;\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\tquery_params.sys_id = step.inputs.catalog_item;\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_OPENING]);\n\t\n\tg_ui_testing_util.openPortalPage(step.inputs.portal.url_suffix, step.inputs.page.id, query_params, wait_timeout)\n\t\t.then(function() {\n\t\t\tgFormLoaded().then(onSuccess, onGFormFailure);\n\t\t},\n\t\tonFailure);\n\t};\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n\n})(step, stepResult, assertionObject);\n\t","sys_mod_count":"56","active":"true","sys_tags":"","html_description":"<p>Opens a Record Producer in portal.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the record producer.</span></p>\n<p class=\"p1\">URL parameters can be added to the request when needed. </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Open a Record Producer (SP)","sys_update_name":"sys_atf_step_config_775638f29f3203002899d4b4232e70e5","name":"Open a Record Producer (SP)","description_generator":"function generateDescription() {\n    var query_params = JSON.parse(step.inputs.query_params || '{}');\n\t\n\tvar itemName = step.inputs.catalog_item.getDisplayValue();\n\tvar portalName = step.inputs.portal_id.getDisplayValue();\n\t\n    var description = 'Open Record Producer.';\n\t\n\tif(itemName && portalName) {\n\t\tdescription = 'Open \"' + itemName + '\" in the \"' + portalName.trim() + '\" portal';\n\t}\n\t\n\tvar qp_str = '';\n\t\n\tfor(var p in query_params) {\n\t\tif(query_params.hasOwnProperty(p)) {\n\t\t\tqp_str += p + \" = \" + query_params[p] + \"\\n\";\n\t\t}\n\t}\n\t\n\tif(qp_str !== '') {\n\t\tdescription += \" with the following query params:\\n\" + qp_str;\n\t}\n\treturn description;\n}\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-11 01:15:30","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"7b403b079f132200ef4afa7dc67fcf8c","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-30 00:27:19","sys_name":"Assert XML Response Payload Element","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertPayloadElementXMLStepRunner","sys_created_by":"admin","order":"6600","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"5","active":"true","sys_tags":"","html_description":"<p>Assert the XML response payload element. Specify the XML XPath and select the comparison operation to use against the supplied expected element value.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the XML response payload element exists, or the element value is equals to or contains a specified value","sys_update_name":"sys_atf_step_config_7b403b079f132200ef4afa7dc67fcf8c","name":"Assert XML Response Payload Element","description_generator":"function generateDescription() {\t\n\tif(step.inputs.response_operation == 'exists')\t\t\n\t\treturn gs.getMessage(\"Assert a response payload element '{0}' {1}\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_name, 50), \n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation)]);\n\telse\n\t\treturn gs.getMessage(\"Assert a response payload element '{0}' {1} '{2}'\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_name, 50),\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), \n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_value, 50)]);\n}\ngenerateDescription();\n\n\n\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-09-06 00:13:11","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"7bdce31387400300709861fb97cb0b5a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-07-24 22:01:28","sys_name":"Validate Record Present in List","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7260","step_execution_generator":"(function executeStep(step, stepResult) {\n\n\t// Get the ATFListHelper Object\n\tvar alh = new ATFListHelper(step.inputs);\n\tvar isRelatedList = alh.isRelatedList();\n\n\t// messages for message map\n\tvar VALIDATE_RECORD_PRESENT_MESSAGE = isRelatedList ?\n\t\t\"Validating that the record with id '{0}' is present in the '{1}' related list on the '{2}' form\":\n\t\t\"Validating that the record with id '{0}' is present in the '{1}' list\";\n\tvar VALIDATE_RECORD_NOT_PRESENT_MESSAGE = isRelatedList ?\n\t\t\"Validating that the record with id '{0}' is not present in the '{1}' related list on the '{2}' form\":\n\t\t\"Validating that the record with id '{0}' is not present in the '{1}' list\";\n\tvar VALIDATE_RECORD_PRESENT_SUCCESS = isRelatedList ?\n\t\t\"Successfully validated that the record with id '{0}' was present in the '{1}' related list on the '{2}' form\":\n\t\t\"Successfully validated that the record with id '{0}' was present in the '{1}' list\";\n\tvar VALIDATE_RECORD_PRESENT_FAILURE = isRelatedList ?\n\t\t\"FAILURE: The record with id '{0}' was not present in the '{1}' related list on the '{2}' form\":\n\t\t\"FAILURE: The record with id '{0}' was not present in the '{1}' list\";\n\tvar VALIDATE_RECORD_NOT_PRESENT_SUCCESS = isRelatedList ?\n\t\t\"Successfully validated that the record with id '{0}' was not present in the '{1}' related list on the '{2}' form\":\n\t\t\"Successfully validated that the record with id '{0}' was not present in the '{1}' list\";\n\tvar VALIDATE_RECORD_NOT_PRESENT_FAILURE = isRelatedList ?\n\t\t\"FAILURE: The record with id '{0}' was present in the '{1}' related list on the '{2}' form\":\n\t\t\"FAILURE: The record with id '{0}' was present in the '{1}' list\";\n\n\tfunction addMessageContext(msg) {\n\t\t// Format the step result message with appropriate values depending on the context\n\t\tif (isRelatedList)\n\t\t\treturn formatMessage(messageMap[msg], step.inputs.record_id, step.inputs.list_label, step.inputs.table);\n\n\t\treturn formatMessage(messageMap[msg], step.inputs.record_id, step.inputs.list_label);\n\t}\n\n\t// init message map\n\tvar messageMap = new GwtMessage().getMessages([VALIDATE_RECORD_PRESENT_MESSAGE, VALIDATE_RECORD_PRESENT_SUCCESS, VALIDATE_RECORD_PRESENT_FAILURE, VALIDATE_RECORD_NOT_PRESENT_SUCCESS, VALIDATE_RECORD_NOT_PRESENT_MESSAGE, VALIDATE_RECORD_NOT_PRESENT_FAILURE]);\n\n\tvar assertType = step.inputs.assert_type;\n\t// Set to preserve existing functionality of tests created before assert types were added\n\tif (!assertType)\n\t\tassertType = 'record_present';\n\tvar listLabel = step.inputs.list_label;\n\t// Query string to filter to the record we are searching for\n\tvar filterString = \"sys_id=\" + step.inputs.record_id + \"^EQ\";\n\n\tif (assertType == 'record_present')\n\t\tg_ui_testing_util.setTestStepStatusMessage(addMessageContext(VALIDATE_RECORD_PRESENT_MESSAGE));\n\telse\n\t\tg_ui_testing_util.setTestStepStatusMessage(addMessageContext(VALIDATE_RECORD_NOT_PRESENT_MESSAGE));\n\n\t// Get the timeout and if not given, set a default timeout of 0 sec\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tvar utilInterval = null;\n\tvar assertInterval = null;\n\tvar count;\n\n\t// Set the timeout. If the timeout is greater than 0 get the interval function from GUITestingUtil (basically\n\t// like a setInterval()) to call the function every 1 sec until timeout reached otherwise, call the function only once\n\tif (retryCount > 0) {\n\t\tutilInterval = g_ui_testing_util.interval();\n\t\tassertInterval = utilInterval(validateRecord, 1000);\n\t} else\n\t\tvalidateRecord(0);\n\n\t/**\n\t* Applies a filter to the given list to filter out the record being searched and then\n\t* validates the assert condition. This function runs in iterations depending on the timeout.\n\t**/\n\tfunction validateRecord(iterationCount) {\n\t\tcount = iterationCount;\n\t\t// Get the related list object and apply the filter\n\t\talh.getListObject()\n\t\t\t.then(function(gList) { return alh.applyFilter(gList, filterString); })\n\t\t\t.then(_assertRecord)\n\t\t\t['catch'](function(ex) {\n\t\t\t\tif (count < retryCount && utilInterval != null)\n\t\t\t\t\treturn;\n\n\t\t\t\tcancelInterval();\n\t\t\t\tstepResult.success = false;\n\t\t\t\tstepResult.message = alh.getExceptionMessage(ex);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\t\tstep.defer.reject();\n\t\t});\n\t}\n\n\t// Pass/fails the step based on the assertion and the result of the applied filter\n\tfunction _assertRecord(gList) {\n\t\tvar totalRows = gList.totalRows;\n\t\tstepResult.success = false;\n\n\t\tif (assertType == 'record_present' && totalRows > 0)\n\t\t\tpassStep(VALIDATE_RECORD_PRESENT_SUCCESS);\n\t\telse if (assertType == 'no_record_present' && totalRows === 0)\n\t\t\tpassStep(VALIDATE_RECORD_NOT_PRESENT_SUCCESS);\n\n\t\t// If the step fails and utilInterval is set, keep checking until the timeout reaches. If utilInterval is not set, proceed without waiting.\n\t\tif (!stepResult.success) {\n\t\t\tif (count < retryCount && utilInterval != null)\n\t\t\t\t\treturn;\n\n\t\t\tif (assertType == 'record_present')\n\t\t\t\tfailStep(VALIDATE_RECORD_PRESENT_FAILURE);\n\t\t\telse\n\t\t\t\tfailStep(VALIDATE_RECORD_NOT_PRESENT_FAILURE);\n\t\t}\n\t}\n\n\t// Functions to pass/fail the step and cancel the interval\n\tfunction passStep(msg) {\n\t\tcancelInterval();\n\t\tstepResult.success = true;\n\t\tstepResult.message = addMessageContext(msg);\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tcancelInterval();\n\t\tstepResult.message = addMessageContext(msg);\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.reject();\n\t}\n\n\t// This function is used to cancel the setInterval() set for validateRecord()\n\tfunction cancelInterval() {\n\t\tif (utilInterval != null)\n\t\t\tutilInterval.cancel(assertInterval);\n\t}\n}(step, stepResult));\n","sys_mod_count":"44","active":"true","sys_tags":"","html_description":"<p>Validate the presence of a specified record in a list.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\">A list module or a form with related lists must be open to use this step.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Validate the presence of a specified record in a list","sys_update_name":"sys_atf_step_config_7bdce31387400300709861fb97cb0b5a","name":"Validate Record Present in List","description_generator":"function generateDescription() {\n\t\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\t\tvar record = step.inputs.record_id.getDisplayValue();\n\t\tvar assertType = step.inputs.assert_type;\n\t\tvar description;\n\n\t\tvar isRelatedList = !(step.inputs.list_type == 'list');\n\n\t\tif (isRelatedList) {\n\t\t\tvar relatedListUtil = new ATFRelatedListUtil();\n\t\t\tvar relatedListLabel = relatedListUtil.getRelatedListLabels(step.inputs.table, step.inputs.related_list);\n\t\t}\n\n\t\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\t\tvar formTable = step.inputs.table;\n\t\tif (formTd)\n\t\t\tformTable = formTd.getLabel();\n\n\t\tif (assertType == 'no_record_present') {\n\t\t\tif (isRelatedList)\n\t\t\t\tdescription = gs.getMessage(\"Validate that the record '{0}' is not present in the '{1}' related list on the '{2}' form\", [record, relatedListLabel, formTable]);\n\t\t\telse\n\t\t\t\tdescription = gs.getMessage(\"Validate that the record '{0}' is not present in the '{1}' list\", [record, formTable]);\n\t\t} else {\n\t\t\tif (isRelatedList)\n\t\t\t\tdescription = gs.getMessage(\"Validate that the record '{0}' is present in the '{1}' related list on the '{2}' form\", [record, relatedListLabel, formTable]);\n\t\t\telse\n\t\t\t\tdescription = gs.getMessage(\"Validate that the record '{0}' is present in the '{1}' list\", [record, formTable]);\n\t\t}\n\t\tdescription += descriptionGenerator.getTimeoutDescription(step.timeout);\n\n\t\tif (step.warning_message)\n\t\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\t\treturn description;\n\t\t}\ngenerateDescription();","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-07-14 10:37:05","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"7c69d2788743030070870cf888cb0b5f","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-12-13 00:30:08","sys_name":"Submit Record Producer (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"(function(step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\";\n\t\tvar FAILED_SUBMIT = \"FAILURE: Failed to submit the record producer.\";\n\t\tvar SUCCESS_SUBMIT = \"Successfully submitted and record created\";\n\t\tvar SUCCESS_OPEN = \"Successfully submitted and record displayed\";\n\t\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of record producer\";\n\t\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser failed to block submission of record producer\";\n\t\tvar MESSAGE_KEY_UNKNOWN_ASSERT_TYPE = \"FAILURE: Assert type cannot be empty\";\n\n\t\tvar gs = new GwtMessage();\n\t\tvar messageMap = gs.getMessages([\"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\"],\n\t\t\t\t\t\t[\"FAILURE: Failed to submit the record producer.\"],\n\t\t\t\t\t\t[\"Successfully submitted and record created\"],\n\t\t\t\t\t\t[\"Successfully submitted and record displayed\"],\n\t\t\t\t\t\t[\"Successfully confirmed that browser blocks submission of record producer\"],\n\t\t\t\t\t\t[\"FAILURE: Browser failed to block submission of record producer\"],\n\t\t\t\t\t\t[\"FAILURE: Assert type cannot be empty\"]);\n\t\tvar gFormCheckCount = 0;\n\n\t\tfunction message(msg) {\n\t\t\treturn g_ui_testing_util.setTestStepStatusMessage(msg);\n\t\t}\n\n\t\tfunction onError(msg) {\n\t\t\tmsg = messageMap[msg];\n\t\t\tmessage(msg);\n\t\t\tstepResult.message = msg;\n\t\t\tstepResult.success = false;\n\t\t\tstep.defer.reject();\n\t\t}\n\n\t\tfunction onSuccess(msg) {\n\t\t\tmsg = messageMap[msg];\n\t\t\tmessage(msg);\n\t\t\tstepResult.message = msg;\n\t\t\tstepResult.success = true;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\t\tfunction ensureGform() {\n\t\t\tif (gFormCheckCount === 10) {\n\t\t\t\tonError(formatMessage(FAILED_NO_G_FORM));\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tgFormCheckCount++;\n\n\t\t\tif (g_ui_testing_util.getTestIFrameWindow().g_form)\n\t\t\t\treturn true;\n\n\t\t\twindow.setTimeout(ensureGform, 2000);\n\t\t}\n\n\t\tfunction getCatalog() {\n\t\t\tvar $q = g_ui_testing_util.q();\n\t\t\tvar deferred = $q.defer();\n\t\t\tvar count = 0;\n\t\t\tvar interval = setInterval(function() {\n\t\t\t\tif (typeof testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\t\tcount++;\n\t\t\t\t\tif (count >= 5) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t\t}\n\t\t\t}, 100);\n\t\t\treturn deferred.promise;\n\t\t}\n\n\t\tfunction openStdChangeForm(inputData) {\n\t\t\tif (typeof inputData.redirect_portal_url === \"undefined\" || inputData.table !== \"change_request\")\n\t\t\t\treturn false;\n\n\t\t\tvar genURL = new URL(window.location.origin + \"/\" + inputData.redirect_portal_url).searchParams;\n\n\t\t\tstep.timeout = step.timeout || 5;\n\t\t\tvar wait_timeout_ms = step.timeout * 1000;\n\n\t\t\tvar query_params = {};\n\t\t\tquery_params.table = inputData.table;\n\t\t\tquery_params.sys_id = -1;\n\t\t\tquery_params.query = genURL.get(\"query\");\n\n\t\t\tg_ui_testing_util.openPortalPage(\"sp\", \"form\", query_params, wait_timeout_ms);\n\t\t\treturn ensureGform();\n\t\t}\n\n\t\tfunction assert(catalogUtil) {\n\t\t\tvar assertType = step.inputs.assert_type;\n\n\t\t\tcatalogUtil.submit(step.timeout * 1000).then(function(result) {\n\t\t\t\tif (assertType == \"form_submitted_to_server\") {\n\t\t\t\t\tif (typeof result.number == \"undefined\") {\n\t\t\t\t\t\tif (!openStdChangeForm(result)) {\n\t\t\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\t\t\tonError(FAILED_SUBMIT);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\t\t\t\tonSuccess(SUCCESS_OPEN);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t} else if (assertType == \"form_submission_cancelled_in_browser\") {\n\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\tonError(FAILED_BROWSER_BLOCK_SUBMIT);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = messageMap(MESSAGE_KEY_UNKNOWN_ASSERT_TYPE);\n\t\t\t\t\tstepResult.success = false;\n\t\t\t\t\tstepResult.message = message;\n\t\t\t\t\tstep.defer.reject();\n\t\t\t\t}\n\n\t\t\t}, function() { //error case\n\t\t\t\tif (assertType == \"form_submitted_to_server\") {\n\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\tonError(formatMessage(FAILED_SUBMIT));\n\t\t\t\t} else if (assertType == \"form_submission_cancelled_in_browser\") {\n\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\tonSuccess(formatMessage(SUCCESS_CONFIRM_BROWSER_BLOCK));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = messageMap(MESSAGE_KEY_UNKNOWN_ASSERT_TYPE);\n\t\t\t\t\tstepResult.success = false;\n\t\t\t\t\tstepResult.message = message;\n\t\t\t\t\tstep.defer.reject();\n\t\t\t\t}\n\t\t\t});\n\n\t\t}\n\t\tgetCatalog().then(assert, onError);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"25","active":"true","sys_tags":"","html_description":"<p>Submit currently opened <code>Record Producer</code></p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a Record Producer page using the “Open Record Producer Page (SP)” step. After this step, you may no longer use any form steps on the currently opened record producer as this step will close it.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Submit a Record Producer (SP)","sys_update_name":"sys_atf_step_config_7c69d2788743030070870cf888cb0b5f","name":"Submit Record Producer (SP)","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Submit the Record Producer and confirm submission to server\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Submit the Record Producer and confirm submission canceled in browser\");\n\treturn description;\n}\n generateDescription(step);\n\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-refresh","sys_updated_on":"2017-03-20 22:21:44","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"7f49ec32532022008aaec57906dc3473","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-14 22:32:04","sys_name":"Replay Request Item","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.ReplayRequestItemRunner","sys_created_by":"admin","order":"2600","step_execution_generator":"","sys_mod_count":"12","active":"true","sys_tags":"","html_description":"<p>Replays a previously created request item with the same values and options. </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Replays a previously created request item with the same values and options.","sys_update_name":"sys_atf_step_config_7f49ec32532022008aaec57906dc3473","name":"Replay Request Item","description_generator":"function generateDescription() {\n\treturn gs.getMessage('Replay request item: {0}', step.inputs.request_item.getDisplayValue());\n}\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:21:57","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"84e977b05330220002c6435723dc3410","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-07-21 18:50:27","sys_name":"Custom Scripted StepConfig","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"russ.sarbora","order":"14999","step_execution_generator":"(function executeStep(inputs, outputs, stepResult) {\n\tvar userId = inputs.user;\n\tif (gs.nil(userId)) {\n\t\tstepResult.setOutputMessage(gs.getMessage(\"The '{0}' input variable was not specified\",\n\t\t\t\t\t\t\t\t\t\t\t\t  'user'));\n        stepResult.setFailed();\n\t\treturn;\n\t}\n    var query = new GlideRecord(inputs.user.getReferenceTable());\n    if (!query.get(userId)) {\n        stepResult.setOutputMessage(gs.getMessage(\"No user found with sys_id '{0}'\", userId));\n        stepResult.setFailed();\n\t\treturn;\n    }\n\t\n\tstepResult.setSuccess();\n\toutputs.value = query.name;\n\t\n\tif (gs.nil(query.name)) {\n        stepResult.setOutputMessage(gs.getMessage(\"User with sys_id '{0}' had no name\", userId));\n        stepResult.setFailed();\n\t\treturn;\n\t}\n\t\n    if (!query.name.startsWith('A')) {\n        stepResult.setOutputMessage(gs.getMessage(\"Expected user name '{0}' to start with 'A'\",\n\t\t\t\t\t\t\t\t\t\t\t\t  query.name));\n        stepResult.setFailed();\n\t\treturn;\n    }\n}(inputs, outputs, stepResult));","sys_mod_count":"25","active":"true","sys_tags":"","html_description":"<p>Demonstrates how to create a new script Step Config that can be reused in any test.</p>\n<p>This Step Config asserts that its input starts with the letter &#39;A&#39;.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Custom Scripted StepConfig","sys_update_name":"sys_atf_step_config_84e977b05330220002c6435723dc3410","name":"Custom Scripted StepConfig","description_generator":"function generateDescription() {\n\t// the global variable 'step' represents the current glide record\n    var description = gs.getMessage(\"Assert that the name of user '{0}' starts with 'A'\",\n\t\t\t\t\t\t\t\t\tstep.inputs.user.getDisplayValue());\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-06-29 13:12:23","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"86ec986123630300ab65ff5e17bf65a5","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-08 19:54:11","sys_name":"Click a UI Action (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7300","step_execution_generator":"(function(step, stepResult, assertionObject) {\n\n    assertionObject.executeStep = function(step, stepResult) {\n\n        var FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\";\n        var ERROR_UNDEFINED_ACTION = \"FAILURE: UI Action not defined by its Step\";\n        var CLICK_ACTION = \"Click UI Action '{0}' on '{1}' form\";\n        var FAILED_TO_FIND_ACTION = \"FAILURE: Failed to find UI Action '{0}' on '{1}' form\";\n        var SUCCESS_BLOCKED_ACTION = \"Successfully confirmed that browser blocks submission of '{0}' form to server when clicking UI Action '{1}'\";\n        var FAILED_BROWSER_SUBMIT = \"FAILURE: Browser failed to submit '{0}' form to server when clicking UI Action '{1}'\";\n        var DONT_CARE_ACTION = \"Successfully clicked UI Action '{0}' on '{1}' form\";\n        var SUCCESS_SUBMIT = \"Successfully confirmed that browser submits '{0}' form to server when clicking UI Action '{1}'\";\n        var FAILED_SUBMIT = \"FAILURE: Failed to submit '{0}' form to server when clicking UI Action '{1}'\";\n\n        var map = new GwtMessage().getMessages([FAILED_NO_G_FORM, ERROR_UNDEFINED_ACTION, CLICK_ACTION, FAILED_TO_FIND_ACTION, SUCCESS_BLOCKED_ACTION, FAILED_BROWSER_SUBMIT, DONT_CARE_ACTION, SUCCESS_SUBMIT, FAILED_SUBMIT]);\n\n        function message(msg) {\n            return g_ui_testing_util.setTestStepStatusMessage(msg);\n        }\n\n        function onError(msg) {\n            message(msg);\n            stepResult.message = msg;\n            stepResult.success = false;\n            step.defer.reject();\n        }\n\n        function onSuccess(msg) {\n            message(msg);\n            stepResult.message = msg;\n            stepResult.success = true;\n            step.defer.resolve();\n        }\n\n        function checkRecord(table, sysId) {\n            var gr = new GlideRecord(table);\n            var success = gr.get(sysId);\n            if (success) {\n                stepResult.outputs.record_id = sysId;\n                return false;\n            }\n            return true;\n        }\n\n        function hasValidationScriptState(testFrameWindow) {\n            return testFrameWindow.NOW.validationScriptState && Object.keys(testFrameWindow.NOW.validationScriptState).length > 0;\n        }\n\n        function checkFormValidation(form, actionName, errors, sysId) {\n            var table = form.getTableName();\n            var assertType = step.inputs.assert_type;\n            if (assertType === \"form_submission_canceled_in_browser\") {\n                if (errors) {\n                    onSuccess(formatMessage(map[SUCCESS_BLOCKED_ACTION], table, actionName));\n                } else {\n                    onError(formatMessage(map[FAILED_BROWSER_SUBMIT], table, actionName));\n                }\n            } else if (assertType === \"form_submitted_to_server\") {\n                if (!errors)\n                    errors = checkRecord(table, sysId);\n                if (errors) {\n                    onError(formatMessage(map[FAILED_BROWSER_SUBMIT], table, actionName));\n                } else {\n                    onSuccess(formatMessage(map[SUCCESS_SUBMIT], table, actionName));\n                }\n            } else {\n                onSuccess(formatMessage(map[DONT_CARE_ACTION], actionName, table));\n            }\n        }\n\n        function assert(form, actionName) {\n            var table = form.getTableName();\n            var assertType = step.inputs.assert_type;\n            var sysId = form.getSysId();\n            stepResult.outputs.table = table;\n            stepResult.outputs.record_id = sysId;\n            var timeout = step.timeout || 5;\n            uiActionElement.click();\n            form.$private.userState.setRunningAction(actionName);\n            errors = !form.$private.validateForm(actionName);\n            if (hasValidationScriptState(testFrameWindow)) {\n                form.$private.events.on('propertyChange', function(type, fieldName, propertyName, propertyValue) {\n                    if (propertyName == \"errorMessage\")\n                        checkFormValidation(form, actionName, true);\n                });\n                form.$rootScope.$on('sp.form.submitted', function(e, status) {\n                    setTimeout(function() {\n                        checkFormValidation(form, actionName, false, status.sys_id);\n                    }, timeout);\n                });\n            } else {\n                if (!errors)\n                    form.$rootScope.$on('sp.form.submitted', function(e, status) {\n                        setTimeout(function() {\n                            checkFormValidation(form, actionName, false, status.sys_id);\n                        }, timeout);\n                    });\n                else\n                    checkFormValidation(form, actionName, true);\n            }\n        }\n\n        var testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n        // Fail Step if there's no gForm\n        if (!testFrameWindow.g_form) {\n            onError(map[FAILED_NO_G_FORM]);\n            return;\n        }\n\n        var table = step.inputs.table;\n        var actionId = step.inputs.ui_action.sys_id;\n        var actionName = step.inputs.ui_action.action_name;\n\n        // Fail Step if there's no actionName or actionId\n        if (!actionName && !actionId) {\n            onError(map[ERROR_UNDEFINED_ACTION]);\n            return;\n        }\n\n        // Set initial message\n        message(formatMessage(map[CLICK_ACTION], actionName, table));\n\n        var document = jQuery(testFrameWindow.document);\n        var uiActionElement = document.find(\"[gsft_id='\" + actionId + \"']\");\n\n        // Fail step, no UI action found\n        if (uiActionElement.length == 0) {\n            onError(formatMessage(map[FAILED_TO_FIND_ACTION], actionName, table));\n            return;\n        }\n\n        assert(testFrameWindow.g_form, actionName);\n    };\n    assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"112","active":"true","sys_tags":"","html_description":"<p>Clicks a UI Action on the current form.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a Page (SP)&#34; step. After this step, you may no longer use any form steps on the currently opened form as it is expected that this step will close it or move to a different page.</p>\n<p class=\"p1\"><span class=\"s1\">Outputs the table and sys_id of the record on which the action was clicked.</span></p>\n<p><br /></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Click a UI Action (SP)","sys_update_name":"sys_atf_step_config_86ec986123630300ab65ff5e17bf65a5","name":"Click a UI Action (SP)","description_generator":"(function generateDescription(step) {\n\tvar td, label, description, value, name, id;\n\tif (gs.nil(step.inputs.ui_action)) {\n\t\tgs.error(\"Click a UI Action description generation error, no UI Action set\");\n\t\treturn \"\";\n\t}\n\t\n    td = GlideTableDescriptor.get(step.inputs.table);\n\tif (td)\n\t\tlabel = td.getLabel();\n\n\tvar uiAction = step.inputs.ui_action.getRefRecord();\n\tif (uiAction != null) {\n\t\tname = uiAction.name;\n\t\tid = uiAction.sys_id;\n\t} else {\n\t\tgs.error(\"Click a UI Action description generation error, unable to find UI Action by id: '\" + step.inputs.ui_action + \"'\");\n\t\treturn \"\";\n\t}\n\t\n\tif (step.inputs.assert_type === \"form_submitted_to_server\") {\n\t\treturn gs.getMessage(\"Confirm that browser submits '{0}' form to server when clicking UI Action '{1}'\", [name, label]);\n\t} else if (step.inputs.assert_type === \"form_submission_canceled_in_browser\") {\n\t\treturn gs.getMessage(\"Confirm that browser blocks submission of '{0}' form to server when clicking UI Action '{1}'\", [name, label]);\n\t}\n\n\treturn gs.getMessage(\"Click UI Action '{0}' on '{1}' form\", [name, label]);\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:49","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"8afa37419f132200ef4afa7dc67fcf7f","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 20:06:02","sys_name":"Assert Response Time","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertResponseTimeStepRunner","sys_created_by":"admin","order":"6200","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"12","active":"true","sys_tags":"","html_description":"<p>Assert the HTTP response time is less than or greater than a specified value. Select the comparison operation and specify the expected value of the response time.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the HTTP response time is less than or greater than a specified value","sys_update_name":"sys_atf_step_config_8afa37419f132200ef4afa7dc67fcf7f","name":"Assert Response Time","description_generator":"function generateDescription() {\n\treturn gs.getMessage(\"Assert a response time {0} '{1}'\", [\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), step.inputs.response_time]);\n}\ngenerateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2024-02-28 21:07:48","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"8b84e5e837b1030064a52f3c8e41f170","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-10-10 22:53:13","sys_name":"Validate Related List Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7250","step_execution_generator":"(function executeStep(step, stepResult) {\n\tvar MESSAGE_KEY_CHECKING_RL_VISIBILITY = \"Checking related list visibility on the form\";\n\tvar MESSAGE_NO_G_FORM = \"FAILURE: A valid form must be opened in order to check for related list visibility\"\n\tvar RL_VISIBLE_SUCCESS_MSG = \"Successfully validated that the following related lists were visible on the '{0}' form: {1}\";\n\tvar RL_NOT_VISIBLE_SUCCESS_MSG = \"Successfully validated that the following related lists were not visible on the '{0}' form: {1}\";\n\tvar RL_VISIBLE_FAIL_MSG = \"FAILURE: Expected the following related lists to be visible on the '{0}' form but they were not visible: {1}\";\n\tvar RL_NOT_VISIBLE_FAIL_MSG = \"FAILURE: Expected the following related lists to not be visible on the '{0}' form but they were visible: {1}\";\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_CHECKING_RL_VISIBILITY, MESSAGE_NO_G_FORM, RL_VISIBLE_SUCCESS_MSG,\n\t\tRL_NOT_VISIBLE_SUCCESS_MSG, RL_VISIBLE_FAIL_MSG, RL_NOT_VISIBLE_FAIL_MSG]);\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_CHECKING_RL_VISIBILITY]);\n\n\t// Before anything else make sure a valid form is open\n\tvar frameWindow = g_ui_testing_util.getTestIFrameWindow();\n\tif (!frameWindow.g_form) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_NO_G_FORM];\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.reject();\n\t}\n\n\tvar visibleListsToValidate = step.inputs.visible ? step.inputs.visible.split(',') : [];\n\tvar notVisibleListsToValidate = step.inputs.not_visible ? step.inputs.not_visible.split(',') : [];\n\tvar visibleListLabelsToValidate = [];\n\tvar notVisibleListLabelsToValidate = [];\n\tgetRelatedListLabels(step.inputs.table, step.inputs.visible, true)\n\t.then(function() { return getRelatedListLabels(step.inputs.table, step.inputs.not_visible, false) })\n\t.then(ATFListHelper.getGlideLists2)\n\t.then(checkRelatedListVisibility)\n\t['catch'](function(ex) {\n\t\tstepResult.success = false;\n\t\tif (ex)\n\t\t\tex = ex.toString();\n\t\tstepResult.message = ex;\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.reject();\n\t});\n\n\tfunction checkRelatedListVisibility(gLists2) {\n\t\t// GlideLists2 can be undefined even when on a form if no related lists are configured for that form\n\t\t// In that case default to an empty object (i.e., all lists are not visible)\n\t\tif (!gLists2)\n\t\t\tgLists2 = {};\n\n\t\tvar currentFormTable = frameWindow.g_form.getTableName();\n\t\tvar visibleListFailures = [];\n\t\tvar listName;\n\t\tvar i;\n\t\tfor (i = 0; i < visibleListsToValidate.length; i += 1) {\n\t\t\tlistName = currentFormTable + '.' + visibleListsToValidate[i];\n\t\t\tif (!ATFListHelper.isListVisible(gLists2[listName]))\n\t\t\t\tvisibleListFailures.push(visibleListLabelsToValidate[i]);\n\t\t}\n\n\t\tvar notVisibleListFailures = [];\n\t\tfor (i = 0; i < notVisibleListsToValidate.length; i += 1) {\n\t\t\tlistName = currentFormTable + '.' + notVisibleListsToValidate[i];\n\t\t\tif (ATFListHelper.isListVisible(gLists2[listName]))\n\t\t\t\tnotVisibleListFailures.push(notVisibleListLabelsToValidate[i]);\n\t\t}\n\n\t\tvar resultMessage = \"\";\n\t\tif (visibleListLabelsToValidate.length > 0) {\n\t\t\tif (visibleListFailures.length > 0)\n\t\t\t\tresultMessage += formatMessage(messageMap[RL_VISIBLE_FAIL_MSG], step.inputs.table, visibleListFailures.join(', '));\n\t\t\telse if (notVisibleListFailures.length == 0)\n\t\t\t\tresultMessage += formatMessage(messageMap[RL_VISIBLE_SUCCESS_MSG], step.inputs.table, visibleListLabelsToValidate.join(', '));\n\t\t}\n\n\t\tif (notVisibleListLabelsToValidate.length > 0) {\n\t\t\tif (notVisibleListFailures.length > 0)\n\t\t\t\tresultMessage += (resultMessage ? (\"\\n\\n\") : \"\") + formatMessage(messageMap[RL_NOT_VISIBLE_FAIL_MSG], step.inputs.table, notVisibleListFailures.join(', '));\n\t\t\telse if (visibleListFailures.length == 0)\n\t\t\t\tresultMessage += (resultMessage ? (\"\\n\\n\") : \"\") + formatMessage(messageMap[RL_NOT_VISIBLE_SUCCESS_MSG], step.inputs.table, notVisibleListLabelsToValidate.join(', '));\n\t\t}\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(resultMessage);\n\t\tstepResult.message = resultMessage;\n\t\tstepResult.success = visibleListFailures.length == 0 && notVisibleListFailures.length == 0;\n\t\tif (stepResult.success)\n\t\t\tstep.defer.resolve();\n\t\telse\n\t\t\tstep.defer.reject();\n\t}\n\n\tfunction getRelatedListLabels(tableName, relatedListNames, isVisibleVar) {\n\t\tvar defer = g_ui_testing_util.q().defer();\n\t\tvar ga = new GlideAjax('ATFRelatedListUtil');\n\t\tga.addParam('sysparm_name', 'getRelatedListLabels');\n\t\tga.addParam('sysparm_table', tableName);\n\t\tga.addParam('sysparm_related_list_names', relatedListNames);\n\t\tif (!relatedListNames)\n\t\t\tdefer.resolve();\n\t\telse\n\t\t\tga.getXMLAnswer(function(relatedListLabels) {\n\t\t\t\tif (relatedListLabels) {\n\t\t\t\t\tvar labelArr = relatedListLabels.split(',');\n\t\t\t\t\tif (isVisibleVar)\n\t\t\t\t\t\tvisibleListLabelsToValidate = labelArr;\n\t\t\t\t\telse\n\t\t\t\t\t\tnotVisibleListLabelsToValidate = labelArr;\n\t\t\t\t}\n\n\t\t\t\tdefer.resolve();\n\t\t});\n\n\t\treturn defer.promise;\n\t}\n}(step, stepResult));\n","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>Validates the visibility of the selected related lists on a form.</p>\n<h4>Additional Considerations</h4>\n<p>A valid form must be open to assert the visibility of its related lists.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Validates the visibility of the selected related lists on a form","sys_update_name":"sys_atf_step_config_8b84e5e837b1030064a52f3c8e41f170","name":"Validate Related List Visibility","description_generator":"(function generateDescription(step) {\n\tif (gs.nil(step.inputs.visible.toString()) && gs.nil(step.inputs.not_visible.toString()))\n\t\treturn gs.getMessage(\"No related lists selected\");\n\n\tvar formTable = step.inputs.table;\n\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\tif (formTd)\n\t\tformTable = formTd.getLabel();\n\n\tvar relatedListUtil = new ATFRelatedListUtil();\n\tvar description = \"\";\n\tif (!gs.nil(step.inputs.visible.toString()))\n\t\tdescription += gs.getMessage(\"Confirm that the following related lists are visible on the '{0}' form: {1}\",\n\t\t\t[formTable, relatedListUtil.getRelatedListLabels(step.inputs.table, step.inputs.visible)]);\n\n\tif (!gs.nil(step.inputs.not_visible.toString()))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following related lists are not visible on the '{0}' form: {1}\",\n\t\t\t[formTable, relatedListUtil.getRelatedListLabels(step.inputs.table, step.inputs.not_visible)]);\n\n\treturn description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-red","sys_updated_on":"2017-03-20 22:21:34","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"8df72288df60220062fe6c7a4df2636d","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-07-06 18:41:32","sys_name":"Record Delete","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.recordactions.RecordDeleteActionStepRunner","sys_created_by":"nick.leclair","order":"2300","step_execution_generator":"","sys_mod_count":"24","active":"true","sys_tags":"","html_description":"<p>Deletes a record in a table.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Delete a record in the table.","sys_update_name":"sys_atf_step_config_8df72288df60220062fe6c7a4df2636d","name":"Record Delete","description_generator":"(function generateDescription(step) {\n\tvar td = GlideTableDescriptor.get(step.inputs.table);\n\tvar description;\n\n\tif (!td)\n\t\tdescription = gs.getMessage(\"Invalid table name '{0}'\", step.inputs.table);\n\n\tvar assertType = step.inputs.assert_type;\n\tif (assertType == 'record_not_deleted')\n\t\tdescription = gs.getMessage(\"Delete record '{0}' and confirm record was not deleted\",\n\t\t\t\t\t\t step.inputs.record_id.getDisplayValue());\n\telse\n\t\tdescription = gs.getMessage(\"Delete record '{0}' and confirm record was deleted\",\n\t\t\t\t\t\t step.inputs.record_id.getDisplayValue());\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-28 12:47:35","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"96103fdfc3e0320076173b0ac3d3ae57","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-01-31 22:31:43","sys_name":"Search for a Catalog Item","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1500","step_execution_generator":"(function executeStep(inputs, outputs, stepResult) {\n\tvar MESSAGE_KEY_FAIL_EMPTY_SEARCH_TERM = \"FAILURE: Search term is empty\";\n\n\tif (gs.nil(inputs.search_term)) {\n\t\tstepResult.setOutputMessage(gs.getMessage(MESSAGE_KEY_FAIL_EMPTY_SEARCH_TERM));\n\t\tstepResult.setFailed();\n\t\treturn;\n\t}\n\tvar searchTerm = \"\" + inputs.search_term;\n\tvar catalogId = gs.nil(inputs.catalog) ? \"\" : \"\" + inputs.catalog;\n\tvar categoryId = gs.nil(inputs.category) ? \"\" : \"\" + inputs.category;\n\tvar assertType = gs.nil(inputs.assert_type) ? \"assert_item_present\" : inputs.assert_type;\n\tvar catItemName = new sn_sc.CatItem(inputs.assert_item + '').getItemSummary().name;\n\tvar foundItem = false;\n\tvar searchInPortal = inputs.search_in_portal;\n\n\tvar gr = new sn_sc.CatalogSearch().search(catalogId, categoryId, searchTerm, false, true, searchInPortal);\n\tgr.query();\n\twhile (gr.next()) {\n\t\tvar item = new sn_sc.CatItem(gr.getUniqueValue() + \"\");\n\t\tif (item.canView()) {\n\t\t\tif (gr.getUniqueValue() == inputs.assert_item) {\n\t\t\t\tfoundItem = true;\n\t\t\t\toutputs.catalog_item_id = gr.getUniqueValue();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tif (assertType == 'assert_item_present') {\n\t\tif (foundItem) {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"SUCCESS: Found item '{0}'\", catItemName));\n\t\t\tstepResult.setSuccess();\n\t\t} else {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"FAILURE: Search did not return '{0}'\", catItemName));\n\t\t\tstepResult.setFailed();\n\t\t}\n\t}\n\telse {\n\t\tif (!foundItem) {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"SUCCESS: Search did not return '{0}'\", catItemName));\n\t\t\tstepResult.setSuccess();\n\t\t} else {\n\t\t\tstepResult.setOutputMessage(gs.getMessage(\"FAILURE: Found item '{0}'\", catItemName));\n\t\t\tstepResult.setFailed();\n\t\t}\n\t}\n}(inputs, outputs, stepResult));\n","sys_mod_count":"33","active":"true","sys_tags":"","html_description":"<p>Perform search for a <code>Catalog Item</code> or <code>Record Producer</code> in the specified C<em>atalog</em> and C<em>ategory</em></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Search for a Catalog Item","sys_update_name":"sys_atf_step_config_96103fdfc3e0320076173b0ac3d3ae57","name":"Search for a Catalog Item","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n\tvar tokens = [];\n    var description = \"Search for '{0}'\";\n\ttokens.push(step.inputs.search_term + '');\n\tif (!gs.nil(step.inputs.catalog)) {\n\t\tdescription += \" in '{1}'\";\n\t\tvar catalogName = new sn_sc.Catalog(step.inputs.catalog + '').getTitle();\n\t\ttokens.push(catalogName);\n\t}\n\tif (!gs.nil(step.inputs.category)) {\n\t\tif (step.inputs.catalog)\n\t\t\tdescription += \" and '{\" + tokens.length + \"}' category\";\n\t\telse\n\t\t\tdescription += \" in '{\"+ tokens.length +\"}' category\";\n\t\tvar categoryName = new sn_sc.CatCategory(step.inputs.category + '').getTitle();\n\t\ttokens.push(categoryName);\n\t}\n\tif (step.inputs.assert_item) {\n\t\tif (step.inputs.assert_type == 'assert_item_present')\n\t\t\tdescription += \" and confirm that the search returns '{\" + tokens.length + \"}' item\";\n\t\telse\n\t\t\tdescription += \" and confirm that the search doesnot return '{\" + tokens.length + \"}' item\";\n\t\tvar catItemName = new sn_sc.CatItem(step.inputs.assert_item + '').getItemSummary().name;\n\t\ttokens.push(catItemName);\n\t}\n\tdescription = gs.getMessage(description, tokens);\n\t// your code here\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-28 12:34:46","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"9a351369536303000a51ddeeff7b125b","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-09 09:20:30","sys_name":"Checkout Shopping Cart","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8200","step_execution_generator":"(function executeStep(inputs, outputs, stepResult) {\n\n\tfunction onSuccess(msg, params) {\n\t\tstepResult.setSuccess();\n\t\tmsg = gs.getMessage(msg, params);\n\t\tstepResult.setOutputMessage(msg);\n\t}\n\n\tfunction onFailure(msg, params) {\n\t\tstepResult.setFailed();\n\t\tmsg = gs.getMessage(msg, params);\n\t\tstepResult.setOutputMessage(msg);\n\t}\n\n\tvar cart = new sn_sc.CartJS();\n\tif (inputs.assert_type == 'empty_cart') {\n\t\tif (cart.isEmpty())\n\t\t\tonSuccess(\"Success: Cart is empty\");\n\t\telse\n\t\t\tonFailure(\"Failure: Cart is not Empty\");\n\t\treturn;\n\t}\n\tif (cart.isEmpty()) {\n\t\tonFailure(\"Failure: Cart is empty\");\n\t\treturn;\n\t}\n\tif (!sn_sc.CartJS.canViewRF() && inputs.requested_for) {\n\t\tonFailure('Failure: Error! User does not have access to modify requested for');\n\t\treturn;\n\t}\n\tvar request = {};\n\trequest.special_instructions = inputs.special_instructions.toString();\n\trequest.requested_for = inputs.requested_for.toString();\n\trequest.deliver_address = inputs.delivery_address.toString();\n\tvar order = {};\n\ttry {\n\t\torder = cart.submitOrder(request);\n\t}\n\tcatch(error) {\n\t\tonFailure('Failure: Error during checkout {0}', error);\n\t\treturn;\n\t}\n\tif (GlideStringUtil.isEligibleSysID(order.request_id)) {\n\t\tonSuccess(\"Success: Order Placed Successufully, Request Number: '{0}'\", order.request_number);\n\t\toutputs.request_id = order.request_id;\n\t} else if (GlideStringUtil.isEligibleSysID(order.sys_id)) {\n\t\tif (order.number)\n\t\t\tonSuccess(\"Success: Successful Checkout, Record Number: '{0}'\", order.number);\n\t\telse\n\t\t\tonSuccess(\"Success: Record Submitted\");\n\t\toutputs.request_id = order.sys_id;\n\t}\n\telse\n\t\tonSuccess('Success : Records Submitted.');\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"4","active":"true","sys_tags":"","html_description":"<p>Checkout the Shopping Cart and generates a new request.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Checkout Shopping Cart","sys_update_name":"sys_atf_step_config_9a351369536303000a51ddeeff7b125b","name":"Checkout Shopping Cart","description_generator":"function generateDescription(step) {\n\tvar description = \"\";\n\tif (step.inputs.assert_type == \"empty_cart\")\n\t\tdescription = gs.getMessage(\"Check if shopping cart is empty\");\n\telse\n\t\tdescription = gs.getMessage(\"Checkout Cart and confirm that all the items in the cart have been checked out\");\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-08-12 18:09:49","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"a5600fa0c3033300eaac11fe81d3ae6a","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-07-31 21:14:16","sys_name":"Validate Outbound Email Generated by Notification","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.ValidateOutboundEmailFromNotification","sys_created_by":"admin","order":"100","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"2","active":"true","sys_tags":"","html_description":"<p>Filters the Email [sys_email] table to find an email that was sent from a notification during testing.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Finds and verifies an outbound email generated by a notification","sys_update_name":"sys_atf_step_config_a5600fa0c3033300eaac11fe81d3ae6a","name":"Validate Outbound Email Generated by Notification","description_generator":"(function generateDescription(step) {\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n    var description;\n    var conditions = step.inputs.conditions;\n    if (conditions == '' || conditions == '^EQ')\n        description = gs.getMessage(\"Validate that an email was generated by notification '{0}'\",\n                                    [step.inputs.source_notification.getDisplayValue()]);\n    else\n        description = gs.getMessage(\"Validate that an email was generated by notification '{0}' matching query:\\n{1}\",\n                                    [step.inputs.source_notification.getDisplayValue(),\n                                     descriptionGenerator.getConditionDescription('sys_email', step.inputs.conditions)]);\n    description += descriptionGenerator.getTimeoutDescription(step.timeout);\n    return description;\n\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-09-06 21:15:20","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"a69843f2531332007e7829cac2dc34d7","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-06-15 23:09:44","sys_name":"Apply Filter to List","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7255","step_execution_generator":"(function (step, stepResult, assertionObject) {\n  assertionObject.executeStep = function(step, stepResult) {\n\tvar alh = new ATFListHelper(step.inputs);\n\tvar isRelatedList = alh.isRelatedList();\n\n    var APPLYING_FILTER_MESSAGE = isRelatedList ?\n\t\t\"Applying the filter '{0}' to the '{1}' related list on the '{2}' form\":\n\t\t\"Applying the filter '{0}' to the '{1}' list\";\n    var APPLY_FILTER_SUCCESS_MESSAGE = isRelatedList ?\n\t\t\"Successfully applied the following filter to the '{0}' related list on the '{1}' form, with {2} record(s) matching:\\n{3}\" :\n\t\t\"Successfully applied the following filter to the '{0}' list, with {1} record(s) matching:\\n{2}\";\n    var APPLY_FILTER_NO_RECORDS_MATCH_FAILURE = \"FAILURE: Expected no records to match this filter but {0} record(s) matched:\\n{1}\";\n    var APPLY_FILTER_RECORDS_MATCH_FAILURE = \"FAILURE: Expected at least one record to match this filter but no records matched:\\n{0}\";\n\tvar APPLY_FILTER_EXACTLY_ONE_MATCH_FAILURE = \"FAILURE: Expected exactly one record to match this filter but {0} record(s) matched:\\n{1}\";\n\tvar messageMap = new GwtMessage().getMessages([APPLYING_FILTER_MESSAGE, APPLY_FILTER_SUCCESS_MESSAGE, APPLY_FILTER_NO_RECORDS_MATCH_FAILURE, APPLY_FILTER_RECORDS_MATCH_FAILURE, APPLY_FILTER_EXACTLY_ONE_MATCH_FAILURE]);\n\n\tif (isRelatedList)\n\t\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[APPLYING_FILTER_MESSAGE], step.inputs.filter_conditions, step.inputs.related_list, step.inputs.table));\n\telse\n\t\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[APPLYING_FILTER_MESSAGE], step.inputs.filter_conditions, step.inputs.related_list));\n\n\t/**\n\t * Applies a filter to the given list object, then calls validate() to assert against the assert_type\n\t */\n\tfunction applyFilter(gList) {\n\t\treturn alh.applyFilter(gList, step.inputs.filter_conditions, step.inputs.formatted_condition)\n\t\t\t.then(validate);\n\t}\n\n\t/**\n\t * Callback to be called when the list has refreshed -- performs the final validation(s)\n\t */\n\tfunction validate(gList) {\n\t\t// Used to resolve/reject the promise chain\n\t\tvar q = g_ui_testing_util.q();\n\n\t\t// If there was at least one match set the output variable\n\t\tvar records = gList._getRecords();\n\t\tif (records && records[0] && records[0].sys_id)\n\t\t\tstepResult.outputs.first_record = records[0].sys_id;\n\n\t\t// Assert on the assert type, if one was specified\n\t\tif (step.inputs.assert_type === \"no_records_match_filter\" && gList.totalRows > 0)\n\t\t\treturn q.reject(formatMessage(messageMap[APPLY_FILTER_NO_RECORDS_MATCH_FAILURE], gList.totalRows, step.inputs.formatted_condition));\n\t\telse if (step.inputs.assert_type === \"records_match_filter\" && gList.totalRows <= 0)\n\t\t\treturn q.reject(formatMessage(messageMap[APPLY_FILTER_RECORDS_MATCH_FAILURE], step.inputs.formatted_condition));\n\t\telse if (step.inputs.assert_type === \"exactly_one_match\" && gList.totalRows !== 1)\n\t\t\treturn q.reject(formatMessage(messageMap[APPLY_FILTER_EXACTLY_ONE_MATCH_FAILURE], gList.totalRows, step.inputs.formatted_condition));\n\n\t\tif (isRelatedList)\n\t\t\treturn q.when(formatMessage(messageMap[APPLY_FILTER_SUCCESS_MESSAGE], step.inputs.list_label, step.inputs.table, gList.totalRows, step.inputs.formatted_condition));\n\t\telse\n\t\t\treturn q.when(formatMessage(messageMap[APPLY_FILTER_SUCCESS_MESSAGE], step.inputs.list_label, gList.totalRows, step.inputs.formatted_condition));\n\t}\n\n\t// Run the test function\n\talh.executeTestFunction(applyFilter, step, stepResult);\n\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"65","active":"true","sys_tags":"","html_description":"<p>Applies a filter to a list.</p>\n<h4>Additional Considerations</h4>\n<p>A list module or a form with related lists must be open to use this step. This step will clear any existing filter on the list.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Applies a filter to a list","sys_update_name":"sys_atf_step_config_a69843f2531332007e7829cac2dc34d7","name":"Apply Filter to List","description_generator":"function generateDescription() {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar relTd = GlideTableDescriptor.get(step.inputs.related_list_table);\n\tvar relatedListTable = step.inputs.related_list_table;\n\tif (relTd)\n\t\trelatedListTable = relTd.getLabel();\n\n\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\tvar formTable = step.inputs.table;\n\tif (formTd)\n\t\tformTable = formTd.getLabel();\n\n\t// Generate string for assertion type -- assertion is optional so the default is empty string\n\tvar assertion = \"\";\n\tif (step.inputs.assert_type == \"exactly_one_match\")\n\t\tassertion = gs.getMessage(\"Assert that exactly one record matches\");\n\telse if (step.inputs.assert_type == \"records_match_filter\")\n\t\tassertion = gs.getMessage(\"Assert that at least one record matches\");\n\telse if (step.inputs.assert_type == \"no_records_match_filter\")\n\t\tassertion = gs.getMessage(\"Assert that no records match\");\n\n\tvar isRelatedList = !(step.inputs.list_type == 'list');\n\t// If there is an assert type include that in the description\n\tvar description = \"\";\n\tif (isRelatedList) {\n\t    var relatedListLabel = new ATFRelatedListUtil().getRelatedListLabels(step.inputs.table, step.inputs.related_list);\n\t\tdescription = gs.getMessage(\"Apply the following filter to the '{0}' related list on the '{1}' form:\\n{2}\", [relatedListLabel, formTable, descriptionGenerator.getConditionDescription(step.inputs.related_list_table, step.inputs.filter_conditions)]);\n\t} else\n\t\tdescription = gs.getMessage(\"Apply the following filter to the '{0}' list:\\n{1}\", [relatedListTable, descriptionGenerator.getConditionDescription(step.inputs.related_list_table, step.inputs.filter_conditions)]);\n\n\tif (assertion)\n\t\tdescription += \"\\n\" + assertion;\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:18","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"$restapi.do?sysparm_stack=no","sys_id":"ab3746b23b132200fc26229c93efc419","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-28 22:09:47","sys_name":"Send REST Request - Inbound - REST API Explorer","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.HttpStepRunner","sys_created_by":"admin","order":"1700","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"9","active":"true","sys_tags":"","html_description":"<p>Send a REST request to the current instance. Using the REST API Explorer create and specify an HTTP method, path, query parameters, request headers and body if needed.</p>\n<h4>Additional Considerations</h4>\n<p>No validation is performed as a part of this step. Please use Assert steps to validate the response.</p>\n<p>You cannot use this step to send a request to another instance or third party/remote address.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Send a REST request to the current instance created in the REST API Explorer","sys_update_name":"sys_atf_step_config_ab3746b23b132200fc26229c93efc419","name":"Send REST Request - Inbound - REST API Explorer","description_generator":"function generateDescription() {\n\treturn gs.getMessage(\"Send a '{0}' request to '{1}'\", [step.inputs.http_method.toUpperCase(), step.inputs.end_point]);\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-11-08 13:46:16","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"aced8452731b13008e6b0d573cf6a783","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-16 12:37:11","sys_name":"Open an Order Guide (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1200","step_execution_generator":"(function executeStep(step, stepResult, assertionObject) {\n    \n    assertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = \"Successfully opened Order Guide page\";\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = \"FAILURE: Failed to open Order Guide page\";\n\tvar MESSAGE_KEY_FAILED_TO_LOAD_GFORM = \"FAILURE: Failed to open Order Guide. Either you don't have access to the Order Guide or g_form is not defined\";\n\tvar MESSAGE_KEY_OPENING = \"Opening Order Guide\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SUCCESSFULY_OPENED, MESSAGE_KEY_FAILED_TO_OPEN, MESSAGE_KEY_FAILED_TO_LOAD_GFORM, MESSAGE_KEY_OPENING]);\n\t\n\tfunction onSuccess() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED]);\n\t\tstepResult.success = true;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED];\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_OPEN]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_OPEN];\n\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction onGFormFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM];\n\t\t\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction gFormLoaded() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.g_form === 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 10) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve();\n\t\t\t}\n\t\t}, 2000);\n\t\treturn deferred.promise;\n\t}\n\t\n\tstep.timeout = step.timeout || 30;\n\tvar wait_timeout = step.timeout * 1000;\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\tquery_params.sys_id = step.inputs.catalog_item;\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_OPENING]);\n\t\n\tg_ui_testing_util.openPortalPage(step.inputs.portal.url_suffix, step.inputs.page.id, query_params, wait_timeout)\n\t\t.then(function(){\n\t\t\tgFormLoaded().then(onSuccess, onGFormFailure);\n\t\t},\n\t\tonFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n\t})(step, stepResult, assertionObject);","sys_mod_count":"7","active":"true","sys_tags":"","html_description":"<p>Opens an order guide in portal</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the order guide.</span></p>\n<p class=\"p1\"><span class=\"s1\">URL parameters can be added to the request when needed. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Open an Order Guide (SP)","sys_update_name":"sys_atf_step_config_aced8452731b13008e6b0d573cf6a783","name":"Open an Order Guide (SP)","description_generator":"function generateDescription() {\n    var query_params = JSON.parse(step.inputs.query_params || '{}');\n\t\n\tvar itemName = step.inputs.catalog_item.getDisplayValue();\n\tvar portalName = step.inputs.portal_id.getDisplayValue();\n\t\n    var description = 'Open Order Guide.';\n\t\n\tif(itemName && portalName) {\n\t\tdescription = 'Open \"' + itemName + '\" in the \"' + portalName.trim() + '\" portal';\n\t}\n\t\n\tvar qp_str = '';\n\t\n\tfor(var p in query_params) {\n\t\tif(query_params.hasOwnProperty(p)) {\n\t\t\tqp_str += p + \" = \" + query_params[p] + \"\\n\";\n\t\t}\n\t}\n\t\n\tif(qp_str !== '') {\n\t\tdescription += \" with the following query params:\\n\" + qp_str;\n\t}\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-10-13 17:02:32","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"adf6884273902300688e0d573cf6a72a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-09-03 10:32:34","sys_name":"Save current row of multi-row variable set (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1250","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar SAVE_ROW_TO_TABLE_VARIABLE = \"Save current row to Table variable.\";\n\tvar MESSAGE_KEY_ERROR_NO_TABLE_VAR_GFORM = \"ERROR: Cannot find g_form for Table variable.\";\n\tvar MESSAGE_KEY_SAVE_ROW_SUCCESSFUL = \"SUCCESS: Successfully saved current row of Table variable.\";\n\tvar MESSAGE_KEY_SAVE_ROW_FAILURE = \"FAILURE: Failed to save current row of Table variable.\";\n\tvar FAILED_TO_BLOCK_SUBMIT = \"FAILURE: Failed to block saving current row of Table variable.\";\n\tvar MESSAGE_KEY_SUCCESS_BLOCK = \"SUCCESS: Successfully stopped saving current row of Table variable.\";\n\tvar MESSAGE_KEY_ERROR_NO_CATALOG_GFORM = \"FAILURE: Failed to load catalog item g_form back.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([\"Save current row to Table variable.\", \"ERROR: Cannot find g_form for Table variable.\", \"SUCCESS: Successfully saved current row of Table variable.\", \"FAILURE: Failed to save current row of Table variable.\", \"FAILURE: Failed to block saving current row of Table variable.\", \"SUCCESS: Successfully stopped saving current row of Table variable.\", \"FAILURE: Failed to load catalog item g_form back.\"]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[SAVE_ROW_TO_TABLE_VARIABLE]);\n\t\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getCatalogUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif(typeof testFrameWindow.catalog_util == \"undefined\") {\n\t\t\t\tcount++;\n\t\t\t\tif(count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(MESSAGE_KEY_ERROR_NO_CATALOG_GFORM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\n\t}\n\t\n\tfunction getTableVariableUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif(typeof testFrameWindow.table_var_util == \"undefined\") {\n\t\t\t\tcount++;\n\t\t\t\tif(count >= 10) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(MESSAGE_KEY_ERROR_NO_TABLE_VAR_GFORM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.table_var_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\n\t}\n\t\n\tfunction updateGform(catalogUtil) {\n\t\tcatalogUtil.updateGform();\n\t\tonSuccess(MESSAGE_KEY_SAVE_ROW_SUCCESSFUL);\n\t}\n\t\n\tfunction saveRow(tableUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\ttableUtil.saveRow(step.timeout * 1000).then(function() {\n\t\t\tif (assertType == \"form_submitted_to_server\")\n\t\t\t\tgetCatalogUtil().then(updateGform, onFailure);\n\t\t\telse\n\t\t\t\tonFailure(FAILED_TO_BLOCK_SUBMIT);\n\t\t}, function() {\n\t\t\tif (assertType == \"form_submission_cancelled_in_browser\")\n\t\t\t\tonSuccess(MESSAGE_KEY_SUCCESS_BLOCK);\n\t\t\telse\n\t\t\t\tonFailure(MESSAGE_KEY_SAVE_ROW_FAILURE);\n\t\t});\n\t}\n\t\n\tgetTableVariableUtil().then(saveRow, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"4","active":"true","sys_tags":"","html_description":"<p>This is step is used to save current row of a multi-row variable set on current catalog item in Service Portal.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be used when the current catalog item contains a Multi-row Variable Set &amp; after &#39;Add row to multi-row variable set (SP)&#39; step.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Save current row of multi-row variable set (SP)","sys_update_name":"sys_atf_step_config_adf6884273902300688e0d573cf6a72a","name":"Save current row of multi-row variable set (SP)","description_generator":"function generateDescription() {\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Save & confirm that current row is successfully saved to multi-row variable set.\");\n\telse\n\t\tdescription = gs.getMessage(\"Save & confirm that current row is not saved & cancelled in browser.\");\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:38:34","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"af1e769223220300ab65ff5e17bf6580","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-11-22 22:38:49","sys_name":"Field State Validation (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4650","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar msg = {error: '', success: ''};\n\n\tfunction updateMsg(type, message) {\n\t\tmsg[type] += (msg[type] ? (\"\\n\") : \"\") + message;\n\t}\n\n\tfunction onError(msg) {\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\t// Fail Step if there's no gForm\n\tif (!testFrameWindow.g_form) {\n\t\tfailStep(new GwtMessage().getMessage(\"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\"));\n\t\treturn;\n\t}\n\n\tvar inputOptions = {\n\t\tvisible: {field: \"visible\", action: \"isVisible\", result: true, failure: \"not visible\"},\n\t\tnot_visible: {field: \"not visible\", action: \"isVisible\", result: false, failure: \"visible\"},\n\t\tread_only:{field: \"read only\", action: \"isReadOnly\", result: true, failure: \"not read only\"},\n\t\tnot_read_only:{field: \"not read only\", action:\"isReadOnly\", result: false, failure: \"read only\"},\n\t\tmandatory: {field: \"mandatory\", action: \"isMandatory\", result: true, failure: \"not mandatory\"},\n\t\tnot_mandatory: {field: \"not mandatory\", action: \"isMandatory\", result: false, failure: \"mandatory\"}\n\t};\n\n\tvar message, opts, fields, field;\n\tvar errors = 0;\n\tfor (var inputName in inputOptions) {\n\t\topts = inputOptions[inputName];\n\t\tfields = step.inputs[inputName].split(\",\");\n\t\t\n\t\tfor (var i = 0; i < fields.length; i++) {\n\t\t\tfield = fields[i];\n\t\t\t\n\t\t\tif (field.length > 0) {\n\t\t\t\tif (opts.result !== testFrameWindow.g_form[opts.action](field)) {\n\t\t\t\t\terrors++;\n\t\t\t\t\tupdateMsg('error', new GwtMessage().getMessage(\"FAILURE: Expected field '{0}' to be {1} but it was {2}\", field, opts.field, opts.failure));\n\t\t\t\t} else {\n\t\t\t\t\tupdateMsg('success', new GwtMessage().getMessage(\"Confirmed that Expected field '{0}' is {1}\", field, opts.field));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n\n\tif (errors) {\n\t\tonError(msg.error);\n\t} else {\n\t\tonSuccess(msg.success);\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"41","active":"true","sys_tags":"","html_description":"<p>Validates states of fields on a form within a Service Portal page.</p>\n<p>The field states can be one (or more) of mandatory, not mandatory, read only, not read only, visible and not visible.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p2\"><span class=\"s1\">When a timeout is specified, the Client Test Runner will check the validation conditions every second until the timeout has been reached or the conditions are met.</span></p>\n<p class=\"p2\"><span class=\"s1\">When a timeout is exceeded or one of the validations is not correct the step will fail.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Field State Validation (SP)","sys_update_name":"sys_atf_step_config_af1e769223220300ab65ff5e17bf6580","name":"Field State Validation (SP)","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\tvar table = step.inputs.table;\n\tif (!gs.nil(step.inputs.visible))\n\t\tdescription = gs.getMessage(\"Confirm that the following fields are visible: {0}\", getFields(step.inputs.visible, table));\n\n\tif (!gs.nil(step.inputs.not_visible))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following fields are not visible: {0}\", getFields(step.inputs.not_visible, table));\n\n\tif (!gs.nil(step.inputs.read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following fields are read only: {0}\", getFields(step.inputs.read_only, table));\n\n\tif (!gs.nil(step.inputs.not_read_only))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following fields are not read only: {0}\", getFields(step.inputs.not_read_only, table));\n\n\tif (!gs.nil(step.inputs.mandatory))\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following fields are mandatory: {0}\", getFields(step.inputs.mandatory, table));\n\n\tif (step.inputs.not_mandatory)\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following fields are not mandatory: {0}\", getFields(step.inputs.not_mandatory, table));\n\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n})(step);\nfunction getFields(fields, table) {\n\tvar fieldElements = fields.split(\",\");\n\tvar fieldNames = [];\n\n\tfor (var i = 0; i < fieldElements.length; i++) {\n\t\tvar fieldName = new sn_atf.UserTestProcessor().getFieldName(table, fieldElements[i]);\n\t\tfieldNames.push(fieldName);\n\t}\n\treturn fieldNames.join(\", \");\n}\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-11 01:15:11","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"afc114199f132200ef4afa7dc67fcf64","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 21:45:48","sys_name":"Assert JSON Response Payload Element","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertPayloadElementJSONStepRunner","sys_created_by":"admin","order":"6700","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"10","active":"true","sys_tags":"","html_description":"<p>Assert the JSON response payload element. Specify the JSON SNC path and select the comparison operation to use against the supplied expected element value.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the JSON response payload element exists, or the element value is equals to or contains a specified value","sys_update_name":"sys_atf_step_config_afc114199f132200ef4afa7dc67fcf64","name":"Assert JSON Response Payload Element","description_generator":"function generateDescription() {\t\n\tif(step.inputs.response_operation == 'exists')\t\t\n\t\treturn gs.getMessage(\"Assert a response payload element '{0}' {1}\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_name, 50), \n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation)]);\n\telse\n\t\treturn gs.getMessage(\"Assert a response payload element '{0}' {1} '{2}'\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_name, 50),\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), \n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.element_value, 50)]);\n}\ngenerateDescription();","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-yellow","sys_updated_on":"2019-08-15 17:57:11","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"b4549a71c3623300eaac11fe81d3ae15","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-07-10 18:41:40","sys_name":"Generate Inbound Reply Email","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.GenerateInboundReplyEmailRunner","sys_created_by":"admin","order":"2700","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"4","active":"true","sys_tags":"","html_description":"<p>Generates an Email [sys_email] record that looks like an email sent in reply to a system notification. This step also creates an email.read event upon step completion.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Generate an inbound reply email.","sys_update_name":"sys_atf_step_config_b4549a71c3623300eaac11fe81d3ae15","name":"Generate Inbound Reply Email","description_generator":"(function generateDescription(step) {\n\tvar description = gs.getMessage(\"Generated an email with subject: {0}\", step.inputs.subject.getDisplayValue());\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-04-02 04:42:46","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"b4758c7453370300c792ddeeff7b128d","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-18 20:37:44","sys_name":"Component Value Validation (Custom UI)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1100","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar MESSAGE_KEY_Validating = \"Validating values\";\n\tvar MESSAGE_KEY_FAILED_NO_G_AUTOMATE = \"FAILURE: Unable to validate value, g_automate is not defined\";\n\tvar MESSAGE_KEY_FAILED_NO_COMPONENT = \"FAILURE: Unable to validate value of component '{0}', component not found\";\n\tvar MESSAGE_KEY_FAILED_NO_METHOD = \"FAILURE: Unable to validate value of component '{0}', method with name 'getValue' was not found\";\n\tvar MESSAGE_KEY_FAILED_J_QUERY_MISSING = \"FAILURE: Unable to validate value of component '{0}', unable to locate jQuery on the page\";\n\tvar MESSAGE_KEY_FAILED_ERROR = \"FAILURE: Unable to validate value of component '{0}', error during method call\";\n\tvar MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE = \"FAILURE: Unable to validate value of component '{0}'. Error during method call: {1}\\n{2}\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_VALIDATED = \"Successfully validated the following values:{0}\";\n\tvar MESSAGE_KEY_VALIDATION_EQUALITY = \"'{0}' = {1}\";\n\tvar MESSAGE_KEY_FAILED_VALIDATION = \"FAILURE: Expected the value of component '{0}' to be '{1}' but it was '{2}'\";\n\t// init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_Validating, MESSAGE_KEY_FAILED_NO_G_AUTOMATE, MESSAGE_KEY_FAILED_NO_COMPONENT, MESSAGE_KEY_FAILED_NO_METHOD, MESSAGE_KEY_FAILED_J_QUERY_MISSING, MESSAGE_KEY_FAILED_ERROR, MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE, MESSAGE_KEY_SUCCESSFULLY_VALIDATED, MESSAGE_KEY_FAILED_VALIDATION, MESSAGE_KEY_VALIDATION_EQUALITY]);\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_Validating]));\n\n\tvar gAutomate = window.top.g_automate;\n\tif (!gAutomate) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_AUTOMATE]));\n\t\treturn;\n\t}\n\n\tassertionObject.beforeExecuteStep = function () {\n\t\tvar terms = parseEncodedQuery();\n\t\t// see: https://stackoverflow.com/a/38003741\n\t\t// TODO: Promise.resolve() isn't supported on IE. Use defer? or polyfill?\n\t\treturn terms.reduce(function(prev, curr, i, arr) {\n\t\t\treturn prev.then(function() {\n\t\t\t\treturn checkComponentExists(arr[i]);\n\t\t\t});\n\t\t}, Promise.resolve());\n\t};\n\n\tfunction checkComponentExists(term) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar mugshotHash = term['mugshotHash'];\n\t\t\tvar mugshot = getMugshot(mugshotHash);\n\t\t\tvar componentLongDesc = JSON.parse(mugshot).sn_atf_mugshot_long_description;\n\t\t\tvar value = term['value'];\n\t\t\tgAutomate.findComponent(mugshot)\n\t\t\t.then(function(componentObj) {\n\t\t\t\tvar component = componentObj.component;\n\t\t\t\tif (!component)\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc));\n\t\t\t\telse if (!(component instanceof GettableComponent))\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc));\n\t\t\t\telse\n\t\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tif (error.message === \"component_not_found\")\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc));\n\t\t\t\telse if (error.message && error.stack)\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], componentLongDesc, error.message, error.stack));\n\t\t\t\telse\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], componentLongDesc));\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction getMugshot(componentHash){\n\t\tvar mugshots = step.mugshots_cache_json ? JSON.parse(step.mugshots_cache_json):{};\n\t\treturn mugshots[componentHash] || componentHash;\n\t}\n\n\tvar validatedMugshots = '';\n\n\tassertionObject.executeStep = function() {\n\t\tvalidatedMugshots = '';\n\t\tvar terms = parseEncodedQuery();\n\t\treturn terms.reduce(function(prev, curr, i, arr) {\n\t\t\treturn prev.then(function() {\n\t\t\t\treturn assertComponentValue(arr[i]);\n\t\t\t});\n\t\t}, Promise.resolve())\n\t\t.then(passStep, failStep);\n\t};\n\n\tfunction assertComponentValue(term) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar mugshotHash = term['mugshotHash'];\n\t\t\tvar mugshot = getMugshot(mugshotHash);\n\t\t\tvar mugshotObj = JSON.parse(mugshot);\n\t\t\tvar mugshotLabel = mugshotObj.sn_atf_mugshot_short_description;\n\t\t\tvar mugshotLongDesc = mugshotObj.sn_atf_mugshot_long_description;\n\t\t\tvar expectedValue = term['value'];\n\t\t\t// convert newline variations to \\n\n\t\t\texpectedValue = expectedValue.replace(/(\\r\\n|\\n|\\r)/gm, \"\\n\");\n\n\t\t\t// GEM pills dropped in a checkbox resolve to \"0\"/\"1\", but g_automate returns \"true\"/\"false\"\n\t\t\tif (mugshotObj[\"type\"] === \"checkbox\") {\n\t\t\t\tif (expectedValue === \"1\")\n\t\t\t\t\texpectedValue = \"true\";\n\n\t\t\t\tif (expectedValue === \"0\")\n\t\t\t\t\texpectedValue = \"false\";\n\t\t\t}\n\n\t\t\tgAutomate.scrollIntoView(mugshot)\n\t\t\t.then(function() {\n\t\t\t\tgAutomate.getValue(mugshot)\n\t\t\t\t.then(function(answer) {\n\t\t\t\t\tif (answer == expectedValue) {\n\t\t\t\t\t\tvalidatedMugshots += \"\\n\" + formatMessage(messageMap[MESSAGE_KEY_VALIDATION_EQUALITY], mugshotLabel, expectedValue);\n\t\t\t\t\t\treturn resolve();\n\t\t\t\t\t} else\n\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_VALIDATION], mugshotLongDesc, expectedValue, answer));\n\t\t\t\t})\n\t\t\t\t.catch(function(error) {\n\t\t\t\t\tswitch (error.message) {\n\t\t\t\t\t\tcase \"component_not_found\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\t\t\t\t\t\tcase \"method_not_supported\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_METHOD], mugshotLongDesc));\n\t\t\t\t\t\tcase \"j_query_missing\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_J_QUERY_MISSING], mugshotLongDesc));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (error.message && error.stack)\n\t\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], mugshotLongDesc, error.message, error.stack));\n\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction passStep() {\n\t\tstepResult.success = true;\n\t\tstepResult.message = formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_VALIDATED], validatedMugshots);\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + reason;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction parseEncodedQuery() {\n\t\tvar values = step.inputs.component_values.split('^');\n\t\tvar terms = [];\n\t\tfor (var i = 0; i < values.length - 1; i += 1) {\n\t\t\tvar value = values[i];\n\t\t\t// the \"value\" is structured as \"<hash>=<hashValue>\", so split on the \"=\" to extract the hash and hashValues\n\t\t\tvar hash = value.slice(0, value.indexOf('='));\n\t\t\tvar hashValue = value.slice(value.indexOf('=') + 1);\n\t\t\tterms.push({mugshotHash: hash, value: hashValue});\n\t\t}\n\n\t\treturn terms;\n\t}\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"17","active":"true","sys_tags":"","html_description":"<p>Validates a component value on a custom UI page</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Validates a component value on a custom UI page","sys_update_name":"sys_atf_step_config_b4758c7453370300c792ddeeff7b128d","name":"Component Value Validation (Custom UI)","description_generator":"function generateDescription() {\n\tvar conditions = new ATFCustomUIHelper().getQueryStringMugshotDescription(step.inputs.component_values, step.mugshots_cache_json);\n\tvar conditionsWithLabelPath = new ATFCustomUIHelper().getQueryStringMugshotDescriptionWithLabelPath(step.inputs.component_values, step.mugshots_cache_json);\n\tvar use_label_path = GlideProperties.getBoolean('sn_atf.element.use_label_path', true);\n\tif (use_label_path === true && conditionsWithLabelPath)\n\t\treturn gs.getMessage(\"Validate the values as follows:\\n{0}\", conditionsWithLabelPath);\n\n\treturn gs.getMessage(\"Validate the values as follows:\\n{0}\", conditions);\n}\ngenerateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-04-23 19:16:21","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"ba49e51de7420300b2888f49c2f6a93c","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-10-25 17:14:16","sys_name":"Set Field Values (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4100","step_execution_generator":"(function (step, stepResult, assertionObject) {\n  assertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SETTING_FIELDS = \"Setting field values\";\n\tvar MESSAGE_KEY_FAILED_NO_G_FORM = \"FAILURE: Unable to set values, g_form is not defined. A valid form must be open before setting values\";\n\tvar MESSAGE_KEY_SKIP_SETTING = \"Skipping setting a value, no field or value was given\";\n\tvar MESSAGE_KEY_SKIP_SETTING_TO_VAL = \"Skipping setting field to value '{0}', no field was given\";\n\tvar MESSAGE_KEY_NOT_EDITABLE_FIELD = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not editable. See screenshot\";\n\tvar MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT = \"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not present on the form. See screenshot\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_SET_TO = \"Successfully set field '{0}' to value '{1}'\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF = \"Successfully set field '{0}' to valid reference value '{1}'\";\n\tvar MESSAGE_KEY_FAILURE_INVALID_REF = \"FAILURE: Failed to set field '{0}' to value '{1}' because the reference is NOT valid\";\n\t\n\tfunction updateStepResultMessage(message) {\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + message;\n\t}\n\t\n\tfunction passStep() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n   \t}\n\t\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tupdateStepResultMessage(reason);\n\t\tstep.defer.reject();\n   \t}\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SETTING_FIELDS, MESSAGE_KEY_FAILED_NO_G_FORM, MESSAGE_KEY_SKIP_SETTING, MESSAGE_KEY_SKIP_SETTING_TO_VAL, MESSAGE_KEY_NOT_EDITABLE_FIELD, MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT, MESSAGE_KEY_SUCCESSFULLY_SET_TO, MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF, MESSAGE_KEY_FAILURE_INVALID_REF]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SETTING_FIELDS]));\n\t\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\tif (!testFrameWindow.g_form) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_FORM]));\n\t\treturn;\n\t}\n\t\n\tvar terms = [];\n\t\n\tvar decodeFieldValuesAjax = new GlideAjax('TestExecutorAjax');\n\tdecodeFieldValuesAjax.addParam('sysparm_name', 'decodeFieldValues');\n\tdecodeFieldValuesAjax.addParam('sysparm_table_name', step.inputs.table);\n\tdecodeFieldValuesAjax.addParam('sysparm_field_values', step.inputs.field_values);\n\t\n\tdecodeFieldValuesAjax.getXML(function (decodedFieldValues) {\n\t\tvar fieldValues = decodedFieldValues.responseXML.getElementsByTagName(\"fieldValue\");\n\t\t\n\t\tfor (var i = 0; i < fieldValues.length; i++) {\n\t\t\tvar term = {};\n\t\t\tterm['field'] = fieldValues[i].getAttribute(\"field\");\n\t\t\tterm['value'] = fieldValues[i].getAttribute(\"value\");\n\t\t\tterms[i] = term;\n\t\t}\n\t\t\n\t\tsetFieldValues();\n\t});\n\t\n\tfunction isTermValid(term) {\n\t\treturn (null != term && term['field']);\n\t}\n\t\n\tfunction isChoiceField(field) {\n\t\treturn testFrameWindow.g_form.isChoiceField(field);\n\t}\n\n\tfunction isValidChoice(field, value) {\n\t\treturn testFrameWindow.g_form.isValidChoice(field, value);\n\t}\n\t\n\tfunction checkValueSet(field, value) {\n\t\tvar $q = g_ui_testing_util._getAngularInjector(\"$q\");\n\t\tvar checkValueDefer = $q.defer();\n\t\t\n\t\tvar fld = testFrameWindow.g_form.getField(field);\n\t\t\n\t\t// Currently, only need to do this to validate non-empty reference fields...\n        if (value != '' && (fld.type === 'reference' || fld.type === 'domain_id')) {\n\t\t\ttestFrameWindow.g_form.getRef(field, checkValidReference);\n\t\t} else { // nothing else to check, resolve and log success\n\t\t\tcheckValueSuccess(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET_TO], field, value));\n\t\t}\n\t\t\n\t\tfunction checkValueSuccess(message) {\n\t\t\tupdateStepResultMessage(message);\n\t\t\tcheckValueDefer.resolve();\n\t\t}\n\t\t\n\t\tfunction checkValueFailure(message) {\n            checkValueDefer.reject(message);\n        }\n\t\t\n\t\tfunction checkValidReference(data) {\n\t\t\tif (data._error) {\n\t\t\t\tcheckValueFailure(formatMessage(messageMap[MESSAGE_KEY_FAILURE_INVALID_REF], field, value));\n\t\t\t} else {\n\t\t\t\tcheckValueSuccess(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET_TO_VALID_REF], field, testFrameWindow.g_form.getDisplayValue(field)));\n\t\t\t}\n\t\t}\n\n\t\treturn checkValueDefer.promise;\n\t}\n\t\n\t// we need a promise loop here because the check field validation logic can be asynchronous\n\tfunction setFieldValues() {\n\t\tvar $q = g_ui_testing_util._getAngularInjector(\"$q\");\n\t\tvar firstPromise = $q.when(); // Need something to start the loop.\n\t\t\n\t\tvar promiseChain = terms.reduce(function(previousPromise, currentTerm) {\n\t\t\treturn previousPromise.then(function() {\n\t\t\t\tif(!isTermValid(currentTerm)) {\n\t\t\t\t\tif (currentTerm == null) {\n\t\t\t\t\t\tupdateStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING]));\n\t\t\t\t\t} else if (!currentTerm['field']) {\n\t\t\t\t\t\tupdateStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SKIP_SETTING_TO_VAL], currentTerm['value']));\n\t\t\t\t\t}\n\t\t\t\t\treturn $q.when(); // if a term has no field/value, then just ignore it\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar field = currentTerm.field;\n\t\t\t\tvar value = currentTerm.value;\n\t\t\t\t\n\t\t\t\t// fail if field does not exists\n\t\t\t\tif(!testFrameWindow.g_form.hasField(field)) {\n\t\t\t\t\treturn $q.reject(formatMessage(messageMap[MESSAGE_KEY_FAIL_FIELD_NOT_PRESENT], field, value));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// fail if field is read only\n\t\t\t\tif(testFrameWindow.g_form.isReadOnly(field)) {\n\t\t\t\t\treturn $q.reject(formatMessage(messageMap[MESSAGE_KEY_NOT_EDITABLE_FIELD], field, value));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// fail if we're trying to set the value of a choice field to an invalid choice\n\t\t\t\tif (isChoiceField(field) && !isValidChoice(field, value)) {\n\t\t\t\t\treturn $q.reject(formatMessage(\"FAILURE: Unable to set field '{0}' to value '{1}'. Value '{1}' is not currently a valid choice.\", field, value));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\ttestFrameWindow.g_form.setValue(field, value);\n\t\t\t\t\n\t\t\t\treturn checkValueSet(field, value);\n\t\t\t});\n\t\t}, firstPromise).then(passStep, failStep);\n\t}\n\t\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"41","active":"true","sys_tags":"","html_description":"<p>In order to use this step you must have already opened a page using the &#34;Open a Page (SP)&#34; steps.<br /><br />This step can be used in any order with the &#34;Field Value Validation (SP)&#34;, &#34;Field State Validation (SP)&#34; and &#34;UI Action Visibility (SP)&#34; steps.<br /><br />This step cannot be used after a &#34;Submit Form (SP)&#34; step or &#34;Click a UI Action (SP)&#34;.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Set Field Values (SP)","sys_update_name":"sys_atf_step_config_ba49e51de7420300b2888f49c2f6a93c","name":"Set Field Values (SP)","description_generator":"function generateDescription() {\n    var descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description = gs.getMessage('Set the values on the form as follows:') + '\\n' +\n\t\tdescriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n}\n\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-form color-red","sys_updated_on":"2023-11-07 21:12:33","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"be8e0a935332120028bc29cac2dc34e4","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-04-20 19:16:26","sys_name":"Submit a Form","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7400","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Save\",\n\t\t\"Submit\",\n\t\t\"Submitting a form\",\n\t\t\"Submitting a form in '{0}'\",\n\t\t\"Checking if form submit was successful\",\n\t\t\"Attempted form submit in '{0}'.\",\n\t\t\"FAILURE: page could not reload in time after completion of submit\",\n\t\t\"FAILURE: Cannot submit form. There is no form currently open\",\n\t\t\"FAILURE: could not find sysId of newly created record\",\n\t\t\"FAILURE: Cannot submit '{0}' form. No submit actions available. Only the 'Save' and 'Submit' actions are currently supported\",\n\t\t\"FAILURE: Submission of '{0}' form using the '{1}' action was aborted before being sent to the server\",\n\t\t\"FAILURE: Submission of '{0}' form using the '{1}' button was aborted before being sent to the server\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server using '{1}' action\",\n\t\t\"FAILURE: Browser failed to block submission of '{0}' form to server using '{1}' button\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server using '{1}' action\",\n\t\t\"Successfully confirmed that browser blocks submission of '{0}' form to server using '{1}' button\",\n\t\t\"Successfully submitted '{0}' form for record with sys_id '{2}' using the '{1}' action\",\n\t\t\"Successfully submitted '{0}' form for record with sys_id '{2}' using the '{1}' button\",\n\t\t\"FAILURE: Failed to submit '{0}' form using the '{1}' action\",\n\t\t\"FAILURE: Failed to submit '{0}' form using the '{1}' button\",\n\t\t\"Successfully used '{0}' action on '{1}' form\",\n\t\t\"Successfully used '{0}' button on '{1}' form\"\n\t]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Submitting a form\"]);\n\n\t\tvar afse = new ATFFormStepExecutor(step.inputs);\n\t\tafse.submitForm(step.timeout).then(passStep, failStep);\n\n\t\tfunction passStep(promiseReturn) {\n\t\t\tvar message = promiseReturn['msg'];\n\n\t\t\t// The keys used for the return values can vary depending on which API is called\n\t\t\tvar recordSysId = promiseReturn.recordSysId || promiseReturn.sysId;\n\t\t\tvar formTable = promiseReturn.formTable || promiseReturn.table;\n\n\t\t\t// Handle workspace result\n\t\t\tif (!message) {\n\t\t\t\tvar action = messages[promiseReturn.action];\n\n\t\t\t\tif (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\t\tmessage = formatMessage(messages[\"Successfully submitted '{0}' form for record with sys_id '{2}' using the '{1}' action\"], formTable, action, recordSysId);\n\t\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\t\tmessage = formatMessage(messages[\"Successfully confirmed that browser blocks submission of '{0}' form to server using '{1}' action\"], formTable, action);\n\t\t\t\telse\n\t\t\t\tmessage = formatMessage(messages[\"Successfully used '{0}' action on '{1}' form\"], action, formTable);\n\t\t\t}\n\n\t\t\tstepResult.outputs.table = formTable;\n\t\t\tif (recordSysId && recordSysId != \"-1\")\n\t\t\t\tstepResult.outputs.record_id = recordSysId;\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\n\t\tfunction failStep(result) {\n\t\t\tvar message = \"\";\n\t\t\tif (typeof result === \"string\") // Legacy result\n\t\t\t\tmessage = result;\n\t\t\telse if (result.message) // Conventional error\n\t\t\t\tmessage = result.message;\n\t\t\telse { // Configurable workspace result\n\t\t\t\tvar table = result.table;\n\t\t\t\tvar action = result.action;\n\n\t\t\t\tif (step.inputs.assert_type === \"form_submitted_to_server\")\n\t\t\t\t\tmessage = formatMessage(messages[\"FAILURE: Submission of '{0}' form using the '{1}' action was aborted before being sent to the server\"], table, action);\n\t\t\t\telse if (step.inputs.assert_type === \"form_submission_canceled_in_browser\")\n\t\t\t\t\tmessage = formatMessage(messages[\"FAILURE: Browser failed to block submission of '{0}' form to server using '{1}' action\"], table, action);\n\t\t\t\telse\n\t\t\t\t\tmessage = formatMessage(messages[\"FAILURE: Failed to submit '{0}' form using the '{1}' action\"], table, action);\n\t\t\t}\n\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"41","active":"true","sys_tags":"","html_description":"<p>Submits the current form.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">Use the <code>Form UI</code> field to specify testing in the standard platform UI or workspace UI.</span></p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. After this step, you may no longer use any form steps on the currently opened form as this step will close it.</p>\n<p>Outputs the table and sys_id of the submitted record.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Submits the current form.","sys_update_name":"sys_atf_step_config_be8e0a935332120028bc29cac2dc34e4","name":"Submit a Form","description_generator":"(function generateDescription(step) {\n\tvar description;\n\tvar assertType = step.inputs.assert_type;\n\tvar form_ui = step.inputs.form_ui;\n\tvar isInStandardUI = !form_ui || form_ui == \"standard_ui\";\n\n\tif (assertType == 'form_submitted_to_server') {\n\t\tif (isInStandardUI)\n\t\t\tdescription = gs.getMessage(\"Submit the current form and confirm form submitted to server\");\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Submit the current form and confirm form submitted to server in '{0}'\", form_ui.getDisplayValue());\n\t} else if (assertType == 'form_submission_canceled_in_browser') {\n\t\tif (isInStandardUI)\n\t\t\tdescription = gs.getMessage(\"Submit the current form and confirm form submission canceled in browser\");\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Submit the current form and confirm form submission canceled in browser in '{0}'\", form_ui.getDisplayValue());\n\t} else {\n\t\tif (isInStandardUI)\n\t\t\tdescription = gs.getMessage(\"Submit the current form\");\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Submit the current form in '{0}'\", form_ui.getDisplayValue());\n\t}\n\n\t// if we're in a workspace step, a timeout may be applied to this step\n\tif (!isInStandardUI)\n\t\tdescription += new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\n\treturn description;\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-06-12 11:54:11","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c0fede515f23030076861f9f2f7313db","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-08 10:42:42","sys_name":"Order a Catalog Item (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_ORDER_NOW_STEP = \"Performing 'Order Now' action\";\n\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\";\n\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser failed to block submission of form to server\";\n\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of form to server\";\n\tvar FAILED_SUBMIT = \"FAILURE: Failed to Order the catalog item.\";\n\tvar SUCCESS_SUBMIT = \"SUCCESS: Item was successfully ordered.\";\n\tvar FAILED_CHECKOUT_MODAL = \"FAILURE: Failed to load checkout modal on the form.\";\n\tvar FAILED_VALIDATION = \"FAILURE: Validations failed. Failed to Order Item.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ORDER_NOW_STEP, FAILED_NO_G_FORM, FAILED_BROWSER_BLOCK_SUBMIT, SUCCESS_CONFIRM_BROWSER_BLOCK, FAILED_SUBMIT, SUCCESS_SUBMIT, FAILED_CHECKOUT_MODAL, FAILED_VALIDATION]);\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ORDER_NOW_STEP]);\n\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getCatalogUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.catalog_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 1000);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction getCheckoutUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.checkout_util == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[FAILED_CHECKOUT_MODAL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.checkout_util);\t\n\t\t\t}\n\t\t}, 1000);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction assertCheckoutModal(checkoutUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\tcheckoutUtil.checkout().then(function(result) {\n\t\t\tif (typeof result.number == \"undefined\") {\n\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t}\n\t\t}, onFailure);\n\t}\n\t\n\tfunction assertOrderItem(catalogUtil) {\n\t\tvar assertType = step.inputs.assert_type;\n\t\t\n\t\tcatalogUtil.submitCatItem(step.timeout * 1000).then(function(result) {\n\t\t\tif(assertType == \"form_submitted_to_server\") {\n\t\t\t\tif (result && result.single_step) {\n\t\t\t\t\tif (typeof result.number == \"undefined\") {\n\t\t\t\t\t\tstepResult.outputs.table = undefined;\n\t\t\t\t\t\tstepResult.outputs.record_id = undefined;\n\t\t\t\t\t\tonFailure(FAILED_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tstepResult.outputs.table = result.table;\n\t\t\t\t\t\tstepResult.outputs.record_id = result.sys_id;\n\t\t\t\t\t\tonSuccess(SUCCESS_SUBMIT);\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t\telse\n\t\t\t\t\tgetCheckoutUtil().then(assertCheckoutModal, onFailure);\n\t\t\t}\n\t\t\telse\n\t\t\t\tonFailure(FAILED_BROWSER_BLOCK_SUBMIT);\n\t\t}, function() {\n\t\t\tif(assertType == \"form_submission_cancelled_in_browser\")\n\t\t\t\tonSuccess(SUCCESS_CONFIRM_BROWSER_BLOCK);\n\t\t\telse\n\t\t\t\tonFailure(FAILED_VALIDATION);\n\t\t});\n\t}\n\t\n\tgetCatalogUtil().then(assertOrderItem, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"48","active":"true","sys_tags":"","html_description":"<p>Click <code>Order Now</code> to order a catalog item</p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened a Catalog Item page using the &#34;Open a Catalog Item&#34; step. After this step, you may no longer use any steps on the currently opened catalog item as this step will close it.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Order a Catalog Item (SP)","sys_update_name":"sys_atf_step_config_c0fede515f23030076861f9f2f7313db","name":"Order a Catalog Item (SP)","description_generator":"function generateDescription() {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Order item and confirm that ordering is successful\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Order item and confirm that ordering is canceled in browser\");\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-empty-circle color-yellow-light","sys_updated_on":"2023-10-31 00:41:05","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c52ed987437131106580a9bb1cb8f2b8","class_type":"script","sys_updated_by":"admin","sys_created_on":"2023-10-14 22:39:30","sys_name":"Declarative Action Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4750","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Asserting declarative action visibility\",\n\t\t\"Success: declarative action '{0}' is visible\",\n\t\t\"Success: declarative action '{0}' is not visible\",\n\t\t\"FAILURE: declarative action '{0}' is visible\",\n\t\t\"FAILURE: declarative action '{0}' is not visible\",\n\t\t\"Successfully asserted the following in '{0}':\",\n\t\t\"Failed while asserting the following in '{0}':\",\n\t\t\"Provide at least one declarative action to assert as visible or not visible\"\n\t]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Asserting declarative action visibility\"]);\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tvar afse = new ATFFormStepExecutor(step.inputs);\n\tafse.uiActionVisibility(retryCount).then(handleSuccess, handleFailure);\n\t\n\tfunction handleFailure(result) {\n\t\tvar failMessage = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tfailMessage = result;\n\t\telse if (result.message) // Caught exception\n\t\t\tfailMessage = result.message;\n\t\telse // Workspace result\n\t\t\tfailMessage = buildOutput(result.results);\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(failMessage);\n\t\tstepResult.success = false;\n\t\tstepResult.message = failMessage;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction handleSuccess(result) {\n\t\tvar message = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tmessage = result;\n\t\telse // Workspace result\n\t\t\tmessage = buildOutput(result.results);\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction buildOutput(results) {\n\t\tif (!results)\n\t\t\treturn \"\";\n\n\t\tvar message = \"\";\n\n\t\tresults.forEach(function(result) {\n\t\t\tif (message.length > 0)\n\t\t\t\tmessage += '\\n';\n\n\t\t\tif (result.isVisible && result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"Success: declarative action '{0}' is visible\"], result.label);\n\t\t\telse if (!result.isVisible && !result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"Success: declarative action '{0}' is not visible\"], result.label);\n\t\t\telse if (result.isVisible && !result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"FAILURE: declarative action '{0}' is visible\"], result.label);\n\t\t\telse\n\t\t\t\tmessage += formatMessage(messages[\"FAILURE: declarative action '{0}' is not visible\"], result.label);\n\t\t});\n\n\t\treturn message;\n\t}\n\n\t};\t\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"2","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Validates whether a declarative action is visible on the current form.</span></p>\n<p class=\"p1\"><span class=\"s1\">You can assert that any number of declarative actions are either visible or not visible.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">The default visible declarative actions can vary depending on the currently impersonated user. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Edit the visible, not visible fields of the form.","sys_update_name":"sys_atf_step_config_c52ed987437131106580a9bb1cb8f2b8","name":"Declarative Action Visibility","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\t\n\tif (gs.nil(step.inputs.visible) && gs.nil(step.inputs.not_visible)) {\n\t\tdescription = gs.getMessage(\"This step will do nothing. Please provide at least one declarative action to assert as visible or not visible.\");\n\t\treturn description;\n\t}\n\n\tvar isStandardFormUI = !step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\";\n\tif (!isStandardFormUI)\n\t\tdescription = gs.getMessage(\"Assert the following in '{0}':\\n\", step.inputs.form_ui.getDisplayValue());\n\n\tif (!gs.nil(step.inputs.visible)) {\n\t\tdescription += gs.getMessage(\"Confirm that the following declarative actions are visible: {0}\", step.inputs.visible.getDisplayValue());\n\t}\n\t\n\tif (!gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\tif (description)\n\t\t\tdescription += \"\\n\";\n\t\tdescription += gs.getMessage(\"Confirm that the following declarative actions are not visible: {0}\", step.inputs.not_visible.getDisplayValue());\n\t}\n\t\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n})(step);\n\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-11-15 00:28:59","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c5f44934532332007e7829cac2dc342e","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-06-21 20:07:53","sys_name":"Click a List UI Action","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7275","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n    var alh = new ATFListHelper(step.inputs);\n\tvar isRelatedList = alh.isRelatedList();\n\tvar CLICKING_LIST_UI_ACTION = \"Clicking list UI action '{0}'\";\n\tvar FAILURE_ACTION_DOES_NOT_EXIST = \"FAILURE: UI action with id '{0}' does not exist\";\n\tvar FAILURE_CONTEXT_MENU_REQUIRES_RECORD = \"FAILURE: A context menu UI action must have a record specified\";\n\n\tvar FAILURE_COULD_NOT_FIND_ACTION = isRelatedList ?\n\t\t\"FAILURE: Unable to find {0} UI action '{1}' in the '{2}' related list on the '{3}' form\" :\n\t\t\"FAILURE: Unable to find {0} UI action '{1}' in the '{2}' list\";\n\tvar SUCCESS_CLICKED_LIST_ACTION = isRelatedList ?\n\t\t\"Successfully clicked the {0} UI action '{1}' in the '{2}' related list on the '{3}' form\" :\n\t\t\"Successfully clicked the {0} UI action '{1}' in the '{2}' list\";\n\tvar SUCCESS_RELOAD_REDIRECT = isRelatedList ?\n\t\t\"Successfully clicked the {0} UI action '{1}' in the '{2}' related list on the '{3}' form and verified the page reloads or redirects\" :\n\t\t\"Successfully clicked the {0} UI action '{1}' in the '{2}' list and verified the page reloads or redirects\";\n\tvar FAILURE_NO_RECORDS = isRelatedList ?\n\t\t\"FAILURE: Unable to click {0} UI action '{1}'. There are no records in the '{2}' related list on the '{3}' form\" :\n\t\t\"FAILURE: Unable to click {0} UI action '{1}'. There are no records in the '{2}' list\";\n\tvar FAILURE_RECORD_NOT_FOUND = isRelatedList ?\n\t\t\"FAILURE: Unable to click {0} UI action '{1}' in the '{2}' related list on the '{3}' form. Record '{4}' not found in list\" :\n\t\t\"FAILURE: Unable to click {0} UI action '{1}' in the '{2}' list. Record '{4}' not found in list\";\n\tvar FAILURE_RELOAD_REDIRECT = isRelatedList ?\n\t\t\"FAILURE: Page is not reloaded or redirected when clicking {0} UI Action '{1}' in the '{2}' related list on the '{3}' form\" :\n\t\t\"FAILURE: Page is not reloaded or redirected when clicking {0} UI Action '{1}' in the '{2}' list\";\n\tvar FAILURE_UI_ACTION_DISABLED = isRelatedList ?\n\t\t\"FAILURE: The {0} UI Action '{1}' is disabled in the '{2}' related list on the '{3}' form\" :\n\t\t\"FAILURE: The {0} UI Action '{1}' is disabled in the '{2}' list\";\n\tvar messageMap = new GwtMessage().getMessages([CLICKING_LIST_UI_ACTION, FAILURE_ACTION_DOES_NOT_EXIST, FAILURE_COULD_NOT_FIND_ACTION, SUCCESS_CLICKED_LIST_ACTION,\n\t\tSUCCESS_RELOAD_REDIRECT, FAILURE_NO_RECORDS, FAILURE_CONTEXT_MENU_REQUIRES_RECORD, FAILURE_RECORD_NOT_FOUND, FAILURE_RELOAD_REDIRECT, FAILURE_UI_ACTION_DISABLED]);\n\n\tvar frameWindow = g_ui_testing_util.getTestIFrameWindow();\n\tvar uiActionSysId = step.inputs.list_action;\n\tvar actionType = step.inputs.action_type;\n\tvar applyTo = step.inputs.apply_to;\n\tvar recordId = step.inputs.record_id;\n\tvar assertType = step.inputs.assert_type;\n\n\tif (!step.inputs.ui_action || !uiActionSysId) {\n\t\tfailStep(formatMessage(messageMap[FAILURE_ACTION_DOES_NOT_EXIST], uiActionSysId));\n\t\treturn;\n\t}\n\n\tvar uiActionName = step.inputs.ui_action.name;\n\tvar actionTypeLabel = step.inputs.action_type_label;\n\tvar listLabel = step.inputs.list_label;\n\tvar recordLabel = step.inputs.record_label;\n\tvar listId = alh.getListID();\n\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[CLICKING_LIST_UI_ACTION], uiActionName));\n\n\talh.getListObject()\n\t\t.then(clickCheckbox)\n\t\t.then(clickUIAction)\n\t\t['catch'](function(ex) {\n\t\t\tfailStep(alh.getExceptionMessage(ex));\n\t\t});\n\n\tfunction clickCheckbox(gList) {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\n\t\tif (applyTo === 'single_record') {\n\t\t\tif (recordId) {\n\t\t\t\talh.applyFilter(gList, 'sys_id=' + recordId + '^EQ')\n\t\t\t\t\t.then(function (gList) {\n\t\t\t\t\t\tvar checkboxElem = frameWindow.gel('check_container_' + listId + '_' + recordId);\n\t\t\t\t\t\tif (checkboxElem)\n\t\t\t\t\t\t\tcheckboxElem.click();\n\n\t\t\t\t\t\tdeferred.resolve(gList);\n\t\t\t\t\t});\n\t\t\t} else\n\t\t\t\tdeferred.resolve(gList);\n\t\t} else if (applyTo === 'all_records') {\n\t\t\t// click all checkboxes\n\t\t\tvar allCheckboxesElem = frameWindow.gel('allcheck_' + listId);\n\t\t\tif (allCheckboxesElem)\n\t\t\t\tallCheckboxesElem.click();\n\n\t\t\tdeferred.resolve(gList);\n\t\t} else\n\t\t\tdeferred.resolve(gList);\n\n\t\treturn deferred.promise;\n\t}\n\n\tfunction clickUIAction(gList) {\n\t\tvar listContainer = gList.listContainer;\n\t\tif (!listContainer) {\n\t\t\tconsole.log(\"No valid list container\");\n\t\t\tfailStep(addMessageContext(FAILURE_COULD_NOT_FIND_ACTION));\n\t\t\treturn;\n\t\t}\n\n\t\t// need at least one record in the list to click a choice or bottom button\n\t\tif (actionType === 'list_choice' || actionType === 'list_bottom_button') {\n\t\t\tif (gList.totalRows === 0) {\n\t\t\t\tfailStep(addMessageContext(FAILURE_NO_RECORDS));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tif (actionType === 'list_choice')\n\t\t\tclickListChoice(listContainer);\n\t\telse if (actionType === 'list_context_menu')\n\t\t\tclickContextMenu();\n\t\telse {\n\t\t\tvar uiActionElem = findUIActionByType(listContainer, uiActionSysId, actionType);\n\t\t\tif (!uiActionElem) {\n\t\t\t\tfailStep(addMessageContext(FAILURE_COULD_NOT_FIND_ACTION));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tuiActionElem.click();\n\t\t\tcheckAssertType();\n\t\t}\n\t}\n\n\tfunction clickListChoice(listContainer) {\n\t\tvar optionElem = findUIActionByType(listContainer, uiActionSysId, actionType);\n\t\tif (!optionElem) {\n\t\t\tfailStep(addMessageContext(FAILURE_COULD_NOT_FIND_ACTION));\n\t\t\treturn;\n\t\t}\n\n\t\t// send a mousedown event to the select, which triggers the AJAXActionSecurity call\n\t\tvar selectElem = optionElem.parentNode;\n\t\tvar mde = frameWindow.document.createEvent('MouseEvents');\n\t\tmde.initEvent('mousedown', true, false);\n\t\tselectElem.dispatchEvent(mde);\n\n\t\t// set value of the select to the option value\n\t\tselectElem.value = optionElem.value;\n\n\t\t// check if the option is disabled\n\t\tif (optionElem.hasAttribute('disabled')) {\n\t\t\tfailStep(addMessageContext(FAILURE_UI_ACTION_DISABLED));\n\t\t\treturn;\n\t\t}\n\n\t\t// send a change event to the select, so the action actually runs\n\t\tvar ce = frameWindow.document.createEvent('Event');\n\t\tce.initEvent('change', true, false);\n\t\tselectElem.dispatchEvent(ce);\n\t\tcheckAssertType();\n\t}\n\n\tfunction clickContextMenu() {\n\t\tif (!recordId) {\n\t\t\tfailStep(formatMessage(messageMap[FAILURE_CONTEXT_MENU_REQUIRES_RECORD]));\n\t\t\treturn;\n\t\t}\n\n\t\tvar recordNotFoundMsg = isRelatedList ? formatMessage(messageMap[FAILURE_RECORD_NOT_FOUND], actionTypeLabel, uiActionName, listLabel, step.inputs.table, recordLabel) :\n\t\t\tformatMessage(messageMap[FAILURE_RECORD_NOT_FOUND], actionTypeLabel, uiActionName, listLabel, recordLabel);\n\t\tvar specifiedRecordElem = frameWindow.gel('row_' + listId + '_' + recordId);\n\t\tif (!specifiedRecordElem) {\n\t\t\tfailStep(recordNotFoundMsg);\n\t\t\treturn;\n\t\t}\n\n\t\tvar cellsToRightClick = specifiedRecordElem.getElementsByClassName('vt');\n\t\tif (cellsToRightClick.length == 0) {\n\t\t\tconsole.log('Could not find a cell to right click in the related list');\n\t\t\tfailStep(recordNotFoundMsg);\n\t\t\treturn;\n\t\t}\n\n\t\tg_ui_testing_util.rightClickElement(cellsToRightClick[0]);\n\n\t\tvar contextMenu = frameWindow.contextMenus['context_list_row' + listId];\n\t\tvar contextMenuChildren;\n\t\tif (!contextMenu || !contextMenu.children) {\n\t\t\tconsole.log(\"Context menu object not found\");\n\t\t\tcontextMenuChildren = [];\n\t\t} else\n\t\t\tcontextMenuChildren = contextMenu.children;\n\n\t\tvar contextMenuElem;\n\t\tfor (var i = 0; i < contextMenuChildren.length; i += 1) {\n\t\t\tvar child = contextMenuChildren[i];\n\t\t\tif (!child || typeof child.getAttribute !== \"function\")\n\t\t\t\tcontinue;\n\n\t\t\tif (child.getAttribute(\"item_id\") === uiActionSysId) {\n\t\t\t\tcontextMenuElem = child;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!contextMenuElem)\n\t\t\tfailStep(addMessageContext(FAILURE_COULD_NOT_FIND_ACTION));\n\t\telse {\n\t\t\tcontextMenuElem.click();\n\t\t\tcheckAssertType();\n\t\t}\n\t}\n\n\t/**\n\t * Searches for the UI Action by type inside the list container because there can be id collisions if the same UI action is on more than one related list\n\t */\n\tfunction findUIActionByType(listContainer, id, actionType) {\n\t\tvar expectedTagName;\n\t\tif (actionType === 'list_banner_button' || actionType === 'list_bottom_button')\n\t\t\texpectedTagName = 'button';\n\t\telse if (actionType === 'list_link')\n\t\t\texpectedTagName = 'a';\n\t\telse if (actionType === 'list_choice')\n\t\t\texpectedTagName = 'option';\n\n\t\tif (!expectedTagName) {\n\t\t\tconsole.log(\"Unknown action type: \" + actionType);\n\t\t\treturn null;\n\t\t}\n\n\t\tvar idQueryString = expectedTagName + \"[id='\" + uiActionSysId + \"']\";\n\t\tvar uiActionElem = listContainer.querySelector(idQueryString);\n\t\tif (!uiActionElem) {\n\t\t\t// for some types of UI actions with action names, the id is the action name and the gsft_id attribute is the sys_id\n\t\t\tvar gsftIdQueryString = expectedTagName + \"[gsft_id='\" + uiActionSysId + \"']\";\n\t\t\tuiActionElem = listContainer.querySelector(gsftIdQueryString);\n\t\t\tif (!uiActionElem) {\n\t\t\t\tconsole.log(\"Failed to find list UI action of type '\" + actionType + \"' using query selectors: \" + idQueryString + \" and \" + gsftIdQueryString);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\treturn uiActionElem;\n\t}\n\n\tfunction checkAssertType() {\n\t\tif (assertType === 'page_reloaded_or_redirected')\n\t\t\tg_ui_testing_util.waitForPageReload(step.timeout, waitCallback);\n\t\telse\n\t\t\tpassStep(addMessageContext(SUCCESS_CLICKED_LIST_ACTION));\n\t}\n\n\tfunction waitCallback(wasReloaded) {\n\t\tif (wasReloaded)\n\t\t\tpassStep(addMessageContext(SUCCESS_RELOAD_REDIRECT));\n\t\telse\n\t\t\tfailStep(addMessageContext(FAILURE_RELOAD_REDIRECT));\n\t}\n\n\tfunction passStep(msg) {\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstep.defer.reject();\n\t}\n\n\tfunction addMessageContext(msg) {\n\t\t// Format the step result message with appropriate values depending on the context\n\t\tif (isRelatedList)\n\t\t\treturn formatMessage(messageMap[msg], actionTypeLabel, uiActionName, listLabel, step.inputs.table);\n\n\t\treturn formatMessage(messageMap[msg], actionTypeLabel, uiActionName, listLabel);\n\t}\n\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"2","active":"true","sys_tags":"","html_description":"<p>Clicks a UI Action on a list.</p>\n<h4>Additional Considerations</h4>\n<p>A list module or a form with related lists must be open to use this step. After this step, you may no longer use any steps on the currently opened form or list as it is likely that this step will navigate to a different page.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7f89e77b04f12210559073c06a02f76e","value":"7f89e77b04f12210559073c06a02f76e"},"template_reminder":"Clicks a UI Action on a list","sys_update_name":"sys_atf_step_config_c5f44934532332007e7829cac2dc342e","name":"Click a List UI Action","description_generator":"function generateDescription() {\n\tvar isRelatedList = !(step.inputs.list_type == 'list');\n\tvar relTd = GlideTableDescriptor.get(step.inputs.related_list_table);\n\tvar relatedListTable = step.inputs.related_list_table.getDisplayValue();\n\tif (relTd)\n\t\trelatedListTable = relTd.getLabel();\n\n\tvar formTd = GlideTableDescriptor.get(step.inputs.table);\n\tvar formTable = step.inputs.table.getDisplayValue();\n\tif (formTd)\n\t\tformTable = formTd.getLabel();\n\n\tvar actionTypeDisplayValue = step.inputs.action_type.getDisplayValue().toLowerCase();\n\tvar listActionDisplayValue = step.inputs.list_action.getDisplayValue();\n\n\tvar description = \"\";\n\tif (step.inputs.assert_type == \"page_reloaded_or_redirected\") {\n\t\tif (isRelatedList)\n\t\t\tdescription = gs.getMessage(\"Click the {0} UI action '{1}' in the '{2}' related list on the '{3}' form and assert the page reloads or redirects within {4}\",\n\t\t\t\t[actionTypeDisplayValue, listActionDisplayValue, relatedListTable, formTable, step.timeout.getDisplayValue()]);\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Click the {0} UI action '{1}' in the '{2}' list and assert the page reloads or redirects within {3}\",\n\t\t\t\t[actionTypeDisplayValue, listActionDisplayValue, relatedListTable, step.timeout.getDisplayValue()]);\n\t} else {\n\t\tif (isRelatedList)\n\t\t\tdescription = gs.getMessage(\"Click the {0} UI action '{1}' in the '{2}' related list on the '{3}' form\",\n\t\t\t\t[actionTypeDisplayValue, listActionDisplayValue, relatedListTable, formTable]);\n\t\telse\n\t\t\tdescription = gs.getMessage(\"Click the {0} UI action '{1}' in the '{2}' list\",\n\t\t\t\t[actionTypeDisplayValue, listActionDisplayValue, relatedListTable]);\n\t}\n\n\tvar applyTo = step.inputs.apply_to.toString();\n\tif (applyTo) {\n\t\tif (applyTo === \"all_records\")\n\t\t\tdescription += \"\\n\" + gs.getMessage(\"Apply the action to all records visible on the first page of the list\");\n\t\telse if (applyTo === \"single_record\")\n\t\t\tdescription += \"\\n\" + gs.getMessage(\"Apply the action to the record '{0}'\", step.inputs.record_id.getDisplayValue());\n\t}\n\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/bc15fe46e72a3300b5646ea8c2f6a9bf","value":"bc15fe46e72a3300b5646ea8c2f6a9bf"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-10-13 17:00:05","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c7d557d673002300688e0d573cf6a74f","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-08-24 08:17:53","sys_name":"Add row to multi-row variable set (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1250","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar ADD_ROW_TO_TABLE_VARIABLE = \"Adding row to Table variable.\";\n\tvar MESSAGE_KEY_ERROR_NO_GFORM = \"ERROR: Cannot find g_form on page.\";\n\tvar MESSAGE_KEY_ERROR_NO_TABLE_VAR_GFORM = \"ERROR: Cannot find g_form for Table variable.\";\n\tvar MESSAGE_KEY_ADD_ROW_SUCCESSFUL = \"SUCCESS: Successfully added row to Table variable.\";\n\tvar MESSAGE_KEY_ROW_ADD_FAILURE = \"FAILURE: Failed to add row to Table variable.\";\n\tvar messageMap = new GwtMessage().getMessages([\"Adding row to Table variable.\", \"ERROR: Cannot find g_form on page.\", \"ERROR: Cannot find g_form for Table variable.\", \"SUCCESS: Successfully added row to Table variable.\", \"FAILURE: Failed to add row to Table variable.\"]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[ADD_ROW_TO_TABLE_VARIABLE]);\n\t\n\tfunction onSuccess(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tmsg = messageMap[msg];\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\n\tfunction getUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif(typeof testFrameWindow.catalog_util == \"undefined\") {\n\t\t\t\tcount++;\n\t\t\t\tif(count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(MESSAGE_KEY_ERROR_NO_GFORM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\n\t}\n\t\n\tfunction getTableVariableUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar interval = setInterval(function() {\n\t\t\tif(typeof testFrameWindow.table_var_util == \"undefined\") {\n\t\t\t\tcount++;\n\t\t\t\tif(count >= 10) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(MESSAGE_KEY_ERROR_NO_TABLE_VAR_GFORM);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.table_var_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\n\t}\n\t\n\tfunction getGform(tableUtil) {\n\t\ttableUtil.updateGform();\n\t\tonSuccess(MESSAGE_KEY_ADD_ROW_SUCCESSFUL);\n\t}\n\t\n\tfunction addRow(catalogUtil) {\n\t\tcatalogUtil.addRow(step.inputs.variable_set, step.timeout * 1000).then(function() {\n\t\t\tgetTableVariableUtil().then(getGform, onFailure);\n\t\t}, onFailure);\n\t}\n\t\n\tgetUtil().then(addRow, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>This is step is used to add a row to multi-row variable set on current catalog item in Service Portal.</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be used when the current catalog item contains a multi-row variable set.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Add row to multi-row variable set(SP)","sys_update_name":"sys_atf_step_config_c7d557d673002300688e0d573cf6a74f","name":"Add row to multi-row variable set (SP)","description_generator":"function generateDescription() {\n    var description = gs.getMessage(\"Adding row to multi-row variable set: {0}\", step.inputs.variable_set.getDisplayValue());\n\treturn description;\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-20 23:36:05","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c832fc4073720300c79260bdfaf6a7a0","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-11-27 22:48:14","sys_name":"Navigate to Module","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"9010","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n    var MESSAGE_KEY_NAVIGATING_TO_MODULE = \"Navigating to the '{0}' module in the '{1}' application\";\n\tvar MESSAGE_KEY_NO_MODULE_PROVIDED = \"FAILURE: No module provided\";\n\tvar MESSAGE_KEY_MODULE_NOT_FOUND = \"FAILURE: Unable to navigate to the '{0}' module in the '{1}' application. It was not visible in the application navigator\";\n\tvar MESSAGE_KEY_MODULE_URL_NOT_FOUND = \"FAILURE: Unable to navigate to the '{0}' module in the '{1}' application. It does not have a URL\";\n\tvar MESSAGE_KEY_EXTERNAL_LINK_NOT_SUPPORTED = \"FAILURE: Unable to navigate to the '{0}' module in the '{1}' application. Modules that link to external websites are not supported\";\n\tvar MESSAGE_KEY_JS_NOT_SUPPORTED = \"FAILURE: Unable to navigate to the '{0}' module in the '{1}' application. Modules that execute client-side JavaScript are not supported\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_NAVIGATED_TO_MODULE = \"Successfully navigated to the '{0}' module in the '{1}' application\";\n\tvar MESSAGE_KEY_WAITING_FOR_TIMEOUT = \"Waiting {0} seconds before completing the step\";\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_NAVIGATING_TO_MODULE, MESSAGE_KEY_NO_MODULE_PROVIDED, MESSAGE_KEY_MODULE_NOT_FOUND, MESSAGE_KEY_MODULE_URL_NOT_FOUND,\n\t\tMESSAGE_KEY_SUCCESSFULLY_NAVIGATED_TO_MODULE, MESSAGE_KEY_EXTERNAL_LINK_NOT_SUPPORTED, MESSAGE_KEY_JS_NOT_SUPPORTED, MESSAGE_KEY_WAITING_FOR_TIMEOUT]);\n\n\tif (!step.inputs.module) {\n\t\tfailStep(messages[MESSAGE_KEY_NO_MODULE_PROVIDED]);\n\t\treturn;\n\t}\n\n\t// make sure the titles are defined if the server did not provide them\n\tif (!step.inputs.module_title)\n\t\tstep.inputs.module_title = step.inputs.module;\n\tif (!step.inputs.application_title)\n\t\tstep.inputs.application_title = '';\n\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messages[MESSAGE_KEY_NAVIGATING_TO_MODULE],\n\t\t[step.inputs.module_title, step.inputs.application_title]));\n\tvar leftNavUtil = new ATFLeftNavUtil();\n\tleftNavUtil.getModule(step.inputs.module).then(function(moduleObj) {\n\t\t// module is not visible in the left nav\n\t\tif (!moduleObj) {\n\t\t\tfailStep(formatMessage(messages[MESSAGE_KEY_MODULE_NOT_FOUND], [step.inputs.module_title, step.inputs.application_title]));\n\t\t\treturn;\n\t\t}\n\n\t\t// module does not have a URL. For example, it could be a separator.\n\t\tvar moduleURI = moduleObj.uri;\n\t\tif (!moduleURI) {\n\t\t\tfailStep(formatMessage(messages[MESSAGE_KEY_MODULE_URL_NOT_FOUND], [step.inputs.module_title, step.inputs.application_title]));\n\t\t\treturn;\n\t\t}\n\n\t\t// modules that link to external websites are not supported\n\t\tif (moduleObj.type === 'DOC_LINK' || moduleURI.indexOf('https://') === 0 || moduleURI.indexOf('http://') === 0) {\n\t\t\tfailStep(formatMessage(messages[MESSAGE_KEY_EXTERNAL_LINK_NOT_SUPPORTED],\n\t\t\t\t[step.inputs.module_title, step.inputs.application_title]));\n\t\t\treturn;\n\t\t}\n\n\t\t// modules that execute client-side javascript are not supported\n\t\tif (moduleURI.indexOf('javascript:') === 0) {\n\t\t\tfailStep(formatMessage(messages[MESSAGE_KEY_JS_NOT_SUPPORTED], [step.inputs.module_title, step.inputs.application_title]));\n\t\t\treturn;\n\t\t}\n\n        // Page Inspector url prefix needs to be removed\n\t\tif (moduleURI.indexOf('atf_page_inspector') != -1)\n\t\t\tmoduleURI = \"/\" + moduleURI.substr(moduleURI.indexOf('sysparm_url=') + 12);\n\n\t\tg_ui_testing_util.openURL(moduleURI).then(passStep);\n\t})['catch'](function (e) {\n\t\tvar msg = (e && e.message) ? e.message : e;\n\t\tfailStep(msg);\n\t});\n\n\tfunction passStep() {\n\t\tif (step.timeout > 0)\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messages[MESSAGE_KEY_WAITING_FOR_TIMEOUT], step.timeout));\n\n\t\tsetTimeout(_passStep, step.timeout * 1000);\n\n\t\tfunction _passStep() {\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = formatMessage(messages[MESSAGE_KEY_SUCCESSFULLY_NAVIGATED_TO_MODULE],\n\t\t\t\t[step.inputs.module_title, step.inputs.application_title]);\n\t\t\tstep.defer.resolve();\n\t\t}\n\t}\n\n\tfunction failStep(msg) {\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"4","active":"true","sys_tags":"","html_description":"<p>Navigates to a module, as if a user had clicked on it. In order to navigate to a module, it must be visible in the application navigator to the currently executing user.</p>\n<p></p><h4>Additional Considerations</h4>\n<p>Wherever the module takes you is your responsibility. The following are not supported:</p>\n<ul style=\"list-style-position: inside;\"><li>Modules that are separators</li><li>Modules that link to external websites, such as the ServiceNow documentation site</li><li>Modules that reload or redirect the entire page</li><li>Module URL that executes client-side JavaScript</li></ul>\n<p>The &#39;Timeout&#39; field can be used to add a delay after the module has been opened. This can be useful if you have navigated to a page with asynchronous activities that need additional time to complete.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/ae89677b04f12210559073c06a02f735","value":"ae89677b04f12210559073c06a02f735"},"template_reminder":"Navigates to a module, as if a user had clicked on it","sys_update_name":"sys_atf_step_config_c832fc4073720300c79260bdfaf6a7a0","name":"Navigate to Module","description_generator":"(function generateDescription(step) {\n\tvar hasWait = step.timeout.dateNumericValue() > 0;\n\n\tif (step.inputs.module.hasMapping()) {\n\t\tif (hasWait)\n\t\t\treturn gs.getMessage(\"Navigate to the module {0}. Then wait {1}\", [step.inputs.module.getDisplayValue(), step.timeout.getDisplayValue()]);\n\n\t\treturn gs.getMessage(\"Navigate to the module {0}\", step.inputs.module.getDisplayValue());\n\t}\n\n\tvar gr = new GlideRecord('sys_app_module');\n\tgr.get(step.inputs.module);\n\tvar modTitle = gr.title + '';\n\tvar appTitle = gr.application ? gr.application.title + '' : '';\n\tif (hasWait)\n\t\treturn gs.getMessage(\"Navigate to the '{0}' module in the '{1}' application. Then wait {2}\",\n\t\t\t[modTitle, appTitle, step.timeout.getDisplayValue()]);\n\n\treturn gs.getMessage(\"Navigate to the '{0}' module in the '{1}' application\", [modTitle, appTitle]);\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/92af89573702030064a52f3c8e41f1aa","value":"92af89573702030064a52f3c8e41f1aa"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:50:36","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"c930b4b2c310320076173b0ac3d3aeec","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-01-17 08:55:31","sys_name":"Order Catalog Item","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_ORDER_NOW_STEP = \"Performing 'Order Now' action\";\n\tvar MESSAGE_KEY_CANNOT_SUBMIT = \"FAILURE: There is no item currently open. See screenshot\";\n\tvar MESSAGE_KEY_ERROR_ORDERING = \"FAILURE: Error while ordering the item. See screenshot\";\n\tvar MESSAGE_KEY_ITEM_ORDERED = \"SUCCESS: Order Now was successful\";\n\tvar MESSAGE_KEY_ERROR_ACTION_NOT_FOUND = \"FAILURE: Order Now button was not found. See screenshot\";\n\tvar MESSAGE_KEY_UNKNOWN_ASSERT_TYPE = \"FAILURE: Assert type cannot be empty\";\n\t\n\tvar MESSAGE_KEY_FAIL_CANNOT_ORDER_NOW = \"FAILURE: Validations failed. Order Now was unsuccessful\";\n\tvar MESSAGE_KEY_PASS_CANNOT_ORDER_NOW = \"SUCCESS: Item cannot be ordered\";\n\tvar MESSAGE_KEY_FAIL_CAN_ORDER_NOW = \"FAILURE: Item can be ordered\";\n\t\n\tvar MESSAGE_KEY_FORM_NOT_FOUND = \"FAILURE: Glide Form not found\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_ORDER_NOW_STEP, MESSAGE_KEY_CANNOT_SUBMIT, MESSAGE_KEY_ERROR_ORDERING, MESSAGE_KEY_ITEM_ORDERED, MESSAGE_KEY_ERROR_ACTION_NOT_FOUND, MESSAGE_KEY_UNKNOWN_ASSERT_TYPE, MESSAGE_KEY_FAIL_CANNOT_ORDER_NOW, MESSAGE_KEY_PASS_CANNOT_ORDER_NOW, MESSAGE_KEY_FAIL_CAN_ORDER_NOW, MESSAGE_KEY_FORM_NOT_FOUND]);\n\n\tfunction _getBoolean(value) {\n\t\tif (value === 'true') {\n\t\t\tvalue = true;\n\t\t} else if (value === 'false') {\n\t\t\tvalue = false;\n\t\t}\n\t\treturn value ? true : false;\n\t}\n\tvar buttonId = \"oi_order_now_button\";\n\tif (step.catalog_data && !_getBoolean(step.catalog_data.use_sc_layout))\n\t\tbuttonId = \"order_now\";\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_ORDER_NOW_STEP]);\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\tif (typeof(testFrameWindow.gel) == 'undefined') {\n        message = messageMap[MESSAGE_KEY_CANNOT_SUBMIT];\n        g_ui_testing_util.setTestStepStatusMessage(message);\n        stepResult.success = false;\n        stepResult.message = message;\n        step.defer.reject();\n        return;\n    }\n\n\tvar g_form = g_ui_testing_util.getTestIFrameGForm();\n\tif (!g_form) {\n\t\tmessage = messageMap[MESSAGE_KEY_FORM_NOT_FOUND];\n\t\tstepResult.success = false;\n\t\tstepResult.message = message;\n\t\tstep.defer.reject();\n\t\treturn;\n\t}\n\n\tfunction checkSuccessfulSubmit() {\n\t\t//We only have two ways to redirect to. Check if the location is one of them.\n\t\tg_ui_testing_util.clearTestIFrameOnloadFunction();\n\t\tvar _url = g_ui_testing_util.getTestIFrameWindow().location.pathname;\n\t\tif (_url.indexOf(\"servicecatalog_checkout_one\") > -1 || _url.indexOf(\"com.glideapp.servicecatalog_checkout_view\") > -1) {\n\t\t\tmessage = messageMap[MESSAGE_KEY_ITEM_ORDERED];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\t_url = g_ui_testing_util.getTestIFrameWindow().location.href;\n\t\t\tvar urlParams = getJsonFromUrl(_url);\n\t\t\tif (urlParams.hasOwnProperty('sysparm_cart_name'))\n\t\t\t\tstepResult.outputs.cart = urlParams.sysparm_cart_name;\n\t\t\telse if (urlParams.hasOwnProperty('sysparm_sys_id'))\n\t\t\t\tstepResult.outputs.request_id = urlParams.sysparm_sys_id;\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tmessage = messageMap[MESSAGE_KEY_ERROR_ORDERING];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t}\n\t\n\tfunction getJsonFromUrl(query) {\n\t  var result = {};\n\t  query.split(\"&\").forEach(function(part) {\n\t\tvar item = part.split(\"=\");\n\t\tresult[item[0]] = decodeURIComponent(item[1]);\n\t  });\n\t  return result;\n\t}\n\n\tfunction doAction() {\n\t\tvar actionElement = testFrameWindow.gel(buttonId);\n\t\tif (actionElement && actionElement.onclick) {\n\t\t\t// client ui action with onclick function, use it\n\t\t\tg_ui_testing_util.setTestIFrameOnloadFunction(checkSuccessfulSubmit);\n\t\t\tactionElement.onclick();\n\t\t} else {\n\t\t\tmessage = messageMap[MESSAGE_KEY_ERROR_ACTION_NOT_FOUND];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tif (!g_form.catalogOnSubmit()) {\n\t\tif (step.inputs.assert_type == 'form_submitted_to_server') {\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAIL_CANNOT_ORDER_NOW];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t} else {\n\t\t\tmessage = messageMap[MESSAGE_KEY_PASS_CANNOT_ORDER_NOW];\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t}\n\t} else {\n\t\tif (step.inputs.assert_type === 'form_submitted_to_server')\n\t\t\tdoAction();\n\t\telse {\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAIL_CAN_ORDER_NOW];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t}\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"30","active":"true","sys_tags":"","html_description":"<p>Click <code>Order Now</code> to order a catalog item</p>\n<p><strong>Additional Considerations</strong></p>\n<p>In order to use this step you must have already opened a Catalog Item page using the &#34;Open a Catalog Item&#34; step. After this step, you may no longer use any steps on the currently opened catalog item as this step will close it.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Order a catalog item","sys_update_name":"sys_atf_step_config_c930b4b2c310320076173b0ac3d3aeec","name":"Order Catalog Item","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Order item and confirm that ordering is successful\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Order item and confirm that ordering is canceled in browser\");\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-08-22 09:39:37","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"ca58a941e7020300b2888f49c2f6a95e","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-10-24 22:31:16","sys_name":"Open a Form (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_OPENING = new GwtMessage().getMessage(\"Opening Service Portal page\");\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = new GwtMessage().getMessage(\"Successfully opened Service Portal page\");\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = new GwtMessage().getMessage(\"FAILURE: Failed to open Service Portal page\");\n\tvar MESSAGE_KEY_FAILED_NO_G_FORM = new GwtMessage().getMessage(\"FAILURE: g_form is not defined. A valid form must have g_form defined\");\n\tvar gFormCheckCount = 0;\n\t\n\tfunction passStep() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(MESSAGE_KEY_SUCCESSFULY_OPENED);\n\t\t\n\t\tstepResult.success = true;\n\t\tstepResult.message = MESSAGE_KEY_SUCCESSFULY_OPENED;\n\t\t\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tvar message = msg || MESSAGE_KEY_FAILED_TO_OPEN;\n\t\t\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\t\n\t\tstepResult.success = false;\n\t\tstepResult.message = message;\n\t\t\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction ensureGform() {\n\t\tif (gFormCheckCount === 10) {\n\t\t\treturn failStep(MESSAGE_KEY_FAILED_NO_G_FORM);\n\t\t}\n\t\t\n\t\tgFormCheckCount++;\n\t\t\n\t\tif (g_ui_testing_util.getTestIFrameWindow().g_form) {\n\t\t\treturn passStep();\n\t\t}\n\t\t\n\t\twindow.setTimeout(ensureGform, 2000);\n\t}\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(MESSAGE_KEY_OPENING);\n\t\n\tvar portal = step.inputs.portal;\n\tvar page = step.inputs.page;\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\tquery_params.table = step.inputs.table;\n\tstep.timeout = step.timeout || 5;\n\tvar wait_timeout_ms = step.timeout * 1000;\n\tquery_params.sys_id = (step.inputs.param_sys_id) ? step.inputs.param_sys_id : - 1;\n\tif (step.inputs.param_view) {\n\t\tquery_params.view = step.inputs.param_view;\n\t}\n\t\n\tg_ui_testing_util.openPortalPage(portal.url_suffix, page.id, query_params, wait_timeout_ms)\n\t\t.then(ensureGform, failStep);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"65","active":"true","sys_tags":"","html_description":"<p> </p>\n<p>Define a Service Portal form and portal to open it in.</p>\n<h4>Additional Considerations</h4>\n<p>URL parameters to use are table, sys_id and view. The table parameter will open the form view of the specified table. The sys_id parameter will open a new record when no sys_id value is entered and open an existing record when a value is provided. &#34;Default&#34; view is used when no view parameter is specified.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Open a Form (SP)","sys_update_name":"sys_atf_step_config_ca58a941e7020300b2888f49c2f6a95e","name":"Open a Form (SP)","description_generator":"function generateDescription() {\n\tvar page = '';\n\tvar portal = '';\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\t\n\tvar page_gr = new GlideRecord('sp_page');\n\tif(page_gr.get(step.inputs.page_id)) {\n\t\tpage = page_gr.getValue('title');\n\t}\n\t\n\tvar portal_gr = new GlideRecord('sp_portal');\n\tif(portal_gr.get(step.inputs.portal_id)) {\n\t\tportal = portal_gr.getValue('title');\n\t}\n\t\n    var qp_str = '';\n\tfor(var p in query_params) {\n\t\tif(query_params.hasOwnProperty(p)) {\n\t\t\tqp_str += p + \" = \" + query_params[p] + \"\\n\";\n\t\t}\n\t}\n\n\tvar description;\n\tif (qp_str === '') {\n\t\tdescription = gs.getMessage('Open {0} page in the {1} portal', [page, portal]);\n\t\tif (step.warning_message)\n\t\t\tdescription += \"\\n\";\n\t} else\n\t\tdescription = gs.getMessage('Open {0} page in the {1} portal with the following query params:\\n{2}', [page, portal, qp_str]);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\" + step.warning_message;\n\n\treturn description;\n}\n\ngenerateDescription();","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:52","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"ccd64c519f132200ef4afa7dc67fcf6a","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 20:57:47","sys_name":"Assert Response Header","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertHeaderValueStepRunner","sys_created_by":"admin","order":"6300","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"7","active":"true","sys_tags":"","html_description":"<p>Assert an HTTP response header. Select the comparison operation and specify the expected value of the header.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the HTTP response header exists, or the header value is equals to or contains a specified value","sys_update_name":"sys_atf_step_config_ccd64c519f132200ef4afa7dc67fcf6a","name":"Assert Response Header","description_generator":"function generateDescription() {\n\tif(step.inputs.response_operation == 'exists')\t\t\n\t\treturn gs.getMessage(\"Assert a response header '{0}' {1}\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.header_name, 50), \n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation)]);\n\telse\n\t\treturn gs.getMessage(\"Assert a response header '{0}' {1} '{2}'\", [\n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.header_name, 50),\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), \n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.header_value, 50)]);\n}\ngenerateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-06 08:58:56","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"d4df4ce30b13130083332dc3b6673a29","class_type":"java","sys_updated_by":"admin","sys_created_on":"2018-07-20 09:58:55","sys_name":"Responsive Dashboard Sharing","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.dashboards.DashboardSharingActionStepRunner","sys_created_by":"admin","order":"910","step_execution_generator":"","sys_mod_count":"1","active":"true","sys_tags":"","html_description":"<p>Confirm a dashboard can or cannot be shared by the test user</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2bfb23b704352210559073c06a02f7b7","value":"2bfb23b704352210559073c06a02f7b7"},"template_reminder":"Confirm a dashboard can or cannot be shared","sys_update_name":"sys_atf_step_config_d4df4ce30b13130083332dc3b6673a29","name":"Responsive Dashboard Sharing","description_generator":"(function generateDescription(step) {\n\tvar assertType = step.inputs.assert_type;\n\tvar assertCanShare = (assertType == 'can_share_dashboard');\n\t\n\tif (assertCanShare)\n\t\treturn gs.getMessage(\"Confirm the dashboard '{0}' can be shared\",\n\t\t\t\t\t\t\t step.inputs.dashboard_id.getDisplayValue());\n\telse\n\t\treturn gs.getMessage(\"Confirm the dashboard '{0}' cannot be shared\",\n\t\t\t\t\t\t\t step.inputs.dashboard_id.getDisplayValue());\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/ac3c433ab31023003e5362ff86a8dcb1","value":"ac3c433ab31023003e5362ff86a8dcb1"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:14:21","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"d53e40d59f132200ef4afa7dc67fcfc7","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 21:30:04","sys_name":"Assert Response Payload","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertPayloadStepRunner","sys_created_by":"admin","order":"6800","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"8","active":"true","sys_tags":"","html_description":"<p>Assert the HTTP response payload is equals to or contains a specified value. Select the comparison operation and specify the expected value of the response payload.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the HTTP response payload is equals to or contains a specified value","sys_update_name":"sys_atf_step_config_d53e40d59f132200ef4afa7dc67fcfc7","name":"Assert Response Payload","description_generator":"function generateDescription() {\t\n\tif(step.inputs.response_operation == 'exists')\t\t\n\t\treturn gs.getMessage(\"Assert a response payload {0}\", [ \n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation)]);\n\telse\n\t\treturn gs.getMessage(\"Assert a response payload {0} '{1}'\", [\n\t\t(new ATFStepDescriptionGenerator()).getOperatorDescription(step.inputs.response_operation), \n\t\t(new ATFStepDescriptionGenerator()).limitTextToSpecifiedLength(step.inputs.response_body, 50)]);\n}\ngenerateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-21 22:23:25","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"d5d9e7e7c3d7220076173b0ac3d3ae0b","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-12-01 13:20:00","sys_name":"Set Catalog Item Quantity","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\tvar MESSAGE_KEY_SET_QUANTITY = \"Setting quantity to {0}\";\n\tvar MESSAGE_KEY_ERROR_QUANTITY_HANDLER = \"ERROR: Cannot find quantity handler on item\";\n\tvar MESSAGE_KEY_ERROR_CANNOT_SET_QUANTITY = \"ERROR: Cannot set quantity on the item\";\n\tvar MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL = \"Successfully set quantity of the item to {0}\";\n\tvar MESSAGE_KEY_QUANTITY_ERROR = \"FAILURE: Expected quantity value to be {0} but found {1}\";\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SET_QUANTITY, MESSAGE_KEY_ERROR_QUANTITY_HANDLER, MESSAGE_KEY_ERROR_CANNOT_SET_QUANTITY, MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL, MESSAGE_KEY_QUANTITY_ERROR]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SET_QUANTITY], step.inputs.quantity));\n\t\n\tvar sucessMessage = \"\";\n\tvar failureReason = \"\";\n\t\n\tfunction executeSetQuantity() {\n\t\tif (g_cart.setQuantity && typeof g_cart.setQuantity === 'function') {\n\t\t\tg_cart.setQuantity(step.inputs.quantity);\n\t\t\tvar quantityActual = g_cart.getQuantity();\n\t\t\tif (quantityActual == step.inputs.quantity) {\n\t\t\t\tsucessMessage = formatMessage(messageMap[MESSAGE_KEY_QUANTITY_SET_SUCCESSFUL], [step.inputs.quantity]);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(sucessMessage);\n\t\t\t\tstepResult.success = true;\n\t\t\t\tstepResult.message = sucessMessage;\n\t\t\t\tstep.defer.resolve();\n\t\t\t} else {\n\t\t\t\tfailureReason = formatMessage(messageMap[MESSAGE_KEY_QUANTITY_ERROR], [step.inputs.quantity, quantityActual]);\n\t\t\t\tg_ui_testing_util.setTestStepStatusMessage(failureReason);\n\t\t\t\tstepResult.sucess = false;\n\t\t\t\tstepResult.message = failureReason;\n\t\t\t\tstep.defer.reject();\n\t\t\t}\n\t\t} else {\n\t\t\tfailureReason = messageMap[MESSAGE_KEY_ERROR_QUANTITY_HANDLER];\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(failureReason);\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = failureReason;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t}\n\t}\n\n\tvar g_cart = g_ui_testing_util.getTestIFrameWindow().g_cart;\n\tif (!g_cart || !g_cart.showCart) {\n\t\tfailureReason = messageMap[MESSAGE_KEY_ERROR_CANNOT_SET_QUANTITY];\n\t\tg_ui_testing_util.setTestStepStatusMessage(failureReason);\n\t\tstepResult.success = false;\n\t\tstepResult.message = failureReason;\n\t\tstep.defer.reject();\n\t} else\n\t\texecuteSetQuantity();\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult,assertionObject);\n","sys_mod_count":"10","active":"true","sys_tags":"","html_description":"<p>Sets quantity value on the current catalog item.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a catalog item page using the “Open a Catalog Item” step. This step cannot be used after “Order Catalog Item” step.<br /><span style=\"color: #ff6600;\">This step can not be used with Record Producers.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Set quantity on a catalog item page.","sys_update_name":"sys_atf_step_config_d5d9e7e7c3d7220076173b0ac3d3ae0b","name":"Set Catalog Item Quantity","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = gs.getMessage(\"Set quantity to {0}\", step.inputs.quantity);\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-04-23 19:20:16","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"d72d0556e7020300b2888f49c2f6a916","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-10-28 17:45:46","sys_name":"Field Values Validation (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4550","step_execution_generator":"(function executeStep(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_VALIDATION = \"Running field value validation\";\n\tvar MESSAGE_KEY_FAILED_NO_G_FORM = \"FAILURE: Unable to run field values validation, g_form is not defined. A valid form must be open before validating values\";\n\tvar MESSAGE_KEY_SERVER_MISSING_VALS = \"The server response was missing one or more values\";\n\t\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_RUNNING_VALIDATION, MESSAGE_KEY_FAILED_NO_G_FORM, MESSAGE_KEY_SERVER_MISSING_VALS]);\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messages[MESSAGE_KEY_RUNNING_VALIDATION]);\n\t\n\tfunction failStep(message) {\n\t\tstepResult.success = false;\n\t\tstepResult.status = \"error\";\n\t\tstepResult.message = messages[message];\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\tstep.defer.reject();\n\t}\n\t\n\tvar g_form = g_ui_testing_util.getTestIFrameWindow().g_form;\n\n\tif (!g_form) {\n\t\treturn failStep(MESSAGE_KEY_FAILED_NO_G_FORM);\n\t}\n\t\n\tfunction handleConditionEvalAjaxResponse(response) {\n\t\ttry {\n\t\t\tvar evaluationResult = response.responseXML.getElementsByTagName(\"evaluation_result\")[0];\n\t\t\tvar evalStatus = evaluationResult.getAttribute(\"status\");\n\t\t\tvar evalMessage = evaluationResult.getAttribute(\"message\");\n\n\t\t\tstepResult.success = (\"success\" === evalStatus);\n\t\t\tstepResult.status = evalStatus;\n\t\t\tstepResult.message = evalMessage;\n\t\t\t\n\t\t\tg_ui_testing_util.setTestStepStatusMessage(stepResult.message);\n\t\t\tstep.defer.resolve();\n\t\t} catch(e) {\n\t\t\tfailStep(MESSAGE_KEY_SERVER_MISSING_VALS);\n\t\t}\n\t}\n\t\n\tvar serializedGForm = g_form.serializeToString();\n\t\n\t// remove rollbackContextId from the g_form\n\tvar rollbackContextParam = \"&sysparm_rollback_context_id=\" + g_ui_testing_util.getRollbackContextId();\n\tserializedGForm = serializedGForm.replace(rollbackContextParam, \"\");\n\n\tvar conditionEvalAjax = new GlideAjax(\"com.glide.automated_testing_framework.processors.SPATFConditionEvaluator\");\n\tconditionEvalAjax.addEncodedString(serializedGForm);\n\tconditionEvalAjax.addParam(\"sysparm_step_id\", step.sys_id);\n\tconditionEvalAjax.addParam(\"sysparm_test_result_id\", step.test_result_id);\n\tconditionEvalAjax.getXML(handleConditionEvalAjaxResponse);\n}(step, stepResult));\n","sys_mod_count":"20","active":"true","sys_tags":"","html_description":"<p class=\"\">Validates field values on the current form.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a page using &#34;Open a Page (SP)&#34;. This step also cannot be used after a &#34;Submit Form (SP)&#34; step or &#34;Click a UI Action (SP)&#34; step has been used.</p>\n<p>Several conditions can be applied to the same field, if desired.</p>\n<p>This step can be used in any order with the &#34;Set Field Values (SP)&#34;, &#34;Field State Validation (SP)&#34;, and &#34;UI Action Visibility (SP)&#34; steps.</p>\n<p> </p>\n<p> </p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Field Values Validation (SP)","sys_update_name":"sys_atf_step_config_d72d0556e7020300b2888f49c2f6a916","name":"Field Values Validation (SP)","description_generator":"(function generateDescription(step) {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\t\n\treturn gs.getMessage('Validate that the form matches the following condition:') + '\\n' + \n\t\tdescriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.conditions) +\n\t\tdescriptionGenerator.getTimeoutDescription(step.timeout);\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-24 10:29:53","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"d7c0d0ef5f9b1300688e1f9f2f7313b7","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-07-20 10:04:35","sys_name":"Validate Order Guide Items (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_VALIDATE_ITEMS = \"Validating items included in Order guide.\";\n\tvar MESSAGE_KEY_SUCCESSFUL_VALIDATE = \"SUCCESS: All items are present in the Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_TO_VALIDATE = \"FAILURE: Failed to validate some items in Order Guide.\";\n\tvar MESSAGE_KEY_FAILED_GUIDE_UTIL = \"FAILURE: Unable to validate, g_form is not defined.\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_VALIDATE_ITEMS, MESSAGE_KEY_SUCCESSFUL_VALIDATE, MESSAGE_KEY_FAILED_TO_VALIDATE, MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\n\tfunction onSuccess(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = true;\n\t\tstepResult.message = msg;\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure(msg) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(msg);\n\t\tstepResult.success = false;\n\t\tstepResult.message = msg;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction getGuideUtil() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (testFrameWindow.catalog_util == undefined) {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 5) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(messageMap[MESSAGE_KEY_FAILED_GUIDE_UTIL]);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.catalog_util);\n\t\t\t}\n\t\t}, 100);\n\t\treturn deferred.promise;\t\n\t}\n\t\n\tfunction validateItems(guideUtil) {\n\t\tvar guideStage = 1;\n\t\tvar result = guideUtil.validateIncludedList(step.inputs.catalog_items + '', guideStage);\n\t\tif (result)\n\t\t\tonSuccess(messageMap[MESSAGE_KEY_SUCCESSFUL_VALIDATE]);\n\t\telse\n\t\t\tonFailure(messageMap[MESSAGE_KEY_FAILED_TO_VALIDATE]);\n\t}\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_VALIDATE_ITEMS]);\n\tgetGuideUtil().then(validateItems, onFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"19","active":"true","sys_tags":"","html_description":"<p>Validate items included in the Order Guide</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the order guide and are on the &#39;Choose Options&#39; stage.</span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Validate Order Guide Items (SP)","sys_update_name":"sys_atf_step_config_d7c0d0ef5f9b1300688e1f9f2f7313b7","name":"Validate Order Guide Items (SP)","description_generator":"function generateDescription() {\n    var description = \"Validate that following items are included in the Order Guide: \";\n\n\tif (step.inputs.catalog_items.hasMapping())\n\t\treturn description += step.inputs.catalog_items.getDisplayValue();\n\n\tvar gr = new GlideRecord('sc_cat_item');\n\tgr.addQuery('sys_id', 'IN', step.inputs.catalog_items + '');\n\tgr.query();\n\twhile (gr.next())\n\t\tdescription += gr.name + ', ';\n\treturn description.slice(0, -2);\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-empty-circle color-yellow-light","sys_updated_on":"2023-10-05 23:15:13","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"d8fdf5e10b1022009cfdc71437673adc","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-06-28 21:18:24","sys_name":"UI Action Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4700","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Asserting UI action visibility\",\n\t\t\"Success: UI action '{0}' is visible\",\n\t\t\"Success: UI action '{0}' is not visible\",\n\t\t\"FAILURE: UI action '{0}' is visible\",\n\t\t\"FAILURE: UI action '{0}' is not visible\",\n\t\t\"Successfully asserted the following in '{0}':\",\n\t\t\"Failed while asserting the following in '{0}':\",\n\t\t\"Provide at least one UI action to assert as visible or not visible\"\n\t]);\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Asserting UI action visibility\"]);\n\n\tvar retryCount = step.timeout;\n\tif (isNaN(retryCount))\n\t\tretryCount = 0;\n\n\tvar afse = new ATFFormStepExecutor(step.inputs);\n\tafse.uiActionVisibility(retryCount).then(handleSuccess, handleFailure);\n\t\n\tfunction handleFailure(result) {\n\t\tvar failMessage = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tfailMessage = result;\n\t\telse if (result.message) // Caught exception\n\t\t\tfailMessage = result.message;\n\t\telse // Workspace result\n\t\t\tfailMessage = buildOutput(result.results);\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(failMessage);\n\t\tstepResult.success = false;\n\t\tstepResult.message = failMessage;\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction handleSuccess(result) {\n\t\tvar message = \"\";\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tmessage = result;\n\t\telse // Workspace result\n\t\t\tmessage = buildOutput(result.results);\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstepResult.message = message;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction buildOutput(results) {\n\t\tif (!results)\n\t\t\treturn \"\";\n\n\t\tvar message = \"\";\n\n\t\tresults.forEach(function(result) {\n\t\t\tif (message.length > 0)\n\t\t\t\tmessage += '\\n';\n\n\t\t\tif (result.isVisible && result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"Success: UI action '{0}' is visible\"], result.label);\n\t\t\telse if (!result.isVisible && !result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"Success: UI action '{0}' is not visible\"], result.label);\n\t\t\telse if (result.isVisible && !result.shouldBeVisible)\n\t\t\t\tmessage += formatMessage(messages[\"FAILURE: UI action '{0}' is visible\"], result.label);\n\t\t\telse\n\t\t\t\tmessage += formatMessage(messages[\"FAILURE: UI action '{0}' is not visible\"], result.label);\n\t\t});\n\n\t\treturn message;\n\t}\n\n\t};\t\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"78","active":"true","sys_tags":"","html_description":"<p class=\"p1\"><span class=\"s1\">Validates whether a UI Action is visible on the current form.</span></p>\n<p class=\"p1\"><span class=\"s1\">You can assert that any number of UI Actions are either visible or not visible.</span></p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">The default visible UI Actions can vary depending on the currently impersonated user. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Edit the visible, not visible fields of the form.","sys_update_name":"sys_atf_step_config_d8fdf5e10b1022009cfdc71437673adc","name":"UI Action Visibility","description_generator":"(function generateDescription(step) {\n    var description = \"\";\n\t\n\tif (gs.nil(step.inputs.visible) && gs.nil(step.inputs.not_visible)) {\n\t\tdescription = gs.getMessage(\"This step will do nothing. Please provide at least one UI action to assert as visible or not visible.\");\n\t\treturn description;\n\t}\n\n\tvar isStandardFormUI = !step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\";\n\tif (!isStandardFormUI)\n\t\tdescription = gs.getMessage(\"Assert the following in '{0}':\\n\", step.inputs.form_ui.getDisplayValue());\n\n\tif (!gs.nil(step.inputs.visible)) {\n\t\tdescription += gs.getMessage(\"Confirm that the following UI actions are visible: {0}\", step.inputs.visible.getDisplayValue());\n\t}\n\t\n\tif (!gs.nil(step.inputs.not_visible.getDisplayValue())) {\n\t\tdescription += (description ? (\"\\n\") : \"\") + gs.getMessage(\"Confirm that the following UI actions are not visible: {0}\", step.inputs.not_visible.getDisplayValue());\n\t}\n\t\n\tvar timeoutDescription = new ATFStepDescriptionGenerator().getTimeoutDescription(step.timeout);\n\tdescription += timeoutDescription;\n\n\treturn description;\n})(step);\n\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-04-03 01:54:26","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"d9bc5f21ff6033008d3f5d9ad53bf12d","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-04-01 19:43:48","sys_name":"Create a User","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.CreateUserStepRunner","sys_created_by":"admin","order":"90","step_execution_generator":"","sys_mod_count":"12","active":"true","sys_tags":"","html_description":"<p>Create a user with specified roles and groups. Optionally impersonate the user in the current session for the duration of the test or until another user is impersonated.</p>\n<h4>Additional Considerations</h4>\n<p>The user created will be outputted for use later in the test.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Create a user with specified roles and groups for impersonation.","sys_update_name":"sys_atf_step_config_d9bc5f21ff6033008d3f5d9ad53bf12d","name":"Create a User","description_generator":"(function generateDescription(step) {\n\tvar fieldValues = step.inputs.field_values;\n\tvar firstName = step.inputs.first_name;\n\tvar lastName = step.inputs.last_name;\n\n\tvar description;\n\tif (step.inputs.impersonate)\n\t\tdescription = gs.getMessage(\"Create and impersonate user with the following values:\\n\");\n\telse\n\t\tdescription = gs.getMessage(\"Create user with the following values:\\n\");\n\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tdescription += descriptionGenerator.getUserConditionDescription(fieldValues, firstName, lastName);\n\n\tif (step.inputs.roles.hasMapping())\n\t\tdescription += gs.getMessage(\"\\nWith roles: {0}\", step.inputs.roles.getDisplayValue());\n\telse if (step.inputs.roles != \"\") {\n\t\tvar roleNames = \"\";\n\t\tvar roleIds = step.inputs.roles.split(\",\");\n\t\tvar rolesGR = new GlideRecord(\"sys_user_role\");\n\t\trolesGR.addQuery(\"sys_id\", \"IN\", roleIds);\n\t\trolesGR.query();\n\t\twhile (rolesGR.next()) {\n\t\t\tif (roleNames == \"\")\n\t\t\t\troleNames += rolesGR.getValue(\"name\");\n\t\t\telse\n\t\t\t\troleNames += \", \" + rolesGR.getValue(\"name\");\n\t\t}\n\t\tdescription += gs.getMessage(\"\\nWith roles: {0}\", roleNames);\n\t}\n\n\tif (step.inputs.groups.hasMapping())\n\t\tdescription += gs.getMessage(\"\\nWith groups: {0}\", step.inputs.groups.getDisplayValue());\n\telse if (step.inputs.groups != \"\") {\n\t\tvar groupNames = \"\";\n\t\tvar groupIds = step.inputs.groups.split(\",\");\n\t\tvar groupGR = new GlideRecord(\"sys_user_group\");\n\t\tgroupGR.addQuery(\"sys_id\", \"IN\", groupIds);\n\t\tgroupGR.query();\n\t\twhile (groupGR.next()) {\n\t\t\tif (groupNames == \"\")\n\t\t\t\tgroupNames += groupGR.getValue(\"name\");\n\t\t\telse\n\t\t\t\tgroupNames += \", \" + groupGR.getValue(\"name\");\n\t\t}\n\t\tdescription += gs.getMessage(\"\\nWith groups: {0}\", groupNames);\n\t}\n\n\treturn description;\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/317c4dc20b202200a8d7a12cf6673aa8","value":"317c4dc20b202200a8d7a12cf6673aa8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-04-02 05:15:59","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"def25c4b73730300c79260bdfaf6a700","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-25 21:22:50","sys_name":"Click Component (Custom UI)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1300","step_execution_generator":"(function executeStep(step, stepResult, assertionObject) {\n\tvar MESSAGE_KEY_CLICKING = \"Clicking component\";\n\tvar MESSAGE_KEY_FAILED_NO_G_AUTOMATE = \"FAILURE: Unable to click component, g_automate is not defined\";\n\tvar MESSAGE_KEY_FAILED_NO_DEFAULT_AREA = \"FAILURE: Unable to click component, default area is not defined\";\n\n\tvar MESSAGE_KEY_FAILED_NO_COMPONENT = \"FAILURE: Unable to click component '{0}', component not found\";\n\tvar MESSAGE_KEY_FAILED_NO_CLICK_FUNC = \"FAILURE: Unable to click component '{0}', component does not have 'click' function\";\n\tvar MESSAGE_KEY_FAILED_NO_METHOD = \"FAILURE: Unable to click component '{0}', method with name 'click' was not found\";\n\tvar MESSAGE_KEY_FAILED_ERROR = \"FAILURE: Unable to click component '{0}', error during method call\";\n\tvar MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE = \"FAILURE: Unable to click component '{0}'. Error during method call: {1}\\n{2}\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_CLICKED = \"Successfully clicked component '{0}'\";\n\tvar MESSAGE_KEY_COMPONENT_DISABLED = \"FAILURE: Unable to click component, component is disabled\";\n\t// init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_CLICKING, MESSAGE_KEY_FAILED_NO_G_AUTOMATE, MESSAGE_KEY_FAILED_NO_DEFAULT_AREA, MESSAGE_KEY_FAILED_NO_COMPONENT, MESSAGE_KEY_FAILED_NO_CLICK_FUNC, MESSAGE_KEY_FAILED_NO_METHOD, MESSAGE_KEY_FAILED_ERROR, MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE, MESSAGE_KEY_SUCCESSFULLY_CLICKED, MESSAGE_KEY_COMPONENT_DISABLED]);\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_CLICKING]));\n\n\tvar mugshot = getMugshot(step.inputs.component);\n\tvar mugshotLabel = JSON.parse(mugshot).sn_atf_mugshot_short_description;\n\tvar mugshotLongDesc = JSON.parse(mugshot).sn_atf_mugshot_long_description;\n\n\tvar gAutomate = window.top.g_automate;\n\tif (!gAutomate) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_AUTOMATE]));\n\t\treturn;\n\t}\n\n\tassertionObject.beforeExecuteStep = function() {\n\t\tvar defer = g_ui_testing_util.q().defer();\n\t\tgAutomate.findComponent(mugshot)\n\t\t.then(function(componentObj) {\n\t\t\tvar component = componentObj.component;\n\t\t\tif (!component)\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\n\t\t\tif (!(component instanceof ClickableComponent))\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_CLICK_FUNC], mugshotLongDesc));\n\n\t\t\t// check if the component is disabled\n\t\t\tgAutomate.isDisabled(mugshot)\n\t\t\t.then(function(isDisabled) {\n\t\t\t\tif (isDisabled)\n\t\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_COMPONENT_DISABLED]));\n\n\t\t\t\tdefer.resolve();\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t\t});\n\t\t})\n\t\t.catch(function(error) {\n\t\t\tif (error.message === \"component_not_found\")\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\t\t\telse if (error.message && error.stack)\n\t\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], mugshotLongDesc, error.message, error.stack));\n\n\t\t\treturn defer.reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t});\n\n\t\treturn defer.promise;\n\t};\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\t\tgAutomate.scrollIntoView(mugshot)\n\t\t.then(function() {\n\t\t\tgAutomate.click(mugshot)\n\t\t\t.then(function() {\n\t\t\t\tstepResult.success = true;\n\t\t\t\tstepResult.message = formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_CLICKED], mugshotLabel);\n\t\t\t\treturn step.defer.resolve();\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tswitch (error.message) {\n\t\t\t\t\tcase \"component_not_found\":\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc));\n\t\t\t\t\tcase \"no_click_function\":\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_CLICK_FUNC], mugshotLongDesc));\n\t\t\t\t\tcase \"method_not_supported\":\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_METHOD], mugshotLongDesc));\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tif (error.message && error.stack)\n\t\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], mugshotLongDesc, error.message, error.stack));\n\n\t\t\t\t\t\treturn failStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t};\n\n    // Click action can potentially mutate the page\n\tassertionObject.canMutatePage = step.can_mutate_page;\n\n\tfunction getMugshot(componentHash){\n\t\tvar mugshots = step.mugshots_cache_json ? JSON.parse(step.mugshots_cache_json):{};\n\t\treturn mugshots[componentHash] || componentHash;\n\t}\n\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + reason;\n\t\tstep.defer.reject();\n\t}\n}(step, stepResult, assertionObject));","sys_mod_count":"57","active":"true","sys_tags":"","html_description":"<p>Clicks a component on a custom UI Page</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Clicks a component on a custom UI page","sys_update_name":"sys_atf_step_config_def25c4b73730300c79260bdfaf6a700","name":"Click Component (Custom UI)","description_generator":"function generateDescription() {\n    var mugshotLabel = new ATFCustomUIHelper().getComponentDescriptionFromCache(step.inputs.component, step.mugshots_cache_json);\n\tvar use_label_path = GlideProperties.getBoolean('sn_atf.element.use_label_path', true);\n\tif (use_label_path === true) {\n\t\tvar labelPath = new ATFCustomUIHelper().getComponentLabelPathFromCache(step.inputs.component, step.mugshots_cache_json);\n\t\tif (labelPath)\n\t\t\treturn gs.getMessage(\"ATF_CUSTOM_UI:Click the component: '{0}', Page area: '{1}'\", [mugshotLabel, labelPath]);\n\t}\n\t\n\treturn gs.getMessage(\"Click the component: '{0}'\", mugshotLabel);\n}\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-20 22:13:33","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"e00571a10b3222000b7da95e93673a8f","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-10-31 03:10:23","sys_name":"Send REST Request - Inbound","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.HttpStepRunner","sys_created_by":"admin","order":"1800","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"21","active":"true","sys_tags":"","html_description":"<p>Send a REST request to the current instance. Specify an HTTP method, path, query parameters, request headers and body if needed.</p>\n<h4>Additional Considerations</h4>\n<p>No validation is performed as a part of this step. Please use Assert steps to validate the response.</p>\n<p>You cannot use this step to send a request to another instance or third party/remote address.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Send a REST request to the current instance","sys_update_name":"sys_atf_step_config_e00571a10b3222000b7da95e93673a8f","name":"Send REST Request - Inbound","description_generator":"function generateDescription() {\n\treturn gs.getMessage(\"Send a '{0}' request to '{1}'\", [step.inputs.http_method.toUpperCase(), step.inputs.end_point]);\n}\n generateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document color-yellow","sys_updated_on":"2019-08-15 17:50:43","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"e0e6f84ac3523300eaac11fe81d3ae03","class_type":"java","sys_updated_by":"admin","sys_created_on":"2019-06-28 20:16:13","sys_name":"Generate Inbound Email","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_framework.runner.step.GenerateInboundEmailRunner","sys_created_by":"admin","order":"2700","step_execution_generator":"// The inputs are a map of the variables defined in the inputs related list below.\n// Inputs are consumed in the step configuration. Input\n// values may be hardcoded or mapped from the outputs of a previous step.\n// If a test author using your step uses mapping to pass in an output from a previous \n// test step then when referencing the input variable the mapping will be resolved \n// automatically\n//  Example:\n//      var myRecords = new GlideRecord(inputs.table);\n//\n// The outputs are a map of the variables defined in the outputs related list.\n// Outputs should be set (assigned) in order to pass data out of a test step that\n// can be consumed my mapping as an input to subsequent steps. \n//  Example:\n//      outputs.table = gr.getRecordClassName()\n//\n//\n// Note that inputs and outputs are strongly typed as defined in their variable definition.\n// Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n// The stepResult is a simple API for controlling the step pass/fail and logging with three\n// methods:\n//      stepResult.setFailed: Causes step to fail\n//\n//      stepResult.setSuccess: Causes step to succeed\n//\n//      stepResult.setOutputMessage: Log a message to step results after step executes.\n//            Can only be called once or will overwrite previous \n//            message\n//\n// If neither setFailed or setSuccess is called the default is to succeed.\n//\n// See 'Record Query' for an example of a scripted step config \n// or see test 'Check change approvals get generated'\n//\n// Example usage of step timeout in script\n//      var counter = 0;\n//      // 'timeout' is a field on the step form\n//      while (counter <= timeout) {\n//            if (desiredOutcome) {\n//                stepResult.setOutputMessage('Success!');\n//                stepResult.setSuccess();\n//                return;\n//            }\n//            counter++;\n//            gs.sleep(1000);\n//      }\n//\n//      // desired outcome did not occur within the timeout\n//      stepResult.setOutputMessage('Failure!');\n//      stepResult.setFailed();\n//\n(function executeStep(inputs, outputs, stepResult, timeout) {\n\n}(inputs, outputs, stepResult, timeout));\n","sys_mod_count":"8","active":"true","sys_tags":"","html_description":"<p>Generates an Email [sys_email] record that looks like a new inbound email. This step also creates an email.read event upon step completion.</p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Generate an inbound email.","sys_update_name":"sys_atf_step_config_e0e6f84ac3523300eaac11fe81d3ae03","name":"Generate Inbound Email","description_generator":"(function generateDescription(step) {\n\tvar description = gs.getMessage(\"Generated an email with subject: {0}\", step.inputs.subject.getDisplayValue());\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/876bc893c3033300eaac11fe81d3ae6b","value":"876bc893c3033300eaac11fe81d3ae6b"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-09-08 18:14:10","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"e5dd168473330300c79260bdfaf6a794","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-16 23:44:19","sys_name":"Set Component Values (Custom UI)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar MESSAGE_KEY_SETTING = \"Setting values\";\n\tvar MESSAGE_KEY_FAILED_NO_G_AUTOMATE = \"FAILURE: Unable to set values, g_automate is not defined\";\n\tvar MESSAGE_KEY_FAILED_NO_COMPONENT = \"FAILURE: Unable to set component '{0}' to value '{1}', component not found\";\n\tvar MESSAGE_KEY_FAILED_NO_METHOD = \"FAILURE: Unable to set component '{0}' to value '{1}', method with name 'setValue' was not found\";\n\tvar MESSAGE_KEY_FAILED_READ_ONLY = \"FAILURE: Unable to set component '{0}' to value '{1}', it is read only\";\n\tvar MESSAGE_KEY_FAILED_J_QUERY_MISSING = \"FAILURE: Unable to set component '{0}' to value '{1}', unable to locate jQuery on the page\";\n\tvar MESSAGE_KEY_FAILED_VALUE_NOT_FOUND = \"FAILURE: Unable to set component '{0}' to value '{1}', value or option not found\";\n\tvar MESSAGE_KEY_FAILED_SELECT2_DROPDOWN_NOT_FOUND = \"FAILURE: Unable to set the component '{0}' to value '{1}', the options dropdown did not appear\";\n\tvar MESSAGE_KEY_FAILED_ERROR = \"FAILURE: Unable to set component '{0}' to value '{1}', error during method call\";\n\tvar MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE = \"FAILURE: Unable to set component '{0}' to value '{1}'. Error during method call: {2}\\n{3}\";\n\tvar MESSAGE_KEY_SUCCESSFULLY_SET = \"Successfully set component '{0}' to value '{1}'\";\n\t// init message map\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SETTING, MESSAGE_KEY_FAILED_NO_G_AUTOMATE, MESSAGE_KEY_FAILED_NO_COMPONENT, MESSAGE_KEY_FAILED_NO_METHOD, MESSAGE_KEY_FAILED_READ_ONLY, MESSAGE_KEY_FAILED_J_QUERY_MISSING, MESSAGE_KEY_FAILED_VALUE_NOT_FOUND, MESSAGE_KEY_FAILED_SELECT2_DROPDOWN_NOT_FOUND, MESSAGE_KEY_FAILED_ERROR, MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE, MESSAGE_KEY_SUCCESSFULLY_SET]);\n\tg_ui_testing_util.setTestStepStatusMessage(formatMessage(messageMap[MESSAGE_KEY_SETTING]));\n\n\tvar gAutomate = window.top.g_automate;\n\tif (!gAutomate) {\n\t\tfailStep(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_G_AUTOMATE]));\n\t\treturn;\n\t}\n\n\tfunction getMugshot(componentHash){\n\t\tvar mugshots = step.mugshots_cache_json ? JSON.parse(step.mugshots_cache_json):{};\n\t\treturn mugshots[componentHash] || componentHash;\n\t}\n\n\tassertionObject.beforeExecuteStep = function () {\n\t\tvar terms = parseEncodedQuery();\n\t\t// see: https://stackoverflow.com/a/38003741\n\t\t// TODO: Promise.resolve() isn't supported on IE. Use defer? or polyfill?\n\t\treturn terms.reduce(function(prev, curr, i, arr) {\n\t\t\treturn prev.then(function() {\n\t\t\t\treturn checkComponentExists(arr[i]);\n\t\t\t});\n\t\t}, Promise.resolve());\n\t};\n\n\tfunction checkComponentExists(term) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar mugshotHash = term['mugshotHash'];\n\t\t\tvar mugshot = getMugshot(mugshotHash);\n\t\t\tvar componentLongDesc = JSON.parse(mugshot).sn_atf_mugshot_long_description;\n\t\t\tvar value = term['value'];\n\t\t\tgAutomate.findComponent(mugshot)\n\t\t\t.then(function(componentObj) {\n\t\t\t\tvar component = componentObj.component;\n\t\t\t\tif (!component)\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc, value));\n\t\t\t\telse if (!(component instanceof SettableComponent))\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc, value));\n\t\t\t\telse\n\t\t\t\t\tresolve();\n\t\t\t})\n\t\t\t.catch(function(error) {\n\t\t\t\tif (error.message === \"component_not_found\")\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], componentLongDesc, value));\n\t\t\t\telse if (error.message && error.stack)\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], componentLongDesc, value, error.message, error.stack));\n\t\t\t\telse\n\t\t\t\t\treject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], componentLongDesc, value));\n\t\t\t});\n\t\t});\n\t}\n\n\tassertionObject.executeStep = function () {\n\t\tvar terms = parseEncodedQuery();\n\t\treturn terms.reduce(function(prev, curr, i, arr) {\n\t\t\treturn prev.then(function() {\n\t\t\t\treturn setComponentValue(arr[i]);\n\t\t\t});\n\t\t}, Promise.resolve())\n\t\t.then(passStep, failStep);\n\t};\n\n\tfunction setComponentValue(term) {\n\t\treturn new Promise(function(resolve, reject) {\n\t\t\tvar mugshotHash = term['mugshotHash'];\n\t\t\tvar mugshot = getMugshot(mugshotHash);\n\t\t\tvar mugshotObj = JSON.parse(mugshot);\n\t\t\tvar mugshotLabel = mugshotObj.sn_atf_mugshot_short_description;\n\t\t\tvar mugshotLongDesc = mugshotObj.sn_atf_mugshot_long_description;\n\t\t\tvar value = term['value'];\n\n\t\t\t// GEM pills dropped in a checkbox resolve to \"0\"/\"1\", but g_automate expects \"true\"/\"false\"\n\t\t\tif (mugshotObj[\"type\"] === \"checkbox\") {\n\t\t\t\tif (value === \"1\")\n\t\t\t\t\tvalue = \"true\";\n\n\t\t\t\tif (value === \"0\")\n\t\t\t\t\tvalue = \"false\";\n\t\t\t}\n\n\t\t\tgAutomate.scrollIntoView(mugshot)\n\t\t\t.then(function() {\n\t\t\t\tgAutomate.setValue(mugshot, value)\n\t\t\t\t.then(function() {\n\t\t\t\t\tupdateSetValueStepResultMessage(formatMessage(messageMap[MESSAGE_KEY_SUCCESSFULLY_SET], mugshotLabel, value));\n\t\t\t\t\treturn resolve();\n\t\t\t\t})\n\t\t\t\t.catch(function(error) {\n\t\t\t\t\tswitch (error.message) {\n\t\t\t\t\t\tcase \"component_not_found\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_COMPONENT], mugshotLongDesc, value));\n\t\t\t\t\t\tcase \"method_not_supported\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_NO_METHOD], mugshotLongDesc, value));\n\t\t\t\t\t\tcase \"component_read_only\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_READ_ONLY], mugshotLongDesc, value));\n\t\t\t\t\t\tcase \"j_query_missing\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_J_QUERY_MISSING], mugshotLongDesc, value));\n\t\t\t\t\t\tcase \"cannot_find_value\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_VALUE_NOT_FOUND], mugshotLongDesc, value));\n\t\t\t\t\t\tcase \"select2_dropdown_missing\":\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_SELECT2_DROPDOWN_NOT_FOUND], mugshotLongDesc, value));\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tif (error.message && error.stack)\n\t\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR_WITH_MESSAGE], mugshotLongDesc, value, error.message, error.stack));\n\n\t\t\t\t\t\t\treturn reject(formatMessage(messageMap[MESSAGE_KEY_FAILED_ERROR], mugshotLongDesc, value));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction updateSetValueStepResultMessage(message) {\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + message;\n\t}\n\n\tfunction passStep() {\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(reason) {\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstepResult.message += (stepResult.message ? (\"\\n\") : \"\") + reason;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction parseEncodedQuery() {\n\t\tvar values = step.inputs.component_values.split('^');\n\t\tvar terms = [];\n\t\tfor (var i = 0; i < values.length - 1; i += 1) {\n\t\t\tvar value = values[i];\n\t\t\t// the \"value\" is structured as \"<hash>=<hashValue>\", so split on the \"=\" to extract the hash and hashValues\n\t\t\tvar hash = value.slice(0, value.indexOf('='));\n\t\t\tvar hashValue = value.slice(value.indexOf('=') + 1);\n\t\t\tterms.push({mugshotHash: hash, value: hashValue});\n\t\t}\n\n\t\treturn terms;\n\t}\n\n\tassertionObject.canMutatePage = step.can_mutate_page;\n\n}(step, stepResult, assertionObject));","sys_mod_count":"37","active":"true","sys_tags":"","html_description":"<p>Sets component values on a custom UI page</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Sets component values on a custom UI page","sys_update_name":"sys_atf_step_config_e5dd168473330300c79260bdfaf6a794","name":"Set Component Values (Custom UI)","description_generator":"function generateDescription() {\n\tvar conditions = new ATFCustomUIHelper().getQueryStringMugshotDescription(step.inputs.component_values, step.mugshots_cache_json);\n\tvar conditionsWithLabelPath = new ATFCustomUIHelper().getQueryStringMugshotDescriptionWithLabelPath(step.inputs.component_values, step.mugshots_cache_json);\n\tvar use_label_path = GlideProperties.getBoolean('sn_atf.element.use_label_path', true);\n\tif (use_label_path === true && conditionsWithLabelPath)\n\t\treturn gs.getMessage(\"Set the components on the page as follows:\\n{0}\", conditionsWithLabelPath);\n\n\treturn gs.getMessage(\"Set the components on the page as follows:\\n{0}\", conditions);\n}\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-09-07 10:01:39","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/6c2bcea1870312009dccc9ded0e3ecca","value":"6c2bcea1870312009dccc9ded0e3ecca"},"wizard_redirect":"","sys_id":"e6b32c570b10230083332dc3b6673a14","class_type":"java","sys_updated_by":"admin","sys_created_on":"2018-09-07 10:01:39","sys_name":"Report Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.report.ReportVisibilityStepRunner","sys_created_by":"admin","order":"920","step_execution_generator":"","sys_mod_count":"0","active":"true","sys_tags":"","html_description":"<p>Confirm a report can or cannot be viewed by the test user</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/93fb23b704352210559073c06a02f795","value":"93fb23b704352210559073c06a02f795"},"template_reminder":"Assert a report can or cannot be viewed.","sys_update_name":"sys_atf_step_config_e6b32c570b10230083332dc3b6673a14","name":"Report Visibility","description_generator":"(function generateDescription(step) {\n\tvar assertType = step.inputs.assert_type;\n\tvar assertCanView = (assertType == 'can_view_report');\n\t\n\tif (assertCanView)\n\t\treturn gs.getMessage(\"Confirm report '{0}' can be viewed by the test user\",\n\t\t\t\t\t\t\t step.inputs.report_id.getDisplayValue());\n\telse\n\t\treturn gs.getMessage(\"Confirm report '{0}' cannot be viewed by the test user\",\n\t\t\t\t\t\t\t step.inputs.report_id.getDisplayValue());\n})(step);","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/fff36c570b10230083332dc3b6673a84","value":"fff36c570b10230083332dc3b6673a84"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-11-08 19:35:23","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"e81f02dc73e703008e6b0d573cf6a76f","class_type":"script","sys_updated_by":"admin","sys_created_on":"2018-01-05 06:57:51","sys_name":"Open a Catalog Item (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1200","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = \"Successfully opened Catalog Item page\";\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = \"FAILURE: Failed to open Catalog Item page\";\n\tvar MESSAGE_KEY_FAILED_TO_LOAD_GFORM = \"FAILURE: Failed to open Catalog Item. Either you don't have access to the Catalog Item or g_form is not defined\";\n\tvar MESSAGE_KEY_OPENING = \"Opening Catalog Item\";\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SUCCESSFULY_OPENED, MESSAGE_KEY_FAILED_TO_OPEN, MESSAGE_KEY_FAILED_TO_LOAD_GFORM, MESSAGE_KEY_OPENING]);\n\t\n\tfunction onSuccess() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED]);\n\t\tstepResult.success = true;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_SUCCESSFULY_OPENED];\n\t\tstep.defer.resolve();\n\t}\n\t\n\tfunction onFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_OPEN]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_OPEN];\n\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction onGFormFailure() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM]);\n\t\tstepResult.success = false;\n\t\tstepResult.message = messageMap[MESSAGE_KEY_FAILED_TO_LOAD_GFORM];\n\t\t\n\t\tstep.defer.reject();\n\t}\n\t\n\tfunction gFormLoaded() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.g_form === 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= 10) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject();\n\t\t\t\t}\n\t\t\t\t\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve();\n\t\t\t}\n\t\t}, 2000);\n\t\treturn deferred.promise;\n\t}\n\tstep.timeout = step.timeout || 30;\n\tvar wait_timeout = step.timeout * 1000;\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\tquery_params.sys_id = step.inputs.catalog_item;\n\t\n\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_OPENING]);\n\t\n\tg_ui_testing_util.openPortalPage(step.inputs.portal.url_suffix, step.inputs.page.id, query_params, wait_timeout)\n\t\t.then(function(){\n\t\t\tgFormLoaded().then(onSuccess, onGFormFailure);\n\t\t},\n\t\tonFailure);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"36","active":"true","sys_tags":"","html_description":"<p>Opens a catalog item in portal</p>\n<h4>Additional Considerations</h4>\n<p class=\"p1\"><span class=\"s1\">This step can only be done for users that have access to the item.</span></p>\n<p class=\"p1\"><span class=\"s1\">URL parameters can be added to the request when needed. </span></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f51c6bb704352210559073c06a02f77b","value":"f51c6bb704352210559073c06a02f77b"},"template_reminder":"Open a Catalog Item (SP)","sys_update_name":"sys_atf_step_config_e81f02dc73e703008e6b0d573cf6a76f","name":"Open a Catalog Item (SP)","description_generator":"function generateDescription() {\n  \tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\t\n\tvar itemName = step.inputs.catalog_item.getDisplayValue();\n\tvar portalName = step.inputs.portal_id.getDisplayValue();\n\t\n    var description = 'Open Catalog Item.';\n\t\n\tif(itemName && portalName) {\n\t\tdescription = 'Open \"' + itemName + '\" in the \"' + portalName.trim() + '\" portal';\n\t}\n\t\n\tvar qp_str = '';\n\t\n\tfor(var p in query_params) {\n\t\tif(query_params.hasOwnProperty(p)) {\n\t\t\tqp_str += p + \" = \" + query_params[p] + \"\\n\";\n\t\t}\n\t}\n\t\n\tif(qp_str !== '') {\n\t\tdescription += \" with the following query params:\\n\" + qp_str;\n\t}\n\treturn description;\n}\ngenerateDescription();\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/01245d698713030070870cf888cb0bfb","value":"01245d698713030070870cf888cb0bfb"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2018-08-13 18:51:12","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"ed59d8e5c332220076173b0ac3d3ae6a","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-10-30 20:31:15","sys_name":"Submit Record Producer","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"8400","step_execution_generator":"\n\t(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_SUBMIT_PRODUCER = \"Performing 'Submit producer' action\";\n\tvar MESSAGE_KEY_CANNOT_SUBMIT = \"FAILURE: Record producer is not open. See screenshot\";\n\tvar MESSAGE_KEY_PASS_CANNOT_SUBMIT = \"SUCCESS: Cannot submit producer\";\n\tvar MESSAGE_KEY_FAIL_CAN_SUBMIT = \"FAILURE: Can successfully submit producer\";\n\tvar MESSAGE_KEY_FAIL_CANNOT_SUBMIT = \"FAILURE: Cannot submit producer\";\n\tvar MESSAGE_KEY_CHECKING_SUBMIT_STATE = \"Checking if record producer submit was successful\";\n\tvar MESSAGE_KEY_SUCCESSFUL_SUBMIT = \"SUCCESS: Record producer submitted successfully\";\n\tvar MESSAGE_KEY_FAILED_SUBMIT_USING_ACTION = \"FAILURE: Target record was not generated. Record producer submission was unsuccessful\";\n\tvar MESSAGE_KEY_FORM_NOT_FOUND = \"FAILURE: Glide Form was not present\";\n\tvar MESSAGE_KEY_FAIL_ACTION_ELEMENT = \"FAILURE: Cannot find 'Submit' button\";\n\tvar MESSAGE_KEY_UNKNOWN_ASSERT_TYPE = \"FAILURE: Assert type cannot be empty\";\n\t\n\t\n\tvar messageMap = new GwtMessage().getMessages([MESSAGE_KEY_SUBMIT_PRODUCER, MESSAGE_KEY_CANNOT_SUBMIT, MESSAGE_KEY_PASS_CANNOT_SUBMIT, MESSAGE_KEY_CHECKING_SUBMIT_STATE, MESSAGE_KEY_SUCCESSFUL_SUBMIT, MESSAGE_KEY_FAILED_SUBMIT_USING_ACTION, MESSAGE_KEY_FORM_NOT_FOUND, MESSAGE_KEY_FAIL_ACTION_ELEMENT, MESSAGE_KEY_FAIL_CANNOT_SUBMIT, MESSAGE_KEY_UNKNOWN_ASSERT_TYPE, MESSAGE_KEY_FAIL_CAN_SUBMIT]);\n\t\n\tvar buttonId = \"submit_button\";\n\n\t// set initial status message\n    g_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_SUBMIT_PRODUCER]);\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\tif (typeof(testFrameWindow.gel) == 'undefined') {\n        message = messageMap[MESSAGE_KEY_CANNOT_SUBMIT];\n        g_ui_testing_util.setTestStepStatusMessage(message);\n        stepResult.success = false;\n        stepResult.message = message;\n        step.defer.reject();\n        return;\n    }\n\t\n\tfunction checkSuccessfulSubmit() {\n\t\tg_ui_testing_util.clearTestIFrameOnloadFunction();\n\t\t//page reloaded, go to server to see if form actually got submitted\n\t\tg_ui_testing_util.setTestStepStatusMessage(messageMap[MESSAGE_KEY_CHECKING_SUBMIT_STATE]);\n\t\tvar ga = new GlideAjax(\"CatalogATFAjax\");\n\t\tga.addParam(\"sysparm_name\", \"checkTargetRecordGeneration\");\n\t\tga.addParam(\"item_guid\", targetRecordId);\n\t\tga.addParam(\"item_id\", catalog_item_id);\n\t\tga.getXMLWait();\n\t\tvar successfulSubmit = ga.getAnswer() + '';\n\t\tif (successfulSubmit == \"true\") {\n\t\t\tmessage = messageMap[MESSAGE_KEY_SUCCESSFUL_SUBMIT];\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t} else {\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAILED_SUBMIT_USING_ACTION];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t}\n\n\t//Step is expected to load to target record\n\tif (step.inputs.assert_type == \"form_submitted_to_server\")\n\t\tg_ui_testing_util.setTestIFrameOnloadFunction(checkSuccessfulSubmit);\n\n\tvar g_form = g_ui_testing_util.getTestIFrameGForm();\n\tif (!g_form) {\n\t\tmessage = messageMap[MESSAGE_KEY_FORM_NOT_FOUND];\n\t\tstepResult.success = false;\n\t\tstepResult.message = message;\n\t\tstep.defer.reject();\n\t\treturn;\n\t}\n\tvar targetRecordId = testFrameWindow.g_form.getParameter(\"sysparm_item_guid\");\n\tvar catalog_item_id = testFrameWindow.g_form.getParameter(\"sysparm_id\");\n\n\tif (!testFrameWindow.g_form.catalogOnSubmit()) {\n\t\tg_ui_testing_util.clearTestIFrameOnloadFunction();\n\t\tif (step.inputs.assert_type === 'form_submission_cancelled_in_browser') {\n\t\t\t// we expected the form submission to fail and it did. So step PASSED\n\t\t\tmessage = messageMap[MESSAGE_KEY_PASS_CANNOT_SUBMIT];\n\t\t\tstepResult.success = true;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.resolve();\n\t\t\treturn;\n\t\t} else if (step.inputs.assert_type === 'form_submitted_to_server') {\n\t\t\t// we expected the form to submit successfully but it did not. Step FAILED\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAIL_CANNOT_SUBMIT];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t} else {\n\t\t\t//Assert type none means successful form submission\n\t\t\tmessage = messageMap[MESSAGE_KEY_UNKNOWN_ASSERT_TYPE];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tif (step.inputs.assert_type === 'form_submission_cancelled_in_browser') {\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAIL_CAN_SUBMIT];\n\t\t\tstepResult.message = message;\n\t\t\tstepResult.success = false;\n\t\t\tstep.defer.reject();\n\t\t\treturn;\n\t\t}\n\t\tvar actionElement = testFrameWindow.gel(buttonId);\n\t\tif (actionElement && actionElement.onclick) {\n\t\t\tstepResult.outputs.record_id = targetRecordId;\n\t\t\tactionElement.onclick();\n\t\t} else {\n\t\t\tmessage = messageMap[MESSAGE_KEY_FAIL_ACTION_ELEMENT];\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = message;\n\t\t\tstep.defer.reject();\n\t\t}\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"26","active":"true","sys_tags":"","html_description":"<p>Submit currently opened <code>Record Producer</code></p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a Record Producer page using the “Open a Record Producer” step. After this step, you may no longer use any form steps on the currently opened record producer as this step will close it.</p>\n<p> </p>\n<p> </p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/2d1c6bb704352210559073c06a02f700","value":"2d1c6bb704352210559073c06a02f700"},"template_reminder":"Submit a Record Producer","sys_update_name":"sys_atf_step_config_ed59d8e5c332220076173b0ac3d3ae6a","name":"Submit Record Producer","description_generator":"function generateDescription(step) {\n    // the global variable 'step' represents the current glide record\n    var description = \"\";\n\tif (step.inputs.assert_type == 'form_submitted_to_server')\n\t\tdescription = gs.getMessage(\"Submit the Record Producer and confirm submission to server\");\n\telse if  (step.inputs.assert_type == 'form_submission_cancelled_in_browser')\n\t\tdescription = gs.getMessage(\"Submit the Record Producer and confirm submission canceled in browser\");\n\treturn description;\n}\n generateDescription(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1d786c87c3b6220076173b0ac3d3ae16","value":"1d786c87c3b6220076173b0ac3d3ae16"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-11 01:15:53","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"f100f7079f132200ef4afa7dc67fcf42","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-30 00:26:05","sys_name":"Assert Response JSON Payload Is Valid","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertWellFormedPayloadJSONStepRunner","sys_created_by":"admin","order":"6400","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"1","active":"true","sys_tags":"","html_description":"<p>Assert the JSON response payload is valid.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the JSON response payload is valid","sys_update_name":"sys_atf_step_config_f100f7079f132200ef4afa7dc67fcf42","name":"Assert Response JSON Payload Is Valid","description_generator":"function generateDescription() {\t\n\treturn gs.getMessage(\"Assert a JSON response payload is valid\");\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2020-06-29 13:08:39","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"f410c93423220300ab65ff5e17bf651e","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-11-17 21:46:39","sys_name":"Submit a Form (SP)","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"7500","step_execution_generator":"(function (step, stepResult, assertionObject) {\n  assertionObject.executeStep = function(step, stepResult) {\n\tvar FAILED_NO_G_FORM = \"FAILURE: Unable to submit form, g_form is not defined. A valid form must be open before setting values\";\n\tvar FAILED_BROWSER_BLOCK_SUBMIT = \"FAILURE: Browser blocked submission of '{0}' form to server\";\n\tvar FAILED_SUBMIT = \"FAILURE: {0} Form Submission Failed\";\n\tvar FAILED_SUBMIT_2 = \"FAILURE: {0} Form Submission Failed using sys_id {1}\";\n\tvar SUCCESS_SUBMIT = \"Successfully submitted '{0}' form for record with sys_id '{1}'\";\n\tvar SUCCESS_SUBMIT_2 = \"Successfully submitted '{0}' form\";\n\tvar SUCCESS_CONFIRM_BROWSER_BLOCK = \"Successfully confirmed that browser blocks submission of '{0}' form to server\";\n\tvar CHECKING_SUBMIT_STATE = \"Checking if form submit was successful\";\n\t\n\tvar map = new GwtMessage().getMessages([FAILED_NO_G_FORM, FAILED_BROWSER_BLOCK_SUBMIT, FAILED_SUBMIT, FAILED_SUBMIT_2, SUCCESS_SUBMIT, SUCCESS_SUBMIT_2, SUCCESS_CONFIRM_BROWSER_BLOCK, CHECKING_SUBMIT_STATE]);\n\n\tfunction message(msg) {\n\t\treturn g_ui_testing_util.setTestStepStatusMessage(msg);\n\t}\n\n\tfunction onError(msg) {\n\t\tmessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction onSuccess(msg) {\n\t\tmessage(msg);\n\t\tstepResult.message = msg;\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tvar testFrameWindow = g_ui_testing_util.getTestIFrameWindow();\n\n\tfunction getForm() {\n\t\tvar $q = g_ui_testing_util.q();\n\t\tvar deferred = $q.defer();\n\t\tvar count = 0;\n\t\tstep.timeout = step.timeout || 5;\n\t\tvar interval = setInterval(function() {\n\t\t\tif (typeof testFrameWindow.g_form == 'undefined') {\n\t\t\t\tcount++;\n\t\t\t\tif (count >= step.timeout) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdeferred.reject(FAILED_NO_G_FORM);\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tdeferred.resolve(testFrameWindow.g_form);\t\n\t\t\t}\n\t\t}, 1000);\n\t\treturn deferred.promise;\t\n\t}\n\n\tfunction checkRecord(table, sysId) {\n\t\tvar gr = new GlideRecord(table);\n\t\tvar success = gr.get(sysId);\n\t\tif (success) {\n\t\t\tstepResult.outputs.record_id = sysId;\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tfunction hasValidationScriptState(testFrameWindow) {\n\t\treturn testFrameWindow.NOW.validationScriptState && Object.keys(testFrameWindow.NOW.validationScriptState).length > 0;\n\t}\n\t\n\tfunction checkFormValidation(form, sysId, errors, responseSysId) {\n\t\tvar table = form.getTableName();\n\t\tvar assertType = step.inputs.assert_type;\n\t\tstepResult.outputs.table = table;\n\t\tstepResult.outputs.record_id = sysId;\n\t\tvar formNotSubmittedByValidators = !hasValidationScriptState(testFrameWindow);\n\t\tif (!errors && !formNotSubmittedByValidators)\n\t\t\terrors = checkRecord(table, responseSysId);\n\n\t\tif (assertType === \"form_submission_canceled_in_browser\") {\n\t\t\tif (errors) {\n\t\t\t\tonSuccess(formatMessage(map[SUCCESS_CONFIRM_BROWSER_BLOCK], table));\n\t\t\t} else {\n\t\t\t\tonError(formatMessage(map[FAILED_BROWSER_BLOCK_SUBMIT], table));\n\t\t\t}\n\t\t} else if (assertType === \"form_submitted_to_server\") {\n\t\t\tif (errors) {\n\t\t\t\tonError(formatMessage(map[FAILED_BROWSER_BLOCK_SUBMIT], table));\n\t\t\t} else {\n\t\t\t\tif (formNotSubmittedByValidators)\n\t\t\t\t\tsubmit(table, sysId);\n\t\t\t\telse\n\t\t\t\t\tonSuccess(formatMessage(map[SUCCESS_SUBMIT], table));\n\t\t\t}\n\t\t} else {\n\t\t\tif (!errors)\n\t\t\t\ttestFrameWindow.g_form.atfSubmit(sysId);\n\t\t\tonSuccess(formatMessage(map[SUCCESS_SUBMIT_2], table));\n\t\t}\n\t}\n\n\tfunction assert(form) {\n\t\tvar sysId = form.getSysId();\n\t\tvar actionName = sysId.length > 2 ? 'sysverb_update' : 'sysverb_insert';\n\t\tform.$private.userState.setRunningAction(actionName);\n\t\tvar errors = !form.$private.validateForm(actionName);\n\t\tvar table = form.getTableName();\n\t\tif (hasValidationScriptState(testFrameWindow)) {\n\t\t\tform.$private.events.on('propertyChange', function(type, fieldName, propertyName, propertyValue) {\n\t\t\t\tif (propertyName == \"errorMessage\")\n\t\t\t\t\tcheckFormValidation(form, sysId, true);\n\t\t\t});\n\t\t\tform.$rootScope.$on('sp.form.submitted', function(e, status) {\n\t\t\t\t\tcheckFormValidation(form, sysId, false, status.sys_id);\n\t\t\t});\n\t\t} else\n\t\t\tcheckFormValidation(form, sysId, errors);\n\t}\n\n\tfunction submit(table, sysId) {\n\t\treturn testFrameWindow.g_form.atfSubmit(sysId).then(function(status) {\t\n\t\t\tmessage(map[CHECKING_SUBMIT_STATE]);\t\t\t\n\t\t\tvar gr = new GlideRecord(table);\n\t\t\tvar success = gr.get(status.sys_id);\n\t\t\tif (success) {\n\t\t\t\tstepResult.outputs.record_id = status.sys_id;\n\t\t\t\tonSuccess(formatMessage(map[SUCCESS_SUBMIT], table, status.sys_id));\n\t\t\t} else {\n\t\t\t\tif (status.sys_id > -1) {\n\t\t\t\t\t onError(formatMessage(map[FAILED_SUBMIT_2], table, status.sys_id));\n\t\t\t\t} else {\n\t\t\t\t\tonError(formatMessage(map[FAILED_SUBMIT], table));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\t\n\tgetForm().then(assert, onError);\n\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);","sys_mod_count":"153","active":"true","sys_tags":"","html_description":"<p class=\"\"> Submits the current form on a Service Portal page.</p>\n<h4>Additional Considerations</h4>\n<p>In order to use this step you must have already opened a page using &#34;Open a Page (SP)&#34; step. After this step, you may no longer use any test steps on the currently opened form as this step will close it.</p>\n<p>Outputs the table and sys_id of the submitted record.</p>\n<p><br /></p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/39996b7b04f12210559073c06a02f7f3","value":"39996b7b04f12210559073c06a02f7f3"},"template_reminder":"Submits the current form.","sys_update_name":"sys_atf_step_config_f410c93423220300ab65ff5e17bf651e","name":"Submit a Form (SP)","description_generator":"(function generateDescription(step) {\t\n\tif (step.inputs.assert_type == \"form_submitted_to_server\") {\n\t\treturn gs.getMessage(\"Submit the current form and confirm form submitted to server\");\n\t} else if (step.inputs.assert_type == \"form_submission_canceled_in_browser\") {\n\t\treturn gs.getMessage(\"Submit the current form and confirm form submission canceled in browser\");\n\t} else {\n\t\treturn gs.getMessage(\"Submit the current form\");\n\t}\n})(step);\n","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/1bd1c141e7020300b2888f49c2f6a9b0","value":"1bd1c141e7020300b2888f49c2f6a9b0"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2017-03-11 01:16:10","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/1a49153a53322200b8a6c2e5dec5872a","value":"1a49153a53322200b8a6c2e5dec5872a"},"wizard_redirect":"","sys_id":"f530dcd59f132200ef4afa7dc67fcf03","class_type":"java","sys_updated_by":"admin","sys_created_on":"2016-11-23 21:38:51","sys_name":"Assert Response XML Payload Is Well-Formed","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"com.glide.automated_testing_impl.http.asserts.HTTPAssertWellFormedPayloadXMLStepRunner","sys_created_by":"admin","order":"6500","step_execution_generator":"//The inputs are a map of the variables defined in the inputs related list below.\n//Inputs are consumed in the step configuration. Input\n//values may be hardcoded or mapped from the outputs of a previous step.\n//If a test author using your step uses mapping to pass in an output from a previous \n//test step then when referencing the input variable the mapping will be resolved \n//automatically\n// Example:\n//  var myRecords = new GlideRecord(inputs.table);\n//\n//The outputs are a map of the variables defined in the outputs related list.\n//Outputs should be set (assigned) in order to pass data out of a test step that\n//can be consumed my mapping as an input to subsequent steps. \n// Example:\n//  outputs.table = gr.getRecordClassName()\n//\n//\n//Note that inputs and outputs are strongly typed as defined in their variable definition.\n//Their behavior is the same as a dictionary defined field of the same type in a table.\n//\n//The stepResult is a simple API for controlling the step pass/fail and logging with three\n//methods:\n// stepResult.setFailed: Causes step to fail\n//\n// stepResult.setSuccess: Causes step to succeed\n//\n// stepResult.setOutputMessage: Log a message to step results after step executes.\n//         Can only be called once or will overwrite previous \n//         message\n//\n//If neither setFailed or setSuccess is called the default is to succeed.\n//\n//See 'Record Query' for an example of a scripted step config \n//and 'Check change approvals get generated' \n//\n(function executeStep(inputs, outputs, stepResult) {\n\n}(inputs, outputs, stepResult));\n","sys_mod_count":"3","active":"true","sys_tags":"","html_description":"<p>Assert the XML response payload is a well-formed.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6989e37b04f12210559073c06a02f7bb","value":"6989e37b04f12210559073c06a02f7bb"},"template_reminder":"Assert the XML response payload is well-formed","sys_update_name":"sys_atf_step_config_f530dcd59f132200ef4afa7dc67fcf03","name":"Assert Response XML Payload Is Well-Formed","description_generator":"function generateDescription() {\t\n\treturn gs.getMessage(\"Assert an XML response payload is well-formed\");\n}\n generateDescription();\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/4e9228749fc72200ef4afa7dc67fcff8","value":"4e9228749fc72200ef4afa7dc67fcff8"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"false","batch_order_constraint":"start","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2021-11-09 22:28:55","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"f7cfc1973702030064a52f3c8e41f1d3","class_type":"script","sys_updated_by":"admin","sys_created_on":"2017-10-31 20:40:25","sys_name":"Module Visibility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"9000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_RUNNING_MODULE_VISIBILITY = \"Verifying module visibility\";\n\tvar MESSAGE_KEY_INVALID_ASSERT_TYPE = \"Invalid assert type {0}\";\n\tvar SUCCESS_MSG_MODULES_VISIBLE = \"Successfully validated that the following modules were visible: {0}\";\n\tvar SUCCESS_MSG_MODULES_NOT_VISIBLE = \"Successfully validated that the following modules were not visible: {0}\";\n\tvar SUCCESS_MSG_ONLY_MODULES_VISIBLE = \"Successfully validated that only the following modules were visible: {0}\";\n\tvar SUCCESS_MSG_ONLY_MODULES_NOT_VISIBLE = \"Successfully validated that only the following modules were not visible: {0}\";\n\tvar FAILURE_CALCULATING_NOT_VISIBLE = \"Error calculating not visible modules\";\n\tvar FAILURE_MSG_MODULES_VISIBLE = \"FAILURE: Expected the following modules to be visible but they were not visible: {0}\";\n\tvar FAILURE_MSG_MODULES_NOT_VISIBLE = \"FAILURE: Expected the following modules to not be visible but they were visible: {0}\";\n\tvar FAILURE_MSG_ADDITIONAL_MODULES_NOT_VISIBLE = \"FAILURE: Found additional modules that were not visible: {0}\";\n\tvar messages = new GwtMessage().getMessages([MESSAGE_KEY_RUNNING_MODULE_VISIBILITY,  MESSAGE_KEY_INVALID_ASSERT_TYPE, SUCCESS_MSG_MODULES_VISIBLE,\n\t\tSUCCESS_MSG_MODULES_NOT_VISIBLE, SUCCESS_MSG_ONLY_MODULES_VISIBLE, SUCCESS_MSG_ONLY_MODULES_NOT_VISIBLE, FAILURE_CALCULATING_NOT_VISIBLE,\n\t\tFAILURE_MSG_MODULES_VISIBLE, FAILURE_MSG_MODULES_NOT_VISIBLE, FAILURE_MSG_ADDITIONAL_MODULES_NOT_VISIBLE]);\n\n\tg_ui_testing_util.setTestStepStatusMessage(messages[MESSAGE_KEY_RUNNING_MODULE_VISIBILITY]);\n\n\tvar visibleAssertionPassed = true;\n\tvar notVisibleAssertionPassed = true;\n\tvar leftNavUtil = new ATFLeftNavUtil();\n\tleftNavUtil.openNavigator(assertModuleVisibility, step.inputs.navigator);\n\n\tfunction assertModuleVisibility() {\n\t\tg_ui_testing_util.clearTestIFrameOnloadFunction();\n\t\tleftNavUtil.getLeftNavJSON(step.inputs.navigator).then(function(response) {\n\t\t\tvar visibleMsg = runVisibleAssertions(response);\n\t\t\tvar notVisibleMsg = runNotVisibleAssertions(response);\n\t\t\tvar resultMsg = '';\n\t\t\tif ((visibleAssertionPassed && notVisibleAssertionPassed)\n\t\t\t\t\t|| (!visibleAssertionPassed && !notVisibleAssertionPassed))\n\t\t\t\tresultMsg = visibleMsg + (visibleMsg && notVisibleMsg ? '\\n\\n' : '') + notVisibleMsg;\n\t\t\telse if (!visibleAssertionPassed && notVisibleAssertionPassed)\n\t\t\t\tresultMsg = visibleMsg;\n\t\t\telse if (visibleAssertionPassed && !notVisibleAssertionPassed)\n\t\t\t\tresultMsg = notVisibleMsg;\n\n\t\t\tstepResult.message = resultMsg;\n\t\t\tstepResult.success = visibleAssertionPassed && notVisibleAssertionPassed;\n\t\t\tif (stepResult.success)\n\t\t\t\tstep.defer.resolve();\n\t\t\telse\n\t\t\t\tstep.defer.reject();\n\t\t})['catch'](function (e) {\n\t\t\tstepResult.success = false;\n\t\t\tstepResult.message = e;\n\t\t\tstep.defer.reject();\n\t\t});\n\t}\n\n\tfunction runVisibleAssertions(leftNavJSON) {\n\t\tvar msg = '';\n\t\tif (step.inputs.visible_modules) {\n\t\t\tvar modules = step.inputs.visible_modules.split(',');\n\t\t\tswitch (step.inputs.visible_assert_type) {\n\t\t\t\tcase 'at_least_modules_visible':\n\t\t\t\t\tmsg = assertAtLeastVisible(modules, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'only_modules_visible':\n\t\t\t\t\tmsg = assertOnlyVisible(modules, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvisibleAssertionPassed = false;\n\t\t\t\t\tmsg = formatMessage(messages[MESSAGE_KEY_INVALID_ASSERT_TYPE], step.inputs.visible_assert_type);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tfunction runNotVisibleAssertions(leftNavJSON) {\n\t\tvar msg = '';\n\t\tif (step.inputs.not_visible_modules) {\n\t\t\tvar modules = step.inputs.not_visible_modules.split(',');\n\t\t\tswitch (step.inputs.not_visible_assert_type) {\n\t\t\t\tcase 'at_least_modules_not_visible':\n\t\t\t\t\tmsg = assertAtLeastNotVisible(modules, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'only_modules_not_visible':\n\t\t\t\t\tmsg = assertOnlyNotVisible(modules, leftNavJSON);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tnotVisibleAssertionPassed = false;\n\t\t\t\t\tmsg = formatMessage(messages[MESSAGE_KEY_INVALID_ASSERT_TYPE], step.inputs.not_visible_assert_type);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tfunction assertAtLeastVisible(modules, leftNavJSON) {\n\t\tvar modulesFound = leftNavUtil.findModules(modules, leftNavJSON, step.inputs.navigator);\n\t\tif (modulesFound.length == modules.length)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_MODULES_VISIBLE], convertModuleIdsToTitles(modulesFound, true));\n\n\t\t// figure out which module(s) were not visible\n\t\tfor (var i = 0; i < modulesFound.length; i += 1) {\n\t\t\tvar index = modules.indexOf(modulesFound[i]);\n\t\t\tif (index != -1)\n\t\t\t\tmodules.splice(index, 1);\n\t\t}\n\n\t\tvisibleAssertionPassed = false;\n\t\treturn formatMessage(messages[FAILURE_MSG_MODULES_VISIBLE], convertModuleIdsToTitles(modules, true));\n\t}\n\n\tfunction assertAtLeastNotVisible(modules, leftNavJSON) {\n\t\tvar msg = '';\n\t\tvar modulesFound = leftNavUtil.findModules(modules, leftNavJSON, step.inputs.navigator);\n\t\tif (modulesFound.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_MODULES_NOT_VISIBLE], convertModuleIdsToTitles(modules, false));\n\n\t\tnotVisibleAssertionPassed = false;\n\t\treturn formatMessage(messages[FAILURE_MSG_MODULES_NOT_VISIBLE], convertModuleIdsToTitles(modulesFound, false));\n\t}\n\n\tfunction assertOnlyVisible(modules, leftNavJSON) {\n\t\tvar modulesJSON = leftNavUtil.getCollapsedModuleJSON(leftNavJSON, step.inputs.navigator);\n\t\tfor (var i = 0; i < modulesJSON.length; i += 1) {\n\t\t\tvar index = modules.indexOf(modulesJSON[i].id);\n\t\t\tif (index != -1) {\n\t\t\t\tmodules.splice(index, 1);\n\t\t\t\tmodulesJSON.splice(i, 1);\n\t\t\t\ti -= 1;\n\t\t\t}\n\t\t}\n\n\t\tif (modules.length == 0 && modulesJSON.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_ONLY_MODULES_VISIBLE], convertModuleIdsToTitles(step.inputs.visible_modules.split(','), true));\n\n\t\tvar failureMsg = '';\n\t\tif (modules.length > 0)\n\t\t\tfailureMsg += formatMessage(messages[FAILURE_MSG_MODULES_VISIBLE], convertModuleIdsToTitles(modules, true));\n\n\t\tif (modulesJSON.length > 0) {\n\t\t\tvar failures = [];\n\t\t\tfor (i = 0; i < modulesJSON.length; i += 1)\n\t\t\t\tfailures.push(modulesJSON[i].title);\n\n\t\t\tfailureMsg += (failureMsg ? (\"\\n\\n\") : \"\") + formatMessage(messages[FAILURE_MSG_MODULES_NOT_VISIBLE], failures.join(', '));\n\t\t}\n\n\t\tvisibleAssertionPassed = false;\n\t\treturn failureMsg;\n\t}\n\n\tfunction assertOnlyNotVisible(modules, leftNavJSON) {\n\t\tvar modulesJSON = leftNavUtil.getCollapsedModuleJSON(leftNavJSON, step.inputs.navigator);\n\t\tvar moduleIds = [];\n\t\tfor (var i = 0 ; i < modulesJSON.length; i += 1)\n\t\t\tmoduleIds.push(modulesJSON[i].id);\n\n\t\tvar ga = new GlideAjax('ATFLeftNavUtil');\n\t\tga.addParam('sysparm_name', 'getNotVisibleModules');\n\t\tga.addParam('sysparm_visible_modules', moduleIds.join(','));\n\t\tga.getXMLWait();\n\t\tvar notVisibleModules = ga.getAnswer();\n\t\tif (!notVisibleModules) {\n\t\t\tnotVisibleAssertionPassed = false;\n\t\t\treturn messages[FAILURE_CALCULATING_NOT_VISIBLE];\n\t\t}\n\n\t\tnotVisibleModules = JSON.parse(notVisibleModules);\n\t\tfor (i = 0; i < notVisibleModules.length; i += 1) {\n\t\t\tvar index = modules.indexOf(notVisibleModules[i].id);\n\t\t\tif (index != -1) {\n\t\t\t\tmodules.splice(index, 1);\n\t\t\t\tnotVisibleModules.splice(i, 1);\n\t\t\t\ti -= 1;\n\t\t\t}\n\t\t}\n\n\t\tif (modules.length == 0 && notVisibleModules.length == 0)\n\t\t\treturn formatMessage(messages[SUCCESS_MSG_ONLY_MODULES_NOT_VISIBLE],\n\t\t\t\tconvertModuleIdsToTitles(step.inputs.not_visible_modules.split(','), false));\n\n\t\tvar failureMsg = '';\n\t\tif (modules.length > 0)\n\t\t\tfailureMsg += formatMessage(messages[FAILURE_MSG_MODULES_NOT_VISIBLE],\n\t\t\t\tconvertModuleIdsToTitles(modules, false));\n\n\t\tif (notVisibleModules.length > 0) {\n\t\t\tvar failures = [];\n\t\t\tfor (i = 0; i < notVisibleModules.length; i += 1)\n\t\t\t\tfailures.push(notVisibleModules[i].title);\n\n\t\t\tfailureMsg += (failureMsg ? (\"\\n\\n\") : \"\") + formatMessage(messages[FAILURE_MSG_ADDITIONAL_MODULES_NOT_VISIBLE], failures.join(', '));\n\t\t}\n\n\t\tnotVisibleAssertionPassed = false;\n\t\treturn failureMsg;\n\t}\n\n\tfunction convertModuleIdsToTitles(moduleIdArr, isVisibleAssertType) {\n\t\tvar titleArr = isVisibleAssertType ? step.inputs.visible_module_titles : step.inputs.not_visible_module_titles;\n\t\tif (!titleArr)\n\t\t\treturn moduleIdArr.join(', ');\n\n\t\tvar moduleTitles = [];\n\t\tfor (var i = 0; i < moduleIdArr.length; i += 1)\n\t\t\tmoduleTitles.push(titleArr[moduleIdArr[i]]);\n\n\t\treturn moduleTitles.join(', ');\n\t}\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"5","active":"true","sys_tags":"","html_description":"<p>Verifies visibility of modules in the left navigation bar.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/ae89677b04f12210559073c06a02f735","value":"ae89677b04f12210559073c06a02f735"},"template_reminder":"Verifies visibility of modules in the left navigation bar","sys_update_name":"sys_atf_step_config_f7cfc1973702030064a52f3c8e41f1d3","name":"Module Visibility","description_generator":"(function generateDescription(step) {\n\tvar description = '';\n\tvar leftNavUtil = new ATFLeftNavUtil();\n\tvar navDisplayValue = step.inputs.navigator.getDisplayValue();\n\n\tif (step.inputs.visible_modules.hasMapping())\n\t\tdescription = getVisibleDescription(step.inputs.visible_modules.getDisplayValue());\n\telse if (step.inputs.visible_modules) {\n\t\tvar visibleModuleTitles = leftNavUtil.getTitles('sys_app_module', step.inputs.visible_modules.split(','));\n\t\tvisibleModuleTitles = visibleModuleTitles.join(', ');\n\t\tdescription = getVisibleDescription(visibleModuleTitles);\n\t}\n\n\tif (step.inputs.not_visible_modules.hasMapping())\n\t\tdescription += getNotVisibleDescription(step.inputs.not_visible_modules.getDisplayValue());\n\telse if (step.inputs.not_visible_modules) {\n\t\tvar notVisibleModuleTitles = leftNavUtil.getTitles('sys_app_module', step.inputs.not_visible_modules.split(','));\n\t\tnotVisibleModuleTitles = notVisibleModuleTitles.join(', ');\n\t\tdescription += getNotVisibleDescription(notVisibleModuleTitles);\n\t}\n\n\tfunction getVisibleDescription(visibleModuleTitles) {\n\t\tvar visibleAssertType = step.inputs.visible_assert_type + '';\n\t\tswitch (visibleAssertType) {\n\t\t\tcase 'at_least_modules_visible':\n\t\t\t\treturn gs.getMessage('Confirm that at least the following modules are visible in {0}: {1}', [navDisplayValue, visibleModuleTitles]);\n\t\t\tcase 'only_modules_visible':\n\t\t\t\treturn gs.getMessage('Confirm that only the following modules are visible in {0}: {1}', [navDisplayValue, visibleModuleTitles]);\n\t\t\tdefault:\n\t\t\t\treturn gs.getMessage('Unknown visible assert type: {0}', visibleAssertType);\n\t\t}\n\t}\n\n\tfunction getNotVisibleDescription(notVisibleModuleTitles) {\n\t\tvar notVisibleAssertType = step.inputs.not_visible_assert_type + '';\n\t\tswitch (notVisibleAssertType) {\n\t\t\tcase 'at_least_modules_not_visible':\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Confirm that at least the following modules are not visible in {0}: {1}', [navDisplayValue, notVisibleModuleTitles]);\n\t\t\tcase 'only_modules_not_visible':\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Confirm that only the following modules are not visible in {0}: {1}', [navDisplayValue, notVisibleModuleTitles]);\n\t\t\tdefault:\n\t\t\t\treturn (description ? '\\n\\n' : '') + gs.getMessage('Unknown not visible assert type: {0}', notVisibleAssertType);\n\t\t}\n\t}\n\n\tif (gs.nil(description))\n\t\tdescription = gs.getMessage(\"This step will do nothing. Provide at least one module to assert as visible or not visible\");\n\n\treturn description;\n})(step);\n","performance_include":"false","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/92af89573702030064a52f3c8e41f1aa","value":"92af89573702030064a52f3c8e41f1aa"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"stop","inputs":"","deprecated":"false","icon":"icon-article-document","sys_updated_on":"2019-09-03 00:00:06","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"fc7e65d577332300e46abe41a9106106","class_type":"script","sys_updated_by":"admin","sys_created_on":"2019-02-22 09:46:34","sys_name":"Open Service Portal Page","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"1400","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tassertionObject.executeStep = function(step, stepResult) {\n\tvar MESSAGE_KEY_OPENING = new GwtMessage().getMessage(\"Opening Service Portal page\");\n\tvar MESSAGE_KEY_SUCCESSFULY_OPENED = new GwtMessage().getMessage(\"Successfully opened Service Portal page\");\n\tvar MESSAGE_KEY_FAILED_TO_OPEN = new GwtMessage().getMessage(\"FAILURE: Failed to open Service Portal page\");\n\n\tfunction ensurePageIsLoaded() {\n\t\ttestStepIframeWindow = g_ui_testing_util.getTestIFrameWindow();\n\t\tif (testStepIframeWindow.document.querySelector(\"[sn-atf-area='404 message']\") != null) {\n\t\t\treturn failStep();\n\t\t}\n\t\treturn passStep();\n\t}\n\n\tfunction passStep() {\n\t\tg_ui_testing_util.setTestStepStatusMessage(MESSAGE_KEY_SUCCESSFULY_OPENED);\n\t\tstepResult.success = true;\n\t\tstepResult.message = MESSAGE_KEY_SUCCESSFULY_OPENED;\n\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(msg) {\n\t\tvar message = msg || MESSAGE_KEY_FAILED_TO_OPEN;\n\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\n\t\tstepResult.success = false;\n\t\tstepResult.message = message;\n\n\t\tstep.defer.reject();\n\t}\n\n\tg_ui_testing_util.setTestStepStatusMessage(MESSAGE_KEY_OPENING);\n\n\tvar portal = step.inputs.portal;\n\tvar page = step.inputs.page;\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\tstep.timeout = step.timeout || 5;\n\tvar wait_timeout_ms = step.timeout * 1000;\n\tg_ui_testing_util.openPortalPage(portal.url_suffix, page.id, query_params, wait_timeout_ms)\n\t\t\t.then(ensurePageIsLoaded, failStep);\n\t};\n\tassertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"15","active":"true","sys_tags":"","html_description":"<p>Opens a Service Portal page</p>\n<h4>Additional Considerations</h4>\n<p>Provide any URL parameters required for the page.</p>\n<p>After this step, you will be able to interact with the widgets available on the page.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a289677b04f12210559073c06a02f76d","value":"a289677b04f12210559073c06a02f76d"},"template_reminder":"Open a page in Service Portal","sys_update_name":"sys_atf_step_config_fc7e65d577332300e46abe41a9106106","name":"Open Service Portal Page","description_generator":"function generateDescription() {\n\tvar page = '';\n\tvar portal = '';\n\tvar query_params = JSON.parse(step.inputs.query_params || '{}');\n\n\tvar page_gr = new GlideRecord('sp_page');\n\tif (page_gr.get(step.inputs.page_id)) {\n\t\tpage = page_gr.getValue('title');\n\t}\n\n\tvar portal_gr = new GlideRecord('sp_portal');\n\tif (portal_gr.get(step.inputs.portal_id)) {\n\t\tportal = portal_gr.getValue('title');\n\t}\n\n    var qp_str = '';\n\tfor (var p in query_params) {\n\t\tif (query_params.hasOwnProperty(p)) {\n\t\t\tqp_str += p + \" = \" + query_params[p] + \"\\n\";\n\t\t}\n\t}\n\n\tif (qp_str === '') {\n\t\treturn gs.getMessage('Open {0} page in the {1} portal', [page, portal]);\n\t}\n\n\treturn gs.getMessage('Open {0} page in the {1} portal with the following query params:\\n{2}', [page, portal, qp_str]);\n}\n\ngenerateDescription();","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/581a597353d21300ac15ddeeff7b12a6","value":"581a597353d21300ac15ddeeff7b12a6"},"sys_policy":"read"},{"outputs":"","can_mutate_page":"true","batch_order_constraint":"middle","inputs":"","deprecated":"false","icon":"icon-edit document color-yellow-light","sys_updated_on":"2023-10-02 18:23:13","type":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_db_object/29796f3b04f12210559073c06a02f7a8","value":"29796f3b04f12210559073c06a02f7a8"},"sys_class_name":"sys_atf_step_config","step_env":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_env/d2cb02e1870312009dccc9ded0e3ec7c","value":"d2cb02e1870312009dccc9ded0e3ec7c"},"wizard_redirect":"","sys_id":"fcae4a935332120028bc29cac2dc340e","class_type":"script","sys_updated_by":"admin","sys_created_on":"2016-04-20 19:16:47","sys_name":"Set Field Values","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"class_name":"","sys_created_by":"admin","order":"4000","step_execution_generator":"(function (step, stepResult, assertionObject) {\n\n\tvar messages = getMessages([\n\t\t\"Performed the following in '{0}':\",\n\t\t\"Setting field values\",\n\t\t\"FAILURE: Unable to set values, g_form is not defined. A valid form must be open before setting values\",\n\t\t\"ERROR: Unable to decode field values from server\",\n\t\t\"Skipping setting a value, no field or value was given\",\n\t\t\"Skipping setting field to value '{0}', no field was given\",\n\t\t\"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not editable\",\n\t\t\"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not present on the form\",\n\t\t\"Successfully set field '{0}' to value '{1}'\",\n\t\t\"Successfully set field '{0}' to valid reference value '{1}'\",\n\t\t\"FAILURE: Failed to set field '{0}' to value '{1}' because the reference is NOT valid\",\n\t\t\"FAILURE: Unable to set field '{0}' to value '{1}'. Value '{1}' is not currently a valid choice\"\n\t]);\n\n  assertionObject.executeStep = function(step, stepResult) {\n\tg_ui_testing_util.setTestStepStatusMessage(messages[\"Setting field values\"]);\n\n\tnew ATFFormStepExecutor(step.inputs)\n\t\t.setFieldValues()\n\t\t.then(passStep, failStep);\n\n\tfunction passStep(result) {\n\t\tvar message = \"\";\n\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\tmessage = result;\n\t\telse // Workspace result\n\t\t\tmessage = buildOutput(result.fieldValues);\n\n\t\tstepResult.message = message;\n\t\tg_ui_testing_util.setTestStepStatusMessage(message);\n\t\tstepResult.success = true;\n\t\tstep.defer.resolve();\n\t}\n\n\tfunction failStep(result) {\n\t\tvar reason = \"\";\n\n\t\tif (typeof result === \"string\") // Legacy UI result\n\t\t\treason = result;\n\t\telse if (result.fieldValues) // Workspace result\n\t\t\treason = buildOutput(result.fieldValues);\n\t\telse if (result.reason === \"decode_field_values_error\") // Decode field values error\n\t\t\treason = messages[\"ERROR: Unable to decode field values from server\"];\n\t\telse if (result.message) // Some other error was thrown\n\t\t\treason = result.message;\n\n\t\tstepResult.message = reason;\n\t\tg_ui_testing_util.setTestStepStatusMessage(reason);\n\t\tstepResult.success = false;\n\t\tstep.defer.reject();\n\t}\n\n\tfunction buildOutput(fieldValues) {\n\t\tif (!fieldValues)\n\t\t\treturn \"\";\n\n\t\tvar result = \"\";\n\n\t\tfieldValues.forEach(function(fieldValue) {\n\t\t\tif (result.length > 0)\n\t\t\t\tresult += '\\n';\n\n\t\t\tif (fieldValue.success)\n\t\t\t\tresult += formatMessage(messages[\"Successfully set field '{0}' to value '{1}'\"], fieldValue.field, fieldValue.value);\n\t\t\telse if (fieldValue.reason === \"field_not_present\")\n\t\t\t\tresult += formatMessage(messages[\"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not present on the form\"], fieldValue.field, fieldValue.value);\n\t\t\telse if (fieldValue.reason === \"read_only\")\n\t\t\t\tresult += formatMessage(messages[\"FAILURE: Unable to set field '{0}' to value '{1}'. Field '{0}' is not editable\"], fieldValue.field, fieldValue.value);\n\t\t});\n\n\t\treturn result;\n\t}\n\n  };\n  assertionObject.canMutatePage = step.can_mutate_page;\n})(step, stepResult, assertionObject);\n","sys_mod_count":"55","active":"true","sys_tags":"","html_description":"<p class=\"p1\">Sets field values on the current form.</p>\n<h4>Additional Considerations</h4>\n<p>Use the Form UI field to specify testing in the standard platform UI or workspace UI.</p>\n<p>In order to use this step you must have already opened a form using either the &#34;Open a New Form&#34; or &#34;Open an Existing Record&#34; steps. It is recommended to not run this step directly after a &#34;Submit a Form&#34; or &#34;Click a UI Action&#34; step.</p>\n<p>This step can be used in any order with the &#34;Field Value Validation&#34;, &#34;Field State Validation&#34; and &#34;UI Action Visibility&#34; steps.</p>","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/18792f3b04f12210559073c06a02f71d","value":"18792f3b04f12210559073c06a02f71d"},"template_reminder":"Edit the Set Field Values step to supply values for all fields that need them.","sys_update_name":"sys_atf_step_config_fcae4a935332120028bc29cac2dc340e","name":"Set Field Values","description_generator":"(function generateDescription(step) {\n\tvar descriptionGenerator = new ATFStepDescriptionGenerator();\n\tvar description;\n\n\tif (!step.inputs.form_ui || step.inputs.form_ui.toString() === \"standard_ui\")\n\t\tdescription = gs.getMessage(\"Set the following values on the form:\") + \"\\n\";\n\telse\n\t\tdescription = gs.getMessage(\"Set the following values on the form in '{0}':\", step.inputs.form_ui.getDisplayValue()) + \"\\n\";\n\n\tdescription += descriptionGenerator.getConditionDescription(step.inputs.table, step.inputs.field_values);\n\n\tif (step.warning_message)\n\t\tdescription += \"\\n\\n\" + step.warning_message;\n\n\treturn description;\n})(step);","performance_include":"true","category":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_atf_step_config_category/3c5c4dc20b202200a8d7a12cf6673a95","value":"3c5c4dc20b202200a8d7a12cf6673a95"},"sys_policy":"read"}]}