{"result":[{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve Window cluster information","host_classification":"false","sys_updated_on":"2012-11-07 07:19:42","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"3","ecc_queue_source":"","sys_id":"123a9e6d4a36231d004cc8aa8252c209","sys_updated_by":"aleck.lin","sys_created_on":"2008-12-07 16:14:38","used_by_discovery":"true","sys_name":"Windows - Cluster","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"11","sys_tags":"","post_processor_script":"","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_123a9e6d4a36231d004cc8aa8252c209","ecc_queue_name":"WMI: Cluster","name":"Windows - Cluster","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"true","description":"Get Microsoft IIS Information","host_classification":"false","sys_updated_on":"2015-08-31 17:41:09","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"1","ecc_queue_source":"","sys_id":"3d6871530a0a0b9e00ae6679e94b1182","sys_updated_by":"josh.gerbasi","sys_created_on":"2009-07-02 21:41:46","used_by_discovery":"true","sys_name":"Windows - Get IIS Information","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"7","sys_tags":"","post_processor_script":"","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_3d6871530a0a0b9e00ae6679e94b1182","ecc_queue_name":"WMI: Get IIS Information","name":"Windows - Get IIS Information","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"true","description":"Retrieve the OS information","host_classification":"false","sys_updated_on":"2012-11-07 07:23:51","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"","ecc_queue_source":"","sys_id":"6325f3ef0a0006bc3e2e2d83e75dc02a","sys_updated_by":"aleck.lin","sys_created_on":"2011-01-08 01:03:07","used_by_discovery":"true","sys_name":"Windows - OS Information","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","ecc_queue_topic":"WMIRunner","sys_mod_count":"1","sys_tags":"","post_processor_script":"","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"","sys_update_name":"discovery_probes_wmi_6325f3ef0a0006bc3e2e2d83e75dc02a","ecc_queue_name":"WMI: OS Information","name":"Windows - OS Information","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve machine for network information","host_classification":"false","sys_updated_on":"2020-02-10 15:41:08","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"1","ecc_queue_source":"","sys_id":"63dad2300a0a0b3a000ad7acdc2ee4dd","sys_updated_by":"christopher.thompson","sys_created_on":"2008-11-03 19:37:02","used_by_discovery":"true","sys_name":"Windows - Network","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"51","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n\t\n\t/**\n \t* Runs the probe instance\n \t*/\n\tprocess : function() {\n\t\trelated_data.adapters = [];\n\t\t// get our adapters and configurations...\n\t\tvar network_confs = g_array_util.ensureArray(output.Win32_NetworkAdapterConfiguration);\n\t\tvar network_adapters = g_array_util.ensureArray(output.Win32_NetworkAdapter);\n\t\tvar network_routes = g_array_util.ensureArray(output.Win32_IP4RouteTable);\n\t\tvar idutil = new IDSensorUtil();\n\t\t\n\t\t// filter routes down for better searching later\n\t\tvar fixedRoutes = [];\n\t\tvar seenRoutes = {};\n\t\t\n\t\tfor (var i=0; i < network_routes.length; i++) {\n\t\t\tvar route = network_routes[i];\n\t\t\t\n\t\t\tif (route.Destination.indexOf('127.') == 0 || route.Destination == '255.255.255.255' ||\n\t\t\t\t(route.Destination.indexOf('224.') == 0 && route.Mask.indexOf('240.') == 0) ) {\n\t\t\t\t// ignore broadcast, localhost, and multicast routes\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\t// Only add the route if we haven't seen it yet\n\t\t\tvar hashedRoute = this.hashRoute(route);\n\t\t\tif (!seenRoutes[hashedRoute]) {\n\t\t\t\tseenRoutes[hashedRoute] = true;\n\t\t\t\tfixedRoutes.push(route);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvar vips = {};\n\t\tthis.buildVIPHash(vips);\n\t\t\n\t\tfor(var i = 0; i < network_confs.length; i++) {\n\t\t\tvar nc = network_confs[i];\n\t\t\tvar na = network_adapters[i];\n\t\t\t\n\t\t\tif (parseInt(nc.Index) != parseInt(na.Index)) //Just in case Index doesn't match...\n\t\t\t\tna = this.findCorrectIndex(nc.Index, network_adapters);\n\t\t\t\n\t\t\tif (JSUtil.nil(nc.IPAddress) || !nc.IPEnabled)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\t// Filter out loopback adapters\n\t\t\tif (JSUtil.notNil(nc.Caption) && nc.Caption.indexOf(\"Loopback Adapter\") >= 0)\n\t\t\t\tcontinue;\n\t\t\t\n\t\t\tvar ipParsed = nc.IPAddress.split(\",\");\n\t\t\tvar subnetParsed = [];\n\t\t\tif (!JSUtil.nil(nc.IPSubnet))\n\t\t\t\tsubnetParsed = nc.IPSubnet.split(\",\");\n\t\t\t\n\t\t\tvar ips = [];\n\t\t\t\n\t\t\tfor(var j = 0; j < ipParsed.length; j++) {\n\t\t\t\t// The ip shouldn't be a VIP...\n\t\t\t\tif (vips[ipParsed[j]])\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\tvar ip_address = ipParsed[j];\n\t\t\t\tvar isIPv6 = (ip_address.indexOf(\":\") > -1);\n\t\t\t\tif (isIPv6) {\n\t\t\t\t\tip_address = SncIPAddressV6.get(ip_address);\n\t\t\t\t\tif (!ip_address)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// check if valid nic ip address..\n\t\t\t\t\tif (!SncIPAddressV4.get(ip_address) || ip_address == \"0.0.0.0\" ||\n\t\t\t\t\t\tip_address == \"255.255.255.255\" || ip_address == \"127.0.0.1\")\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tvar ip = {};\n\t\t\t\tip.ip_address = ip_address;\n\t\t\t\tip.netmask = (j < subnetParsed.length) ? subnetParsed[j] : null;\n\t\t\t\tip.ip_version = isIPv6 ? '6' : '4';\n\t\t\t\tips.push(ip);\n\t\t\t}\n\t\t\t\n\t\t\tvar adapter = {};\n\t\t\tadapter.name\t           = na.NetConnectionID;\n\t\t\tadapter.short_description  = nc.Caption;\n\t\t\tadapter.ip_address         = (ips.length > 0) ? ips[0].ip_address : null;\n\t\t\tadapter.netmask            = (ips.length > 0) ? ips[0].netmask : null;\n\t\t\tadapter.ip_default_gateway = nc.DefaultIPGateway ? nc.DefaultIPGateway.toString() : null;\n\t\t\tadapter.mac_address        = nc.MACAddress ? nc.MACAddress.toString() : null;\n\t\t\tadapter.dhcp_enabled       = (nc.DHCPEnabled.toString() == 1) ? true : false;\n\t\t\tadapter.ip_addresses       = ips;\n\t\t\tadapter.manufacturer \t  = na.Manufacturer;\n\t\t\tadapter.routes             = {ifRoutes: [], gwRoutes: []};\n\t\t\t\n\t\t\t// handle routes\n\t\t\tfor (var j=0; j < adapter.ip_addresses.length; j++) {\n\t\t\t\tvar ip = adapter.ip_addresses[j];\n\t\t\t\t\n\t\t\t\tif (ip.ip_version == '6' || ip.netmask == null)\n\t\t\t\t\tcontinue;\n\t\t\t\t\n\t\t\t\t// search for matching routes\n\t\t\t\tvar cidr = idutil.maskToCidr(ip.netmask);\n\t\t\t\tvar network = new SncIPNetworkV4(ip.ip_address + '/' + cidr);\n\t\t\t\tfor (var k=0; k < fixedRoutes.length; k++) {\n\t\t\t\t\tvar route = fixedRoutes[k];\n\t\t\t\t\t\n\t\t\t\t\tcidr = idutil.maskToCidr(route.Mask);\n\t\t\t\t\tvar destIpNetwork = route.Destination + '/' + cidr;\n\t\t\t\t\tvar newRoute = { dest_ip_network: destIpNetwork };\n\t\t\t\t\tif (route.NextHop == '0.0.0.0') {\n\t\t\t\t\t\t// possible exit interface route\n\t\t\t\t\t\tif (route.Mask == '255.255.255.255') {\n\t\t\t\t\t\t\t// host or broadcast exit interface route, will be contained by a subnet route\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (route.Destination == '' + network.address) {\n\t\t\t\t\t\t\tnewRoute.router_interface = adapter.name;\n\t\t\t\t\t\t\tadapter.routes.ifRoutes.push(newRoute);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// possible next hop route\n\t\t\t\t\t\tvar nextHop = new SncIPAddressV4(route.NextHop);\n\t\t\t\t\t\tif (network.contains(nextHop) || network.isBroadcastAddress(nextHop) ) {\n\t\t\t\t\t\t\tnewRoute.route_interface = adapter.name;\n\t\t\t\t\t\t\tnewRoute.next_hop_ip_address = String(nextHop);\n\t\t\t\t\t\t\tadapter.routes.gwRoutes.push(newRoute);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t\t\n\t\t\trelated_data.adapters.push(adapter);\n\t\t\t\n\t\t\t//if this nic has a default gateway configured, set the default_gateway for the computer CI:\n\t\t\tif(JSUtil.notNil(adapter.ip_default_gateway))\n\t\t\t\trelated_data.ip_default_gateway = adapter.ip_default_gateway;\n\t\t}\n\t},\n\t\n\t/*************************************************************\n \t* Function definitions\n \t*************************************************************/\n\t\n\tbuildVIPHash: function(vips) {\n\t\t// if we have a VIPs parameter, parse it and build a hashmap of them...\n\t\tvar vipsParam = g_probe.getParameter('vips');\n\t\tif (vipsParam) {\n\t\t\tvar vipsParamParts = vipsParam.split(',');\n\t\t\tfor (var i = 0; i < vipsParamParts.length; i++)\n\t\t\t\tvips[vipsParamParts[i]] = true;\n\t\t}\n\t},\n\t\n\t/*\n \t* Win32_NetworkAdapter and Win32_NetworkAdapterConfiguration seem to always have the same\n \t* length of array data and the order matches. But just in case it doesn't, we need to\n \t* manually match them up by index.\n \t*/\n\tfindCorrectIndex: function(index, network_adapters) {\n\t\tfor(var i=0; i<network_adapters.length; i++)\n\t\t\tif (parseInt(network_adapters[i].Index) == parseInt(index))\n\t\t\treturn network_adapters[i];\n\t},\n\t\n\t// Routes are unique based on Destination, Mask, and NextHop\n\thashRoute: function(route) {\n\t\tvar routeHash = \"\";\n\t\trouteHash += \"D:\" + route.Destination;\n\t\trouteHash += \"M:\" + route.Mask;\n\t\trouteHash += \"NH:\" + route.NextHop;\n\t\t\n\t\treturn routeHash;\n\t},\n\t\n\ttype: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"3","sys_update_name":"discovery_probes_wmi_63dad2300a0a0b3a000ad7acdc2ee4dd","ecc_queue_name":"WMI: Network","name":"Windows - Network","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve the Windows services","host_classification":"false","sys_updated_on":"2014-10-07 22:13:49","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"0","ecc_queue_source":"","sys_id":"828ebf830a0a0ba6003fc12640a94323","sys_updated_by":"josh.gerbasi","sys_created_on":"2009-04-07 21:49:34","used_by_discovery":"true","sys_name":"Windows - Services","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"12","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n\n    process : function() {  \n\t\tvar dataArray = [];\n\t\tvar dataArrayList = g_array_util.ensureArray(output.Win32_Service);\n\n        for (var i = 0; i < dataArrayList.length; i++) {\n            var element = dataArrayList[i];\n            var dataArrayDef = {};\n\n            dataArrayDef.name             = element.Name;\n            dataArrayDef.display_name     = element.DisplayName;\n            dataArrayDef.path_name        = element.PathName;\n            dataArrayDef.service_state    = element.State;\n            dataArrayDef.start_mode       = element.StartMode;\n            dataArrayDef.service_type     = element.ServiceType;\n            dataArrayDef.process_id       = element.ProcessId;\n            dataArrayDef.can_be_paused    = element.AcceptPause;\n            dataArrayDef.can_be_stopped   = element.AcceptStop;\n            dataArrayDef.desktop_interact = element.DesktopInteract;\n            dataArrayDef.account          = element.StartName;\n\n            dataArray.push(dataArrayDef);\n        }\n\t\t\n\t\tif(dataArray.length > 0)\n\t\t\trelated_data.data_array = dataArray;\t\t\n\t},\n   \n    type: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_828ebf830a0a0ba6003fc12640a94323","ecc_queue_name":"WMI: Services","name":"Windows - Services","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve running processes","host_classification":"false","sys_updated_on":"2024-10-17 21:19:25","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"2","ecc_queue_source":"","sys_id":"8ef5a7990a0a0ba5007a9d00e48e5e00","sys_updated_by":"now.discovery_infra","sys_created_on":"2008-11-12 04:29:25","used_by_discovery":"true","sys_name":"Windows - Active Processes","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"71","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n\n    procs: [],\n    proclist: [],\n    pidToProc: {},\n    pidToCreationDate: {},\n    ppidReplacement: {},\n    procsInCycle: {},\n\n    /**\n     * Runs the probe instance\n     */\n    process: function() {\n        this.proclist = g_array_util.ensureArray(output.Win32_Process);\n\n        for (var i = 0; i < this.proclist.length; i++) {\n            var wp = this.proclist[i];\n\n            var procDef = {};\n            procDef.pid = wp.ProcessId;\n            procDef.ppid = wp.ParentProcessId;\n            procDef.name = wp.Name;\n            procDef.parameters = JSUtil.notNil(wp.CommandLine) ? ('' + wp.CommandLine).trim() : '';\n            procDef.command = JSUtil.nil(wp.ExecutablePath) ? wp.Name : ('' + wp.ExecutablePath).trim();\n\n            if (wp.Name == \"System Idle Process\")\n                procDef.ppid = \"99999\" + wp.ParentProcessId;\n\n            this.procs.push(procDef);\n            this.pidToProc[procDef.pid] = procDef;\n            this.pidToCreationDate[procDef.pid] = '' + wp.CreationDate;\n        }\n\n        this.findCycles();\n        this.replacePPIDs();\n\n        try {\n            var rpf = this.getParameter(\"running_process_filter\");\n            if (rpf) {\n\t\t\t\t// There's both a Java and JavaScript implementation of process filtering. The Java\n\t\t\t\t// version is significantly faster so it's preferred and is what's used OOB.\n\t\t\t\t// The JavaScript version is shipped in case there's a bug in the Java version. If\n\t\t\t\t// there is a bug in the Java version then chances are good the JavaScript version\n\t\t\t\t// has the same bug, but the difference is that the JavaScript version can be fixed\n\t\t\t\t// and tested on a customer instance, providing immediate relief.\n\t\t\t\t// Switch to the JavaScript version by simply activating the MID script include\n\t\t\t\t// record named \"RunningProcessesFilter\".\n\t\t\t\t// IMPORTANT: Any fixes in this script need to be replicated in the Java code in\n\t\t\t\t// the RunningProcessFilterEvaluatorModule.\n\t\t\t\ttry {\n\t\t\t\t\tvar filtering = new RunningProcessesFilter();\n\t\t\t\t\tvar filterDefs = JSON.parse(rpf);\n\t\t\t\t\tthis.procs = filtering.filterResults(this.procs, filterDefs);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Doing this in the catch() makes it seem like this is fallback code when it's really\n\t\t\t\t\t// the preferred code path. Unfortunately we don't have a good way to know if someone\n\t\t\t\t\t// has activated the JavaScript (the real fallback) unless we try to use it.\n\t\t\t\t\tvar evaluator = Packages.com.snc.discovery.runningprocess.api.RunningProcessFilterEvaluatorJSProvider.get();\n\t\t\t\t\tthis.procs = JSON.parse(evaluator.filter(rpf, this.procs));\n\t\t\t\t}\n            }\n        } catch (e) {\n            if (typeof ms != 'undefined')\n                ms.log(\"Windows - Active Processes: Something went wrong while trying to filter processes. Error=\" + e);\n            else\n                // If we don't have access to ms, we are not on the MID\n                // Which means we are in classic mode:\n                DiscoveryLogger.warn(\"Unix - Active Processes: Process filtering skipped. Classic mode is not supported.\");\n        }\n        /*\n        \tCurrent is a global variable which is expected to hold a stringify JSON.\n        \tIt works for a subprobe while g_probe.setPostProcessOutput() did not work.\n        \tThe result of the probe would look like\n        \t<result>\n        \t\t<output>{\"current\": <current value> }\n        \t\t</output>\n        \t</result>\n        */\n        current = this.procs;\n    },\n\n    /*\n     * Detect the processes that have PPID that eventually point themselves in a cycle.\n     * According to MDSN (http://msdn.microsoft.com/en-us/library/aa394372(v=vs.85).aspx),\n     * MS OS would reuse a PID that was previously a process that's a parent of others.\n     * This results in an issue that we end up getting processes in a circle, but the reality is that\n     * there is actually a root. \n     */\n    findCycles: function() {\n        for (var i = 0; i < this.procs.length; i++) {\n            var proc = this.procs[i];\n            if (this.procsInCycle[proc.pid])\n                continue;\n\n            this.detectCycle(proc, []);\n        }\n    },\n\n    /*\n     * Once we know all the PPIDs that was re-used for a new process, we replace all the PPIDs\n     * that is still pointing to the old PID by prefixing them with \"99999\" in order to distinguish it from\n     * the new process. We do it here because it's possible that some other processes (not in the cycle) \n     * also has the old PPID. \n     */\n    replacePPIDs: function() {\n        for (var i = 0; i < this.procs.length; i++) {\n            var proc = this.procs[i];\n            if (this.ppidReplacement[proc.ppid])\n                proc.ppid = \"99999\" + proc.ppid;\n        }\n    },\n\n    detectCycle: function(proc, visited) {\n        var cycleStart = -1;\n        for (var i = 0; i < visited.length; i++) {\n            if (visited[i] == proc.pid) {\n                cycleStart = i;\n                break;\n            }\n        }\n\n        if (cycleStart > -1) { // We have a cycle.      \n            var smallestCD = this.pidToCreationDate[proc.pid];\n            var eldestPid = proc.pid;\n\n            for (var i = cycleStart; i < visited.length; i++) {\n                var pid = visited[i];\n                this.procsInCycle[pid] = true; // Remember the ones we've already found in a cycle              \n                var cd = this.pidToCreationDate[pid];\n                if (cd < smallestCD) {\n                    smallestCD = cd;\n                    eldestPid = pid;\n                }\n            }\n\n            // Mark the PPIDs that we need repalce\n            var a_proc = this.pidToProc[eldestPid];\n            this.ppidReplacement[a_proc.ppid] = true;\n            return;\n        }\n\n        var parent = this.pidToProc[proc.ppid];\n        if (parent) {\n            // If the parent is a process tht was previously detected to be in a cycle, \n            // we can be rest assured there's no way it's going to be in a cycle with current child process.\n            if (this.procsInCycle[proc.pid])\n                return;\n\n            visited.push(proc.pid);\n            this.detectCycle(parent, visited);\n        }\n    },\n\n    type: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_8ef5a7990a0a0ba5007a9d00e48e5e00","ecc_queue_name":"WMI: Active Processes","name":"Windows - Active Processes","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"true","classic_mode":"false","cache_results":"false","description":"Retrieve active connections infomation with powershell remoting","host_classification":"false","sys_updated_on":"2018-06-19 10:10:31","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"2","ecc_queue_source":"","sys_id":"94e843b49f321300ed6191aec32e705e","sys_updated_by":"yair.leibkowiz","sys_created_on":"2018-06-17 13:51:24","used_by_discovery":"true","sys_name":"Windows - Active Connections Session","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"yair.leibkowiz","ecc_queue_topic":"WMIRunner","sys_mod_count":"46","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n    \nrun : function() {   \t\n\t\t// Define global objects for use by subclass \n\t\tcurrent = {};\n\t\trelated_data = {};\n\n\t\t// If WMIRunner probe, convert the xml output to json before processing\n\t\tif (this.getParameter('topic') == 'WMIRunner') {\n\t\t\tvar xmlHelper = new XMLHelper();\n\t\t\tvar xmlResult = xmlHelper.toObject(output);\t\n\t\t\tif (!JSUtil.nil(xmlResult))\n\t\t\t\toutput = xmlResult;\n\t\t}\n\t\t\n\t\t// Class appropriate subclass postProcess\n    \tthis.process();\n        \n\t\tvar result = {};\n\t\t// If we have any logs, add it to the output\n\t\tif (this.logs.length > 0) {\n\t\t\tresult.logs = this.logs;\n\t\t}\n\t\t\n\t\t// If empty, do not set current\n\t\tif (!JSUtil.isEmpty(current))\n\t\t\tresult.current = current;\n\t\t\n\t\t// If empty, do not set related_data\n\t\tif (!JSUtil.isEmpty(related_data)) \n\t\t\tresult.related_data = related_data;\n\t\t\t\t\n    \t// Compare results with cache and send back json response\n    \tg_probe.setPostProcessOutput(result.current.processes);\n    },\t\n\t/**\n     * Runs the probe instance\n     */    \n    process : function() { \n\t\tvar os = g_array_util.ensureArray(output.Win32_OperatingSystem);\n        var Win32_os = os[0];\n\t\tvar Win32_osName = Win32_os.Name;\n\t\t\n\t\tvar host = this.getParameter('source');\n\t\tvar provider = new Packages.com.snc.sw.providers.wmi.WMIProviderImpl();\n\t\t\n\t\ttry {\n\t\t\tprovider.setHost(host);\n\t\t\tif (Win32_osName.indexOf('Windows 2000') != -1) {\n\t\t\t\tcurrent.processes = provider.executeCommand('netstat.exe -anp TCP');\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcurrent.processes = provider.executeCommand('netstat.exe -anop TCP');\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tprovider.closeSession();\n\t\t}\n\t}\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_94e843b49f321300ed6191aec32e705e","ecc_queue_name":"WMI: ActiveConnections","name":"Windows - Active Connections Session","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve hardware information, such as serial numbers","host_classification":"false","sys_updated_on":"2020-02-10 17:30:38","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"1","ecc_queue_source":"","sys_id":"b0fc08860a0a0baa005952556d837e18","sys_updated_by":"christopher.thompson","sys_created_on":"2008-11-18 19:03:44","used_by_discovery":"true","sys_name":"Windows - Hardware Information","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"19","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n    /**\n     * Runs the probe instance\n     */    \n    process : function() {  \n        var snm = new SerialNumberManager();\n        if (JSUtil.notNil(output.Win32_ComputerSystemProduct.IdentifyingNumber))\n            snm.add('system', output.Win32_ComputerSystemProduct.IdentifyingNumber);\n        if (JSUtil.notNil(output.Win32_ComputerSystemProduct.UUID))\n            snm.add('uuid', output.Win32_ComputerSystemProduct.UUID);\n        if (JSUtil.notNil(output.Win32_SystemEnclosure.SerialNumber))\n            snm.add('chassis', output.Win32_SystemEnclosure.SerialNumber);\n        if (JSUtil.notNil(output.Win32_BIOS.SerialNumber))\n            snm.add('bios', output.Win32_BIOS.SerialNumber);\n        if (JSUtil.notNil(output.Win32_BaseBoard.SerialNumber))\n            snm.add('baseboard', output.Win32_BaseBoard.SerialNumber);\n\n        related_data.srlArr = snm.getSerialsForCIData();\n        if (JSUtil.notNil(related_data.srlArr))\n\t\t\trelated_data.serial_array = snm.getSerialArray();\n        if (JSUtil.notNil(output.Win32_SystemEnclosure.ChassisTypes))\n            related_data.chassis_type = this.getChassisType(output.Win32_SystemEnclosure.ChassisTypes);\n    },\n\n    getChassisType: function(index) {\n        var types = [\"Other\", \"Unknown\", \"Desktop\", \"Low Profile Desktop\", \"Pizza Box\", \n                     \"Mini Tower\", \"Tower\", \"Portable\", \"Laptop\", \"Notebook\", \"Hand Held\", \n                     \"Docking Station\", \"All in One\", \"Sub Notebook\", \"Space-Saving\", \n                     \"Lunch Box\", \"Main System Chassis\", \"Expansion Chassis\", \"SubChassis\", \n                     \"Bus Expansion Chassis\", \"Peripheral Chassis\", \"Storage Chassis\", \n                     \"Rack Mount Chassis\", \"Sealed-Case PC\"];\n        return types[index - 1];\n    },\n    \n    type: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"3","sys_update_name":"discovery_probes_wmi_b0fc08860a0a0baa005952556d837e18","ecc_queue_name":"WMI: Hardware Information","name":"Windows - Hardware Information","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve information to classify the version of Windows","host_classification":"true","sys_updated_on":"2020-03-12 10:10:04","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"0","ecc_queue_source":"","sys_id":"b11360600a0a0ba500c41bcbae55c5c4","sys_updated_by":"benjamin.phan","sys_created_on":"2008-11-18 19:28:36","used_by_discovery":"true","sys_name":"Windows - Classify","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"15","sys_tags":"","post_processor_script":"","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"5","sys_update_name":"discovery_probes_wmi_b11360600a0a0ba500c41bcbae55c5c4","ecc_queue_name":"WMI: Classify","name":"Windows - Classify","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"true","description":"Retrieve memory information","host_classification":"false","sys_updated_on":"2014-10-07 22:11:39","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"1","ecc_queue_source":"","sys_id":"b141fd470a0a0ba5001d3c32c7d834fb","sys_updated_by":"josh.gerbasi","sys_created_on":"2008-11-18 20:19:31","used_by_discovery":"true","sys_name":"Windows - CPU / Memory","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"20","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n    /**\n     * Runs the probe instance\n     */    \n    process : function() {  \n\t\tvar processors = g_array_util.ensureArray(output.Win32_Processor);\n        var Win32_Processor = processors[0];\n\n        if (JSUtil.notNil(Win32_Processor.Name))\n            current.cpu_name = Win32_Processor.Name;\n        if (JSUtil.notNil(Win32_Processor.MaxClockSpeed))\n            current.cpu_speed = Win32_Processor.MaxClockSpeed;\n\n        if (JSUtil.notNil(Win32_Processor.Manufacturer))\n\t\t    current.cpu_type = Win32_Processor.Manufacturer;\n        if (processors.length > 0)\n            current.cpu_count = processors.length;\n\t\t\n\t\tvar cpuCoreCount;\n\t\tvar logicalProcessors;\t\t\n\t\tcpuCoreCount = parseInt(Win32_Processor.NumberOfCores);\n\t\tlogicalProcessors = parseInt(Win32_Processor.NumberOfLogicalProcessors);\n\n        if (JSUtil.notNil(cpuCoreCount) && cpuCoreCount > 0) {\n            current.cpu_core_count = cpuCoreCount;\t\t\n            if (JSUtil.notNil(logicalProcessors) && logicalProcessors > 0)\n                current.cpu_core_thread = logicalProcessors/cpuCoreCount;\n        }\n\n        var mem_modules = g_array_util.ensureArray(output.Win32_PhysicalMemory);\n        var moduleArray = [];\n        var total_memory = 0;\n        for (var i = 0; i < mem_modules.length; i++) {\n            var Win32_PhysicalMemory = mem_modules[i];\n            var module = {};\n            \n            module.name             = Win32_PhysicalMemory.Tag;\n            module.bank_label       = Win32_PhysicalMemory.BankLabel;\n            module.capacity         = parseFloat(Win32_PhysicalMemory.Capacity) / 1048576;\n            module.data_width       = Win32_PhysicalMemory.DataWidth;\n            module.form_factor      = this.getMemoryFormFactor(Win32_PhysicalMemory.FormFactor);\n            module.device_locator   = Win32_PhysicalMemory.DeviceLocator;\n            module.manufacturer     = Win32_PhysicalMemory.Manufacturer;\n            module.part_number      = Win32_PhysicalMemory.PartNumber;\n            module.serial_number    = Win32_PhysicalMemory.SerialNumber;\n            module.speed            = Win32_PhysicalMemory.Speed;\n            module.module_status    = Win32_PhysicalMemory.Status;\n            module.total_width      = Win32_PhysicalMemory.TotalWidth;\n            module.type             = this.getMemoryType(Win32_PhysicalMemory.MemoryType);\n            module.type_detail      = this.getMemoryTypeDetail(Win32_PhysicalMemory.TypeDetail);\n            \n            total_memory += (parseFloat(Win32_PhysicalMemory.Capacity) / 1048576);\n            moduleArray.push(module);\n        }\n\n        related_data.module_array = moduleArray;\n        if (JSUtil.notNil(total_memory))\n             current.ram = total_memory;\n    },\n\n    getMemoryFormFactor: function(key) {\n        var ffArray = ['Unknown', 'Other', 'SIP', 'DIP',\n                       'ZIP', 'SOJ', 'Proprietary', 'SIMM',\n                       'DIMM', 'TSOP', 'PGA', 'RIMM',\n                       'SODIMM', 'SRIMM', 'SMD', 'SSMP',\n                       'QFP', 'TQFP', 'SOIC', 'LCC',\n                       'PLCC', 'BGA', 'FFBGA', 'LGA'];\n        return ffArray[key];\n    },\n    \n    getMemoryType: function(key) {\n        var mtArray = ['Unknown', 'Other', 'DRAM', 'Synchronous DRAM',\n                       'Cache DRAM', 'EDO', 'EDRAM', 'VRAM',\n                       'SRAM', 'RAM', 'ROM', 'Flash',\n                       'EEPROM', 'FEPROM', 'EPROM', 'CDRAM', \n                       '3DRAM', 'SDRAM', 'SGRAM', 'RDRAM',\n                       'DDR', 'DDR2', 'DDR3'];\n        return mtArray[key];\n    },\n    \n    getMemoryTypeDetail: function(key) {\n        var tdHash = {1:'Reserved', 2:'Other', 4:'Unknown', 8:'Fast-paged',\n                      16:'Static column', 32:'Pseudo-static', 64:'RAMBUS', 128:'Synchronous',\n                      256:'CMOS', 512:'EDO', 1024:'Window DRAM', 2048:'Cache DRAM',\n                      4096:'Nonvolatile'\n                     };\n        return tdHash[key];\n    },\n\t\n\ttype: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"2","sys_update_name":"discovery_probes_wmi_b141fd470a0a0ba5001d3c32c7d834fb","ecc_queue_name":"WMI: CPU / Memory","name":"Windows - CPU / Memory","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"false","description":"Retrieve Windows installed software","host_classification":"false","sys_updated_on":"2020-03-16 18:28:52","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"0","ecc_queue_source":"","sys_id":"df4905820a0a0ba500b7ea51b460326c","sys_updated_by":"benjamin.phan","sys_created_on":"2008-10-15 01:18:29","used_by_discovery":"true","sys_name":"Windows - Installed Software","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"393","sys_tags":"","post_processor_script":"new ProbePostProcessor({\n\n\t/**\n     * Runs the probe instance\n     */    \n\tprocess : function() {\n\t\trelated_data.packages = [];\n\t\t\n\t\tvar outputFormat = this.getParameter(\"output_format\");\n\t\tvar windowsSoftwareParser = (JSUtil.nil(outputFormat) || outputFormat != \"json\") ? new WindowsInstalledSoftwareLegacy() : new WindowsInstalledSoftware();\n\t\t\n\t\twindowsSoftwareParser.process(output, related_data);\n\t},\n\n\ttype: \"ProbePostProcessor\"\n});","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"5","sys_update_name":"discovery_probes_wmi_df4905820a0a0ba500b7ea51b460326c","ecc_queue_name":"WMI: Installed Software","name":"Windows - Installed Software","execute_script_remotely":"false","sys_policy":""},{"copy_script_to_target":"false","used_by_runbook":"false","classic_mode":"false","cache_results":"true","description":"Retrieve network printer information","host_classification":"false","sys_updated_on":"2012-11-07 07:24:13","type":"Java","sys_class_name":"discovery_probes_wmi","minor_version":"","ecc_queue_source":"","sys_id":"e2c966310a0a0ba50034ee1b8877a237","sys_updated_by":"aleck.lin","sys_created_on":"2008-10-11 01:53:50","used_by_discovery":"true","sys_name":"Windows - Printers","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","ecc_queue_topic":"WMIRunner","sys_mod_count":"28","sys_tags":"","post_processor_script":"","script":"","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/91d8237704f12210559073c06a02f73b","value":"91d8237704f12210559073c06a02f73b"},"major_version":"","sys_update_name":"discovery_probes_wmi_e2c966310a0a0ba50034ee1b8877a237","ecc_queue_name":"WMI: Printers","name":"Windows - Printers","execute_script_remotely":"false","sys_policy":""}]}