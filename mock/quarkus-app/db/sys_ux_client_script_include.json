{"result":[{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"16","includes":"","sys_updated_on":"2024-12-31 14:08:28","sys_tags":"","script":"function include({ imports }) {\n  const { NowDateTime } = imports[\"sn_uxf.core_libraries\"]();\n\n  class SowChangeUtils {\n    //Sorts the cards into displayable order\n    static getSortedCards(selectedModels) {\n      let pinnedCards = selectedModels.filter(function(model) {\n        return model.isPinned;\n      });\n      let preApprovedCards = selectedModels.filter(function(model) {\n        return model.isStandard;\n      });\n      let defaultCards = selectedModels.filter(function(model) {\n        return model.isDefault;\n      });\n      let emergencyCards = selectedModels.filter(function(model) {\n        return model.isEmergency;\n      });\n      let customCards = selectedModels.filter(function(model) {\n        return model.isCustom;\n      });\n      let oobCards = selectedModels.filter(function(model) {\n        return model.isOOB;\n      });\n      let legacyCards = selectedModels.filter(function(model) {\n        return model.isLegacy;\n      });\n      let sortedModels = [\n        ...new Set([\n          ...defaultCards,\n          ...emergencyCards,\n          ...pinnedCards,\n          ...customCards,\n          ...legacyCards,\n          ...oobCards,\n          ...preApprovedCards\n        ])\n      ];\n\n      return sortedModels;\n    }\n\n    static formatDate(msDate) {\n      const isoDate = new Date(msDate).toISOString().split(\"T\");\n      return isoDate[0] + \" \" + isoDate[1].split(\".\")[0];\n    }\n\n    static getDateFromNow(duration) {\n      const MILLISECONDS = 60 * 1000;\n      const startDateMs = Date.now();\n      const endDateMs = startDateMs + duration * MILLISECONDS; // duration is always in minutes\n      return {\n        startDate: SowChangeUtils.formatDate(startDateMs),\n        endDate: SowChangeUtils.formatDate(endDateMs)\n      };\n    }\n\n    static getEmptyContactRecord() {\n      return {\n        avatarUrl: \"\",\n        name: \"Not Found\",\n        headingLevel: 3,\n        headingBadges: [],\n        subHeadingTitles: [],\n        subHeadingBadges: [],\n        contactFields: []\n      };\n    }\n\n    static getNowDateTime() {\n      return NowDateTime();\n    }\n\n    static getFormattedDateText(date, timeZone, format) {\n      if (!date) {\n        date = SowChangeUtils.getNowDateTime();\n      }\n\n      if (!format) {\n        format = \"YYYY-MM-DD HH:mm:ss\";\n      }\n\n      if (!timeZone) {\n        return date.format(format);\n      }\n\n      return date.tz(timeZone).format(format);\n    }\n\n    static escapeString(str) {\n        return str\n            .replace(/\\\\/g, '\\\\\\\\')   // Escape backslashes\n            .replace(/\"/g, '\\\\\"')     // Escape double quotes\n            .replace(/\\n/g, '\\\\n')    // Escape newlines\n            .replace(/\\r/g, '\\\\r')    // Escape carriage returns\n            .replace(/\\t/g, '\\\\t');   // Escape tabs\n    }\n  }\n\n  return SowChangeUtils;\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"0125e1c223633010b8f7dc1756bf65e7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/bccbdbb023213010785ddc1756bf6579","value":"bccbdbb023213010785ddc1756bf6579"},"sys_update_name":"sys_ux_client_script_include_0125e1c223633010b8f7dc1756bf65e7","sys_updated_by":"admin","api_name":"sn_sow_chg.SowChangeUtils","sys_created_on":"2021-11-02 11:41:48","name":"SowChangeUtils","sys_name":"SowChangeUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/bccbdbb023213010785ddc1756bf6579","value":"bccbdbb023213010785ddc1756bf6579"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"48","includes":"2bb5c53d0fa61010ad4437a98b767e7f,17c0853d0fa61010ad4437a98b767e13,881d20a10fe21010ad4437a98b767e2a","sys_updated_on":"2022-11-24 08:30:32","sys_tags":"","script":"function include({\n    imports\n}) {\n    const {\n        'sn_vtb.constants': constantsInclude,\n        'sn_vtb.utils': utilsInclude,\n        'sn_vtb.cardManagerMethods': cardManagerMethodsInclude\n    } = imports;\n\n    const {\n        BOARD: {\n            FREEFORM,\n            FLEXIBLE,\n            GUIDED\n        },\n        MENU_ITEMS: {\n            ADD_CARD,\n            HIDE_LANE,\n            MOVE_LANE,\n            DELETE_LANE,\n            ARCHIVE_ALL_CARDS,\n            COLLAPSE_ALL,\n            EXPAND_ALL,\n            MOVE_SWIMLANE,\n            HIDE_SWIMLANE,\n            DELETE_SWIMLANE,\n            ARCHIVE_CARD,\n            MOVE_CARD\n        }\n    } = constantsInclude();\n    const {\n        addUsersToCard\n    } = cardManagerMethodsInclude();\n    const {\n        cloneDeep,\n        get\n    } = utilsInclude();\n\n    function highestLaneOrder(lanes) {\n        if (lanes.length === 0) return 0;\n        return Math.max.apply(\n            Math,\n            lanes.map(function(lane) {\n                return lane.order;\n            })\n        );\n    }\n\n    function getCardActionItems(cardId, boardType, translatedMessages) {\n        const getCardActionItem = [{\n            id: 'move_card',\n            label: translatedMessages[MOVE_CARD],\n            uuid: cardId\n        }];\n        const getArchiveCardOption = [{\n            id: 'archive_card',\n            label: translatedMessages[ARCHIVE_CARD],\n            uuid: cardId\n        }];\n\n        const dropdownItems = [{\n            id: 'cardActions_section',\n            children: getCardActionItem,\n            uuid: cardId\n        }];\n        if (boardType === FREEFORM)\n            dropdownItems.unshift({\n                id: 'archiveCard_section',\n                children: getArchiveCardOption,\n                uuid: cardId\n            });\n\n        return dropdownItems;\n    };\n\n    function hasDeleteOption(lane, options) {\n        return !(\n            (options.board_type === GUIDED && lane.value === '') ||\n            (options.board_type === GUIDED && lane.cardsCount > 0) ||\n            (options.board_type === GUIDED && lane.is_choice_lane) ||\n            (options.board_type === FLEXIBLE && lane.cardsCount > 0) ||\n            (lane.is_reference_lane && options.lane_filter)\n        );\n    };\n\n    function hasSwimlaneDeleteOption(swimlane, options) {\n        return !(\n            (options.board_type === GUIDED && swimlane.value === '') ||\n            (options.board_type === GUIDED && swimlane.cardsCount > 0) ||\n            (options.board_type === GUIDED && swimlane.is_choice_lane) ||\n            (options.board_type === FLEXIBLE && swimlane.cardsCount > 0) ||\n            (swimlane.is_reference_lane && options.swimlane_filter)\n        );\n    };\n\n    function getSwimlaneActionItems(swimlane, translatedMessages) {\n        const {\n            id: swimlaneId,\n            options,\n            cardsCount\n        } = swimlane;\n        const swimlaneDropdownItems = [{\n                id: 'collapseAllSl',\n                label: translatedMessages[COLLAPSE_ALL],\n                uuid: swimlaneId,\n                disabled: swimlane.collapsed\n            },\n            {\n                id: 'expandAllSl',\n                label: translatedMessages[EXPAND_ALL],\n                uuid: swimlaneId,\n                disabled: !swimlane.collapsed\n            },\n            {\n                id: 'hideSwimlane',\n                label: translatedMessages[HIDE_SWIMLANE],\n                uuid: swimlaneId\n            },\n            {\n                id: 'moveSwimlane',\n                label: translatedMessages[MOVE_SWIMLANE],\n                uuid: swimlaneId\n            }\n        ];\n        if (hasSwimlaneDeleteOption(swimlane, options)) {\n            swimlaneDropdownItems.push({\n                id: 'deleteSwimlane',\n                label: translatedMessages[DELETE_SWIMLANE],\n                uuid: swimlaneId\n            });\n        }\n        if (options.board_type === FREEFORM && cardsCount > 0) {\n            swimlaneDropdownItems.push({\n                id: 'archiveAllCards',\n                label: translatedMessages[ARCHIVE_ALL_CARDS],\n                uuid: swimlaneId\n            });\n        }\n        return swimlaneDropdownItems;\n    };\n\n    function getLaneActionItems(lane, translatedMessages) {\n        const {\n            id: laneId,\n            options,\n            cardsCount\n        } = lane;\n        let dropdownItems = [];\n        if (!options.is2DBoard && options.can_add_task) {\n            dropdownItems.push({\n                id: 'addCard',\n                label: translatedMessages[ADD_CARD],\n                uuid: laneId\n            });\n        }\n        dropdownItems = [\n            ...dropdownItems,\n            {\n                id: 'hideLane',\n                label: translatedMessages[HIDE_LANE],\n                uuid: laneId\n            },\n            {\n                id: 'moveLane',\n                label: translatedMessages[MOVE_LANE],\n                uuid: laneId\n            }\n        ];\n        if (hasDeleteOption(lane, options)) {\n            dropdownItems.push({\n                id: 'deleteLane',\n                label: translatedMessages[DELETE_LANE],\n                uuid: laneId\n            });\n        }\n\n        if (options.board_type === FREEFORM && cardsCount > 0) {\n            dropdownItems.push({\n                id: 'archiveAllCards',\n                label: translatedMessages[ARCHIVE_ALL_CARDS],\n                uuid: laneId\n            });\n        }\n        return dropdownItems;\n    };\n\n    const transformBoardData = (boardData, boardFocusData) => {\n        const newBoardData = cloneDeep(boardData);\n        const is2DBoard = newBoardData.swimlanes.length > 0 && newBoardData.swim_lanes_enabled;\n\n        const options = {\n            show_sla: newBoardData.show_sla,\n            show_labels: newBoardData.show_labels,\n            show_cover_image: newBoardData.show_cover_image,\n            due_date_field: newBoardData.due_date_field,\n            show_card_info: newBoardData.show_card_info,\n            board_type: newBoardData.boardType,\n            card_type: (newBoardData.compact_cards || is2DBoard) ? 'compact' : 'classic'\n        };\n\n        const laneOptions = {\n            board_type: newBoardData.boardType,\n            is2DBoard: is2DBoard,\n            lane_filter: newBoardData.lane_filter,\n            lane_count: newBoardData.lanes.length,\n            total_lane_count: newBoardData.lanes.length + newBoardData.swimlanes.length,\n            field_reference_table: newBoardData.field_reference_table,\n            lane_field: newBoardData.field,\n            swimlane_field: newBoardData.swim_lane_field,\n            table: newBoardData.table,\n            reference_lane_search_field: newBoardData.reference_lane_search_field,\n            highest_lane_order: highestLaneOrder(newBoardData.lanes),\n            can_add_task: newBoardData.can_write_board && newBoardData.can_create_card\n        };\n\n        const swimlaneOptions = {\n            board_type: newBoardData.boardType,\n            swimlane_filter: newBoardData.swim_lane_filter,\n            swimlane_count: newBoardData.swimlanes.length,\n            total_lane_count: newBoardData.lanes.length + newBoardData.swimlanes.length,\n            swim_lane_field_reference_table: newBoardData.swim_lane_field_reference_table,\n            lane_field: newBoardData.field,\n            swimlane_field: newBoardData.swim_lane_field,\n            table: newBoardData.table,\n            reference_swim_lane_search_field: newBoardData.reference_swim_lane_search_field,\n            highest_swimlane_order: highestLaneOrder(newBoardData.swimlanes)\n        };\n\n        newBoardData.cards = newBoardData.cards.map((card) => {\n            if (card.isPlaceholder) return card;\n\n            // Labels\n            if (card.labels) {\n                card.labels.forEach((label) => {\n                    let boardLabel = newBoardData.labels.find((boardLabel) => boardLabel.id === label.id);\n                    //Todo: Maintain the boardLabels at card level to show in card details\n                    if (!boardLabel) return;\n                    if (!boardLabel.active) {\n                        label.active = false;\n                    }\n                    label.color = boardLabel.color;\n                    label.value = boardLabel.value;\n                });\n            }\n\n            // Card users\n            if (!card.users) addUsersToCard(card, newBoardData.users);\n\n            return {\n                ...card,\n                id: card.sys_id,\n                title: get(card, 'record.short_description.display_value', ''),\n                options: {\n                    ...options\n                }\n            };\n        });\n\n        //Add lane button placeholder\n        const addLane = {\n            id: 'addNewLane_sysId',\n            title: 'Add lane button',\n            isPlaceholder: true,\n            value: '',\n            order: laneOptions.highest_lane_order + 1,\n            board_id: newBoardData.sys_id,\n            lanes_reference_table_records: '',\n            options: {\n                ...laneOptions\n            }\n        };\n        if(boardFocusData && boardFocusData.id == 'addNewLane_sysId') {\n            addLane.isFocus = true;\n        }\n\n        const canAddLanes =\n            (newBoardData.boardType === GUIDED && newBoardData.can_create_reference_lane) ||\n            newBoardData.boardType === FLEXIBLE ||\n            newBoardData.boardType === FREEFORM;\n\n        //Add swimlane button placeholder\n        const addSwimlane = {\n            id: 'addNewSwimlane_sysId',\n            title: 'Add swimlane button',\n            isPlaceholder: true,\n            value: '',\n            order: swimlaneOptions.highest_swimlane_order + 1,\n            board_id: newBoardData.sys_id,\n            swimlanes_reference_table_records: '',\n            options: {\n                ...swimlaneOptions\n            },\n            collapsed: true,\n            addLaneButton: canAddLanes,\n            _style_: {\n                'sn-swimlane-header': {\n                    'margin-top': '12px'\n                }\n            }\n        };\n        if(boardFocusData && boardFocusData.id == 'addNewSwimlane_sysId') {\n            addSwimlane.isFocus = true;\n        }\n        const canAddSwimlanes =\n            (newBoardData.swim_lane_field_reference_table !== null && newBoardData.can_create_reference_swim_lane) ||\n            newBoardData.boardType === FLEXIBLE ||\n            newBoardData.boardType === FREEFORM;\n\n        newBoardData.hiddenLanes = newBoardData.hidden_lanes || [];\n        const hiddenLaneMap = {};\n        newBoardData.hiddenLanes.forEach((lane) => hiddenLaneMap[lane] = true);\n\n\n        newBoardData.lanes.forEach((lane) => {\n            if (lane.is_reference_lane && lane.value !== '') addLane.lanes_reference_table_records += lane.value + ',';\n        });\n\n        newBoardData.swimlanes.forEach((slane) => {\n            if (slane.is_reference_lane && slane.value !== '')\n                addSwimlane.swimlanes_reference_table_records += slane.value + ',';\n        });\n\n        newBoardData.lanes = newBoardData.lanes.filter((lane) => !newBoardData.hidden_lanes.includes(lane.sys_id));\n        newBoardData.swimlanes = newBoardData.swimlanes.filter(\n            (slane) => !newBoardData.hidden_lanes.includes(slane.sys_id)\n        );\n\n        if (is2DBoard) {\n            newBoardData.swimlanes = newBoardData.swimlanes\n                .sort((a, b) => a.order - b.order)\n                .map((slane, index) => {\n\n                    slane.order = index;\n                    slane.id = slane.sys_id;\n                    slane.title = slane.name;\n                    slane.addLaneButton = canAddLanes || newBoardData.can_create_reference_lane;\n                    //Check if card is not removed\n                    //and vertical lane should not be hidden\n                    const thisSwimlaneCards = newBoardData.cards\n                        .filter((card) => card.swim_lane_id === slane.sys_id && card.removed === false)\n                        .filter((card) => !hiddenLaneMap[card.lane_id]);\n                    slane.cardsCountPerLane = thisSwimlaneCards\n                        .reduce((cPerLane, {\n                            lane_id\n                        }) => {\n                            cPerLane[lane_id] = cPerLane[lane_id] ? 1 + cPerLane[lane_id] : 1;\n                            return cPerLane;\n                        }, {});\n                    slane.cardsCount = thisSwimlaneCards.length;\n                    slane._style_ = {\n                        'sn-swimlane-header': {\n                            'margin-top': '8px'\n                        }\n                    };\n                    return {\n                        ...slane,\n                        options: {\n                            ...swimlaneOptions\n                        }\n                    };\n                });\n        } else {\n            newBoardData.swimlanes = [];\n        }\n\n        if (!is2DBoard)\n            newBoardData._style_ = {\n                'sn-board': {\n                    //'background-color': '#B5D1C5',\n                    'overflow-y': 'hidden',\n                    'height': '100vh'\n                }\n            };\n        else\n            newBoardData._style_ = {\n                'sn-board': {\n                    //'background-color': '#B5D1C5',\n                    'height': '100vh'\n                }\n            };\n\n        newBoardData.lanes = newBoardData.lanes\n            .sort((a, b) => a.order - b.order)\n            .map((lane, index) => {\n                lane.order = index;\n                lane.id = lane.sys_id;\n                lane.title = lane.name;\n                //Check if card is not removed\n                //and horizontal lane should not be hidden\n                lane.cardsCount = newBoardData.cards.filter((card) => card.lane_id === lane.sys_id && card.removed === false)\n                    .filter((card) => !card.swim_lane_id || !hiddenLaneMap[card.swim_lane_id]).length;\n\n                if (is2DBoard) {\n                    lane._style_ = {\n                        'sn-lane': {\n                            width: '285px',\n                            padding: '4px',\n                            height: '100%'\n                        },\n                        'lane-body': {\n                            'margin-top': '8px'\n                        },\n                        'lane-footer-container': {\n                            position: 'sticky',\n                            bottom: '45px'\n                        }\n                    };\n                } else {\n                    lane._style_ = {\n                        'sn-lane': {\n                            width: '285px',\n                            padding: '4px',\n                            'overflow-y': 'auto',\n                            height: 'calc(100% - 58px)'\n                        },\n                        'lane-footer-container': {\n                            position: 'sticky',\n                            bottom: '30px'\n                        }\n                    };\n                }\n                return {\n                    ...lane,\n                    options: {\n                        ...laneOptions\n                    }\n                };\n            });\n\n        if (canAddLanes) newBoardData.lanes.push(addLane);\n        if (canAddSwimlanes && newBoardData.swim_lanes_enabled) newBoardData.swimlanes.push(addSwimlane);\n\n        const recordTypeToEvamTemplate = newBoardData.recordTypeToEvamTemplate;\n        if (recordTypeToEvamTemplate) {\n            const recordTypes = Object.keys(recordTypeToEvamTemplate);\n            if (recordTypes.length) {\n                const cardConfigOverride = (newBoardData.cardConfigOverride = {\n                    ...newBoardData.cardConfigOverride\n                });\n\n                newBoardData.cards.forEach((card) => {\n                    const record = card.record;\n                    const recordType = record ? record.sys_class_name : null;\n\n                    if (recordType && recordTypes.includes(recordType)) {\n                        const template = recordTypeToEvamTemplate[recordType];\n\n                        cardConfigOverride[card.sys_id] = {\n                            ...cardConfigOverride[card.sys_id],\n                            tag: template.component\n                        };\n\n                        const mappings = template.mappings;\n                        if (mappings) {\n                            const propNames = Object.keys(mappings);\n                            propNames.forEach((propName) => {\n                                let propObj = record[mappings[propName]];\n                                if (propObj) card[propName] = propObj.display_value;\n                            });\n                        }\n                    }\n                });\n            }\n        }\n        newBoardData.cards = newBoardData.cards.filter((card) => card.removed === false);\n\n        // Constructing component menu action items\n        newBoardData.lanes.forEach((lane) => {\n            lane.options.menu_actions = getLaneActionItems(lane, newBoardData.translatedMessages);\n        });\n\n        newBoardData.swimlanes.forEach((swimlane) => {\n            swimlane.options.menu_actions = getSwimlaneActionItems(swimlane,newBoardData.translatedMessages);\n        });\n\n        newBoardData.cards.forEach((card) => {\n            if (card.id !== 'placeholderCard' && card.options)\n                card.options.menu_actions = getCardActionItems(card.id, card.options.board_type, newBoardData.translatedMessages);\n        });\n        \n        return newBoardData;\n    };\n\n    return {\n        transformBoardData\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"05552db60fe210104c39df6d58767e65","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_05552db60fe210104c39df6d58767e65","sys_updated_by":"admin","api_name":"sn_vtb.boardManagerMethods","sys_created_on":"2020-08-14 05:55:39","name":"boardManagerMethods","sys_name":"boardManagerMethods","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"5","includes":"","sys_updated_on":"2022-08-04 08:11:22","sys_tags":"","script":"function include({\n    imports\n}, api = {}) {\n    return {\n        trackUsage: (eventName, eventPayload) => {\n            api.emit('MACROPONENT_TRACK_USAGE_REQUESTED', {\n                event: eventName,\n                value: eventPayload\n            });\n        }\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"0a8ca819536011102958ddeeff7b1227","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_update_name":"sys_ux_client_script_include_0a8ca819536011102958ddeeff7b1227","sys_updated_by":"admin","api_name":"sn_oe_sfs.CITelemetry","sys_created_on":"2022-07-06 12:54:58","name":"CITelemetry","sys_name":"CITelemetry","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Data Filter\"\n    },\n    {\n        \"message\": \"Select policy type\"\n    },\n    {\n        \"message\": \"Review\"\n    },\n    {\n        \"message\": \"Assignment\"\n    },\n    {\n        \"message\": \"Data Filter\"\n    },\n    {\n        \"message\": \"Options\"\n    },\n    {\n        \"message\": \"sn_cmdb_ws.generalInformation.titleCase\"\n    },\n    {\n        \"message\": \"Review\"\n    },\n    {\n        \"message\": \"Schedule\"\n    }\n]","access":"package_private","sys_mod_count":"33","includes":"","sys_updated_on":"2023-11-03 18:18:47","sys_tags":"","script":"function include({ imports }) {\n\n    const POLICY_FORM_VIEWS = {\n        ASSIGNMENT: \"assignment\",\n        DATA_FILTER: \"data_filter\",\n        GENERAL_INFO: \"general_info\",\n        OPTIONS: \"options\",\n        REVIEW: \"review\",\n        SCHEDULE: \"schedule\"\n    }\n\n    const SCHEDULE_TYPES = {\n        DAILY: \"daily\",\n        WEEKLY: \"weekly\",\n        MONTHLY: \"monthly\",\n        PERIODICALLY: \"periodically\",\n        ON_DEMAND: \"on_demand\",\n        ONCE: \"once\"\n    }\n\n    const SCHEDULE_IDS = {\n        RUN_TYPE: \"run_type\",\n        RUN_TIME: \"run_time\",\n        RUN_START: \"run_start\",\n        RUN_PERIOD: \"run_period\",\n        RUN_DAYOFWEEK: \"run_dayofweek\",\n        RUN_DAYOFMONTH: \"run_dayofmonth\",\n        RUN_PERIOD_DISPLAY: \"run_period_display\"\n    }\n\n    const FORM_ICONS = {\n        LOCKED : {\n             \"statuses\": [\n                    {\n                        \"type\": \"icon\",\n                        \"icon\": \"lock-outline\"\n                    }\n                ],\n                \"disabled\": true\n         }, \n         EDITING : { \n                \"statuses\": [\n                    {\n                        \"type\": \"icon\",\n                        \"icon\": \"circle-semi-check-outline\"\n                    }\n                ],\n                \"disabled\": false\n         }, \n         DONE : {\n                 \"statuses\": [\n                    {\n                        \"type\": \"icon\",\n                        \"icon\": \"circle-check-outline\"\n                    }\n                ],\n                \"disabled\": false\n         }\n    };\n\n    const FORM_STATE = {\n\n        \"assignment\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": POLICY_FORM_VIEWS.OPTIONS,\n            \"previousView\": POLICY_FORM_VIEWS.DATA_FILTER,\n            \"disabled\": true,\n            ...FORM_ICONS.LOCKED\n\n        },\n        \"data_filter\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": POLICY_FORM_VIEWS.ASSIGNMENT,\n            \"previousView\": POLICY_FORM_VIEWS.GENERAL_INFO,\n            ...FORM_ICONS.LOCKED\n        },\n        \"general_info\": {\n            \"isHidden\": false,\n            \"label\": \"\",\n            \"nextView\": POLICY_FORM_VIEWS.DATA_FILTER,\n            \"previousView\": \"\",\n            ...FORM_ICONS.EDITING\n        },\n        \"options\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": POLICY_FORM_VIEWS.SCHEDULE,\n            \"previousView\": POLICY_FORM_VIEWS.ASSIGNMENT,\n            ...FORM_ICONS.LOCKED\n        },\n        \"review\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": \"\",\n            \"previousView\": POLICY_FORM_VIEWS.SCHEDULE,\n            ...FORM_ICONS.LOCKED\n        },\n        \"schedule\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": POLICY_FORM_VIEWS.REVIEW,\n            \"previousView\": POLICY_FORM_VIEWS.OPTIONS,\n            ...FORM_ICONS.LOCKED\n        }\n    }\n\n   const EXCLUSION_FORM_VIEWS = {\n          DATA_FILTER : \"data_filter\",\n          POLICY_TYPE : \"policy_type\",\n          REVIEW: \"review\"\n   }\n\n   const EXCLUSION_FORM_STATE = {\n        \"data_filter\": {\n            \"isHidden\": false,\n            \"label\": \"\",\n            \"nextView\":EXCLUSION_FORM_VIEWS.POLICY_TYPE,\n            \"previousView\": \"\",\n            ...FORM_ICONS.EDITING\n        },\n        \"policy_type\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": EXCLUSION_FORM_VIEWS.REVIEW,\n            \"previousView\": EXCLUSION_FORM_VIEWS.DATA_FILTER,\n            ...FORM_ICONS.LOCKED\n        },\n        \"review\": {\n            \"isHidden\": true,\n            \"label\": \"\",\n            \"nextView\": \"\",\n            \"previousView\": EXCLUSION_FORM_VIEWS.POLICY_TYPE,\n            ...FORM_ICONS.LOCKED\n        }\n    };\n\n    /**\n     *\n     * @param helpers The UXF helpers class, required for translations\n     * @returns state map for the Exclusion form\n     */\n    const _getExclusionFormViewStateMap = async (helpers) => {\n        const formState = EXCLUSION_FORM_STATE;\n        formState[EXCLUSION_FORM_VIEWS.DATA_FILTER].label = await helpers.translate(\"Data Filter\");\n        formState[EXCLUSION_FORM_VIEWS.POLICY_TYPE].label = await helpers.translate(\"Select policy type\");\n        formState[EXCLUSION_FORM_VIEWS.REVIEW].label = await helpers.translate(\"Review\");\n        return formState;\n    }\n\n    /**\n     * resetCurrentTab - something changed. set current view to editing and all next views to locked and disabled\n     * change the current view's form icon status to editing, and next view's form icon status to locked\n     * @param selectedTabId current selected tab Id of the form page\n     * @param formViewStateMap - current form view state map of the form\n     * @returns updated formViewStateMap \n     */\n     var _resetCurrentTab = (selectedTabId, formViewStateMap) => {\n         formViewStateMap[selectedTabId].statuses = FORM_ICONS.EDITING.statuses;\n         formViewStateMap[selectedTabId].disabled = false;\n\n         let nextView = formViewStateMap[selectedTabId].nextView;\n         while(nextView != \"\") {\n             formViewStateMap[nextView].statuses = FORM_ICONS.LOCKED.statuses;\n             formViewStateMap[nextView].disabled = true;\n             nextView = formViewStateMap[nextView].nextView;\n         }\n        return  formViewStateMap;\n    }\n\n    \n\n    /**\n     * \n     * @param helpers The UXF helpers class, required for translations\n     * @returns state map for the policy form\n     */\n    const _getFormViewStateMap = async (helpers) => {\n\n        const formState = FORM_STATE;\n        formState[POLICY_FORM_VIEWS.ASSIGNMENT].label = await helpers.translate(\"Assignment\");\n        formState[POLICY_FORM_VIEWS.DATA_FILTER].label = await helpers.translate(\"Data Filter\");\n        formState[POLICY_FORM_VIEWS.OPTIONS].label = await helpers.translate(\"Options\");\n        formState[POLICY_FORM_VIEWS.GENERAL_INFO].label = await helpers.translate(\"sn_cmdb_ws.generalInformation.titleCase\")\n        formState[POLICY_FORM_VIEWS.REVIEW].label = await helpers.translate(\"Review\");\n        formState[POLICY_FORM_VIEWS.SCHEDULE].label = await helpers.translate(\"Schedule\");\n        return formState;\n    }\n\n    /**\n     * \n     * @param stateMap \n     * @returns true if the back button is hidden on this view\n     */\n    const _getHideBackButton = (currentView) => {\n        return FORM_STATE[currentView] && !FORM_STATE[currentView].previousView\n    }\n\n    /**\n     * \n     * @param stateMap \n     * @returns required fields for a given policy type\n     */\n    const _getHideContinueButton = (currentView) => {\n        return FORM_STATE[currentView] && !FORM_STATE[currentView].nextView\n    }\n\n     /**\n     *\n     * @param stateMap\n     * @returns true if the back button is hidden on this view\n     */\n    const _getExclusionHideBackButton = (currentView) => {\n        return EXCLUSION_FORM_STATE[currentView] && !EXCLUSION_FORM_STATE[currentView].previousView\n    }\n\n    /**\n     *\n     * @param stateMap\n     * @returns true if the continue button is hidden on this view\n     */\n    const _getExclusionHideContinueButton = (currentView) => {\n        return EXCLUSION_FORM_STATE[currentView] && !EXCLUSION_FORM_STATE[currentView].nextView\n    }\n\n    /**\n     * Get the list of schedule component IDs that are hidden given a schedule run_type\n     * @param runType daily, weekly, on_demand, etc\n     * @returns array\n     */\n    const _getHiddenScheduleComponentsByType = (runType) => {\n        switch (runType) {\n            case (SCHEDULE_TYPES.DAILY):\n                return ['run_start', 'run_period', 'run_dayofweek', 'run_dayofmonth'];\n            case (SCHEDULE_TYPES.WEEKLY):\n                return ['run_start', 'run_period', 'run_dayofmonth'];\n            case (SCHEDULE_TYPES.MONTHLY):\n                return ['run_start', 'run_period', 'run_dayofweek'];\n            case (SCHEDULE_TYPES.PERIODICALLY):\n                return ['run_time', 'run_dayofmonth', 'run_dayofweek'];\n            case (SCHEDULE_TYPES.ONCE):\n                return ['run_time', 'run_period', 'run_dayofmonth', 'run_dayofweek'];\n            case (SCHEDULE_TYPES.ON_DEMAND):\n                return ['run_time', 'run_start', 'run_period', 'run_dayofmonth', 'run_dayofweek'];\n        }\n    }\n\n    return {\n        POLICY_FORM_VIEWS,\n        SCHEDULE_TYPES,\n        SCHEDULE_IDS,\n        FORM_ICONS,\n        getFormViewStateMap: _getFormViewStateMap,\n        getHideBackButton: _getHideBackButton,\n        getHideContinueButton: _getHideContinueButton,\n        EXCLUSION_FORM_VIEWS,\n        getExclusionFormViewStateMap : _getExclusionFormViewStateMap,\n        getExclusionHideBackButton : _getExclusionHideBackButton,\n        getExclusionHideContinueButton : _getExclusionHideContinueButton,\n        getHiddenScheduleComponentsByType: _getHiddenScheduleComponentsByType,\n        resetCurrentTab : _resetCurrentTab\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"0b5e7fb84358b51017b739603ab8f2cf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_0b5e7fb84358b51017b739603ab8f2cf","sys_updated_by":"admin","api_name":"sn_cmdb_ws.DataManagerStateUtil","sys_created_on":"2023-07-25 21:10:21","name":"DataManagerStateUtil","sys_name":"DataManagerStateUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"98f9726c0f662010ad4437a98b767e0e","sys_updated_on":"2021-02-24 07:24:25","sys_tags":"","script":"function include({\n    imports\n}, {\n    lanes,\n    laneIdList\n}) {\n    const {\n        'sn_vtb.loadashUtil': loadashUtil\n    } = imports;\n    const {\n        cloneDeep\n    } = loadashUtil();\n\n    const cLanes = cloneDeep(lanes);\n    const storeLaneObjs = {};\n    cLanes.forEach((lane) => (storeLaneObjs[lane.sys_id] = lane));\n    let reorderedLanes;\n\n    // Reordered lane id's may contain lanes that do not yet exist in the board, filter them out\n    const lReorderedIds = laneIdList.filter((id) => storeLaneObjs[id]);\n    if (lReorderedIds.length > 0) {\n        reorderedLanes = lReorderedIds.map((laneId, index) => {\n            const lane = storeLaneObjs[laneId];\n            lane.order = laneIdList.indexOf(laneId);\n            return lane;\n        });\n    }\n\n    return lReorderedIds.length > 0 ? reorderedLanes : cLanes\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"0b8a766c0f662010ad4437a98b767e89","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_0b8a766c0f662010ad4437a98b767e89","sys_updated_by":"admin","api_name":"sn_vtb.reorderLanes","sys_created_on":"2021-02-22 12:50:54","name":"reorderLanes","sys_name":"reorderLanes","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2022-12-19 08:30:59","sys_tags":"","script":"function include() {\n    const addDataToContext = (args) => {\n        const { api: { data, context } } = args;\n        context.props = {\n            ...context.props,\n            table: context.props.inputTable,\n            sysId: context.props.inputSysId\n        }\n    }\n\n    return {\n       addDataToContext\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"0eb01985c1631110f877cd6cee9a904d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_update_name":"sys_ux_client_script_include_0eb01985c1631110f877cd6cee9a904d","sys_updated_by":"admin","api_name":"sn_record_page.ContextHelper","sys_created_on":"2022-12-02 00:03:14","name":"ContextHelper","sys_name":"ContextHelper","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"23","includes":"","sys_updated_on":"2023-09-12 23:55:33","sys_tags":"","script":"function include({\n    imports\n}) {\n    var INTEGRATION_EXEC_TREND_TABS = [\n        'PROCESSING_RATE',\n        'IMPORT_COUNT'\n    ];\n\n    var INTEGRATION_EXEC_TREND_INDICATORS = {\n        PROCESSING_RATE: {\n            'id': \"408aaad2ebf2211094bbb5d5d85228bd\",\n            'breakdownId': \"482ac39eeb36211094bbb5d5d852285e\"\n        },\n        IMPORT_COUNT: {\n            'id': 'b43b2616ebf2211094bbb5d5d8522828',\n            'breakdownId': '482ac39eeb36211094bbb5d5d852285e'\n        }\n    };\n\n    function _buildPAConfig(selectedTab, selectedApps) {\n        var selectedAppsId = [];\n        for (var i in selectedApps) {\n            selectedAppsId.push(selectedApps[i].id);\n        }\n        var indicatorConfig = INTEGRATION_EXEC_TREND_INDICATORS[selectedTab];\n        var paConfig = {\n            \"showConfidenceBand\": selectedApps.length === 1,\n            \"trendBy\": {\n                \"trendByFrequency\": \"date\",\n                \"trendByFields\": [{\n                    \"field\": \"anything\",\n                    \"metric\": \"YVc1a2FXTmhkRzl5WTJKa09Ua3lPVGsyTURVeVlUVTFNR1k0TnpjM01qQXpOR1EwTkRNelpETXhOamd5TlRVd01qTTJPRGt3MTY4MjU1MDIzODE4OA==\"\n                }]\n            },\n            \"groupBy\": selectedApps.length === 1 ? null : [{\n                \"groupBy\": [{\n                    \"dataSource\": \"aW5kaWNhdG9yY2JkOTkyOTk2MDUyYTU1MGY4Nzc3MjAzNGQ0NDMzZDMxNjgyNTUwMjM2ODkw\",\n                    \"groupByField\": indicatorConfig.breakdownId,\n                    \"isRange\": false,\n                    \"isChoice\": false,\n                    \"isPaBucket\": false\n                }]\n            }],\n            \"metrics\": [{\n                \"dataSource\": \"aW5kaWNhdG9yY2JkOTkyOTk2MDUyYTU1MGY4Nzc3MjAzNGQ0NDMzZDMxNjgyNTUwMjM2ODkw\",\n                \"id\": \"YVc1a2FXTmhkRzl5WTJKa09Ua3lPVGsyTURVeVlUVTFNR1k0TnpjM01qQXpOR1EwTkRNelpETXhOamd5TlRVd01qTTJPRGt3MTY4MjU1MDIzODE4OA==\",\n                \"aggregateIndicator\": \"\",\n                \"frequency\": 10,\n                \"numberFormat\": {\n                    \"customFormat\": false\n                },\n                \"label\" : selectedApps.length === 1 ? selectedApps[0].label : \"\",\n                \"axisId\": \"primary\"\n            }],\n            \"datasource\": [{\n                \"allowRealTime\": true,\n                \"allowTotalValue\": false,\n                \"indicatorType\": \"1\",\n                \"isScriptedIndicator\": false,\n                \"sourceType\": \"indicator\",\n                \"uuid\": {\n                    \"breakdowns\": [{\n                        \"sysId\": indicatorConfig.breakdownId,\n                        \"elementSysIds\": selectedAppsId\n                    }],\n                    \"indicator\": indicatorConfig.id\n                },\n                \"id\": \"aW5kaWNhdG9yY2JkOTkyOTk2MDUyYTU1MGY4Nzc3MjAzNGQ0NDMzZDMxNjgyNTUwMjM2ODkw\",\n                \"dataCategories\": [\"trend\", \"group\", \"simple\"]\n            }]\n        };\n        return paConfig;\n    }\n\n    return {\n        INTEGRATION_EXEC_TREND_TABS,\n        INTEGRATION_EXEC_TREND_INDICATORS,\n        buildPAConfig: _buildPAConfig\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"0fb5aaa3ebcb211094bbb5d5d852285a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_0fb5aaa3ebcb211094bbb5d5d852285a","sys_updated_by":"maint","api_name":"sn_cmdb_ws.cmdbWSIntegrationUtil","sys_created_on":"2023-06-02 00:22:44","name":"cmdbWSIntegrationUtil","sys_name":"cmdbWSIntegrationUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2024-02-07 04:16:42","sys_tags":"","script":"async function include({imports},helpers,url) {\nurl = '/api/sn_bm_client/benchmark_client_api/'+url;\nvar response = await helpers.snHttp(url,{\nmethod: 'GET',\nbody: {}\n});\nreturn response;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"111a7a44775c021017dea86eaf5a99be","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_update_name":"sys_ux_client_script_include_111a7a44775c021017dea86eaf5a99be","sys_updated_by":"admin","api_name":"sn_sd.getBmInfo","sys_created_on":"2024-02-07 04:16:42","name":"getBmInfo","sys_name":"getBmInfo","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"15","includes":"","sys_updated_on":"2022-10-07 10:13:07","sys_tags":"","script":"function include({imports}) {\n    class DebounceScheduleAssist {\n        static debounce(timerId, fn, helpers) {\n            if (timerId > -1)\n                helpers.timing.clearTimeout(timerId);\n\n            timerId = helpers.timing.setTimeout(fn, 300);\n            return timerId;\n        }\n     }\n     return DebounceScheduleAssist;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"16d15bfc775a1110e5dad9d28a5a99b6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/bccbdbb023213010785ddc1756bf6579","value":"bccbdbb023213010785ddc1756bf6579"},"sys_update_name":"sys_ux_client_script_include_16d15bfc775a1110e5dad9d28a5a99b6","sys_updated_by":"admin","api_name":"sn_sow_chg.schedulingAssistantDebounce","sys_created_on":"2022-09-30 11:28:11","name":"schedulingAssistantDebounce","sys_name":"schedulingAssistantDebounce","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/bccbdbb023213010785ddc1756bf6579","value":"bccbdbb023213010785ddc1756bf6579"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"7fd420bf43010210717d19405bb8f2a8,77808c4443020210717d19405bb8f2fd","sys_updated_on":"2024-06-07 07:04:34","sys_tags":"","script":"/**\n * \n * The Guided Experience Component can be used to create multi-step wizard-like experiences for information intake.\n * \n * Sample Data Model:\n * \n * {\n *     \"buttons\": [\n *         {\n *             \"action\": \"reset\",\n *             \"enabled\": true,\n *             \"eventName\": \"ON_START_OVER_BUTTON_CLICKED\",\n *             \"label\": \"\",\n *             \"modalWindowName\": \"startOverModal\",\n *             \"name\": \"startOver\",\n *             \"position\": \"top-right\",\n *             \"showConfirmation\": true,\n *             \"tooltip\": \"\",\n *             \"variant\": \"secondary\",\n *             \"visible\": true\n *         }\n *     ],\n *     \"contentTree\": {\n *         \"completedIcon\": \"circle-check-fill\",\n *         \"defaultIcon\": \"circle-outline\"\n *     },\n *     \"modalWindow\": [\n *         {\n *             \"description\": \"\",\n *             \"name\": \"exitModal\",\n *             \"primaryButton\": {\n *                 \"label\": \"\",\n *                 \"variant\": \"negative-primary\"\n *             },\n *             \"secondaryButton\": {\n *                 \"label\": \"Close\"\n *             },\n *             \"title\": \"\",\n *             \"action\": \"exit\"\n *         },\n *         {\n *             \"description\": \"\",\n *             \"name\": \"startOverModal\",\n *             \"primaryButton\": {\n *                 \"label\": \"\",\n *                 \"variant\": \"primary\"\n *             },\n *             \"secondaryButton\": {\n *                 \"label\": \"Close\"\n *             },\n *             \"title\": \"\",\n *             \"action\": \"reset\"\n *         }\n *     ],\n *     \"pageHeader\": {\n *         \"css\": null,\n *         \"title\": \"\"\n *     },\n *     \"subPages\": [\n *         {\n *             \"buttonBehaviour\": {\n *                 \"complete\": \"disabled\",\n *                 \"skipAndExit\": \"visible\",\n *                 \"startOver\": \"visible\"\n *             },\n *             \"data\": null,\n *             \"getDataFrom\": [\n *                 \"criteria\"\n *             ],\n *             \"label\": \"\",\n *             \"name\": \"takeAction\",\n *             \"route\": \"simulator-take-action\",\n *             \"visible\": true\n *         }\n *     ]\n * }\n * \n *\n */\n\nfunction include({ imports }, api, helpers) {\n\n\tconst simUtil = imports[\"sn_access_analyzer.AccessSimulatorUtil\"](api, helpers);\n\t\n    let GEConf = api.state.guidedExperienceConf;\n\n    let eventHandlers = {};\n\n    /**\n     * handlers to handled events from subpages\n     */\n    let messageReceiveHandlers = {};\n\n    const NAV_PAGE = \"NAV_PAGE\";\n    const PAGE_OPEN = \"PAGE_OPEN\";\n    const UPDATE_CONF = \"UPDATE_CONF\";\n    const SHOW_LOADER = \"SHOW_LOADER\";\n    const HIDE_LOADER = \"HIDE_LOADER\";\n    const BUTTON_CLICKED = \"BUTTON_CLICKED\";\n    const ADD_NOTIFICATIONS = \"ADD_NOTIFICATIONS\";\n    const PAGE_CLOSE_REQUEST = \"PAGE_CLOSE_REQUEST\";\n    const PAGE_CLOSE_RESPONSE = \"PAGE_CLOSE_RESPONSE\";\n    const MACROPONENT_VIEWPORT_LOAD_REQUESTED = \"MACROPONENT_VIEWPORT_LOAD_REQUESTED\";\n    const STORE_DATA = \"STORE_DATA\";\n    \n    const JSONQuery = imports[\"sn_access_analyzer.JSONQuery\"]();\n\n    const GE_MODAL_WINDOW = \"geModalWindow\";\n    const MODAL_WINDOW_BUTTON_EXIT = \"GEMW_ButtonExit\";\n    const MODAL_WINDOW_BUTTON_CLOSE = \"GEMW_ButtonClose\";\n\n\n    function onPageReady() {\n        openPage(0);\n    }\n\n    /**\n     * Generate content tree from sub pages\n     */\n    function init() {\n    \t\n        let listItems = [];\n        let selectedItemId = null;\n        let icon = GEConf.contentTree.defaultIcon;\n\n        GEConf.activePageIndex = 0;\n        GEConf.activeModalWindow = null;\n        GEConf.contentTree.listItems = [];\n        GEConf.contentTree.selectedItem = [];\n\n        /**\n         * Prepare data for content tree\n         */\n        GEConf.subPages.map(attrs => new SubPage(attrs)).forEach((subPage, index) => {\n            if (!subPage.isVisible())\n                return;\n            listItems.push({\n                disabled: !subPage.isEnabled(),\n                id: subPage.getName(),\n                index: index,\n                label: subPage.getLabel(),\n                statuses: [{\n                    icon: icon,\n                    type: \"icon\"\n                }]\n            });\n            subPage.getAttrs().data = {};\n            if(selectedItemId == null && subPage.isEnabled())\n                selectedItemId = subPage.getName();\n        });\n        updateConf({\n            \"contentTree.listItems\": listItems,\n            \"contentTree.selectedItem\": [[selectedItemId]]\n        });\n    }\n\n    function gotoPrevPage() {\n        gotoPage(GEConf.activePageIndex - 1);\n    }\n\n    function gotoNextPage() {\n        gotoPage(GEConf.activePageIndex + 1);\n    }\n\n    /**\n     * Reset the conent tree and goto first page\n     */\n    function reset() {\n        init();\n        openPage(0);\n    }\n\n    function exit() {\n        simUtil.hideLoader();\n        GEConf.activePageIndex = 0;\n        let li = GEConf.contentTree.listItems;\n        li.forEach( (item, index) => {\n                item.disabled = index > 0,\n                item.statuses[0].icon = GEConf.contentTree.defaultIcon\n        });\n        updateConf({\n                \"contentTree.listItems\": li,\n                \"contentTree.selectedItem\": [[li[0].id]]\n        });\n        simUtil.updateScreenStatus(false);\n        let redirectURI = GEConf.homeURI;\n        helpers.navigate.to(redirectURI.route, redirectURI.params, redirectURI.fields);\n    }\n\n    function gotoPage(pageIndex) {\n        let activePageIndex = GEConf.activePageIndex;\n        if (pageIndex < 0 || activePageIndex == pageIndex || pageIndex >= GEConf.contentTree.listItems.length) {\n            return;\n        }\n        let currPage = getPageByIndex(activePageIndex);\n\n        /**\n         * call nav_page handler from client script\n         */\n        let res = emit(NAV_PAGE, currPage, getPageByIndex(pageIndex));\n        if (!res) {\n            return updateConf(\"contentTree.selectedItem\", [[GEConf.contentTree.listItems[activePageIndex].id]]);\n        }\n\n\n        /**\n         * Send message to sub-page to process something before open other pages\n         * As part of the request sending activePageIndex & pageIndex\n         */\n        closePage({\n            activePageIndex: activePageIndex,\n            nextPageIndex: pageIndex\n        });\n    }\n\n    /**\n     * Once PAGE_CLOSE_REQUEST event send to the sub-page, the sub-page will emit the\n     * PAGE_CLOSE_RESPONSE event with request and result data\n     */\n    function _pageCloseResponseHandler(request) {\n        simUtil.hideLoader();\n\n        let nIds = GEConf.notificationIds || [];\n        let obj = nIds.map(id => ({ id: id }));\n        if (obj.length > 0) {\n            api.emit(\"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\", {\n                items: obj\n            });\n        }\n        GEConf.notificationIds = [];\n\n        GEConf.activePageIndex = request.nextPageIndex;\n\n        let contentTreeListItems = GEConf.contentTree.listItems;\n        let currPageItem = contentTreeListItems[request.nextPageIndex];\n        currPageItem.disabled = false;\n\n        /**\n         * Change the selected icon, if we move forward\n         */\n        if (request.nextPageIndex > request.activePageIndex) {\n            contentTreeListItems[request.activePageIndex].statuses[0].icon = GEConf.contentTree.completedIcon;\n        }\n\n        updateConf({\n            \"contentTree.listItems\": contentTreeListItems,\n            \"contentTree.selectedItem\": [[currPageItem.id]]\n        });\n\n        openPage(request.nextPageIndex);\n    }\n\n    function openPage(pageIndex) {\n\n        GEConf.activePageIndex = pageIndex;\n        let page = getPageByIndex(pageIndex)\n        if(page.showInitialLoader()) {\n        \tsimUtil.showLoader();\n        }\n        \n        /**\n         * Get the data based on configuration and prepare dataSet\n         * this dataSet will be passed as part of MACROPONENT_READY event\n         */\n        var dataSet = {};\n        dataSet[page.getName()] = page.getData();\n        page.getDataFrom().forEach(pageName => {\n            let pg = getPageByName(pageName);\n            dataSet[pageName] = pg.getData();\n        });\n\n        /**\n         * sendMessage should be called after GEConf.activePageIndex, since\n         * the route is being taken from activePage, activePage depends on activePageIndex\n         */\n        \n        var pageParams = {};\n        Object.keys(api.context.props)\n        \t.filter(name => api.context.props[name])\n        \t.forEach(propName => pageParams[propName] = api.context.props[propName]);\n\n        sendMessage(PAGE_OPEN, {\n            conf: page.getAttrs(),\n            pageParams: pageParams,\n            dataSet: dataSet\n        });\n\n        var buttonBehaviour = page.getButtonBehaviour();\n        /**\n         * Adjust button based of active page\n         */\n        GEConf.buttons.forEach(button => {\n            if (!buttonBehaviour[button.name]) {\n                button.visible = false;\n                return;\n            }\n            let beh = buttonBehaviour[button.name];\n            button.visible = true;\n            switch(buttonBehaviour[button.name]) {\n                case \"hidden\":\n                    button.visible = false;\n                    break;\n                case \"disabled\":\n                    button.enabled = false;\n                    break;\n            }\n        });\n        refreshEmbeddedHelp(pageIndex);\n    }\n\n    function closePage(req) {\n        sendMessage(PAGE_CLOSE_REQUEST,req);\n    }\n\n    function getActivePage() {\n        return getPageByIndex(GEConf.activePageIndex);\n    }\n\n    function getPageByIndex(pageIndex) {\n        return new SubPage(GEConf.subPages[pageIndex]);\n    }\n\n    function getPageByName(name) {\n        return new SubPage(getConf(`subPages[@name=${name}][0]`));\n    }\n\n    /**\n     * Send message to sub page.\n     */\n    function sendMessage(eventName, payload) {\n        let activePage = getActivePage();\n\n        /**\n         * In data object \"timestamp\" is required in order to MACROPONENT_PROPERTY_CHANGE event handler to receive th event.\n         */\n\n        let data = {\n            eventName: eventName,\n            payload: payload,\n            timestamp: Date.now()\n        }\n\n        /**\n         * Emit below event with route id which subpage is currently active\n         */\n        api.emit(MACROPONENT_VIEWPORT_LOAD_REQUESTED, {\n            viewportElementId: 'viewport_1',\n            route: activePage.getRoute(),\n            fields: {\n                payload: data\n            }\n        });\n    }\n\n    /**\n     * Get config data by key\n     * ie: button.back.label\n     */\n    function getConf(key) {\n        return JSONQuery.find(GEConf, key);\n    }\n\n    /**\n     * Update GEConf state variable\n     */\n    function updateConf(key, value) {\n        api.setState(\"guidedExperienceConf\", ctx => {\n            let cv = {...ctx.currentValue};\n            JSONQuery.update(cv, key, value);\n            return cv;\n        });\n    }\n\n    function _buttonClickHandler(event) {\n\n        if (event.elementId == MODAL_WINDOW_BUTTON_CLOSE)\n            return closeModal();\n\n        if (event.elementId == MODAL_WINDOW_BUTTON_EXIT) {\n            let activeModal = GEConf.activeModalWindow;\n            closeModal();\n            _takeAction(activeModal.action);\n            return;\n        }\n\n        let button = event.context.item.value;\n        let eventName = button.eventName ? button.eventName : BUTTON_CLICKED;\n        /**\n         * Send event to active subpage\n         */\n        sendMessage(eventName, button);\n\n        if (_hasEventHandler(eventName)) {\n            emit(eventName, button)\n            return;\n        }\n\n        if (button.showConfirmation)\n            return openModal(button.modalWindowName);\n\n        _takeAction(button.action);\n    }\n\n    function _takeAction(action) {\n        /**\n         * Handle for default buttons (next & back)\n         */\n        switch (action) {\n            case \"next\":\n                return gotoNextPage();\n            case \"back\":\n                return gotoPrevPage();\n            case \"reset\":\n                return reset();\n            case \"exit\":\n                return exit();\n\n        }\n    }\n\n    function onReceive(eventName, handler) {\n        messageReceiveHandlers[eventName] = handler\n    }\n\n    function _onReceiveHandler(event) {\n        let eventName = event.payload.name;\n        let handler = messageReceiveHandlers[eventName];\n        if (handler)\n            handler(event.payload.payload);\n    }\n\n    function addEventHandler(eventName, handler) {\n        eventHandlers[eventName] = handler;\n    }\n\n    function _hasEventHandler(eventName) {\n        return eventHandlers.hasOwnProperty(eventName);\n    }\n\n    function emit(eventName, ...args) {\n        return eventHandlers[eventName] ? eventHandlers[eventName].apply(this, args) : null;\n    }\n\n    /**\n     * Add notification on main page\n     * the \"result\" parameter has a configuration of notifications\n     */\n    function _addNotifications(result) {\n        result = result || [];\n        let notificationIds = [];\n        result.forEach(item => notificationIds.push(item.id));\n        GEConf.notificationIds = notificationIds;\n        api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: result\n        });\n    }\n    \n    function _storeDataHandler({pageName, key, data}) {\n        let currPage = getPageByName(pageName);\n        if(!data) {\n            for(let id in key)\n                currPage.setData(id, key[id]);\n        } else {\n            currPage.setData(key, data);\n        }\n    }\n\n    function openModal(name) {\n        updateConf(\"activeModalWindow\", { ...JSONQuery.find(GEConf, `modalWindow[@name=${name}][0]`) });\n        helpers.modal.open(GE_MODAL_WINDOW, {\n            bare: true\n        });\n    }\n\n    function refreshEmbeddedHelp(pageIndex) {\n         let page = getPageByIndex(pageIndex);\n         if(page.getAttrs().embeddedHelpDocId == undefined)\n             return;\n         api.emit('SN_HELP_PANEL#REFRESH_REQUESTED', {\n                docId: page.getAttrs().embeddedHelpDocId\n         });\n    }\n\n    function closeModal() {\n        GEConf.activeModalWindow = null;\n        helpers.modal.close(GE_MODAL_WINDOW);\n    }\n    \n    onReceive(PAGE_CLOSE_RESPONSE, _pageCloseResponseHandler);\n    onReceive(STORE_DATA, _storeDataHandler);\n    onReceive(UPDATE_CONF, updateConf);\n    onReceive(ADD_NOTIFICATIONS, _addNotifications);\n    onReceive(SHOW_LOADER, simUtil.showLoader);\n    onReceive(HIDE_LOADER, simUtil.hideLoader);\n\n    onReceive(\"SHOW_PAGE_ERROR\", (payload) => {\n    \tsimUtil.hideLoader();\n    \tsimUtil.showPageError(payload.header, payload.content);\n    });\n    \n    onReceive(\"HIDE_PAGE_ERROR\", () => {\n    \tsimUtil.hideLoader();\n    \tsimUtil.removeNotification();\n    });\n\n    onReceive(\"EXIT\", exit);\n\n    function handle(event) {\n        if (event.name == \"NOW_BUTTON#CLICKED\")\n            return _buttonClickHandler(event);\n        let fn = {\n            MACROPONENT_READY: onPageReady,\n            contentTree: () => gotoPage(event.payload.item.index),\n            ACCESS_SIMULATOR_EVENT: _onReceiveHandler\n        }[event.elementId || event.name];\n        if (fn)\n            fn(event);\n    }\n\n    /**\n     * --------------------------------------------------\n     */\n    class SubPage {\n        #attrs;\n        constructor(attrs) {\n            this.#attrs = attrs;\n        }\n        getName = () => this.#attrs.name;\n        getLabel = () => this.#attrs.label;\n        getOrder = () => this.#attrs.order;\n        getRoute = () => this.#attrs.route;\n        isEnabled = () => this.#attrs.enabled;\n        isVisible = () => this.#attrs.visible;\n        getData = () => this.#attrs.data;\n        setData = (key, data) => this.#attrs.data[key] = data;\n        getButtonBehaviour = () => this.#attrs.buttonBehaviour;\n        getDataFrom = () => this.#attrs.getDataFrom || [];\n        showInitialLoader = () => this.#attrs.showInitialLoader\n        getAttrs = () => this.#attrs;\n    }\n    /**\n     * --------------------------------------------------\n     * Exposed public methods\n     */\n    return {\n        init,\n        exit,\n        reset,\n        handle,\n        getConf,\n        gotoPage,\n        openModal,\n        onReceive,\n        closeModal,\n        updateConf,\n        sendMessage,\n        gotoPrevPage,\n        gotoNextPage,\n        getActivePage,\n        getPageByName,\n        getPageByIndex,\n        addEventHandler\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"16ef14e2433331102c5119405bb8f2fb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_16ef14e2433331102c5119405bb8f2fb","sys_updated_by":"admin","api_name":"sn_access_analyzer.GuidedExperienceHandler","sys_created_on":"2024-01-20 14:58:42","name":"GuidedExperienceHandler","sys_name":"GuidedExperienceHandler","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"3.3.1","required_translations":"[]","access":"public","sys_mod_count":"579","includes":"","sys_updated_on":"2025-01-22 05:16:14","sys_tags":"","script":"// Breadcrumb Utils\n/// @ts-check\n/**\n *\n * @typedef {import(\"..\").BreadCrumbAPI} API\n * @typedef {import(\"..\").BreadcrumbShellState} State\n * @typedef {import(\"..\").SelectedContentChanged} SelectedContentChanged\n * @typedef {import(\"..\").RouteOperation} RouteOperation\n * @typedef {import(\"..\").ChromeToolbarItem} ChromeToolbarItem\n * @typedef {import(\"..\").CurrentRouteInfo} CurrentRouteInfo\n * @typedef {import(\"..\").BreadcrumbItemWithRouteInfo} BreadcrumbItemWithRouteInfo\n * @typedef {import(\"..\").StaticRouteInfo} StaticRouteInfo\n * @typedef {import(\"..\").ItemsFetchSuccess} ItemFetchSuccess\n * @typedef {import(\"..\").StateNames} StateNames\n * @typedef {import(\"..\").RouteInfo} RouteInfo\n * @typedef {import(\"..\").Helpers} Helpers\n * @typedef {import(\"..\").BreadcrumbItemClicked} BreadcrumbItemClicked\n * @typedef {import(\"..\").BrowserBackRouteInfo} BrowserBackRouteInfo\n * @typedef {import(\"..\").ChangedScreenContentArgs} ChangedScreenContentArgs\n * @typedef {import(\"..\").BreadcrumbDataPropertyChanged} BreadcrumbDataPropertyChanged\n * @typedef {import(\"..\").SelectedContentWithUrlState} SelectedContentWithUrlState\n */\nfunction include() {\n\n\tconst resizeMinRatio = {\n\t\tminRatio: 25,\n\t\tminPixels: 16\n\t};\n\tconst resizeDefaultDividerState = {dividerPosition: 0, isExpanded :true};\n\tconst REAPPLY_SUBTOOLBAR_OPTIONS = 'BREADCRUMB_APPSHELL#REAPPLY_SUBTOOLBAR_OPTIONS';\n\tconst defaultI18n = {toggle: \"Toggle subtoolbar content\", expand: \"Expand\", collapse: \"Collapse\"};\n\n\tclass BreadcrumbUtils {\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {BreadcrumbItemClicked} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic itemClicked(api, event, helpers, imports) {\n\t\t\tconst { route, fields, params, targetRoute, passiveNavigation = false, redirect = false } = event.payload.item.routeInfo;\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tapi.setState(stateNames.selectedBreadcrumbItem, event.payload.item);\n\t\t\t// @ts-ignore\n\t\t\thelpers.navigate.to(route, fields, params, redirect, passiveNavigation, targetRoute);\n\t\t}\n\n\t\tstatic defaultToolbarItem = Object.freeze({\n\t\t\tid: \"1761e643c3363010ff85a5a1d840ddbc\",\n\t\t\tlabel: {\n\t\t\t\tmessage: \"Default\",\n\t\t\t\ttranslatable: true\n\t\t\t},\n\t\t\ticon: \"home-outline\",\n\t\t\tviewportInfo: {},\n\t\t\trouteInfo: {\n\t\t\t\troute: \"1761e643c3363010ff85a5a1d840ddbc\",\n\t\t\t\tparams: {},\n\t\t\t\tfields: {},\n\t\t\t},\n\t\t\tgroup: \"top\",\n\t\t\torder: 100,\n\t\t\tbadge: {},\n\t\t\tpresence: {},\n\t\t\tavailability: {},\n\t\t\tpreparedByAppShell: true\n\t\t});\n\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {*} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {*} imports\n\t\t */\n\t\tstatic appShellDataSourceUpdated(api, event, helpers, imports) {\n\t\t\tBreadcrumbUtils.invalidateSubtoolbarOptions(api, event, helpers, imports);\n\t\t\tconst keyNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tif (typeof api.state.userPrefKey !== 'string' || api.state.userPrefKey.length === 0)\n\t\t\t\tapi.setState(keyNames.userPrefKey, `workspace.layout.subToolbar.preferences.${api.context.app.appId}`);\n\t\t\t/**\n\t\t\t * @type {Array<ChromeToolbarItem>}\n\t\t\t */\n\t\t\tlet toolbarItems = [];\n\t\t\ttry {\n\t\t\t\ttoolbarItems = [...api.data.uxr_app_shell_data_source_1.uxPropertiesAndAuthRoutes.chrome_toolbar.global];\n\t\t\t} catch (e) {\n\t\t\t\ttoolbarItems = [BreadcrumbUtils.defaultToolbarItem];\n\t\t\t}\n\t\t\tapi.setState(keyNames.chromeToolbarItems, toolbarItems);\n\t\t\tif (Array.isArray(api.state.breadcrumbItems) && api.state.breadcrumbItems.length > 0)\n\t\t\t\treturn;\n\t\t\tapi.setState(keyNames.selectedContentChanged, (args) => {\n\t\t\t\t/**\n\t\t\t\t * @type {{currentValue: SelectedContentChanged | null, api: API}}\n\t\t\t\t */\n\t\t\t\tconst { currentValue, api: newAPI } = args;\n\t\t\t\tif (currentValue && (!Array.isArray(newAPI.state.breadcrumbItems) || newAPI.state.breadcrumbItems.length === 0)) {\n\t\t\t\t\tif (currentValue.name) {\n\t\t\t\t\t\tBreadcrumbUtils.handleSelectedContentChanged(newAPI, currentValue, helpers, imports, toolbarItems);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { ...currentValue };\n\t\t\t});\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {ChangedScreenContentArgs} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {*} imports\n\t\t */\n\t\tstatic screenContentChanged(api, event, helpers, imports) {\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tconst currentPayload = event.payload?.current;\n\t\t\tconst current = Array.isArray(currentPayload) && currentPayload.length ? currentPayload[currentPayload.length - 1] : currentPayload;\n\t\t\tif (Object.keys(current).length === 0)\n\t\t\t\treturn;\n\t\t\tif (!api.state.selectedContent)\n\t\t\t\treturn;\n\t\t\tconst selectedToolbarItem = BreadcrumbUtils.getSelectedToolbarItem(api, api.state.selectedContent, api.state.chromeToolbarItems);\n\t\t\tif (!selectedToolbarItem)\n\t\t\t\treturn;\n\t\t\tlet newRoute = { ...api.state.selectedContent };\n\t\t\tif (current.status === 'modified' || current.status === 'unmodified' || current.status === 'inserted' || current.status === 'updated') {\n\t\t\t\tconst lastItem = api.state.breadcrumbItems[api.state.breadcrumbItems.length - 1];\n\t\t\t\t// we are chaning inline objects and no state update required;\n\t\t\t\tif (lastItem)\n\t\t\t\t\tlastItem.isDirty = !!current.isDirty;\n\t\t\t}\n\t\t\tif (current.status === 'closed') {\n\t\t\t\tconst lastItem = api.state.breadcrumbItems[api.state.breadcrumbItems.length - 2];\n\t\t\t\tnewRoute = { ...lastItem.routeInfo };\n\t\t\t} else if (current.screenParams)\n\t\t\t\tnewRoute.fields = { ...current.screenParams };\n\t\t\telse\n\t\t\t\treturn;\n\t\t\tlet targetRoute = newRoute.parent ? \"current\" : newRoute.targetRoute;\n\t\t\thelpers.navigate.to(newRoute.route, newRoute.fields, newRoute.params, true, false, targetRoute);\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {BreadcrumbDataPropertyChanged} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {*} imports\n\t\t * */\n\t\tstatic breadcrumbPropertyChanged(api, event, helpers, imports) {\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tswitch (event.payload.name) {\n\t\t\t\t// For both, activeScreenId and screenTitles change, we need to update the breadcrumb items.\n\t\t\t\tcase stateNames.activeScreenId:\n\t\t\t\tcase stateNames.screenTitles:\n\t\t\t\t\tconst screenId = event.payload.name === stateNames.activeScreenId \n\t\t\t\t\t\t? event.payload.current \n\t\t\t\t\t\t: api.state.activeScreenId;\n\t\t\t\t\tapi.setState(stateNames.activeScreenId, screenId);\n\t\t\t\t\tif (event.payload.name === stateNames.screenTitles)\n\t\t\t\t\t\tapi.setState(stateNames.screenTitles, event.payload.current);\n\n\t\t\t\t\tlet selectedToolbarItem = /**@type {ChromeToolbarItem} */(api.state.selectedToolbarItem || {});\n\n\t\t\t\t\t// If no toolbar items, we need to get the selected toolbar item based on selected content and toolbar items.\n\t\t\t\t\tif (!selectedToolbarItem?.routeInfo && (api.state.selectedContent && api.state.chromeToolbarItems))\n\t\t\t\t\t\tselectedToolbarItem = BreadcrumbUtils.getSelectedToolbarItem(api, api.state.selectedContent, api.state.chromeToolbarItems);\n\n\t\t\t\t\t// Only updated breadcrumb items when screenId and selected toolbar item has route info.\n\t\t\t\t\tif (screenId && selectedToolbarItem?.routeInfo) {\n\t\t\t\t\t\tconst cacheKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(api.state.selectedContent, selectedToolbarItem);\n\n                        // code to consider either screenTitle updates or data broker updates\n                        const considerScreenTitlesOnly = BreadcrumbUtils.shouldConsiderScreenTitleOnly(api, api.state.selectedContent);\n                        if (!considerScreenTitlesOnly)\n                            return;\n\n\t\t\t\t\t\tif (!api.state.routeState.get(cacheKey))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif (!Array.isArray(api.state.breadcrumbItems) || api.state.breadcrumbItems.length === 0)\n\t\t\t\t\t\t\treturn;\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @type {Record<string, string>}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst screenTitles = event.payload.current || {};\n\t\t\t\t\t\tconst newTitle = screenTitles[screenId] || '';\n\n\t\t\t\t\t\tif (typeof newTitle !== 'string' || newTitle.length === 0)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\n\t\t\t\t\t\tconst newItems = [...api.state.breadcrumbItems];\n\n\t\t\t\t\t\t// Updating last item in breadcrumb items with new title.\n\t\t\t\t\t\tconst finalItem = newItems[newItems.length - 1];\n\t\t\t\t\t\tconst finalItemCacheKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(finalItem.routeInfo, selectedToolbarItem);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (finalItemCacheKey !== cacheKey)\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tif (api.state.chromeToolbarItems.find( item => item?.routeInfo?.route === finalItem?.routeInfo?.route))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\tfinalItem.label = newTitle;\n\n\t\t\t\t\t\t// Updating the cache. So that we can use it later when page refreshes.\n\t\t\t\t\t\tBreadcrumbUtils.updateBreadcrumbItems(api, newItems, selectedToolbarItem, api.state.selectedContent, helpers);\n\t\t\t\t\t}\n\n\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'changedScreenContent':\n\t\t\t\t\tBreadcrumbUtils.screenContentChanged(api, event, helpers, imports);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {State} state\n\t\t */\n\t\tstatic getStateKeys(state) {\n\t\t\tconst keys = Object.keys(state);\n\t\t\tconst obj = /**@type {StateNames} */({});\n\t\t\tkeys.forEach((item) => {\n\t\t\t\t///@ts-ignore\n\t\t\t\tobj[item] = item;\n\t\t\t});\n\t\t\treturn Object.freeze(obj);\n\t\t}\n\n\t\t/**\n\t\t * @returns {RouteOperation}\n\t\t */\n\t\tstatic getRouteOperations() {\n\t\t\treturn Object.freeze({\n\t\t\t\tReplace: \"REPLACE\",\n\t\t\t\tAppend: \"APPEND\",\n\t\t\t\tReplaceLastItem: \"REPLACE_LAST_ITEM\"\n\t\t\t});\n\t\t}\n\n\t\t/**\n\t\t * @param {API} api\n\t\t * @param {RouteInfo} routeInfo\n\t\t * @param {ChromeToolbarItem } selectedToolbarItem\n\t\t */\n\t\tstatic updateDatasourceInput(api, routeInfo, selectedToolbarItem) {\n\t\t\tconst stateKeys = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tapi.setState(stateKeys.route, routeInfo.route);\n\t\t\tapi.setState(stateKeys.fields, routeInfo.fields);\n\t\t\tapi.setState(stateKeys.params, routeInfo.params);\n\t\t\tapi.setState(stateKeys.fetchStaticRoutes, !api.state.isStaticRoutesFetched);\n\t\t\tapi.setState(stateKeys.selectedToolbarItemForBreadcrumb, { ...selectedToolbarItem });\n\t\t\tif (Array.isArray(api.state.breadcrumbItems) && api.state.breadcrumbItems.length > 0) {\n\t\t\t\tconst lastItem = api.state.breadcrumbItems[api.state.breadcrumbItems.length - 1];\n\t\t\t\tapi.setState(stateKeys.prevBreadcrumbRoute, { ...lastItem.routeInfo, isDirty: !!lastItem.isDirty });\n\t\t\t} else\n\t\t\t\tapi.setState(stateKeys.prevBreadcrumbRoute, null);\n\t\t\tapi.setState(stateKeys.prevSelectedContent, api.state.prevLocalSelectedContent ? { ...api.state.prevLocalSelectedContent } : null);\n\t\t}\n\t\t/**\n\t\t * @param {API} api\n\t\t * @param {Array<BreadcrumbItemWithRouteInfo>} newBreadCrumbItems\n\t\t * @param {Helpers} helpers\n\t\t */\n\t\tstatic restoreURLState(api, helpers, newBreadCrumbItems) {\n\t\t\tif (newBreadCrumbItems.length < 2)\n\t\t\t\treturn;\n\t\t\tconst { route, fields, params } = newBreadCrumbItems[newBreadCrumbItems.length - 1].routeInfo;\n\t\t\thelpers.navigate.to(route, fields, params, true, false, \"current\");\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {RouteInfo} current\n\t\t * @param {Array<ChromeToolbarItem> | null} toolbarItems\n\t\t * @param {import(\"..\").BreadcrumbSessionState} sessionData\n\t\t */\n\t\tstatic getSelectedToolbarItem(api, current, toolbarItems, sessionData) {\n\t\t\t\n\t\t\t/**\n\t\t\t * @type {ChromeToolbarItem | undefined}\n\t\t\t */\n\t\t\tlet selectedToolbarItem = undefined;\n\t\t\ttoolbarItems = toolbarItems || api.state.chromeToolbarItems;\n\t\t\tif (!Array.isArray(toolbarItems))\n\t\t\t\treturn selectedToolbarItem;\n\t\t\tselectedToolbarItem = toolbarItems.find((item) => {\n\t\t\t\tif (item.routeInfo.route === current.route)\n\t\t\t\t\treturn true;\n\t\t\t\tif (current.parent && current.parent.route === item.routeInfo.route)\n\t\t\t\t\treturn true;\n\t\t\t\tif (!api.state.selectedToolbarItem && sessionData && sessionData?.selectedToolbarId)\n\t\t\t\t\treturn item.id === sessionData?.selectedToolbarId;\n\t\t\t\treturn current?.params?.toolbarId === item.id\n\t\t\t});\n\t\t\tif (selectedToolbarItem)\n\t\t\t\treturn selectedToolbarItem;\n\t\t\tconst topItems = toolbarItems.filter(item => item.group === 'top');\n\t\t\tconst sortedTopItems = topItems.sort((a, b) => a.order - b.order);\n\t\t\tif (sortedTopItems.length > 0)\n\t\t\t\treturn api.state.selectedToolbarItem || sortedTopItems[0];\n\t\t\tconst bottomItems = toolbarItems.filter(item => item.group === 'bottom');\n\t\t\tconst sortedBottomItems = bottomItems.sort((a, b) => a.order - b.order);\n\t\t\tif (sortedBottomItems.length > 0)\n\t\t\t\treturn api.state.selectedToolbarItem || sortedBottomItems[0];\n\t\t\treturn api.state.selectedToolbarItem;\n\t\t}\n\n        /**\n         * Determines if only the screen title should be considered for the given route.\n         * \n         * @param {API} api\n         * @param {RouteInfo} current\n         * @returns {boolean}\n        */\n        static shouldConsiderScreenTitleOnly(api, current) {\n            const { considerOnlyScreenTitles = false, screenTitlesRouteList = \"[]\"} = api.context.app || {};\n            return JSON.parse(screenTitlesRouteList).some(item => item === current.route) || considerOnlyScreenTitles;\n        }\n\n\t\t/**\n\t\t * @param {API} api\n\t\t * @param {ChromeToolbarItem} toolbarItem\n\t\t */\n\t\tstatic getBreadcrumbItemFromToolbarItem(api, toolbarItem) {\n\t\t\tconst cacheKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(toolbarItem.routeInfo, toolbarItem);\n\t\t\tlet hideBreadcrumb = false;\n\t\t\tif (api.state.outputCache instanceof Map) {\n\t\t\t\t/**\n\t\t\t\t * @type {BreadcrumbItemWithRouteInfo}\n\t\t\t\t */\n\t\t\t\tconst l1Payload = api.state.outputCache.get(cacheKey);\n\t\t\t\tif (l1Payload)\n\t\t\t\t\thideBreadcrumb = !!l1Payload.hideBreadcrumb || !!toolbarItem.hideBreadcrumb;\n\t\t\t}\n\t\t\tconst RouteOperation = BreadcrumbUtils.getRouteOperations();\n\t\t\tlet label = \"\";\n\t\t\tif (typeof toolbarItem.label === 'string')\n\t\t\t\tlabel = toolbarItem.label;\n\t\t\telse if (typeof toolbarItem.label.message === 'string')\n\t\t\t\tlabel = toolbarItem.label.message;\n\t\t\tif (typeof label !== 'string' || label.length === 0)\n\t\t\t\tlabel = toolbarItem.routeInfo.route;\n\t\t\treturn {\n\t\t\t\thideBreadcrumb,\n\t\t\t\ticon: toolbarItem.icon,\n\t\t\t\tlabel,\n\t\t\t\thref: \"javascript:void(0)\",\n\t\t\t\toperation: RouteOperation.Replace,\n\t\t\t\tindex: 0,\n\t\t\t\trouteInfo: { ...toolbarItem.routeInfo }\n\t\t\t}\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {RouteInfo} routeInfo\n\t\t */\n\t\tstatic isNewRecordPage(routeInfo) {\n\t\t\tif (!BreadcrumbUtils.isRecordPage(routeInfo))\n\t\t\t\treturn false;\n\t\t\tconst fields = /**@type {{table: string, sysId: string}} */({ ...routeInfo.fields });\n\t\t\treturn fields.sysId.startsWith(\"-1\") && typeof routeInfo.multiInstField === 'string' && routeInfo.multiInstField === 'sysId';\n\t\t}\n\t\t/**\n\t\t * @param {RouteInfo} routeInfo\n\t\t */\n\t\tstatic isRecordPage(routeInfo) {\n\t\t\tif (routeInfo.route !== \"record\")\n\t\t\t\treturn false;\n\t\t\tconst fields = /**@type {{table: string, sysId: string}} */({ ...routeInfo.fields });\n\t\t\treturn typeof fields.table === 'string' && fields.table.length > 0 && typeof fields.sysId === 'string' && fields.sysId.length > 0;\n\t\t}\n\t\t/**\n\t\t * @param {API} api\n\t\t * @param {Array<BreadcrumbItemWithRouteInfo>} newItems\n\t\t * @param {ChromeToolbarItem} toolbarItem\n\t\t * @param {RouteInfo} selectedContent\n\t\t * @param {Helpers} helpers\n\t\t */\n\t\tstatic updateBreadcrumbItems(api, newItems, toolbarItem, selectedContent, helpers) {\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\t/**\n\t\t\t * @type {Array<{table: string, sysId: string}>}\n\t\t\t */\n\t\t\tconst activeRecords = [];\n\t\t\tlet activeParentId = \"-1\";\n\t\t\tif (BreadcrumbUtils.isRecordPage(selectedContent)) {\n\t\t\t\tif (!BreadcrumbUtils.isNewRecordPage(selectedContent)) {\n\t\t\t\t\tconst fields = /**@type {{table: string, sysId: string}} */({ ...selectedContent.fields });\n\t\t\t\t\tactiveRecords.push({ table: fields.table, sysId: fields.sysId });\n\t\t\t\t\tactiveParentId = fields.sysId;\n\t\t\t\t}\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type  {Array<string>}\n\t\t\t */\n\t\t\tlet toolbarItemsRoutes = [];\n\t\t\tif (Array.isArray(api.state.chromeToolbarItems))\n\t\t\t\ttoolbarItemsRoutes = api.state.chromeToolbarItems.filter((item) => {\n\t\t\t\t\tconst routeInfo = item.routeInfo;\n\t\t\t\t\tif (!routeInfo)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (typeof routeInfo.route !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (routeInfo.route.length === 0)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn true;\n\t\t\t\t}).map(item => item.routeInfo.route);\n\t\t\tconst toolbarSet = new Set(toolbarItemsRoutes);\n\t\t\t/**\n\t\t\t * @type {Set<string>}\n\t\t\t */\n\t\t\tconst uniqueSet = new Set();\n\t\t\tnewItems = newItems.reverse().filter((item, index, srcItems) => {\n\t\t\t\tconst cacheKey = BreadcrumbUtils.getCacheKey(item.routeInfo, toolbarItem);\n\t\t\t\tif (uniqueSet.has(cacheKey))\n\t\t\t\t\treturn false;\n\t\t\t\tif (toolbarSet.has(item.routeInfo.route)) {\n\t\t\t\t\tif (index !== srcItems.length - 1)\n\t\t\t\t\t\treturn false;\n\t\t\t\t\tif (item.routeInfo.route !== toolbarItem.routeInfo.route)\n\t\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tuniqueSet.add(cacheKey);\n\t\t\t\treturn true;\n\t\t\t}).reverse();\n\t\t\t/**  @type {BreadcrumbItemWithRouteInfo | null} */\n\t\t\tlet firstItem = null;\n\t\t\tif (newItems.length > 0)\n\t\t\t\tfirstItem = newItems[0];\n\t\t\tif (!firstItem || firstItem.routeInfo.route !== toolbarItem.routeInfo.route)\n\t\t\t\tnewItems.unshift(BreadcrumbUtils.getBreadcrumbItemFromToolbarItem(api, toolbarItem));\n\t\t\tfirstItem = newItems[0];\n\t\t\tif (toolbarItem.routeInfo.route === selectedContent.route)\n\t\t\t\tfirstItem.routeInfo.params = { ...selectedContent.params };\n\t\t\tif (firstItem.label === toolbarItem.routeInfo.route) {\n\t\t\t\tconst label = typeof toolbarItem.label === 'string' ? toolbarItem.label : toolbarItem.label.message;\n\t\t\t\tif (typeof label === \"string\" && label.length > 0)\n\t\t\t\t\tfirstItem.label = label;\n\t\t\t}\n\t\t\tif (typeof firstItem.icon !== 'string' || firstItem.icon.length === 0)\n\t\t\t\tfirstItem.icon = toolbarItem.icon;\n\t\t\tif (toolbarItem.routeInfo.route === BreadcrumbUtils.defaultToolbarItem.routeInfo.route)\n\t\t\t\tnewItems.splice(0, 1);\n\t\t\tnewItems.forEach((item, index) => item.index = index);\n\t\t\tapi.setState(stateNames.activeRecords, activeRecords);\n\t\t\tapi.setState(stateNames.activeParentId, activeParentId);\n\t\t\tif(newItems.length > 0){\n\t\t\t\tapi.setState(stateNames.hideBreadcrumb, newItems[newItems.length-1].hideBreadcrumb || false);\n\t\t\t}\n\t\t\tapi.setState(stateNames.breadcrumbItems, newItems);\n\t\t\tconst lastItem = newItems[newItems.length - 1];\n\t\t\tif (typeof lastItem.pageTitle === 'string' && lastItem.pageTitle.length > 0) {\n\t\t\t\thelpers.screen.updateStatus({\n\t\t\t\t\ttitle: lastItem.pageTitle\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst cacheKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(selectedContent, toolbarItem);\n\t\t\tapi.state.routeSessionKeySet.add(cacheKey);\n\t\t\tapi.state.routeSessionKeySet.add(toolbarItem.routeInfo.route);\n\t\t\tapi.state.routeState.set(toolbarItem.routeInfo.route, newItems);\n\t\t\tapi.state.routeState.set(cacheKey, [...newItems]);\n\t\t\tBreadcrumbUtils.invalidateSubtoolbarOptions(api, {}, helpers, {});\n\t\t\tBreadcrumbUtils.updateSubToolbarConfig(api, lastItem, selectedContent, toolbarItem, api.state.subToolbarPanelRatio);\n\t\t\tBreadcrumbUtils.updateSessionStorageState({api, l1Route: toolbarItem.id, path: selectedContent.context?.path});\n\t\t}\n\n\t\t/**\n\t\t * Update sub toolbar configurations- resize panel & viewport info\n\t\t * @param {API} api\n\t\t * @param {Partial<BreadcrumbItemWithRouteInfo>} lastItem\n\t\t * @param {Object} selectedContent\n\t\t * @param {ChromeToolbarItem} selectedToolbarItem\n\t\t * @param {number=} dividerPosFromEvent\n\t\t * Sample\n\t\t * ```\n\t\t * {\n\t\t *      \"viewportInfo\": {\n\t\t *          \"route\": \"test\",\n\t\t *           //optional fields\n\t\t *          \"fields\": {},\n\t\t *           \"params\": {}\n\t\t *       },\n\t\t *       //optional fields, these impact the resize panel for subToolbar and everything on the right side\n\t\t *       \"defaultDividerPosition\": 25,\n\t\t *       \"dividerStyles\": {},\n\t\t *       \"rightPanelMinWidth\": {\"minRatio\": 20, \"minPixels\": 100},\n\t\t *       \"leftPanelMinWidth\": {\"minRatio\": 20, \"minPixels\": 100}\n\t\t *   }\n\t\t * ```\n\t\t */\n\t\tstatic updateSubToolbarConfig(api, lastItem, selectedContent, selectedToolbarItem, dividerPosFromEvent = 0, isFromResizePanel = false) {\n\t\t\tconst keyNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tconst globalSubtoolbar = api.data.uxr_app_shell_data_source_1.uxPropertiesAndAuthRoutes.subToolbar?.global || {}\n\t\t\tconst {hideSubToolbarFor = [], paths = {}} = globalSubtoolbar;\n\t\t\tlet config = lastItem?.subToolbarOptions || {};\n\t\t\tlet hideSubToolbar = false;\n\t\t\tif (Object.keys(lastItem ?? {}).length === 0)\n\t\t\t\treturn;\n\t\t\tif (lastItem?.routeInfo?.route === selectedToolbarItem?.routeInfo?.route) {\n\t\t\t\tif(Array.isArray(hideSubToolbarFor) && hideSubToolbarFor.indexOf(lastItem?.routeInfo?.route) >= 0)\n\t\t\t\t\thideSubToolbar = true;\n\t\t\t\telse {\n\t\t\t\t\tif (Object.keys(paths || {}).length > 0 && !!paths[lastItem?.routeInfo?.route])\n\t\t\t\t\t\tconfig = {...paths[lastItem?.routeInfo?.route]};\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlet l1SpecificConfig =  {};\n\t\t\t\tif (selectedToolbarItem?.routeInfo?.route) {\n\t\t\t\t\tif (Object.keys(paths || {}).length > 0 && !!paths[selectedToolbarItem?.routeInfo?.route])\n\t\t\t\t\t\tl1SpecificConfig = {...paths[selectedToolbarItem?.routeInfo?.route]};\n\t\t\t\t}\n\t\t\t\thideSubToolbar = !!lastItem?.subToolbarOptions?.hideSubToolbar;\n\t\t\t\tif (lastItem?.subToolbarOptions?.viewportInfo?.route)\n\t\t\t\t\tconfig = {...lastItem?.subToolbarOptions};\n\t\t\t\telse\n\t\t\t\t\tconfig = {...l1SpecificConfig };\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type {import(\"..\").i18nTranslation}\n\t\t\t */\n\t\t\tconst translations = api.state.outputCache.get(keyNames.i18nTranslation) || defaultI18n;\n\t\t\tapi.setState(keyNames.i18nTranslation, translations);\n\t\t\tconfig = {...globalSubtoolbar, ...(config || {})};\n\t\t\tlet viewportInfo = config.viewportInfo;\n\t\t\thideSubToolbar = hideSubToolbar || !viewportInfo;\n\t\t\t/**\n\t\t\t * @type {import(\"..\").SubToolbarInfo}\n\t\t\t */\n\t\t\tlet subToolbarOptions = {\n\t\t\t\tdefaultDisplayedPane: hideSubToolbar ? \"right\" : \"both\"\n\t\t\t}\n\t\t\tif (!hideSubToolbar && viewportInfo) {\n\t\t\t\tconst defaultExpandedButtonProps = {\n\t\t\t\t\ticon: \"chevron-start-outline\",\n\t\t\t\t\t\"config-aria\": {\n\t\t\t\t\t  button: {\n\t\t\t\t\t\t\"aria-label\": translations.toggle || defaultI18n.toggle,\n\t\t\t\t\t\t\"aria-expanded\": \"true\"\n\t\t\t\t\t  }\n\t\t\t\t\t},\n\t\t\t\t\t\"tooltip-content\": translations.collapse || defaultI18n.collapse\n\t\t\t\t  }\n\t\t\t  const defaultCollapsedButtonProps = {\n\t\t\t\t\ticon: \"chevron-end-outline\",\n\t\t\t\t\t\"config-aria\": {\n\t\t\t\t\t  button: {\n\t\t\t\t\t\t\"aria-label\":  translations.toggle || defaultI18n.toggle,\n\t\t\t\t\t\t\"aria-expanded\": \"false\"\n\t\t\t\t\t  }\n\t\t\t\t\t},\n\t\t\t\t\t\"tooltip-content\": translations.expand || defaultI18n.expand\n\t\t\t\t}\n\t\t\t\tif (api.state.subToolbarPanelRatio === null || api.state.subToolbarPanelRatio === -1 && config.isExpanded)\n\t\t\t\t\tdividerPosFromEvent = resizeMinRatio.minPixels; // default value;\n\t\t\t\tconst dividerButtonConfig = {\n\t\t\t\t\tposition : config.position || 'top',\n\t\t\t\t\tbuttonProps: dividerPosFromEvent > 0 ? defaultExpandedButtonProps : defaultCollapsedButtonProps\n\t\t\t\t}\n\t\t\t\tsubToolbarOptions = {\n\t\t\t\t\tdefaultDisplayedPane: hideSubToolbar ? \"right\" : \"both\",\n\t\t\t\t\tdefaultDividerPosition: dividerPosFromEvent,\n\t\t\t\t\tdividerStyles: config.dividerStyles || {},\n\t\t\t\t\trightPanelMinWidth: config.rightPanelMinWidth || {...resizeMinRatio},\n\t\t\t\t\tleftPanelMinWidth: config.leftPanelMinWidth || config.displayDividerButton ? {minPixels: config?.leftPanelMinWidth?.minPixels || resizeMinRatio.minPixels} : { ...resizeMinRatio },\n\t\t\t\t\tdisplayDividerButton: config.displayDividerButton || false,\n\t\t\t\t\tdividerButtonConfig: dividerButtonConfig,\n\t\t\t\t\tisExpanded: dividerPosFromEvent > 0\n\t\t\t\t}\n\t\t\t\tviewportInfo.viewportElementId = \"subToolbarViewport\";\n\t\t\t\tif (!globalSubtoolbar?.noDefaultParamsInFileds)\n\t\t\t\t\tviewportInfo.fields = { ...viewportInfo.fields, activeParentId: \"\", activeRecords: []};\n\t\t\t\tviewportInfo.params = {\n\t\t\t\t\t...viewportInfo.params,\n\t\t\t\t\tselectedContent: selectedContent,\n\t\t\t\t\tselectedToolbarItem: selectedToolbarItem,\n\t\t\t\t\tprevBreadcrumbRoute: api.state.prevBreadcrumbRoute,\n\t\t\t\t\tprevSelectedContent: api.state.prevSelectedContent,\n\t\t\t\t\tisExpanded: dividerPosFromEvent > 0,\n\t\t\t\t\tactiveParentId: api.state.activeParentId,\n\t\t\t\t\tactiveRecords: api.state.activeRecords\n\t\t\t\t};\n\t\t\t\tconst {isExpanded: storedExpanded, dividerPosition: storedDividerPos} = BreadcrumbUtils.getResizablePanelKnownUserPrefereces(api);\n\t\t\t\tif (!isFromResizePanel)\n\t\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, storedExpanded ? storedDividerPos : 0);\n\t\t\t\tapi.emit(\"MACROPONENT_VIEWPORT_LOAD_REQUESTED\", viewportInfo);\n\t\t\t} else {\n\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, 0);\n\t\t\t}\n\t\t\tconst newSubtoolbarOptions = {\n\t\t\t\t...api.state.subToolbarOptions,\n\t\t\t\t...subToolbarOptions\n\t\t\t};\n\t\t\tapi.setState(keyNames.subToolbarOptions, newSubtoolbarOptions);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {{api: API, path?: string, l1Route?: string}} param0\n\t\t */\n\t\tstatic updateSessionStorageState({api, l1Route, path}) {\n\t\t\tif (!api.state.isSessionStateLoaded)\n\t\t\t\treturn;\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tconst sessionState = {\n\t\t\t\t[stateNames.outputCache]: [...api.state.outputCache],\n\t\t\t\t[stateNames.routeState]: [...api.state.routeState],\n\t\t\t\tpath: path || api.state.selectedContent.context?.path,\n\t\t\t\tuserName: api.context.session.user.userName,\n\t\t\t\tuserSysId: api.context.session.user.sys_id,\n\t\t\t\tlang: api.context.session.user.language,\n\t\t\t\tselectedToolbarId: l1Route || api.state.selectedToolbarItem?.id\n\t\t\t};\n\t\t\tapi.setState(stateNames.sessionState, sessionState);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {SelectedContentWithUrlState} browserBackRouteInfo\n\t\t */\n\t\tstatic isBrowserOperation(browserBackRouteInfo) {\n\t\t\treturn browserBackRouteInfo.popState === true || typeof browserBackRouteInfo.updateUrl === 'boolean';\n\t\t}\n\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {SelectedContentChanged} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {*} imports\n\t\t */\n\t\tstatic selectedContentChanged(api, event, helpers, imports, isLocalCall = false) {\n\t\t\tif (event.payload.selectedContent.isDebugging)\n\t\t\t\tdebugger;\n\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\t\n\t\t\tlet {breadcrumbSessionData: sessionData, prevSelectedContent = {}, selectedContent} = event.payload;\n\n\t\t\tif (!isLocalCall && !sessionData && !api.state.isSessionStateLoaded) {\n\t\t\t\thelpers.timing.setTimeout( () => {\n\t\t\t\t\tapi.setState(stateNames.isSessionStateLoaded, (/**@type {{currentValue: boolean, api: API}} */args) => {\n\t\t\t\t\t\tconst {currentValue, api: updatedApi} = args;\n\t\t\t\t\t\tif (!currentValue)\n\t\t\t\t\t\t\tBreadcrumbUtils.selectedContentChanged(updatedApi, event, helpers, imports, true);\n\t\t\t\t\t\treturn currentValue;\n\t\t\t\t\t});\n\t\t\t\t}, 30);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst emptyState = {\n\t\t\t\trouteState:[],\n\t\t\t\toutputCache: [],\n\t\t\t\tlang: api.context.session.user.language,\n\t\t\t\tpath: selectedContent?.context?.path,\n\t\t\t\tuserSysId: api.context.session.user.sys_id,\n\t\t\t\tuserName: api.context.session.user.userName\n\t\t\t};\n\n\t\t\tsessionData = sessionData || emptyState;\n\n\t\t\tlet {routeState, outputCache, pageTitleMap, routeSessionKeySet} = api.state;\n\t\t\tlet isJustLoaded = false;\n\t\t\tif (event.payload.breadcrumbSessionData)\n\t\t\t\tapi.setState(stateNames.isSessionStateLoaded, true);\n\n\t\t\t// Comparing between current user sys id and session user sys id.\n\t\t\tconst isSameUser = sessionData.userSysId === api.context.session.user.sys_id;\n\n\t\t\tif (!(outputCache instanceof Map &&\n\t\t\t\trouteState instanceof Map &&\n\t\t\t\trouteSessionKeySet instanceof Set &&\n\t\t\t\tpageTitleMap instanceof Map) || !api.state.isSessionStateLoaded) {\n\n\t\t\t\t\tisJustLoaded = true;\n\t\t\t\t\tif (outputCache instanceof Map)\n\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\tsessionData.outputCache = [...sessionData.outputCache, ...[...outputCache]];\n\t\t\t\t\tif (routeState instanceof Map)\n\t\t\t\t\t\tsessionData.routeState = [...sessionData.routeState, ...[...routeState]];\n\n\t\t\t\t\t// Clearing cached items if user has been changed.\n\t\t\t\t\tif (!isSameUser) {\n\t\t\t\t\t\tsessionData.outputCache = [];\n\t\t\t\t\t\tsessionData.routeState = [];\n\t\t\t\t\t}\n\n\t\t\t\t\toutputCache = new Map();\n\t\t\t\t\trouteState = new Map();\n\n\t\t\t\t\tif (!(routeSessionKeySet instanceof Set))\n\t\t\t\t\t\trouteSessionKeySet = new Set();\n\t\t\t\t\tif (!(pageTitleMap instanceof Map))\n\t\t\t\t\t\tpageTitleMap = new Map();\n\n\t\t\t\t\tapi.setState(stateNames.outputCache, outputCache);\n\t\t\t\t\tapi.setState(stateNames.routeState, routeState);\n\t\t\t\t\tapi.setState(stateNames.routeSessionKeySet, routeSessionKeySet);\n\t\t\t\t\tapi.setState(stateNames.pageTitleMap, pageTitleMap);\n\n\t\t\t\t\t// on browser duplicate tab action, \"path\" parameter is not\n\t\t\t\t\t// getting copied from previous tab sessionStorage. check all keys\n\t\t\t\t\tif (typeof sessionData.path !== 'string')\n\t\t\t\t\t\tsessionData.path = selectedContent.context?.path || '';\n\t\t\t\t\tif (typeof sessionData.lang !== 'string')\n\t\t\t\t\t\tsessionData.lang = api.context.session.user.language;\n\t\t\t\t\tif (typeof sessionData.userSysId !== 'string')\n\t\t\t\t\t\tsessionData.userSysId = api.context.session.user.sys_id;\n\t\t\t\t\tif (typeof sessionData.userName !== 'string')\n\t\t\t\t\t\tsessionData.userName = api.context.session.user.userName;\n\t\t\t\t\t\n\t\t\t\t\tevent.payload.breadcrumbSessionData =  {...sessionData};\n\t\t\t}\n\t\t\tif (!api.state.isSessionStateLoaded) {\n\t\t\t\tif (Array.isArray(sessionData.routeState)) {\n\t\t\t\t\tsessionData.routeState.forEach( item => {\n\t\t\t\t\t\tif (Array.isArray(item) && item.length === 2)\n\t\t\t\t\t\t\trouteState.set(item[0], item[1]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (Array.isArray(sessionData.outputCache)) {\n\t\t\t\t\tsessionData.outputCache.forEach( item => {\n\t\t\t\t\t\tif (Array.isArray(item) && item.length === 2)\n\t\t\t\t\t\t\toutputCache.set(item[0], item[1]);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst toolbarItems = api.state.chromeToolbarItems;\n\t\t\tif (!Array.isArray(toolbarItems) || toolbarItems.length === 0 || isJustLoaded) {\n\t\t\t\tapi.setState(stateNames.selectedContentChanged, { ...event });\n\t\t\t\tapi.setState(stateNames.chromeToolbarItems, (/**@type {{currentValue: Array<ChromeToolbarItem>, api: API}} */{currentValue, api: updatedApi}) => {\n\t\t\t\t\tif (Array.isArray(currentValue))\n\t\t\t\t\t\tBreadcrumbUtils.handleSelectedContentChanged(updatedApi, event, helpers, imports, currentValue);\n\t\t\t\t\treturn currentValue ? [...currentValue] : null;\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tBreadcrumbUtils.handleSelectedContentChanged(api, event, helpers, imports, toolbarItems);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {SelectedContentChanged} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {*} imports\n\t\t * @param {Array<ChromeToolbarItem>} toolbarItems\n\t\t */\n\t\tstatic handleSelectedContentChanged(api, event, helpers, imports, toolbarItems) {\n\t\t\tconst selectedContent = { ...event.payload.selectedContent };\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\t/**\n\t\t\t * @type {Array<ChromeToolbarItem>}\n\t\t\t */\n\t\t\tconst chromeToolbarItems = api.state.chromeToolbarItems || toolbarItems;\n\t\t\tif (!Array.isArray(chromeToolbarItems) || chromeToolbarItems.length === 0) {\n\t\t\t\tapi.setState(stateNames.selectedContentChanged, { ...event });\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst prevState = { ...api.state };\n\t\t\tif (!selectedContent || typeof selectedContent === 'string' || typeof selectedContent.route !== 'string')\n\t\t\t\treturn;\n\t\t\tselectedContent.fields = selectedContent.fields || {};\n\t\t\tselectedContent.params = selectedContent.params || {};\n\t\t\tif (BreadcrumbUtils.isRecordPage(selectedContent) && BreadcrumbUtils.isNewRecordPage(selectedContent))\n\t\t\t\tselectedContent.fields = { ...selectedContent.fields, sysId: \"-1\" };\n\t\t\t/**\n\t\t\t * @type {ChromeToolbarItem | undefined}\n\t\t\t */\n\t\t\tconst selectedToolbarItem = BreadcrumbUtils.getSelectedToolbarItem(api, selectedContent, toolbarItems, event.payload.breadcrumbSessionData);\n\t\t\tif (!selectedToolbarItem)\n\t\t\t\treturn;\n\t\t\tif (api.state.selectedContent) {\n\t\t\t\tconst prevSelectedContentAsStr = BreadcrumbUtils.getCacheKeyWithOptionalParams(api.state.selectedContent || {}, selectedToolbarItem);\n\t\t\t\tconst currSelectedContentAsStr = BreadcrumbUtils.getCacheKeyWithOptionalParams(selectedContent || {}, selectedToolbarItem);\n\t\t\t\tif (prevSelectedContentAsStr === currSelectedContentAsStr)\n\t\t\t\t\treturn;\n\t\t\t}\n\t\t\tapi.setState(stateNames.prevLocalSelectedContent, { ...selectedContent });\n\t\t\tif (selectedContent.passiveNavigation === true) {\n\t\t\t\thelpers.navigate.to(selectedContent.route, selectedContent.fields,\n\t\t\t\t\tselectedContent.params, false, false,\n\t\t\t\t\tselectedContent.targetRoute ? selectedContent.targetRoute : \"current\");\n\t\t\t}\n\t\t\tconst currentRouteKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(selectedContent, selectedToolbarItem);\n\t\t\tif (Array.isArray(api.state.breadcrumbItems) && api.state.breadcrumbItems.length > 0) {\n\t\t\t\tconst lastItemRouteKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(api.state.breadcrumbItems[api.state.breadcrumbItems.length - 1].routeInfo, selectedToolbarItem);\n\t\t\t\tif (currentRouteKey === lastItemRouteKey) {\n\t\t\t\t\tconst lastItem = api.state.breadcrumbItems[api.state.breadcrumbItems.length - 1];\n\t\t\t\t\tlastItem.routeInfo.params = selectedContent.params;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst menuItems = api.state.outputCache.get(stateNames.chromeMenuItems);\n\t\t\tapi.setState(stateNames.chromeMenuItems, menuItems);\n\t\t\tconst selectedBreadcrumbItem = prevState.selectedBreadcrumbItem;\n\t\t\tif (!prevState.selectedToolbarItem || prevState.selectedToolbarItem.id !== selectedToolbarItem.id)\n\t\t\t\tapi.setState(stateNames.selectedToolbarItem, selectedToolbarItem);\n\t\t\tapi.setState(stateNames.selectedContent, selectedContent);\n\t\t\tconst existingRouteIndex = api.state.breadcrumbItems.findIndex((item) => {\n\t\t\t\treturn BreadcrumbUtils.getCacheKeyWithOptionalParams(item.routeInfo, selectedToolbarItem) === currentRouteKey;\n\t\t\t});\n\t\t\tif (selectedBreadcrumbItem || existingRouteIndex >= 0) {\n\t\t\t\tapi.setState(stateNames.selectedBreadcrumbItem, null);\n\t\t\t\tconst items = [...api.state.breadcrumbItems];\n\t\t\t\tconst selectedIndex = selectedBreadcrumbItem ? selectedBreadcrumbItem.index + 1 : existingRouteIndex + 1;\n\t\t\t\titems.splice(selectedIndex, items.length - selectedIndex);\n\t\t\t\tBreadcrumbUtils.updateBreadcrumbItems(api, items, selectedToolbarItem, selectedContent, helpers);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst isSameToolbarItem = prevState.selectedToolbarItem && prevState.selectedToolbarItem.id === selectedToolbarItem.id;\n\t\t\tif (!isSameToolbarItem || existingRouteIndex >= 0 || BreadcrumbUtils.isBrowserOperation(selectedContent)) {\n\t\t\t\tconst items = api.state.routeState.get(currentRouteKey);\n\t\t\t\tif (Array.isArray(items)) {\n\t\t\t\t\tif (BreadcrumbUtils.isBrowserOperation(selectedContent))\n\t\t\t\t\t\tapi.state.routeState.delete(currentRouteKey);\n\t\t\t\t\tBreadcrumbUtils.updateBreadcrumbItems(api, items, selectedToolbarItem, selectedContent, helpers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst cachedItemPayload = api.state.outputCache.get(currentRouteKey);\n\t\t\tif (!cachedItemPayload) {\n\t\t\t\tBreadcrumbUtils.updateDatasourceInput(api, selectedContent, selectedToolbarItem);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst routeOperation = BreadcrumbUtils.getRouteOperations();\n\t\t\tlet items = cachedItemPayload.items;\n\t\t\tif (!Array.isArray(items))\n\t\t\t\titems = [cachedItemPayload];\n\t\t\tlet finalItems = [...api.state.breadcrumbItems];\n\t\t\tswitch (cachedItemPayload.operation) {\n\t\t\t\tcase routeOperation.Replace:\n\t\t\t\t\tfinalItems = [...items];\n\t\t\t\t\tbreak;\n\t\t\t\tcase routeOperation.ReplaceLastItem:\n\t\t\t\t\tfinalItems.splice(finalItems.length - 1, 1);\n\t\t\t\t\tfinalItems = [...finalItems, ...items];\n\t\t\t\t\tbreak;\n\t\t\t\tcase routeOperation.Append:\n\t\t\t\t\tfinalItems = [...finalItems, ...items];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (finalItems.length > 0) {\n\t\t\t\tif (currentRouteKey === BreadcrumbUtils.getCacheKeyWithOptionalParams(finalItems[finalItems.length - 1].routeInfo, selectedToolbarItem))\n\t\t\t\t\tfinalItems[finalItems.length - 1].routeInfo.params = selectedContent.params;\n\t\t\t}\n\t\t\tBreadcrumbUtils.updateBreadcrumbItems(api, finalItems, selectedToolbarItem, selectedContent, helpers);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {RouteInfo} routeInfo\n\t\t * @param {ChromeToolbarItem} selectedToolbarItem\n\t\t */\n\t\tstatic getOrderedCacheKey(routeInfo, selectedToolbarItem) {\n\t\t\tconst { fields = {}, params = {} } = routeInfo;\n\t\t\t/**\n\t\t\t * @type {Record<string, any>}\n\t\t\t */\n\t\t\tconst orderedFields = {};\n\t\t\tObject.keys(fields).sort().forEach(key => {\n\t\t\t\torderedFields[key] = fields[key];\n\t\t\t});\n\t\t\t/**\n\t\t\t * @type {Record<string, any>}\n\t\t\t */\n\t\t\tconst ordereredParams = {};\n\t\t\tObject.keys(params).sort().forEach(key => {\n\t\t\t\tordereredParams[key] = params[key];\n\t\t\t});\n\t\t\treturn {\n\t\t\t\ttoolbarRoute: selectedToolbarItem.routeInfo.route,\n\t\t\t\troute: routeInfo.route,\n\t\t\t\tfields: orderedFields,\n\t\t\t\tparams: ordereredParams,\n\t\t\t};\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {RouteInfo} routeInfo\n\t\t * @param {ChromeToolbarItem} selectedToolbarItem\n\t\t */\n\t\tstatic getCacheKeyWithOptionalParams(routeInfo, selectedToolbarItem) {\n\t\t\tconst cacheKeyInfo = BreadcrumbUtils.getOrderedCacheKey(routeInfo, selectedToolbarItem);\n\t\t\treturn JSON.stringify(cacheKeyInfo);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {RouteInfo} routeInfo\n\t\t * @param {ChromeToolbarItem} selectedToolbarItem\n\t\t */\n\t\tstatic getCacheKey(routeInfo, selectedToolbarItem) {\n\t\t\tconst cacheKeyInfo = BreadcrumbUtils.getOrderedCacheKey(routeInfo, selectedToolbarItem);\n\t\t\tdelete cacheKeyInfo.params;\n\t\t\treturn JSON.stringify(cacheKeyInfo);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {ItemFetchSuccess} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic dataFetchSuccess(api, event, helpers, imports) {\n\t\t\t/**\n\t\t\t * @type {RouteOperation}\n\t\t\t*/\n\t\t\tconst RouteOperation = BreadcrumbUtils.getRouteOperations();\n\t\t\tconst stateNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\t/**\n\t\t\t * @type {Array<ChromeToolbarItem>}\n\t\t\t */\n\t\t\tlet chromeToolbarItems = api.state.chromeToolbarItems;\n\t\t\tlet appShellDataSourceOutput = { ...api.data.uxr_app_shell_data_source_1.uxPropertiesAndAuthRoutes };\n\t\t\t// check if menu is enabled or not.\n\t\t\tlet isChromeMenuEnabled = appShellDataSourceOutput?.enableMenu?.global?.enableMenu || false;\n\t\t\tif (chromeToolbarItems.length === 0 && !isChromeMenuEnabled)\n\t\t\t\treturn;\n\t\t\tif (!api.state.selectedToolbarItem && !isChromeMenuEnabled)\n\t\t\t\treturn;\n\t\t\tconst dataOuput = { ...api.data.breadcrumbs_items_provider.output };\n\t\t\tlet translations = dataOuput.i18nTranslation;\n\t\t\tapi.setState(stateNames.i18nTranslation, translations);\n\t\t\tconst triggeredToolbarItem = chromeToolbarItems.find(item => item.id === dataOuput.input.selectedToolbarItem.id);\n\t\t\tif (!triggeredToolbarItem && !isChromeMenuEnabled)\n\t\t\t\treturn;\n\t\t\tlet menuItems;\n\t\t\tif (isChromeMenuEnabled) {\n\t\t\t\t/**\n\t\t\t\t * Priority will be given to UX Page property then extension point. If not both then app shell will render default.\n\t\t\t\t */\n\t\t\t\tmenuItems = appShellDataSourceOutput?.menu?.global || [];\n\t\t\t\tif (menuItems.length > 0)\n\t\t\t\t\tmenuItems = appShellDataSourceOutput?.menu?.global;\n\t\t\t\telse {\n\t\t\t\t\t// dataOutput gives default one if no extensionn found.\n\t\t\t\t\tmenuItems = dataOuput.menu.items;\n\t\t\t\t}\n\t\t\t\tapi.setState(stateNames.chromeMenuItems, menuItems);\n\t\t\t}\n\t\t\t/**\n\t\t\t * @type {Array<BreadcrumbItemWithRouteInfo>}\n\t\t\t */\n\t\t\tlet finalItems = [];\n\t\t\t/**\n\t\t\t * @type {Array<BreadcrumbItemWithRouteInfo>}\n\t\t\t */\n\t\t\tlet toBePatchedItems = [];\n\t\t\tconst routeState = api.state.routeState;\n\t\t\tif (!Array.isArray(dataOuput.currentRoute.items) || dataOuput.currentRoute.items.length === 0)\n\t\t\t\treturn;\n\n\t\t\tif (!triggeredToolbarItem)\n\t\t\t\treturn;\n\t\t\tif (triggeredToolbarItem.routeInfo.route !== api.state.selectedToolbarItem.routeInfo.route) {\n\t\t\t\ttoBePatchedItems = routeState.get(triggeredToolbarItem.routeInfo.route) || [];\n\t\t\t\tif (!api.state.routeSessionKeySet.has(triggeredToolbarItem.routeInfo.route))\n\t\t\t\t\ttoBePatchedItems = [];\n\t\t\t}\n\t\t\telse {\n\t\t\t\ttoBePatchedItems = routeState.get(api.state.selectedToolbarItem.routeInfo.route) || [];\n\t\t\t\tif (!api.state.routeSessionKeySet.has(api.state.selectedToolbarItem.routeInfo.route))\n\t\t\t\t\ttoBePatchedItems = [];\n\t\t\t}\n\t\t\tconst isDefaultToolbarItem = triggeredToolbarItem.routeInfo.route === BreadcrumbUtils.defaultToolbarItem.routeInfo.route;\n\t\t\tconst chromeToolbarSet = new Set(chromeToolbarItems.map((item) => {\n\t\t\t\treturn item.routeInfo.route;\n\t\t\t}));\n\t\t\t/**\n\t\t\t *\n\t\t\t * @param {StaticRouteInfo} rootItem\n\t\t\t */\n\t\t\tfunction addToCache(rootItem) {\n\t\t\t\tif (rootItem.disableCaching)\n\t\t\t\t\treturn;\n\t\t\t\tconst currentL1RouteConst = isDefaultToolbarItem ? '' : 'current';\n\t\t\t\trootItem.items.forEach((item) => {\n\t\t\t\t\tif (item.disableCaching)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (!item.routeInfo)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tif (typeof item.routeInfo.route !== 'string' || item.routeInfo.route.trim().length === 0)\n\t\t\t\t\t\treturn;\n\t\t\t\t\tlet targetRoute = item.routeInfo.targetRoute;\n\t\t\t\t\tif (!targetRoute)\n\t\t\t\t\t\ttargetRoute = chromeToolbarSet.has(item.routeInfo.route) ? \"\" : currentL1RouteConst;\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (typeof targetRoute === 'string')\n\t\t\t\t\t\t\ttargetRoute = currentL1RouteConst;\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tconst l1Route = targetRoute.route;\n\t\t\t\t\t\t\tif (typeof l1Route !== 'string')\n\t\t\t\t\t\t\t\ttargetRoute = currentL1RouteConst;\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tconst targetToolbar = api.state.chromeToolbarItems.find(item => item.routeInfo.route === l1Route);\n\t\t\t\t\t\t\t\tif (!targetToolbar)\n\t\t\t\t\t\t\t\t\ttargetRoute = currentL1RouteConst;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\titem.hideBreadcrumb = item.hideBreadcrumb || false;\n\t\t\t\t\titem.routeInfo.fields = item.routeInfo.fields || {};\n\t\t\t\t\titem.routeInfo.params = item.routeInfo.params || {};\n\t\t\t\t\titem.routeInfo.targetRoute = targetRoute;\n\t\t\t\t\tconst routeKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(item.routeInfo, triggeredToolbarItem);\n\t\t\t\t\tapi.state.outputCache.set(routeKey, item);\n\t\t\t\t\t// Setting up menuItems in session cache.\n\t\t\t\t\tapi.state.outputCache.set(stateNames.chromeMenuItems, menuItems);\n\t\t\t\t});\n\t\t\t\tapi.state.outputCache.set(stateNames.i18nTranslation, translations)\n\t\t\t}\n\t\t\tif (Array.isArray(dataOuput.staticRoutes)) {\n\t\t\t\tapi.setState(stateNames.isStaticRoutesFetched, true);\n\t\t\t\tdataOuput.staticRoutes.forEach((staticRoute) => {\n\t\t\t\t\taddToCache(staticRoute);\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet currentRoute = dataOuput.currentRoute;\n\t\t\tif (!(currentRoute && currentRoute.routeInfo.route))\n\t\t\t\treturn;\n\t\t\taddToCache(currentRoute);\n\t\t\tconst triggeredRouteKey = BreadcrumbUtils.getCacheKeyWithOptionalParams(currentRoute.routeInfo, triggeredToolbarItem);\n\t\t\tif (currentRoute.disableCaching !== true)\n\t\t\t\tapi.state.outputCache.set(triggeredRouteKey, dataOuput.currentRoute);\n\t\t\tif (Object.values(RouteOperation).indexOf(currentRoute.operation) < 0)\n\t\t\t\treturn;\n\t\t\t/**\n\t\t\t * @type {Array<BreadcrumbItemWithRouteInfo>}\n\t\t\t */\n\t\t\tif (currentRoute.operation === RouteOperation.Replace)\n\t\t\t\tfinalItems = [...dataOuput.currentRoute.items];\n\t\t\telse if (currentRoute.operation === RouteOperation.Append)\n\t\t\t\tfinalItems = [...toBePatchedItems, ...dataOuput.currentRoute.items];\n\t\t\telse if (currentRoute.operation === RouteOperation.ReplaceLastItem) {\n\t\t\t\tfinalItems = [...toBePatchedItems];\n\t\t\t\tif (finalItems.length > 0)\n\t\t\t\t\tfinalItems.splice(finalItems.length - 1, 1);\n\t\t\t\tfinalItems = [...finalItems, ...dataOuput.currentRoute.items];\n\t\t\t}\n\t\t\tfinalItems.forEach(\n\t\t\t\tfunction (item) {\n\t\t\t\t\t//Specifically handle label of Simple List page since it is passed as page property: \"listTitle\"\n\t\t\t\t\tif (item.routeInfo && item.routeInfo.route == \"simplelist\") {\n\t\t\t\t\t\tif (item.routeInfo.params && item.routeInfo.params.hasOwnProperty(\"listTitle\")) {\n\t\t\t\t\t\t\titem.label = item.routeInfo.params.listTitle;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t\t// flag to consider either screenTitle updates or data broker updates\n            const considerScreenTitlesOnly = BreadcrumbUtils.shouldConsiderScreenTitleOnly(api,  currentRoute.routeInfo);\n            const screenTitle = (api.state.screenTitles && api.state.screenTitles[api.state.activeScreenId]) || '';\n\t\t\tif (considerScreenTitlesOnly && screenTitle)\n\t\t\t\tfinalItems[finalItems.length - 1].label = screenTitle\n\t\t\tBreadcrumbUtils.updateSessionStorageState({api, path: api.state.selectedContent?.context?.path, l1Route: api.state.selectedToolbarItem?.id});\n\t\t\trouteState.set(triggeredToolbarItem.routeInfo.route, [...finalItems]);\n\t\t\tconst requestInitiatedSelectedContent = BreadcrumbUtils.getCacheKeyWithOptionalParams(currentRoute.routeInfo, triggeredToolbarItem);\n\t\t\tconst currentSelectedContent = BreadcrumbUtils.getCacheKeyWithOptionalParams(api.state.selectedContent, api.state.selectedToolbarItem);\n\t\t\tif (requestInitiatedSelectedContent === currentSelectedContent)\n\t\t\t\tBreadcrumbUtils.updateBreadcrumbItems(api, finalItems, triggeredToolbarItem, currentRoute.routeInfo, helpers);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {import(\"..\").ResizePanelSizeChanged | import(\"..\").ResizePanelToggled} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic l2Resized(api, event, helpers, imports) {\n\t\t\tconst keyNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\tlet newDividerPosition = 0;\n\t\t\tconst toBeSavedUserPref = {\n\t\t\t\tisExpanded: true,\n\t\t\t\tdividerPosition: api.state.knownDividerPosition\n\t\t\t}\n\t\t\tif (event.name === 'NOW_RESIZABLE_PANES#PANE_SIZES#CHANGED') {\n\t\t\t\tif (event.payload.interaction === 'PROP_CHANGE')\n\t\t\t\t\treturn;\n\t\t\t\tnewDividerPosition = event.payload.dividerPosition || 0;\n\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, newDividerPosition);\n\t\t\t\ttoBeSavedUserPref.dividerPosition = newDividerPosition;\n\t\t\t\tconst minPixels = api.state.subToolbarOptions?.leftPanelMinWidth?.minPixels || resizeMinRatio.minPixels;\n\t\t\t\tconst diff = event.payload.firstPanePixels - minPixels;\n\t\t\t\tif (Math.abs(diff) < 1 || diff < 0) {\n\t\t\t\t\ttoBeSavedUserPref.isExpanded = false;\n\t\t\t\t\tnewDividerPosition = 0;\n\t\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, 0);\n\t\t\t\t} else {\n\t\t\t\t\tapi.setState(keyNames.knownDividerPosition, event.payload.dividerPosition);\n\t\t\t\t\ttoBeSavedUserPref.isExpanded = true;\n\t\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, newDividerPosition);\n\t\t\t\t}\n\t\t\t} else if(event.name === 'NOW_RESIZBLE_PANES#DIVIDER_BUTTON#CLICKED') {\n\t\t\t\tconst isExpanded = api.state.subToolbarPanelRatio === 0;\n\t\t\t\tnewDividerPosition = isExpanded? api.state.knownDividerPosition: 0;\n\t\t\t\ttoBeSavedUserPref.isExpanded = isExpanded;\n\t\t\t\tapi.setState(keyNames.subToolbarPanelRatio, newDividerPosition);\n\t\t\t}\n\t\t\tapi.setState(keyNames.l2ResizePref, toBeSavedUserPref);\n\t\t\tapi.data.save_user_preference_1.execute({name: api.state.userPrefKey, value: JSON.stringify(toBeSavedUserPref)});\n\t\t\tconst itemsLength  = api.state.breadcrumbItems.length;\n\t\t\tconst lastItem = api.state.breadcrumbItems.at(itemsLength - 1);\n\t\t\tBreadcrumbUtils.updateSubToolbarConfig(api, lastItem ?? {},\n\t\t\t\tapi.state.selectedContent,\n\t\t\t\tapi.state.selectedToolbarItem, newDividerPosition, true);\n\t\t}\n\t\t/**\n\t\t * \n\t\t * @param {API} api \n\t\t */\n\t\tstatic getResizablePanelKnownUserPrefereces(api) {\n\t\t\t\n\t\t\tif (api.state.l2ResizePref)\n\t\t\t\treturn {...api.state.l2ResizePref};\n\t\t\tconst preferences = api.data.look_up_user_preferences_1.result?.preferences;\n\t\t\tconst defaultResizePaneState = {...resizeDefaultDividerState};\t\n\t\t\tif (Array.isArray(preferences) && preferences.length > 0) {\n\t\t\t\tconst item = preferences.find(item => {\n\t\t\t\t\treturn item.name === api.state.userPrefKey;\n\t\t\t\t});\n\t\t\t\tif (!item) {\n\t\t\t\t\tconst {isExpanded = resizeDefaultDividerState.isExpanded, defaultDividerPosition = resizeDefaultDividerState.dividerPosition} = api.data.uxr_app_shell_data_source_1?.uxPropertiesAndAuthRoutes?.subToolbar?.global;\n\t\t\t\t\tdefaultResizePaneState.isExpanded = isExpanded;\n\t\t\t\t\tdefaultResizePaneState.dividerPosition = defaultDividerPosition;\n\t\t\t\t\treturn defaultResizePaneState;\n\t\t\t\t}\n\t\t\t\tif (typeof item?.value === 'string') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * @type {{dividerPosition: number, isExpanded: boolean}}\n\t\t\t\t\t\t */\n\t\t\t\t\t\tconst newPref = JSON.parse(item.value);\n\t\t\t\t\t\tif (typeof newPref.dividerPosition === 'number')\n\t\t\t\t\t\t\tdefaultResizePaneState.dividerPosition = newPref.dividerPosition;\n\t\t\t\t\t\tif (typeof newPref.isExpanded === 'boolean')\n\t\t\t\t\t\t\tdefaultResizePaneState.isExpanded = newPref.isExpanded;\n\t\t\t\t\t\tif (defaultResizePaneState.dividerPosition >= 100 || defaultResizePaneState.dividerPosition < 0)\n\t\t\t\t\t\t\tdefaultResizePaneState.dividerPosition = resizeDefaultDividerState.dividerPosition;\n\t\t\t\t\t}catch(e) {\n\t\t\t\t\t\tconsole.error('JSON preference parsing error => ' + e);\n\t\t\t\t\t}\n\t\t\t\t} \n\t\t\t}\n\t\t\tif (defaultResizePaneState.isExpanded && defaultResizePaneState.dividerPosition <= 0)\n\t\t\t\tdefaultResizePaneState.dividerPosition = api.data?.uxr_app_shell_data_source_1?.uxPropertiesAndAuthRoutes?.subToolbar?.global?.defaultDividerPosition || 25; // just some value\n\t\t\treturn defaultResizePaneState;\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {{elementId: string, name: string}} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic userPreferenceSucceeded(api, event, helpers, imports) {\n\t\t\tconst {elementId, name} = event;\n\t\t\tif (elementId === \"save_user_preference_1\" && name === \"DATA_OP_SUCCEEDED\")\n\t\t\t\tapi.data.look_up_user_preferences_1.refresh();\n\t\t\telse if(elementId === \"look_up_user_preferences_1\" && name === \"DATA_FETCH_SUCCEEDED\")\n\t\t\t\tBreadcrumbUtils.invalidateSubtoolbarOptions(api, event, helpers, imports);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {any} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic invalidateSubtoolbarOptions(api, event, helpers, imports) {\n\t\t\tconst isLoopupResolved = Object.keys(api.data.look_up_user_preferences_1?.result || {}).length > 0;\n\t\t\tconst isPagePropsResoved = isLoopupResolved && Object.keys(api.data.uxr_app_shell_data_source_1?.uxPropertiesAndAuthRoutes || {}).length > 0;\n\t\t\tif (!isPagePropsResoved)\n\t\t\t\treturn;\n\t\t\thelpers.timing.setTimeout( () => {\n\t\t\t\tapi.emit(REAPPLY_SUBTOOLBAR_OPTIONS, {});\n\t\t\t}, 30);\n\t\t}\n\t\t/**\n\t\t *\n\t\t * @param {API} api\n\t\t * @param {any} event\n\t\t * @param {Helpers} helpers\n\t\t * @param {Record<string, Function>} imports\n\t\t */\n\t\tstatic reApplySubtoolbarOptions(api, event, helpers, imports) {\t\n\t\t\tconst {dividerPosition, isExpanded} = BreadcrumbUtils.getResizablePanelKnownUserPrefereces(api);\n\t\t\tconst keyNames = BreadcrumbUtils.getStateKeys(api.state);\n\t\t\t//api.setState(keyNames.subToolbarPanelRatio, isExpanded? dividerPosition: 0);\n\t\t\tapi.setState(keyNames.knownDividerPosition, dividerPosition);\n\t\t\tconst itemsLength  = api.state.breadcrumbItems.length;\n\t\t\tconst lastItem = api.state.breadcrumbItems.at(itemsLength - 1);\n\t\t\tBreadcrumbUtils.updateSubToolbarConfig(api, lastItem ?? {}, api.state.selectedContent, api.state.selectedToolbarItem, isExpanded ? dividerPosition: 0);\n\t\t}\n\t}\n\treturn BreadcrumbUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"17848270c3132010ea04a5a1d840ddc9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/4524dc30c331101080d6d3658940dd22","value":"4524dc30c331101080d6d3658940dd22"},"sys_update_name":"sys_ux_client_script_include_17848270c3132010ea04a5a1d840ddc9","sys_updated_by":"admin","api_name":"sn_app_shell_aw.BreadcrumbAppshellUtils","sys_created_on":"2021-04-01 10:20:17","name":"BreadcrumbAppshellUtils","sys_name":"BreadcrumbAppshellUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/4524dc30c331101080d6d3658940dd22","value":"4524dc30c331101080d6d3658940dd22"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"8","includes":"","sys_updated_on":"2023-09-12 23:55:33","sys_tags":"","script":"function include({ imports }) {\n\n\tconst DEFAULT_START_NUM_DAYS = 21;\n\tconst DEFAULT_END_NUM_DAYS = 7;\n\tconst DEFAULT_BOUNDS_NUM_BEGIN_MONTHS = 6;\n\tconst DEFAULT_BOUNDS_NUM_END_MONTHS = 6;\n\n    // return todays date - DEFAULT_START_NUM_DAYS\n    const _getDefaultStartDate = () => {\n        let start = new Date();\n        start.setDate(start.getDate() - DEFAULT_START_NUM_DAYS);\n        return _formatDateForTimeline(start);\n    }\n\n    // return todays date + DEFAULT_END_NUM_DAYS\n    const _getDefaultEndDate = () => {\n        let end = new Date();\n        end.setDate(end.getDate() + DEFAULT_END_NUM_DAYS);\n        return _formatDateForTimeline(end);\n    }\n\n    // default to DEFAULT_BOUNDS_NUM_BEGIN_MONTHS in the past \n    const _getDefaultTimelineStartBounds = () => {\n        let start = new Date();\n        start.setMonth(start.getMonth() - DEFAULT_BOUNDS_NUM_BEGIN_MONTHS);\n        return _formatDateForTimeline(start);\n    }\n\n    // default to DEFAULT_BOUNDS_NUM_END_MONTHS months in the future\n    const _getDefaultTimelineEndBounds = () => {\n        let end = new Date();\n        end.setMonth(end.getMonth() + DEFAULT_BOUNDS_NUM_END_MONTHS);\n        return _formatDateForTimeline(end);\n    }\n\n    // custom date selected. Subtracts # of months from today\n    const _getCustomDateMonthsInPast = (months) => {\n        if (!_isValidDateNumericInput(months))\n            return \"\";\n        let end = new Date();\n        end.setMonth(end.getMonth() - months);\n        return _formatDateForTimeline(end);\n    }\n\n    // custom date selected. Adds # of months from today\n    const _getCustomDateMonthsInFuture = (months) => {\n        if (!_isValidDateNumericInput(months))\n            return \"\";\n        let end = new Date();\n        end.setMonth(end.getMonth() + months);\n        return _formatDateForTimeline(end);\n    }\n\n    // custom date selected. Subtracts # of months from today\n    const _getCustomDateDaysInPast = (days) => {\n        if (!_isValidDateNumericInput(days))\n            return \"\";\n        let end = new Date();\n        end.setMonth(end.getDate() - days);\n        return _formatDateForTimeline(end);\n    }\n\n    // custom date selected. Adds # of months from today\n    const _getCustomDateDaysInFuture = (days) => {\n        if (!_isValidDateNumericInput(days))\n            return \"\";\n        let end = new Date();\n        end.setMonth(end.getDate() + days);\n        return _formatDateForTimeline(end);\n    }\n\n    const _getNowTimestamp = () => {\n        return Date.now();\n    }\n\n    // timeline does not support timezone information\n    const _formatDateForTimeline = (date) => {\n        return date ? date.toISOString().replace(/T/, ' ').replace(/\\..+/, '') : \"\";\n    }\n\n    // only allow positive integers\n    const _isValidDateNumericInput = (num) => {\n        return typeof num === \"number\" && Math.floor(Math.abs(num)) === num;\n    }\n\n    const _snakeToCamelCase = (string) => {\n        if (!string)\n            return;\n        return string.toLowerCase().replace(/[-_][a-z]/g, (group) => group.slice(-1).toUpperCase());\n    }\n\n    const _getHexColorFromHilightString = (highlightStringColor) => {\n        switch (highlightStringColor) {\n            case \"blue\":\n                return \"#67d3e6\";\n            case \"brown\":\n                return \"#d3a675\";\n            case \"critical\":\n                return \"#e4233a\";\n            case \"gray\":\n                return \"#a3abac\";\n            case \"green\":\n                return \"#51b962\";\n            case \"green-yellow\":\n                return \"#c8da6e\";\n            case \"high\":\n                return \"#fd9800\";\n            case \"info\":\n                return \"#0079cc\";\n            case \"low\":\n                return \"#757581\";\n            case \"magenta\":\n                return \"#e869bf\";\n            case \"moderate\":\n                return \"#7c5cf0\";\n            case \"orange\":\n                return \"#ff8c72\";\n            case \"pink\":\n                return \"#e080a0\";\n            case \"positive\":\n                return \"#33830b\";\n            case \"purple\":\n                return \"#bd7aea\";\n            case \"teal\":\n                return \"#51c2c2\";\n            case \"warning\":\n                return \"#f0e000\";\n            case \"yellow\":\n                return \"#ffc551\";\n            default:\n                return \"#a3abac\"  // default gray\n        }\n    }\n\n    return {\n        getDefaultTimelineStartBounds: _getDefaultTimelineStartBounds,\n        getDefaultTimelineEndBounds: _getDefaultTimelineEndBounds,\n        getDefaultStartDate: _getDefaultStartDate,\n        getDefaultEndDate: _getDefaultEndDate,\n        getCustomDateMonthsInPast: _getCustomDateMonthsInPast,\n        getCustomDateMonthsInFuture: _getCustomDateMonthsInFuture,\n        getCustomDateDaysInPast: _getCustomDateDaysInPast,\n        getCustomDateDaysInFuture: _getCustomDateDaysInFuture,\n        getNowTimestamp: _getNowTimestamp,\n        getHexColorFromHilightString: _getHexColorFromHilightString,\n        snakeToCamelCase: _snakeToCamelCase\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"17a701b943df211017b739603ab8f297","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_17a701b943df211017b739603ab8f297","sys_updated_by":"maint","api_name":"sn_cmdb_ws.unifiedMapTimelineUtil","sys_created_on":"2023-06-08 17:12:12","name":"unifiedMapTimelineUtil","sys_name":"unifiedMapTimelineUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"User\"\n    }\n]","access":"package_private","sys_mod_count":"27","includes":"","sys_updated_on":"2023-08-24 18:02:30","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    class SowIncidentImpactGeomapUtilsSNC {\n\n        /**\n         * Returns Geomap config\n         * @param {object} helpers\n         * @param {object} impactDetails\n         * @return object\n         */\n        static async getGeomapConfig(helpers, impactDetails) {\n            let geomapConfig = {\n                \"dataSources\": await this._getDataSources(helpers, impactDetails),\n                \"groupBy\": await this._getGroupBy(impactDetails),\n                \"metricLabel\": await this._getMetricLable()\n            };\n            return geomapConfig;\n        }\n    \n        /**\n         * Returns data sources property value for Geomap\n         * @param {object} helpers\n         * @param {object} impactDetails\n         * @return object\n         */\n        static async _getDataSources(helpers, impactDetails) {\n            let dataSources = [{\n                \"filterQuery\": \"sys_idIN\" + impactDetails.impactedUsers.join(),\n                \"id\": \"dGFibGVzeXNfdXNlcjE2OTE2Njg3MDkzMDM=\",\n                \"label\": await helpers.translate(\"User\"),\n                \"sourceType\": \"table\",\n                \"tableOrViewName\": \"sys_user\"\n            }];\n            return dataSources;\n        }\n    \n        /**\n         * Returns group by property value for Geomap\n         * @param {object} impactDetails\n         * @return object\n         */\n        static async _getGroupBy(impactDetails) {\n            let groupBy = [{\n                \"groupBy\": [{\n                    \"dataSource\": \"dGFibGVzeXNfdXNlcjE2OTE2Njg3MDkzMDM=\",\n                    \"groupByField\": \"location\"\n                }],\n                \"maxNumberOfGroups\": impactDetails.impactedLocationsCount\n            }];\n            return groupBy;\n        }\n    \n        /**\n         * Returns metric label property value for Geomap\n         * @return object\n         */\n        static async _getMetricLable() {\n            let metricLabel = [{\n                \"aggregateFunction\": \"COUNT\",\n                \"dataSource\": \"dGFibGVzeXNfdXNlcjE2OTE2Njg3MDkzMDM=\",\n                \"id\": \"ZEdGaWJHVnplWE5mZFhObGNqRTJPVEUyTmpnM01Ea3pNRE09MTY5MTY2ODcxMjU3NQ==\"\n            }];\n            return metricLabel;\n        }\n    }\n    \n    return SowIncidentImpactGeomapUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"17ad952a533cb1102f10ddeeff7b129b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_17ad952a533cb1102f10ddeeff7b129b","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentImpactGeomapUtilsSNC","sys_created_on":"2023-08-24 16:54:55","name":"SowIncidentImpactGeomapUtilsSNC","sys_name":"SowIncidentImpactGeomapUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"46","includes":"881d20a10fe21010ad4437a98b767e2a,98f9726c0f662010ad4437a98b767e0e","sys_updated_on":"2021-02-23 13:21:36","sys_tags":"","script":"function include({imports}) {\n    const {\n        'sn_vtb.constants': constantsInclude,\n         'sn_vtb.loadashUtil': loadashUtil\n    } = imports;\n    const {\n        ELEMENTS_IDS: {\n            MUTATION_DATA_BROKER_ELEMENT_ID\n        },\n        DATA_BROKERS_IDS: {\n            MUTATION_DATA_BROKER_ID\n        },\n        DATA_BROKER_OP: {\n            CARD_ARCHIVED,\n            ADD_CARD,\n            DELETE_LANE\n        }\n    } = constantsInclude();\n     const {\n        cloneDeep,\n        get\n     } = loadashUtil();\n\n    const removeCardFromLane = (laneId, swimLaneId, cardId, board) => {\n        if (laneId) {\n            var laneCards = board.cards.filter((card) => card.lane_id === laneId);\n            return removeItem(laneCards, cardId);\n        }\n\n        if (swimLaneId) {\n            var swimlaneCards = board.cards.filter((card) => card.swim_lane_id === swimLaneId);\n            return removeItem(swimlaneCards, cardId);\n        }\n    };\n\n    function removeItem(arr, item) {\n        return arr.splice(arr.indexOf(item), 1);\n    }\n\n    /**\n     * Can be used to replace an item in the array with an updated one and return a new array.\n     * @param existingArray\n     * @param updatedItem\n     * @param identifier\n     * @returns {*[]}\n     */\n    const replaceItemInArray = (existingArray, updatedItem, identifier = 'sys_id') => {\n        const updatedArray = [...existingArray];\n        const index = updatedArray.findIndex((element) => element[identifier] === updatedItem[identifier]);\n        updatedArray[index] = updatedItem;\n\n        return updatedArray;\n    };\n    /**\n     * Can be used to delete an item in the array and return the new array.\n     * @param existingArray\n     * @param updatedItem\n     * @param identifier\n     * @returns {*[]}\n     */\n    const deleteItemInArray = (existingArray, updatedItem, identifier = 'sys_id') => {\n        const index = existingArray.findIndex((element) => updatedItem[identifier] === element[identifier]);\n        const updatedArray = [...existingArray];\n        updatedArray.splice(index, 1);\n\n        return updatedArray;\n    };\n\n    const execGraphQLEndPoint = (operationName, operationPayload, emit) => {\n        const dbPayload =  {\n            operation: {\n                dataBrokerId: MUTATION_DATA_BROKER_ID,\n                parentResourceId: MUTATION_DATA_BROKER_ELEMENT_ID,\n                dataElementId: MUTATION_DATA_BROKER_ELEMENT_ID,\n                operationName\n            },\n            operationPayload\n        }\n        emit(\"UXF_DB_OP_TRIGGER_REQUESTED\", dbPayload);\n    };\n\n    const getErrorMessage = (errors, format = 'html') => {\n        const messageRegex = /fCode: +?(\\d+?); +?fMessage: +?([\\w \\.]*?)\\)/g;\n        let messages = [];\n        if (errors && Array.isArray(errors)) {\n            messages = errors.map((error) => {\n                let msg = error.message;\n                 if(!msg)\n                   return;\n\n                const match = msg.matchAll(messageRegex).next();\n                // handle translation if we are able to retrieve a message.\n                // format messages based on the code\n                return match.done ? msg : match.value[2];\n            });\n        }\n        // might need more improvements to this method going forward\n        return messages.join(format === 'html' ? '<br />' : ',');\n    };\n\nconst setFocusableElementOnBoard = ({operation, boardFocusState, element, boardState, elementType}) => {\nboardState = resetFocusableItemOnBoard(boardState , boardFocusState);\nboardFocusState = {};\nlet card;\n    switch (operation) {\n        case ADD_CARD:\n        card = element;\n    if (boardState.boardType === 'FREEFORM') {\n            card.isFocus = true;\n            boardFocusState = {\n                operation,\n                id: card.sys_id,\n                elementType: \"card\"\n            };\n            boardState = { ...boardState, cards: [...boardState.cards, card] };\n    }\n    break;\n\n        case CARD_ARCHIVED:\n            card = element;\n            const focusableElement = getFocusableElement(boardState, card);\n            focusableElement.elem.isFocus = true;\n            boardFocusState = {\n                operation,\n                id: focusableElement.elem.sys_id,\n                elementType: focusableElement.elementType\n            };\n\n            if (focusableElement.elementType === \"card\") {\n                let updatedCards = [...boardState.cards];\n                updatedCards = replaceItemInArray(updatedCards, focusableElement.elem);\n                boardState = { ...boardState, cards: updatedCards };\n            } else if(focusableElement.elementType === \"lanes\"){\n                let updatedLanes = [...boardState.lanes];\n                updatedLanes = replaceItemInArray(updatedLanes, focusableElement.elem);\n                boardState = { ...boardState, lanes: updatedLanes };\n            }else {\n                let updatedSwimLanes = [...boardState.swimlanes];\n                updatedSwimLanes = replaceItemInArray(updatedSwimLanes, focusableElement.elem);\n                boardState = { ...boardState, swimlanes: updatedSwimLanes };\n           }\n            break;\n\n\n        case DELETE_LANE:\n            ({boardState, boardFocusState} = handleFocusOnDeleteOrHideLane({operation, boardState, lane: element, laneType: elementType}));\n            break;\n\n        case 'HIDE_LANE':\n            ({boardState, boardFocusState} = handleFocusOnDeleteOrHideLane({operation, boardState, lane: element, laneType: elementType}));\n            break;\n    }\n    return {\n        boardFocusState,\n        boardState\n    };\n};\n\n\nconst handleFocusOnDeleteOrHideLane = ({operation, boardState, lane, laneType}) => {\n    let updatedLanes = laneType === \"lane\" ? [...boardState.lanes] : [...boardState.swimlanes];\n    let focusableLane;\n    let boardFocusState = {};\n    let lanes = laneType === \"lane\" ? boardState.lanes : boardState.swimlanes;\n    lanes = lanes.filter(l => !boardState.hidden_lanes.includes(l.sys_id));\n    if(lanes.length === 1) { //Only one lane exists, we move the focus to Add new swimlane/Add new lane button\n        boardFocusState = {\n            operation,\n            id: laneType === \"lane\" ? 'addNewLane_sysId' : 'addNewSwimlane_sysId',\n            elementType: laneType\n        };\n    } else {\n        const deletedLaneIndex = lanes.findIndex(l => l.sys_id === lane.sys_id);\n        //last lane deleted, focus moves to the previous lane\n        if(lanes.length - 1 === deletedLaneIndex) {\n            focusableLane = lanes[deletedLaneIndex - 1];\n        } else {\n            focusableLane = lanes[deletedLaneIndex + 1];\n        }\n         focusableLane.isFocus = true;\n         boardFocusState = {\n                operation,\n                id: focusableLane.sys_id,\n                elementType: laneType\n        };\n        updatedLanes = replaceItemInArray(updatedLanes, focusableLane);\n        boardState = laneType === \"lane\" ? { ...boardState, lanes: updatedLanes } : { ...boardState, swimlanes: updatedLanes}\n    }\n\n    return  {\n        boardState,\n        boardFocusState\n    }\n}\n\nconst getFocusableElement = (boardState, card) => {\n    let focusableElement = {};\n    const {cards, lanes , swimlanes}  = boardState;\n    if(!card.swim_lane_id){\n        focusableElement = getFocusableElementOnBoard(cards,lanes, card , \"lane\");\n    } else {\n        focusableElement = getFocusableElementOnBoard(cards,swimlanes, card , \"swimlane\");\n    }\n\n    return focusableElement;\n}\n\nconst getFocusableElementOnBoard = (cards, array, card , type) =>{\n    let focusableElement = {};\n    let cardsInLane = [];\n    if(type === \"swimlane\") {\n        cardsInLane = cards.filter((c) => (\n             c.swim_lane_id === card.swim_lane_id &&\n             c.lane_id === card.lane_id &&\n             c.removed === false)).sort((a, b) => a.order - b.order);\n    } else {\n        cardsInLane = cards.filter((c) => (c.lane_id === card.lane_id && c.removed === false)).sort((a, b) => a.order - b.order);\n    }\n    const archivedCardIndex = cardsInLane.findIndex((c) => c.sys_id === card.sys_id);\n    if (cardsInLane.length === 1) {   // It means there is only one card in that lane so focusable element should be lane header after card archived.\n        focusableElement.elementType = type;\n        if(type === \"swimlane\"){\n            focusableElement.elem = array.find((l) => l.sys_id === card.swim_lane_id);\n        } else{\n            focusableElement.elem = array.find((l) => l.sys_id === card.lane_id);\n        }\n\n    } else if (archivedCardIndex + 1 === cardsInLane.length) {     // Case when last card from lane is deleted.\n        focusableElement.elementType = \"card\";\n        focusableElement.elem = cardsInLane[archivedCardIndex - 1];\n    } else {\n        focusableElement.elementType = \"card\";\n        focusableElement.elem = cardsInLane[archivedCardIndex + 1];\n    }\n\n    return focusableElement;\n}\n\nconst resetFocusableItemOnBoard = (boardState, boardFocusState) => {\n    const { elementType } = boardFocusState;\n\n    if (elementType && elementType === \"card\") {\n        let updatedCards = [...boardState.cards];\n        const cards = boardState.cards;\n        const focusableCard = cards.find((c) => c.isFocus && c.isFocus === true);\n        if (focusableCard) {\n            focusableCard.isFocus = false;\n            updatedCards = replaceItemInArray(updatedCards, focusableCard);\n            boardState = { ...boardState, cards: updatedCards };\n        };\n    }\n\n    if (elementType && elementType === \"lane\") {\n        let updatedLanes = [...boardState.lanes];\n        const lanes = boardState.lanes;\n        const focusableLane = lanes.find((l) => l.isFocus && l.isFocus === true);\n        if (focusableLane) {\n            focusableLane.isFocus = false;\n            updatedLanes = replaceItemInArray(updatedLanes, focusableLane);\n            boardState = { ...boardState, lanes: updatedLanes };\n        };\n    };\n\nif (elementType && elementType === \"swimlane\") {\n        let updatedSwimLanes = [...boardState.swimlanes];\n        const swimlanes = boardState.swimlanes;\n        const focusableSwimLane = swimlanes.find((sl) => sl.isFocus && sl.isFocus === true);\n        if (focusableSwimLane) {\n            focusableSwimLane.isFocus = false;\n            updatedSwimLanes = replaceItemInArray(updatedSwimLanes, focusableSwimLane);\n            boardState = { ...boardState, swimlanes: updatedSwimLanes };\n        };\n    };\n\n    return boardState;\n};\n\nconst translateWrapper = (key, tPromise)  => {\n        return new Promise((resolve, reject) => {\n            tPromise.then(tText => {\n                resolve({\n                    key,\n                    tText\n                })\n            })\n        });\n};\n    return {\n        cloneDeep,\n        get,\n        removeCardFromLane,\n        replaceItemInArray,\n        deleteItemInArray,\n        execGraphQLEndPoint,\n        getErrorMessage,\n        resetFocusableItemOnBoard,\n        setFocusableElementOnBoard,\n        translateWrapper\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"17c0853d0fa61010ad4437a98b767e13","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_17c0853d0fa61010ad4437a98b767e13","sys_updated_by":"admin","api_name":"sn_vtb.utils","sys_created_on":"2020-08-11 04:59:34","name":"utils","sys_name":"utils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Name\"\n    },\n    {\n        \"message\": \"Triggered count (times)\"\n    },\n    {\n        \"message\": \"Opted-out count (users)\"\n    },\n    {\n        \"message\": \"Category name\"\n    },\n    {\n        \"message\": \"Table name\"\n    },\n    {\n        \"message\": \"Loading data\"\n    },\n    {\n        \"message\": \"Error occured\"\n    },\n    {\n        \"message\": \"Error occurred. Please try again\"\n    },\n    {\n        \"message\": \"No data found\"\n    },\n    {\n        \"message\": \"Error occurred. Please try again\"\n    },\n    {\n        \"message\": \"No data found\"\n    }\n]","access":"package_private","sys_mod_count":"179","includes":"","sys_updated_on":"2024-12-11 12:21:06","sys_tags":"","script":"function include({\n  imports\n}, helpers) {\n  const commonNotifHeader = [\"NotificationName\", \"TriggeredCount\", \"OptedOutCount\", \"CategoryName\", \"TableName\"];\n  const headersList = new Map();\n  headersList.set(\"top_notifications\", commonNotifHeader);\n\n  headersList.set(\"most_trigerred_notification\", commonNotifHeader);\n  headersList.set(\"least_trigerred_notification\", commonNotifHeader);\n  headersList.set(\"most_opt_out_notification\", commonNotifHeader);\n  headersList.set(\"unused_notification\", commonNotifHeader);\n\n  headersList.set(\"top_recipients_to_notifications\", [\"NotificationName\", \"TriggeredCount\", \"CategoryName\", \"TableName\"]);\n  headersList.set(\"top_tables_to_notifications\", [\"NotificationName\", \"TriggeredCount\", \"CategoryName\", \"TableName\"]);\n\n  const groupedHeadersList = new Map();\n  groupedHeadersList.set(\"top_recipients_to_notifications\", {\n    key: \"userSysId\",\n    rowCount: \"triggeredCount\",\n    rowLabel: \"userName\"\n  });\n  groupedHeadersList.set(\"top_tables_to_notifications\", {\n    key: \"tableSysId\",\n    rowCount: \"triggeredCount\",\n    rowLabel: \"tableLabel\"\n  });\n\n  const getHeaders = async (type) => {\n    const headers = headersList.get(type);\n    let columns = [];\n\n    for (let i = 0; i < headers.length; i++) {\n      switch (headers[i]) {\n        case \"NotificationName\":\n          const nameLabel = await helpers.translate(\"Name\");\n          columns.push({\n            \"key\": \"NotificationName\",\n            \"label\": nameLabel,\n            \"type\": \"link\"\n          });\n          break;\n        case \"TriggeredCount\":\n          const triggerCountLabel = await helpers.translate(\"Triggered count (times)\");\n          columns.push({\n            \"key\": \"TriggeredCount\",\n            \"label\": triggerCountLabel\n          });\n          break;\n        case \"OptedOutCount\":\n          const optCountLabel = await helpers.translate(\"Opted-out count (users)\");\n          columns.push({\n            \"key\": \"OptedOutCount\",\n            \"label\": optCountLabel\n          });\n          break;\n        case \"CategoryName\":\n          const categoryLabel = await helpers.translate(\"Category name\");\n          columns.push({\n            \"key\": \"CategoryName\",\n            \"label\": categoryLabel\n          });\n          break;\n        case \"TableName\":\n          const tableLabel = await helpers.translate(\"Table name\");\n          columns.push({\n            \"key\": \"TableName\",\n            \"label\": tableLabel\n          });\n          break;\n      }\n    }\n\n    return {\n      columns\n    };\n  };\n  const generateGroupedTable = (groupedType, results, childOptions, childType) => {\n    const groupedTypeOptions = groupedHeadersList.get(groupedType);\n    const rows = results.map((result) => convertGroupedRecord(result, groupedTypeOptions, childOptions, childType));\n    return {\n      rows\n    };\n  };\n\n  const convertGroupedRecord = (record, groupedTypeOptions, childOptions, childType) => {\n    const result = {\n      type: \"grouped\",\n      isGroupExpanded: false\n    };\n    result.key = record[groupedTypeOptions.key];\n    result.groupedRowCount = record[groupedTypeOptions.rowCount];\n    result.groupedRowLabel = record[groupedTypeOptions.rowLabel];\n\n    if (record.children) {\n      childOptions.prefix = result.key;\n      result.children = generateTable(childType, record.children, childOptions).rows;\n    }  else {\n        result.children = [{\n            \"key\" : \"loader_row\" + result.key,\n            \"type\" : \"custom\",\n            \"componentTag\" : \"now-loader\",\n            \"componentProps\" : {\n                \"size\": \"lg\"\n            },\n            \"contentAlignment\": \"center\"\n        }];\n    }\n\n    return result;\n  };\n\n  const generateTable = (type, results, options) => {\n    const headers = headersList.get(type);\n    const rows = results.map((result) =>\n      convertRecord(result, headers, options)\n    );\n    return {\n      rows\n    };\n  };\n  const convertRecord = (record, headers, options) => {\n    var cells = {};\n    var key = (options.prefix ? options.prefix + \"_\" : \"\") + record[options.key];\n    var result = {\n      cells,\n      key\n    };\n    for (let i = 0; i < headers.length; i++) {\n      switch (headers[i]) {\n        case \"NotificationName\":\n          cells[\"NotificationName\"] = {\n            value: record[\"notificationSysId\"],\n            label: record[\"notificationName\"]\n          };\n          break;\n\n        case \"TriggeredCount\":\n          var triggeredCount = record[\"triggeredCount\"] ? record[\"triggeredCount\"] : 0;\n          cells[\"TriggeredCount\"] = {\n            value: triggeredCount\n          };\n          break;\n\n        case \"OptedOutCount\":\n          var optOutCount = record[\"notificationPreferenceOptOutCount\"] ? record[\"notificationPreferenceOptOutCount\"] : 0;\n          var totalCount = record[\"notificationTotalPreferenceCount\"] ? record[\"notificationTotalPreferenceCount\"] : 0;\n          cells[\"OptedOutCount\"] = {\n            value: optOutCount + \"/\" + totalCount\n          };\n          break;\n\n        case \"CategoryName\":\n          cells[\"CategoryName\"] = {\n            value: record[\"categoryName\"]\n          };\n          break;\n\n        case \"TableName\":\n          const displayValue = record[\"tableName\"] ? record[\"tableLabel\"] + \" [ \" + record[\"tableName\"] + \" ] \" : \"\";\n          cells[\"TableName\"] = {\n            value: displayValue\n          };\n          break;\n\n      }\n    }\n    return result;\n  };\n\n  const getOverlayMessageForTable = async (type) => {\n    let result = {};\n    switch (type) {\n      case \"onload\":\n        const loadLabel = await helpers.translate(\"Loading data\");\n        result = {\n          \"type\": \"loader\",\n          \"loaderConfig\": {\n            \"label\": loadLabel\n          }\n        };\n        break;\n      case \"error\":\n        const errorLabel1 = await helpers.translate(\"Error occured\");\n        const errorLabel2 = await helpers.translate(\"Error occurred. Please try again\");\n        result = {\n          \"type\": \"message\",\n          \"showColumnHeaders\": true,\n          \"messageConfig\": {\n            \"content\": errorLabel2,\n            \"heading\": {\n              \"label\": errorLabel1,\n              \"level\": 1\n            },\n            \"illustration\": \"error\"\n          }\n        };\n        break;\n      case \"zero_results\":\n        const zeroResultsLabel = await helpers.translate(\"No data found\");\n        result = {\n          \"type\": \"message\",\n          \"showColumnHeaders\": true,\n          \"messageConfig\": {\n            \"heading\": {\n              \"label\": zeroResultsLabel,\n              \"level\": 1\n            },\n            \"illustration\": \"no-data\"\n          }\n        };\n        break;\n    }\n    return result;\n  };\n\n  const getStateMessage = async (type) => {\n    let result = {};\n    switch (type) {\n      case \"error\":\n        const errorLabel = await helpers.translate(\"Error occurred. Please try again\");\n        result = {\n          \"message\": errorLabel\n        };\n        break;\n      case \"zero_results\":\n        const zeroResultsLabel = await helpers.translate(\"No data found\");\n        result = {\n          \"message\": zeroResultsLabel\n        };\n        break;\n    }\n    return result;\n  };\n  /*\n    PAR dashboard always retrives the hitoric values and doesn't hold information about today. So, API is designed to change the date filter to default value when today is selected(This happens whenever user unselects the date filter and apply it).\n  */\n  const normaliseDateFilter = (dateFilter, defaultValue) => {\n    if (dateFilter && dateFilter.start == dateFilter.end) {\n      const today = new Date(); \n      let todayDate = today.getFullYear() + \"-\" + (today.getMonth() +1) + \"-\" + today.getDate();\n      if (todayDate == dateFilter.start) {\n        dateFilter.start = defaultValue.start;\n        dateFilter.end = defaultValue.end;\n        dateFilter.dynamicTimeRange = defaultValue.dynamicTimeRange;\n\n        return dateFilter;\n      }\n    }\n    return dateFilter;\n  };\n\n  return {\n    generateTable,\n    generateGroupedTable,\n    getHeaders,\n    getOverlayMessageForTable,\n    getStateMessage,\n    normaliseDateFilter\n  };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"1834c310ff3cda10ac42fbd38c4fd9a8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c43214c1fb101a1055d3f67465efdc21","value":"c43214c1fb101a1055d3f67465efdc21"},"sys_update_name":"sys_ux_client_script_include_1834c310ff3cda10ac42fbd38c4fd9a8","sys_updated_by":"admin","api_name":"sn_notif_dashboard.NotificationDashboardUtils","sys_created_on":"2024-09-18 16:22:11","name":"NotificationDashboardUtils","sys_name":"NotificationDashboardUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c43214c1fb101a1055d3f67465efdc21","value":"c43214c1fb101a1055d3f67465efdc21"},"sys_created_by":"rajesh.tatikonda@snc","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"11","includes":"","sys_updated_on":"2024-06-29 05:55:26","sys_tags":"","script":"function include() {\n    var _getApplicationServicesCategories = function (data) {\n        var categories = [];\n        for (var item in data) {\n            categories.push(data[item]['categoryLabel']);\n        }\n        categories.sort();\n        return categories;\n    };\n\n    return {\n        getApplicationServicesCategories: _getApplicationServicesCategories,\n        getRecommendationDescription: _getRecommendationDescription\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"186db1353d406110f877f926d1756251","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_186db1353d406110f877f926d1756251","sys_updated_by":"admin","api_name":"sn_cmdb_ws.cmdbWSInsightUtil","sys_created_on":"2022-12-29 07:45:25","name":"cmdbWSInsightUtil","sys_name":"cmdbWSInsightUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2024-06-11 15:09:36","sys_tags":"","script":"function include({ imports }, api) {\n\n    function translate(msg, key = \"translatedMessage\") {\n        var promises = [];\n        var keys = [];\n        for (let id in msg) {\n            keys.push(id);\n            promises.push(msg[id]);\n        }\n\n        return new Promise(resolve => {\n            Promise.all(promises).then(values => {\n                let prop = api.state[key] || {};\n                keys.forEach((k, i) => prop[k] = values[i]);\n                if (key) {\n                    api.setState(key, ctx => ({\n                        ...ctx.currentValue,\n                        ...prop\n                    }));\n                }\n                resolve(prop, values);\n            });\n        });\n\n    }\n\n    return {\n        translate,\n        translatedMessage: api.state.translatedMessage || {}\n    }\n\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"19af487143710210717d19405bb8f2b1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_19af487143710210717d19405bb8f2b1","sys_updated_by":"admin","api_name":"sn_access_analyzer.GlideTextTranslater","sys_created_on":"2024-04-26 15:55:32","name":"GlideTextTranslater","sys_name":"GlideTextTranslater","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2022-11-13 17:06:15","sys_tags":"","script":"function include() {\n\tconst generateAction = async function (decorations, helpers) {\n\t\tif (decorations.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst tooltipMap = {\n\t\t\tincident: {\n\t\t\t\tlabelPlural: await helpers.translate('Incidents'),\n\t\t\t\tlabel: await helpers.translate('Incident')\n\t\t\t},\n\t\t\tproblem: {\n\t\t\t\tlabelPlural: await helpers.translate('Problems'),\n\t\t\t\tlabel: await helpers.translate('Problem')\n\t\t\t},\n\t\t\tchange_request: {\n\t\t\t\tlabelPlural: await helpers.translate('Changes'),\n\t\t\t\tlabel: await helpers.translate('Change')\n\t\t\t},\n\t\t\toutages_past: {\n\t\t\t\tlabelPlural: await helpers.translate('recently closed outages'),\n\t\t\t\tlabel: await helpers.translate('recently closed outage')\n\t\t\t},\n\t\t\toutages_current: {\n\t\t\t\tlabelPlural: helpers.translate('current opened outages'),\n\t\t\t\tlabel: helpers.translate('current opened outage')\n\t\t\t},\n\t\t\toutages_planned: {\n\t\t\t\tlabelPlural: await helpers.translate('planned outages'),\n\t\t\t\tlabel: await helpers.translate('planned outage')\n\t\t\t},\n\t\t\tchanges_past: {\n\t\t\t\tlabelPlural: await helpers.translate('recently closed changes'),\n\t\t\t\tlabel: await helpers.translate('recently closed change')\n\t\t\t},\n\t\t\tchanges_current: {\n\t\t\t\tlabelPlural: await helpers.translate('current opened changes'),\n\t\t\t\tlabel: await helpers.translate('current opened change')\n\t\t\t},\n\t\t\tchanges_planned: {\n\t\t\t\tlabelPlural: await helpers.translate('planned changes'),\n\t\t\t\tlabel: await helpers.translate('planned change')\n\t\t\t}\n\t\t};\n\t\tconst tooltip = await Promise.all(\n\t\t\tdecorations.map(async item => {\n\t\t\t\tlet value = item.value;\n\t\t\t\tif (value > 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t'There are {0} {1}',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttooltipMap[item.name]['labelPlural']\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t'There is {0} {1}',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttooltipMap[item.name]['label']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\treturn [{ icon: 'info-circle-outline', label: JSON.stringify(tooltip) }];\n\t};\n\tconst parseGroupTree = function (xml, parent) {\n\t\tvar nodes = [];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar items = rxml.getElementsByTagName('item');\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tlet item = items[i];\n\t\t\tlet node = {\n\t\t\t\tid: item.getAttribute('name'),\n\t\t\t\tlabel: item.getAttribute('label'),\n\t\t\t\tclass: item.getAttribute('sys_class_name'),\n\t\t\t\tchildren: [],\n\t\t\t\tchildrenAvailable: Number(\n\t\t\t\t\titem.getAttribute('sys_class_name') === 'sys_user_group'\n\t\t\t\t)\n\t\t\t};\n\t\t\tif (parent && item.getAttribute('sys_class_name') === 'sys_user')\n\t\t\t\tnode = {\n\t\t\t\t\t...node,\n\t\t\t\t\tparentId: parent.id,\n\t\t\t\t\tparentLabel: parent.label\n\t\t\t\t};\n\t\t\tnodes.push(node);\n\t\t}\n\t\treturn nodes;\n\t};\n\tconst parseGeneralTree = function (xml) {\n\t\tvar nodes = [];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar items = rxml.getElementsByTagName('item');\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tlet item = items[i];\n\t\t\tconst node = {\n\t\t\t\tid: item.getAttribute('name'),\n\t\t\t\tlabel: item.getAttribute('label') || item.getAttribute('display_value'),\n\t\t\t\tclass: item.getAttribute('sys_class_name'),\n\t\t\t\tchildren: [],\n\t\t\t\tchildrenAvailable: item.getAttribute('children')\n\t\t\t\t\t? item.getAttribute('children') === 'false'\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: 1\n\t\t\t\t\t: 1\n\t\t\t};\n\t\t\tnodes.push(node);\n\t\t}\n\t\treturn nodes;\n\t};\n\n\tconst getTargetField = function (referenceTable, targetValue, dependentField){\n\t\tif(referenceTable === \"sys_user_group\") return `${targetValue}.undefined`;\n\t\tif(dependentField) return `${targetValue}.${dependentField}`;\t\t\t\n\t\treturn null;\n\t};\n\n\tconst addNewChild = function (items, path, newChild) {\n\t\tlet currIndex = 0;\n\t\tlet tempItems = items;\n\t\tpath.forEach(id => {\n\t\t\tconst index = tempItems.findIndex(item => item.id === path[currIndex]);\n\n\t\t\tif (currIndex === path.length - 1) tempItems = tempItems[index];\n\t\t\telse tempItems = tempItems[index].children;\n\t\t\tcurrIndex += 1;\n\t\t});\n\t\tif (newChild.length != 0) {\n\t\t\ttempItems.children = newChild;\n\t\t\ttempItems.childrenAvailable = 1;\n\t\t} else {\n\t\t\ttempItems.childrenAvailable = 0;\n\t\t}\n\n\t\treturn items;\n\t};\n\tconst parseCITree = async function (xml, path = [], root, helpers) {\n\t\tlet nodes = [[], []];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar relTypes = rxml.getElementsByTagName('cmdb_rel_type');\n\t\tfor (let relTypeIndex = 0; relTypeIndex < relTypes.length; relTypeIndex++) {\n\t\t\tlet relType = relTypes[relTypeIndex];\n\t\t\tvar temp = relType.getAttribute('type');\n\t\t\tlet ciTypes = relType.getElementsByTagName('ci_type');\n\n\t\t\tif (temp !== 'child' && temp !== 'parent') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet nodeType = temp === 'child' ? nodes[0] : nodes[1];\n\t\t\tfor (let ciTypeIndex = 0; ciTypeIndex < ciTypes.length; ciTypeIndex++) {\n\t\t\t\tlet ciType = ciTypes[ciTypeIndex];\n\t\t\t\tlet items = ciType.getElementsByTagName('cmdb_ci');\n\t\t\t\tfor (let ciIndex = 0; ciIndex < items.length; ciIndex++) {\n\t\t\t\t\tlet item = items[ciIndex];\n\t\t\t\t\tif (item.getAttribute('nested_level') !== '0') continue;\n\n\t\t\t\t\tlet childrenAvailable = item.getAttribute('children') === '0' ? 0 : 1;\n\t\t\t\t\tlet sysID = item.getAttribute('sys_id');\n\t\t\t\t\tif (sysID === root || (path && path.indexOf(sysID) > -1)) {\n\t\t\t\t\t\tchildrenAvailable = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst node = {\n\t\t\t\t\t\tid: sysID,\n\t\t\t\t\t\tlabel: item.getAttribute('display_value'),\n\t\t\t\t\t\tclass: ciType.getAttribute('name'),\n\t\t\t\t\t\tchildrenAvailable,\n\t\t\t\t\t\tactions: await generateAction(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ name: 'incident', value: item.getAttribute('incident') },\n\t\t\t\t\t\t\t\t{ name: 'problem', value: item.getAttribute('problem') },\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'change_request',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('change_request')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_past',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_past')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_current',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_current')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_planned',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_planned')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_past',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_past')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_current',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_current')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_planned',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_planned')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t].filter(item => item.value > 0),\n\t\t\t\t\t\t\thelpers\n\t\t\t\t\t\t),\n\t\t\t\t\t\trelType: temp\n\t\t\t\t\t};\n\t\t\t\t\tnodeType.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t};\n\tconst generateTargetPath = function (index, targetPath) {\n\t\tconst path = [];\n\t\tfor (let i = 0; i <= index; i++) path.push(targetPath[i]);\n\t\treturn path;\n\t};\n\treturn {\n\t\tparseGroupTree,\n\t\tparseGeneralTree,\n\t\taddNewChild,\n\t\tparseCITree,\n\t\tgenerateTargetPath,\n\t\tgetTargetField\n\t};\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"1b25838b7703111029e548a0af5a99b0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_update_name":"sys_ux_client_script_include_1b25838b7703111029e548a0af5a99b0","sys_updated_by":"admin","api_name":"sn_record_page.Content Tree Utils","sys_created_on":"2022-11-13 17:06:15","name":"Content Tree Utils","sys_name":"Content Tree Utils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"4","includes":"","sys_updated_on":"2022-03-20 12:07:09","sys_tags":"","script":"function include({ imports }) {\n    const getlazyBlocks = (blocks = [], lazyBlocks = []) => {\n        blocks.forEach((cb) => {\n            if (cb.lazyLoad === \"1\") lazyBlocks.push(cb);\n\n            if (cb.children && cb.children.length > 0)\n                getlazyBlocks(cb.children, lazyBlocks);\n        });\n        return lazyBlocks;\n    };\n\n    const getLazyBlockIds = (blocks = []) => {\n        return getlazyBlocks(blocks).map((b) => b.block_id);\n    };\n\n    const patchLazyBlock = (blocks = [], lazyLoadedBlock) => {\n        // TODO: revisit this logic\n        for (let i = 0; i < blocks.length; i++) {\n            const cb = blocks[i];\n            if (cb.block_id === lazyLoadedBlock.block_id) {\n                blocks[i] = { ...lazyLoadedBlock, children: cb.children };\n                break;\n            } else if (cb.children && cb.children.length > 0) {\n                blocks[i].children = [...cb.children];\n                patchLazyBlock(blocks[i].children, lazyLoadedBlock);\n            }\n        }\n    };\n\n    return {\n        // Get lazy blocks payload\n        getlazyBlocks: getlazyBlocks,\n        getLazyBlockIds: getLazyBlockIds,\n        patchLazyBlock: patchLazyBlock,\n    };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"1d348bde5352011033cdddeeff7b126d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_1d348bde5352011033cdddeeff7b126d","sys_updated_by":"admin","api_name":"sn_ace.ACELazyBlocksUtil","sys_created_on":"2022-03-20 06:08:28","name":"ACELazyBlocksUtil","sys_name":"ACELazyBlocksUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Something went wrong.\"\n    },\n    {\n        \"message\": \"Enter query again.\"\n    },\n    {\n        \"message\": \"Query already running.\"\n    },\n    {\n        \"message\": \"Wait or cancel other query.\"\n    },\n    {\n        \"message\": \"Invalid query.\"\n    },\n    {\n        \"message\": \"Go to Query Builder to fix it.\"\n    },\n    {\n        \"message\": \"Something went wrong.\"\n    },\n    {\n        \"message\": \"Could not save feedback.\"\n    },\n    {\n        \"message\": \"Something went wrong.\"\n    },\n    {\n        \"message\": \"Could not cancel query.\"\n    }\n]","access":"package_private","sys_mod_count":"16","includes":"","sys_updated_on":"2023-10-19 15:31:50","sys_tags":"","script":"function include({ imports }) {\n\n    const _genericError = async (helpers) => {\n    \tconst header = await helpers.translate(\"Something went wrong.\");\n    \tconst message = await helpers.translate(\"Enter query again.\");\n        return ({\n            \"type\": \"critical\",\n            \"header\": header,\n            \"message\": message\n        });\n    };\n\n    const _queryRunningWarning = async (helpers) => {\n    \tconst header = await helpers.translate(\"Query already running.\");\n    \tconst message = await helpers.translate(\"Wait or cancel other query.\");\n        return ({\n            \"type\": \"warning\",\n            \"header\": header,\n            \"message\": message\n        });\n    };\n\n    const _invalidQueryError = async (helpers) => {\n    \tconst header = await helpers.translate(\"Invalid query.\");\n    \tconst message = await helpers.translate(\"Go to Query Builder to fix it.\");\n        return ({\n            \"type\": \"critical\",\n            \"header\": header,\n            \"message\": message\n        });\n    };\n\n    const _saveNlqFeedbackError = async (helpers) => {\n    \tconst header = await helpers.translate(\"Something went wrong.\");\n    \tconst message = await helpers.translate(\"Could not save feedback.\");\n        return ({\n            \"type\": \"critical\",\n            \"header\": header,\n            \"message\": message\n        });\n    };\n\n    const _cancelQueryError = async (helpers) => {\n    \tconst header = await helpers.translate(\"Something went wrong.\");\n    \tconst message = await helpers.translate(\"Could not cancel query.\");\n        return ({\n            \"type\": \"critical\",\n            \"header\": header,\n            \"message\": message\n        });\n    };\n\n    return {\n        genericError: _genericError,\n        queryRunningWarning: _queryRunningWarning,\n        invalidQueryError: _invalidQueryError,\n        saveNlqFeedbackError: _saveNlqFeedbackError,\n        cancelQueryError: _cancelQueryError\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"1d9e83750742111017b703767cd30056","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_1d9e83750742111017b703767cd30056","sys_updated_by":"admin","api_name":"sn_cmdb_ws.cmdbNlqSearchUtil","sys_created_on":"2022-09-21 03:38:42","name":"cmdbNlqSearchUtil","sys_name":"cmdbNlqSearchUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"3","includes":"667b8fcfc7e120109a57797c95c26081","sys_updated_on":"2021-02-16 04:23:10","sys_tags":"","script":"function include({imports}) {\n\tconst KEYS = {\n\t\tESCAPE: 'Escape',\n\t\tF2: 'F2',\n\t\tTAB: 'Tab',\n\t\tENTER: 'Enter'\n\t};\n\n\tconst {focusInside, focusOutside} = imports['sn_vtb.VisualBoardAccessibilityUtils']();\n\n\tconst defaultKeyPressHandlers = {\n\t\t'Tab': (activeElement, arrNavHandlerDescriptor, event, onFocusLost) => {\n\t\t\tif (activeElement && activeElement.matches(arrNavHandlerDescriptor.elementSelector)) {\n\t\t\t\tonFocusLost({element: activeElement, key: KEYS.TAB});\n\t\t\t\tevent.preventDefault();\n\t\t\t\tactiveElement.blur();\n\t\t\t}\n\t\t},\n\t\t'Escape': (activeElement, arrNavHandlerDescriptor, event) => {\n\t\t\t// Bring focus back to the elem\n\t\t\tif (activeElement && !activeElement.matches(arrNavHandlerDescriptor.elementSelector)) {\n\t\t\t\tlet activeEle = activeElement;\n\t\t\t\tif (arrNavHandlerDescriptor.closeDeepEle) {\n\t\t\t\t\tactiveEle = arrNavHandlerDescriptor.closeDeepEle(activeElement);\n\t\t\t\t}\n\t\t\t\tfocusOutside(activeEle, arrNavHandlerDescriptor.elementSelector, event);\n\n\t\t\t}\n\t\t},\n\t\t'F2': (activeElement, arrNavHandlerDescriptor, event) => {\n\t\t    if(!arrNavHandlerDescriptor.elementFirstChildSelector) {\n\t\t    \treturn;\n\t\t    }\n\t\t\t// If element is currently focused, enter the element (i.e focus inside)\n\t\t\t// Else focus back on the top element\n\t\t\tif (activeElement && activeElement.matches(arrNavHandlerDescriptor.elementSelector)) {\n\t\t\t\tlet activeEle = activeElement;\n\t\t\t\tif (arrNavHandlerDescriptor.getRootEle) {\n\t\t\t\t\tactiveEle = arrNavHandlerDescriptor.getRootEle(activeElement);\n\t\t\t\t}\n\t\t\t\t// Focus inside the element\n\t\t\t\tfocusInside(activeEle, arrNavHandlerDescriptor.elementFirstChildSelector, event);\n\t\t\t} else {\n\t\t\t\tlet activeEle = activeElement;\n\t\t\t\tif (arrNavHandlerDescriptor.closeDeepEle) {\n\t\t\t\t\tactiveEle = arrNavHandlerDescriptor.closeDeepEle(activeElement);\n\t\t\t\t}\n\t\t\t\t// Focus back on the element\n\t\t\t\tfocusOutside(activeEle, arrNavHandlerDescriptor.elementSelector, event);\n\t\t\t}\n\t\t}\n\t}\n\n\n\tconst boardAccessibilityHandler = (action, subComponentsArrowNavigationDescriptors, onFocusLost) => {\n\t\tconst {event, name} = action.payload;\n\t\tconst path = event.composedPath ? event.composedPath() : event.path;\n\t\tconst activeElement = path[0];\n\t\tconst arrNavHandlerDescriptor = subComponentsArrowNavigationDescriptors[name];\n\t\tif (arrNavHandlerDescriptor) {\n\t\t\tconst keyPressHandler = arrNavHandlerDescriptor[event.key] || defaultKeyPressHandlers[event.key];\n\t\t\tif (keyPressHandler) {\n\t\t\t\treturn keyPressHandler(activeElement, arrNavHandlerDescriptor, event, onFocusLost);\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tboardAccessibilityHandler\n\t}\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"25bb0303c72520109a57797c95c26028","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_25bb0303c72520109a57797c95c26028","sys_updated_by":"admin","api_name":"sn_vtb.VisualBoardAccessibilityHandler","sys_created_on":"2021-01-11 15:27:46","name":"VisualBoardAccessibilityHandler","sys_name":"VisualBoardAccessibilityHandler","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"4bff7b65097c4510f8771350f7e25cb2","sys_updated_on":"2022-01-02 13:00:57","sys_tags":"","script":"function include({imports}) { \n    let sowPerfHeaderUtilsSNC = imports['sn_sow_inc.SowPerfHeaderUtilsSNC']();\n    class SowPerfHeaderUtils extends sowPerfHeaderUtilsSNC {\n    }\n    return SowPerfHeaderUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"27cf37e1097c4510f8771350f7e25cf9","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_27cf37e1097c4510f8771350f7e25cf9","sys_updated_by":"admin","api_name":"sn_sow_inc.SowPerfHeaderUtils","sys_created_on":"2022-01-02 12:59:08","name":"SowPerfHeaderUtils","sys_name":"SowPerfHeaderUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"24","includes":"17c0853d0fa61010ad4437a98b767e13,e3e0d376b7e21010ad44ea56ee11a924,b52a726c0f662010ad4437a98b767e13","sys_updated_on":"2021-02-23 13:27:39","sys_tags":"","script":"function include({ imports }) {\n    const {\n        'sn_vtb.laneHandlers': laneHandlersInclude,\n        'sn_vtb.utils': utilsInclude,\n        'sn_vtb.moveCard': moveCard\n    } = imports;\n\n    const { getQuery } = laneHandlersInclude();\n    const { cloneDeep } = utilsInclude();\n\t/**\n\t * This method is used to transform the record array into an object.\n\t * @param cardData\n\t */\n    const transformCardData = (cardData) => {\n        let record = {};\n        cardData.id = cardData.sys_id;\n        cardData.record.forEach((field) => {\n            let fieldValue;\n            if (field.value.hasOwnProperty('string')) {\n                fieldValue = field.value.string;\n            } else if (field.value.hasOwnProperty('boolean')) {\n                fieldValue = field.value.boolean;\n            } else {\n                fieldValue = field.value;\n                if (fieldValue.value && fieldValue.value.length === 1) fieldValue.value = fieldValue.value[0];\n            }\n\n            record[field.name] = fieldValue;\n        });\n        cardData.record = record;\n\n        if (cardData.sys_updated_on && cardData.sys_updated_on.hasOwnProperty('date_time'))\n            cardData.sys_updated_on = cardData.sys_updated_on.date_time;\n\n        return cardData;\n    };\n\n    // I'm not so sure whether this method is necessary. This method was used in classic VTB's DnD flow. Though in seismic\n    // VTB, The GraphQL query anyway specifically asks for labels and due_date_field in the output so the data should always\n    // contain these props. Opinions ? PS: I don't know when these properties might be missing for some reason.\n    const addCardProperties = (cardData, board) => {\n        const previousCardData = board.cards.find((c) => c.id === cardData.sys_id);\n\n        if (previousCardData) {\n            const dueDateField = board.due_date_field;\n\n            if (\n                dueDateField &&\n                previousCardData.record.hasOwnProperty(dueDateField) &&\n                !cardData.record.hasOwnProperty(dueDateField)\n            )\n                cardData.record[dueDateField] = previousCardData.record[dueDateField];\n\n            if (previousCardData.hasOwnProperty('labels') && !cardData.hasOwnProperty('labels'))\n                cardData.labels = previousCardData.labels;\n        }\n        return cardData;\n    };\n\n    function getUser(userId, users) {\n        return users.find((user) => userId === user.sys_id);\n    }\n\n    const addUsersToCard = (card, boardUsers) => {\n        // Card users\n        let users = {};\n        const {\n            assigned_to\n        } = card.record;\n        users.primary_assignees = [];\n        if (assigned_to && assigned_to.value) {\n            let user = getUser(assigned_to.value, boardUsers);\n            if(user){\n                if(user.avatar) assigned_to.avatar = user.avatar;\n                //Todo: Fetch for users not on board\n                users.primary_assignees.push(user);\n            }\n        }\n\n        // Additional Assignee list\n        const {\n            additional_assignee_list\n        } = card.record;\n        users.additional_assignees = [];\n        if (additional_assignee_list) {\n            if (typeof additional_assignee_list.value === 'string') {\n                const additionalAssignee = additional_assignee_list.value;\n                additional_assignee_list.value = [additionalAssignee];\n            }\n            additional_assignee_list.value.forEach((userId) => {\n                let user = getUser(userId, boardUsers);\n                if(user) users.additional_assignees.push(user);\n            });\n        }\n\n        card.users = users;\n    };\n    const reOrderCards = (board, payload) => {\n        const updatedCardIds = payload.cardIdList;\n        const cards = board.cards;\n        const reorderedCards = cards.filter((card) => updatedCardIds.indexOf(card.sys_id) > -1);\n        const cardsCopy = [...cards];\n\n        reorderedCards.forEach((card) => {\n            const updatedCard = cloneDeep(card);\n            updatedCard.order = updatedCardIds.indexOf(updatedCard.sys_id);\n            const index = cards.findIndex((c) => c.sys_id === updatedCard.sys_id);\n            cardsCopy.splice(index, 1, updatedCard);\n        });\n\n        let updatedBoard = {\n            ...board,\n            cards: cardsCopy\n        }\n        return sortCards(updatedBoard);\n    }\n\n    const sortCards = (board) => {\n\n        let newCards = [];\n        board.lanes.forEach((lane) => {\n            newCards = newCards.concat(\n                board.cards\n                    .filter((card) => card.lane_id === lane.sys_id)\n                    .sort((a, b) => a.order - b.order)\n                    .map((card, cardIndex) => {\n                        card.order = cardIndex;\n                        return card;\n                    })\n            );\n        });\n\n        // As we are maintaining one card array and not deleting cards after lane deleted because\n        // It card can be restored later. So there will be a case where we have deleted lane and card\n        // belong to that lane will be present in cards array and should be shown in archive card\n        // panel. Since we are dispatching this action on card move we need to handle this case\n        // separately.\n        const laneIds = board.lanes.map((lane) => {\n            return lane.sys_id;\n        });\n\n        let cardsInDeletedLane = [];\n        board.cards.forEach((card) => {\n            if (!laneIds.includes(card.lane_id)) cardsInDeletedLane.push(card);\n        });\n\n        const updatedCards = newCards.concat(cardsInDeletedLane);\n\n        return {\n            ...board,\n            cards: updatedCards\n        };\n    }\n\n    const constructVtbCardFormData = (boardState,payload ,cardAdded) => {\n        const newCardData = {\n            ...payload.card,\n            isVisible: true,\n            recordId: cardAdded ?  \"-1\" : payload.card.task_id \n        };\n         const lane = boardState.lanes.find((lane) => lane.sys_id === payload.card.lane_id);\n         const swimlane = payload.card.swim_lane_id ? boardState.swimlanes.find((smlane) => smlane.sys_id === payload.card.swim_lane_id) : null;\n        if (lane) {\n            lane.options = {\n                table: boardState.table,\n                lane_field: boardState.field\n            }\n        }\n        if (swimlane) {\n            swimlane.options = {\n                table: boardState.table,\n                swimlane_field: boardState.swim_lane_field\n            }\n        }\n\n        const swimlaneQuery = swimlane ? getQuery(swimlane) : \"\";\n        const laneQuery = lane ? getQuery(lane) : \"\";\n\n        let query = `${laneQuery}`;\n        if (swimlaneQuery) {\n            query = `${laneQuery}^${swimlaneQuery}`;\n        }\n        newCardData.query = query;\n        return newCardData;\n    }\n\n    return {\n       moveCard,\n        transformCardData,\n        addCardProperties,\n        addUsersToCard,\n        reOrderCards,\n        constructVtbCardFormData\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"2bb5c53d0fa61010ad4437a98b767e7f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_2bb5c53d0fa61010ad4437a98b767e7f","sys_updated_by":"admin","api_name":"sn_vtb.cardManagerMethods","sys_created_on":"2020-08-11 05:20:59","name":"cardManagerMethods","sys_name":"cardManagerMethods","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"2","includes":"","sys_updated_on":"2024-03-15 20:12:26","sys_tags":"","script":"function include() {\n\treturn {\n\t\tgetPayload (event) {\n\t\t\tconst {eventOrigin, currentTabParFilters} = event.payload;\n\t\t\tlet payload;\n\n\t\t\tif (eventOrigin === 'NOW_VIS_WRAPPER#CLICKED') {\n\t\t\t\tconst {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttable,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tindicatorSysid,\n\t\t\t\t\t\tkpiSysId,\n\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\taggregate,\n\t\t\t\t\t\tdomain,\n\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\tdataSourceType,\n\t\t\t\t\t},\n\t\t\t\t\ttitle,\n\t\t\t\t} = event.payload;\n\n\t\t\t\tif (dataSourceType === 'metricBase') {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tdateRange: {\n\t\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tciSysId,\n\t\t\t\t\t\t\tciType,\n\t\t\t\t\t\t},\n\t\t\t\t\t} = event.payload;\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\troute: 'metric-explorer', \n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tciSysId,\n\t\t\t\t\t\t\tciType,\n\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\tchartIndex: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: 'Metric Explorer',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'hlaElasticSearchComponents') {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\troute: 'log-viewer',\n\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\ttitle: 'Log viewer',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'table') {\n\t\t\t\t\tconst coreUIParam = `${table}_list.do?sysparm_query=${query}`;\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tcontext: {\n\t\t\t\t\t\t\tpath: 'now/nav/ui'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\ttarget: coreUIParam,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troute: 'classic',\n\t\t\t\t\t\ttitle: title || table,\n\t\t\t\t\t};\n\t\t\t\t} else if (kpiSysId) {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdataSourceId: kpiSysId,\n\t\t\t\t\t\t\tdataSource: 'analyticalmodel',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\t\taggregate,\n\t\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troute: 'kpi-details',\n\t\t\t\t\t\ttitle: title || 'KPI Details',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'indicator') {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdataSourceId: indicatorSysid,\n\t\t\t\t\t\t\tdataSource: 'kpid',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\t\taggregate,\n\t\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t},\n\t\t\t\t\t\troute: 'kpi-details',\n\t\t\t\t\t\ttitle: title || 'KPI Details',\n\t\t\t\t\t};\n\t\t\t\t\tif (currentTabParFilters) {\n\t\t\t\t\t\tconst {parFilters} = currentTabParFilters;\n\t\t\t\t\t\tpayload.params.startDate = parFilters.length ? parFilters[0].start : null;\n\t\t\t\t\t\tpayload.params.endDate = parFilters.length ? parFilters[0].end : null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED') {\n\t\t\t\tconst {table, row, title} = event.payload;\n\t\t\t\tconst coreUIParam = `${table}.do?sys_id=${row?.sys_id?.value || '-1'}`;\n\t\t\t\tpayload = {\n\t\t\t\t\tcontext: {\n\t\t\t\t\t\tpath: 'now/nav/ui'\n\t\t\t\t\t},\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttarget: coreUIParam,\n\t\t\t\t\t},\n\t\t\t\t\troute: 'classic',\n\t\t\t\t\ttitle: title || 'Form Record',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'SN_PAR_CALENDAR_CONNECTED#EVENT_CLICKED') {\n\t\t\t\tconst {table, title, sysId} = event.payload.event;\n\n\t\t\t\tconst coreUIParam = `${table}.do?sys_id=${sysId || '-1'}`;\n\t\t\t\tpayload = {\n\t\t\t\t\tcontext: {\n\t\t\t\t\t\tpath: 'now/nav/ui'\n\t\t\t\t\t},\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttarget: coreUIParam,\n\t\t\t\t\t},\n\t\t\t\t\troute: 'classic',\n\t\t\t\t\ttitle: title || 'Form Record',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'NOW_RECORD_LIST_CONNECTED#VIEW_ALL_CLICKED') {\n\t\t\t\tconst {table, query, listTitle, currentTabParFilters, listFilters} = event.payload;\n\t\t\t\tconst filterQueries = currentTabParFilters && currentTabParFilters.encodedQueries && currentTabParFilters.encodedQueries[table] ? `${currentTabParFilters.encodedQueries[table]}^` : '';\n\t\t\t\tlet queryWithFilterClauses = `${filterQueries}${query || ''}`;\n\t\t\t\tif (listFilters)\n\t\t\t\t\tqueryWithFilterClauses = `${queryWithFilterClauses}^${listFilters}`;\n\t\t\t\t\t\n\t\t\t\tconst coreUIParam = `${table}_list.do?sysparm_query=${queryWithFilterClauses}`;\n\t\t\t\tpayload = {\n\t\t\t\t\tcontext: {\n\t\t\t\t\t\tpath: 'now/nav/ui'\n\t\t\t\t\t},\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttarget: coreUIParam,\n\t\t\t\t\t},\n\t\t\t\t\troute: 'classic',\n\t\t\t\t\ttitle: listTitle || 'List',\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn payload;\n\t\t},\n\t};\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"2d83b967b73002100c98e3fdde11a978","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_2d83b967b73002100c98e3fdde11a978","sys_updated_by":"admin","api_name":"sn_sow_inc.SowParWidgetsDrilldowns","sys_created_on":"2024-03-13 16:38:37","name":"SowParWidgetsDrilldowns","sys_name":"SowParWidgetsDrilldowns","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"c408debe430031102c5119405bb8f2b0","sys_updated_on":"2024-06-10 10:56:21","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\n    // -------------------------------------------------------------------------------- //\n\n    const NodeIcon = {\n        User: \"user-fill\",\n        Group: \"user-group-fill\",\n        Role: \"user-tag-fill\"\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class Node {\n\n        constructor(node) {\n            Object.assign(this, node);\n            this.children = [];\n        }\n\n        addChild(node) {\n            if (!this.children.includes(node.id)) {\n                this.children.push(node.id);\n            }\n        }\n\n        getEdges() {\n            let edges = this.children.map(childId => {\n                return {\n                    id: this.id + ':' + childId,\n                    sourceId: this.id,\n                    targetId: childId\n                }\n            });\n            return edges;\n        }\n\n        getNodeData(conf) {\n            conf = conf || {};\n            var data = {\n                id: this.id,\n                nodeType: this.type,\n                viewData: {\n                    icon: NodeIcon[this.type],\n                    primaryLabel: this.name,\n                    secondaryLabel: this.type\n                }\n            };\n\n            if (!isEmpty(this.status))\n                data.viewData.status = this.status;\n\n            if (!isEmpty(this.statusIcon))\n                data.viewData.statusIcon = this.statusIcon;\n\n            if (!isEmpty(this.tooltipContent))\n                data.tooltipContent = this.tooltipContent;\n\n            if (conf.leafNodeStatus) {\n                data.viewData.status = this.children.length == 0 ? conf.leafNodeStatus : \"none\"\n            }\n            return data;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class RoleNode extends Node {\n        constructor(node) {\n            super(node);\n            this.type = \"Role\";\n        }\n        getNodeData(conf) {\n            let node = super.getNodeData(conf);\n            if (this.children.length > 0) {\n                node.isGroup = true;\n                node.viewData.groupCount = this.children.length;\n            }\n            return node;\n        }\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class GroupNode extends Node {\n\n        constructor(node) {\n            super(node);\n            this.type = \"Group\";\n        }\n\n        getNodeData(conf) {\n            let node = super.getNodeData(conf);\n            node.isGroup = true;\n            node.viewData.groupCount = this.children.length;\n            return node;\n        }\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class UserNode extends Node {\n        constructor(node) {\n            super(node);\n            this.type = \"User\";\n        }\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class NodeMap {\n\n        _nodeMap;\n\n        constructor() {\n            this._nodeMap = new Map();\n        }\n\n        getRoleMap(user, nodes, conf) {\n            this.conf = conf;\n            this.createNode(user);\n            this._createNodes(nodes);\n            this._connectNodes(user.id, nodes);\n            return this._generateRoleMap();\n        }\n\n        _createNodes(nodes) {\n            nodes.forEach(node => {\n                this.createNode(node);\n                node.containingGroups.forEach(group => this.createNode(group));\n            });\n        }\n\n        _connectNodes(userId, nodes) {\n            nodes.forEach(node => {\n\n                if (node.assignmentTypes.includes('DIRECT')) {\n                    this.addChild(userId, node.id);\n                }\n\n                node.containedRoles.forEach(childNodeId => this.addChild(node.id, childNodeId));\n\n                node.containingGroups.forEach(group => {\n                    this.addChild(userId, group.id);\n                    this.addChild(group.id, node.id);\n                });\n            });\n        }\n\n        _generateRoleMap() {\n            var nodes = [];\n            var edges = [];\n            this._nodeMap.forEach(node => {\n                nodes.push(node.getNodeData(this.conf));\n                edges.push(...node.getEdges())\n            });\n            return {\n                nodes: nodes,\n                edges: edges\n            };\n        }\n\n        addChild(parentId, childId) {\n            this._nodeMap.get(parentId).addChild(this._nodeMap.get(childId));\n        }\n\n        getNode(id) {\n            return this._nodeMap.get(id);\n        }\n\n        createNode(node) {\n            if (this._nodeMap.has(node.id))\n                return null;\n            let n = null;\n            let type = node.type || \"\";\n            switch (type.toLowerCase()) {\n                case \"role\":\n                    n = new RoleNode(node);\n                    break;\n                case \"group\":\n                    n = new GroupNode(node);\n                    break;\n                default:\n                    n = new UserNode(node)\n            }\n            if (!n)\n                return null;\n            this._nodeMap.set(node.id, n);\n            return node;\n        }\n\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    class ViewChangesNodeMap extends NodeMap {\n        getRoleMap(user, nodes, conf) {\n            let k = {\n                ADDED: {\n                    status: \"positive\",\n                    icon: null\n                },\n                REMOVED: {\n                    status: \"critical\",\n                    icon: \"close-fill\"\n                },\n                UNCHANGED: {\n                    status: \"low\",\n                    icon: \"exclamation-fill\"\n                }\n            }\n            let parsedNodes = nodes.map(obj => {\n                let node = {\n                    ...obj.accessEntity,\n                    containingGroups: [],\n                };\n                let status = obj.simulatorChangeAction;\n                if (status != \"NONE\") {\n                    node.status = k[status].status;\n                    node.statusIcon = k[status].icon;\n                    let nodeTypeLabel = this._changeProperCase(node.type);\n                    let tms = api.state.translatedMessage;\n                    node.tooltipContent = node.name + \"<br/> [\" + tms[nodeTypeLabel] +  \" \" +  tms['being'] + \" \" + tms[status.toLowerCase()] + \"]\";\n                }\n                return node;\n            });\n            return super.getRoleMap(user, parsedNodes, conf);\n        }\n\n        _changeProperCase(type) {\n            return type.charAt(0) + type.slice(1).toLowerCase();\n        }\n        \n        getStats(nodes) {\n        \tlet count = {\n                NONE: 0,\n                ADDED: 0,\n                REMOVED: 0,\n                UNCHANGED: 0\n            };\n            nodes.forEach(node => count[node.simulatorChangeAction]++);\n            return count;\n        }\n\n        selectNode(nodeId, align = false, statVar = \"mapData\") {\n             let obj = {\n                 selectedNodeId: [nodeId],\n             };\n             if (align)\n                 obj.alignNodeId = nodeId;\n             api.setState(statVar, ctx => ({\n                ...ctx.currentValue,\n                ...obj\n             }));\n         }\n\n    }\n\n\n    // -------------------------------------------------------------------------------- //\n\n    const generateRoleMapData = (user, nodes, conf) => {\n        return new NodeMap().getRoleMap(user, nodes, conf);\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    const updateMap = (userObj, data, props) => {\n\n        const { EmptyState } = imports[\"sn_access_analyzer.UserComparisonUtil\"](api, helpers);\n\n        var conf = Object.assign({\n            leafNodeStatus: \"positive\"\n        }, props);\n\n        var mapData;\n        const emptyState = api.state[userObj.type + \"EmptyState\"];\n        if (data == null || data.length == 0) {\n            mapData = { nodes: [], edges: [] };\n\n            emptyState.show = true;\n            userObj.showLegend = false;\n            var err = {\n                heading: emptyState.messages.noRoles.heading,\n                content: emptyState.messages.noRoles.content\n            }\n            EmptyState.show(err, userObj.type + \"EmptyState\");\n\n        } else {\n            userObj.showLegend = true;\n            emptyState.show = false;\n            mapData = generateRoleMapData({\n                id: userObj.id,\n                name: userObj.name\n            }, data, conf);\n        }\n        userObj.loadingState = false;\n        api.setState(userObj.type, userObj);\n        var tms = api.state.translatedMessages;\n        mapData.nodes.forEach(node => node.viewData.secondaryLabel = tms[node.viewData.secondaryLabel]);\n        api.setState(userObj.type + \"Map\", mapData);\n    }\n\n    // -------------------------------------------------------------------------------- //\n    function showServerError() {\n        const { EmptyState } = imports[\"sn_access_analyzer.UserComparisonUtil\"](api, helpers);\n        var baseUser = api.state.baseUser;\n        var modelUser = api.state.modelUser;\n\n        baseUser.showLegend = false;\n        baseUser.loadingState = false;\n\n        modelUser.showLegend = false;\n        modelUser.loadingState = false;\n\n        api.setState(\"baseUser\", baseUser);\n        api.setState(\"modelUser\", modelUser);\n        EmptyState.showServerErrorMessage(\"baseUserEmptyState\");\n        EmptyState.showServerErrorMessage(\"modelUserEmptyState\");\n    }\n\n    const isEmpty = (val) => val == undefined || val == null || val.trim().length == 0;\n\n    return {\n        generateRoleMapData,\n        ViewChangesNodeMap,\n        updateMap,\n        showServerError\n    }\n\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3120e41b43e031102c5119405bb8f2b7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_3120e41b43e031102c5119405bb8f2b7","sys_updated_by":"maint","api_name":"sn_access_analyzer.UserRoleMapUtil","sys_created_on":"2023-08-14 09:32:30","name":"UserRoleMapUtil","sys_name":"UserRoleMapUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.2.3","required_translations":"[]","access":"package_private","sys_mod_count":"6","includes":"","sys_updated_on":"2024-09-03 19:43:59","sys_tags":"","script":"function include({\n    imports\n}, api = {}) {\n    return {\n        redirectUrl: (targetUrl) => {\n            api.emit('NAV_ITEM_SELECTED', {\n                external: {\n                    url: targetUrl,\n                   \"target\": \"_self\"\n                 }\n            });\n        }\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"321fcaaf93901210d0881347328918de","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_update_name":"sys_ux_client_script_include_321fcaaf93901210d0881347328918de","sys_updated_by":"admin","api_name":"sn_vsc.RedirectToSCConsole","sys_created_on":"2024-09-03 18:19:10","name":"RedirectToSCConsole","sys_name":"RedirectToSCConsole","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"47","includes":"","sys_updated_on":"2024-12-03 02:03:04","sys_tags":"","script":"function include() {\n    const validateDirtyStatus = ({ api, event }) => {\n        const { isDirty } = api.state;\n        const { name, payload } = event;\n        if (isDirty) {\n            api.emit('LIST_CTRL#OPEN_MODAL', {\n                route: 'discard-changes',\n            });\n            api.setState('callbackEvent', {\n                name,\n                payload,\n            });\n            return true;\n        }\n\n        return false;\n    };\n\n    class ListColumnPreferences {\n        constructor(api) {\n            this.api = api;\n            this.table = api.data.sn_record_list_data_broker.out.table;\n            this.preferences = api.data.sn_record_list_data_broker.out?.tableMetadata?.preferences || [];\n        };\n\n        getColumnOrderPrefName = () => {\n            // they server will decide if the list save sys_user_preference to store personalized column order or not, \n            return this.table && this.preferences.find(pref => pref.name.startsWith(`workspace.list.columnOrder.${this.table}.`))?.name;\n        };\n\n        saveColumnOrderUserPref = (value) => {\n            const name = this.getColumnOrderPrefName();\n            if (name)\n                this.api.data.save_user_preference.execute({ name, value });\n            else\n                console.warn('Could not save column order, no listId, pageId or columnPreferenceKey could be determined');\n        };\n\n        getColumnWidthsPrefName = () => {\n            return this.getColumnWidthsPref()?.name;\n        };\n\n        getColumnWidthsPref = () => {\n            const pref = this.table && this.preferences.find(pref => pref.name.startsWith(`workspace.list.columnWidths.${this.table}.`));\n            if (!pref)\n                console.warn('Could not save column widths, pageId or columnPreferenceKey could be determined');\n            return pref;\n        };\n\n        isColumnWidthsPersonalized = () => {\n            const pref = this.getColumnWidthsPref();\n            return pref?.value && pref?.value !== '{}';\n        };\n\n        saveColumnWidthsUserPref = (value) => {\n            const name = this.getColumnWidthsPrefName();\n            if (name)\n                this.api.data.save_user_preference.execute({ name, value });\n        };\n\n        updatePreference = (name, value) => {\n            if (!name)\n                return;\n            const pref = this.preferences.find(p => p.name === name);\n            if (pref)\n                pref.value = value;\n        };\n\n        transform = ({ dataElemId, data: { output: { data } = {} } = {} }) => {\n            if (!data)\n                return {};\n            if (dataElemId === 'list_controller__my_list__update') {\n                const { columns: { value } } = data.GlideRecord_Mutation?.update_sys_ux_my_list;\n                return { dataElemId, value, isColumnOrder: true };\n            }\n            if (dataElemId === 'save_user_preference') {\n                const { name, value } = data.now?.userPreference?.updateUserPreference;\n                const isColumnOrder = !!name?.match(/^workspace\\.list\\.columnOrder\\./g);\n                const isColumnWidths = !!name?.match(/^workspace\\.list\\.columnWidths\\./g);\n                if (isColumnOrder || isColumnWidths)\n                    return { dataElemId, name, value, isColumnOrder, isColumnWidths };\n            }\n            return {};\n        };\n    };\n\n    return {\n        validateDirtyStatus,\n        getListColumnPreferences: (api) => new ListColumnPreferences(api)\n    };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"36737961ebb0311090fa99602a522810","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_update_name":"sys_ux_client_script_include_36737961ebb0311090fa99602a522810","sys_updated_by":"admin","api_name":"sn_now_list_common.ListControllerUtils","sys_created_on":"2023-08-21 15:19:18","name":"ListControllerUtils","sys_name":"ListControllerUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/015dd2fa796d247253ef940e685b9ebd","value":"015dd2fa796d247253ef940e685b9ebd"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"7","includes":"","sys_updated_on":"2023-10-04 01:02:51","sys_tags":"","script":"function include({\n    imports\n}) {\n    const ERROR_NOTIFICATION_PROPS = {\n        \"status\": \"critical\",\n        \"icon\": \"exclamation-triangle-fill\",\n        \"action\": {\n            \"type\": \"dismiss\"\n        }\n    };\n\n    const SUCCESS_NOTIFICATION_PROPS = {\n        \"status\": \"positive\",\n        \"icon\": \"check-circle-outline\",\n        \"action\": {\n            \"type\": \"dismiss\"\n        }\n    }\n\n    const INFO_NOTIFICATION_PROPS = {\n        \"status\": \"info\",\n        \"icon\": \"circle-info-outline\",\n        \"action\": {\n            \"type\": \"dismiss\"\n        }\n    }\n\n    const showNotificationWithAutoClose = function(context, notificationItems, hideAfterMs = 5000) {\n        const { api, helpers } = context;\n        api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notificationItems\n        });\n\n        helpers.timing.setTimeout(() => api.emit(\"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\", {\n            items: notificationItems\n        }), hideAfterMs);\n    };\n\n    return {\n        ERROR_NOTIFICATION_PROPS,\n        SUCCESS_NOTIFICATION_PROPS,\n        INFO_NOTIFICATION_PROPS,\n        showNotificationWithAutoClose\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"396c663153a5b110fdadddeeff7b12ae","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_396c663153a5b110fdadddeeff7b12ae","sys_updated_by":"admin","api_name":"sn_cmdb_ws.CMDBWsNotificationUtil","sys_created_on":"2023-09-28 20:53:34","name":"CMDBWsNotificationUtil","sys_name":"CMDBWsNotificationUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"110","includes":"","sys_updated_on":"2024-09-16 22:53:10","sys_tags":"","script":"function include({ imports }) {\n\n    /**\n     * \n     * @returns Policy model\n     */\n    const _getPolicyModel = () => {\n        // format the date\n        const d = new Date();\n        let month = (d.getMonth() + 1) + \"\";\n        let day = d.getDate() + \"\";\n        const year = d.getFullYear() + \"\";\n\n        if (month.length < 2)\n            month = '0' + month;\n        if (day.length < 2)\n            day = '0' + day;\n\n        const dateFormat = [year, month, day].join('-');\n\n        return {\n            \"assignment\": {\n                \"task_assignment_type\": \"\",\n                \"task_management_group\": \"\",\n                \"user\": \"\",\n                \"user_group\": \"\",\n                \"task_management_user\": \"\"\n            },\n            \"data_filter\": {\n                \"encoded_query\": \"\",\n                \"enforced_condition\": \"\",\n                \"list_filter\": \"\",\n                \"table\": \"cmdb_ci\"\n            },\n            \"general_info\": {\n                \"cmdb_policy_type\": \"\",\n                \"description\": \"\",\n                \"policy_name\": \"\",\n                \"work_notes\": \"\"\n            },\n            \"options\": {\n                \"archive_for_days\": \"1\",\n                \"certification_fields\": \"\",\n                \"display_fields\": \"\",\n                \"allow_empty_fields\": true,\n                \"instructions\": \"\",\n                \"needs_review\": \"\",\n                \"retention_time\": \"1\",\n                \"retention_timeframe_selection\": \"days\",\n                \"subflow\": \"\",\n                \"task_due_in_days\": \"1\"\n            },\n            \"schedule\": {\n                \"run_dayofmonth\": \"1\",\n                \"run_dayofweek\": \"1\",\n                \"run_period\": \"1\",\n                \"run_start\": dateFormat + \" 00:00:00\",\n                \"run_time\": \"00:00:00\",\n                \"run_type\": \"daily\"\n            },\n            \"status\": \"\",\n            \"policySysId\": \"\"\n        }\n    }\n\n    /**\n     * \n     * @param policyTypeSysId \n     * @returns required fields for a given policy type\n     */\n    const _getPolicyFieldValidatorModel = (policyTypeSysId) => {\n        return {\n            \"general_info\": {\n                \"policy_name\": {\n                    \"invalid\": false,\n                    \"alertMessage\" : []\n                },\n                \"cmdb_policy_type\": {\n                    \"invalid\": false,\n                    \"alertMessage\" : []\n                }\n            },\n            \"data_filter\": {\n                \"table\": {\n                    \"invalid\": false\n                }\n            },\n            \"assignment\": {\n                \"task_assignment_type\": {\n                    \"invalid\": false,\n                    \"alertMessage\" : []\n                },\n                \"user_group_field\": {\n                    \"task_management_group\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"specific_user\": {\n                    \"user\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"specific_user_group\": {\n                    \"user_group\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"user_field\": {\n                    \"task_management_user\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                }\n            }, \"options\": {\n                \"b82b20d00731201017b703767cd300e1\": { // Archive\n                    \"subflow\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"7b80ed7753823010ee0dddeeff7b1223\": { // Attestation\n                    \"task_due_in_days\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"fe2a16b3436031106d8a8ef0dab8f2ff\": { // Certification\n                    \"task_due_in_days\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    },\n                    \"display_fields\": {\n                        invalid: false,\n                    },\n                    \"certification_fields\": {\n                        invalid: false,\n                    }\n                },\n                \"562bec900731201017b703767cd300e7\": { // Delete\n                    \"subflow\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"c3059c79ff920110456d766cf43bf1c6\": { // Delete CMDB Related Entry\n                    \"subflow\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                },\n                \"66306fcb7352201026f6aa114df6a77c\": { // Retire\n                    \"subflow\": {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                }\n            }, \"schedule\": {\n                \"run_type\": {\n                    \"invalid\": false\n                },\n                \"run_time\": {\n                    \"invalid\": false\n                },\n                \"run_dayofweek\": {\n                    \"invalid\": false\n                },\n                \"run_dayofmonth\": {\n                    \"invalid\": false\n                },\n                \"run_period\": {\n                    \"invalid\": false\n                },\n                \"run_start\": {\n                    \"invalid\": false\n                }\n            }\n        }\n    }\n\n    /**\n     * \n     * @param policyTypeSysId \n     * @returns list of policy options for the options view\n     */\n    const _getPolicyOptionsByType = (policyTypeSysId) => {\n        return {\n            \"b82b20d00731201017b703767cd300e1\": [\"subflow\", \"needs_review\", \"archive_for_days\"], // Archive\n            \"7b80ed7753823010ee0dddeeff7b1223\": [\"task_due_in_days\"], // Attestation\n            \"fe2a16b3436031106d8a8ef0dab8f2ff\": [\"display_fields\", \"certification_fields\", \"allow_empty_fields\", \"task_due_in_days\", \"instructions\"], // Certification\n            \"562bec900731201017b703767cd300e7\": [\"subflow\", \"needs_review\"], // Delete\n            \"c3059c79ff920110456d766cf43bf1c6\": [\"subflow\", \"needs_review\"], // Delete CMDB Related Entry\n            \"66306fcb7352201026f6aa114df6a77c\": [\"subflow\", \"needs_review\"] // Retire\n        }\n    }\n\n    const _getScheduleItemsByType = (runType) => {\n        switch (runType) {\n            case \"daily\":\n                return [\"run_time\"];\n            case \"weekly\":\n                return [\"run_time\", \"run_dayofweek\"];\n            case \"monthly\":\n                return [\"run_time\", \"run_dayofmonth\"];\n            case \"periodically\":\n                return [\"run_period\", \"run_start\"];\n            case \"once\":\n                return [\"run_start\"];\n        }\n    }\n\n    return {\n        getPolicyModel: _getPolicyModel,\n        getPolicyFieldValidatorModel: _getPolicyFieldValidatorModel,\n        getPolicyOptionsByType: _getPolicyOptionsByType,\n        getScheduleItemsByType: _getScheduleItemsByType\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3db91bef4340b11017b739603ab8f269","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_3db91bef4340b11017b739603ab8f269","sys_updated_by":"admin","api_name":"sn_cmdb_ws.DataManagerPolicyModel","sys_created_on":"2023-07-21 21:06:56","name":"DataManagerPolicyModel","sys_name":"DataManagerPolicyModel","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"6","includes":"","sys_updated_on":"2023-08-18 07:12:58","sys_tags":"","script":"function include({imports}) { \nlet isTeamsEnabled = true;  //set isTeamsEnabled to false to disable MS Teams on contact popover\nreturn  isTeamsEnabled;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3e8f98a4a3b8311016ccd63f26fcdaf8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_3e8f98a4a3b8311016ccd63f26fcdaf8","sys_updated_by":"admin","api_name":"sn_sow.Enable MS Teams on Contact Popover","sys_created_on":"2023-08-18 06:40:36","name":"Enable MS Teams on Contact Popover","sys_name":"Enable MS Teams on Contact Popover","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Resend verification code\"\n    }\n]","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2024-04-19 17:57:50","sys_tags":"","script":"function include({ imports }) {\n    class PwdResetUxfVerificationClientUtilSNC {\n        static CONSTANTS = {\n            BUTTON_VARIANT: {\n                SECONDARY: \"secondary\"\n            },\n            SEND_CODE_RESPONSE_STATUS_CODE: {\n                VERIFICATION_CODE_SENT: 2003,\n                PER_DAY_LIMIT_ERROR: 1006,\n                PAUSE_WINDOW_ERROR: 1007,\n                INVALID_REQUEST_ERROR: 1008,\n                INVALID_PHONE_NUMBER_ERROR: 1009\n            }\n        }\n\n        static async handleSendVerificationCodeResponse(sendCodeResponseObj, helpers) {\n            const response = {\n                sendCodeButtonState: {\n                    label: null,\n                    variant: null,\n                    disable: null\n                },\n                timerState: {\n                    isHidden: null,\n                    start: null\n                },\n                inputCodeState: {\n                    isHidden: null\n                },\n                sendCodeResponse: {\n                    statusMessage: null,\n                    rateLimitMessage: null\n                }\n            };\n            switch (sendCodeResponseObj.statusCode) {\n                case this.CONSTANTS.SEND_CODE_RESPONSE_STATUS_CODE.VERIFICATION_CODE_SENT:\n                    response.sendCodeButtonState.label = await helpers.translate(\"Resend verification code\");\n                    response.sendCodeButtonState.variant = this.CONSTANTS.BUTTON_VARIANT.SECONDARY;\n                    response.sendCodeButtonState.disable = true;\n                    response.timerState.isHidden = false;\n                    response.timerState.start = true;\n                    response.inputCodeState.isHidden = false;\n                    response.sendCodeResponse.statusMessage = sendCodeResponseObj.statusMessage;\n                    break;\n                case this.CONSTANTS.SEND_CODE_RESPONSE_STATUS_CODE.PER_DAY_LIMIT_ERROR:\n                    response.sendCodeButtonState.disable = true;\n                    response.sendCodeResponse.rateLimitMessage = sendCodeResponseObj.statusMessage;\n                    break;\n                case this.CONSTANTS.SEND_CODE_RESPONSE_STATUS_CODE.PAUSE_WINDOW_ERROR:\n                    response.sendCodeResponse.statusMessage = sendCodeResponseObj.statusMessage;\n                    break;\n                case this.CONSTANTS.SEND_CODE_RESPONSE_STATUS_CODE.INVALID_REQUEST_ERROR:\n                    response.sendCodeButtonState.disable = true;\n                    response.sendCodeResponse.statusMessage = sendCodeResponseObj.statusMessage;\n                    break;\n                case this.CONSTANTS.SEND_CODE_RESPONSE_STATUS_CODE.INVALID_PHONE_NUMBER_ERROR:\n                    response.sendCodeButtonState.disable = true;\n                    response.sendCodeResponse.statusMessage = sendCodeResponseObj.statusMessage;\n                    break;\n                default:\n                    // CODE_GENERATE_ERROR\n                    response.sendCodeResponse.statusMessage = sendCodeResponseObj.statusMessage;\n                    break;\n            }\n            return response;\n        }\n        static handleConditionalAssignment(src, dest) {\n            return (src === null) ? dest : src;\n        }\n    }\n\n    return PwdResetUxfVerificationClientUtilSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3e90dfd39321c210228bca32b38918fa","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_update_name":"sys_ux_client_script_include_3e90dfd39321c210228bca32b38918fa","sys_updated_by":"admin","api_name":"sn_uib_pwd_reset.PwdResetUxfVerificationClientUtilSNC","sys_created_on":"2024-04-19 11:34:45","name":"PwdResetUxfVerificationClientUtilSNC","sys_name":"PwdResetUxfVerificationClientUtilSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2021-06-23 12:23:21","sys_tags":"","script":"function include({imports}) {\n    class SowUtils {\n        static nameValueMap = {};\n        static addValue(key, value) {\n            if (key in this.nameValueMap) {\n                if (Array.isArray(this.nameValueMap[key]))\n                    this.nameValueMap[key].push(value);\n                else\n                    this.nameValueMap[key] = [this.nameValueMap[key], value];\n            }\n            else\n                this.nameValueMap[key] = value;\n        }\n        static getNameValueMap(query) {\n            this.nameValueMap = {};\n            var queryTokens = query.split('^');\n            for (var index in queryTokens) {\n                var token = queryTokens[index];\n                if (token.indexOf('<') != -1) {\n                    var fieldValue = token.split('<');\n                    this.addValue(fieldValue[0], '<' + fieldValue[1]);\n                    continue;\n                }\n                if (token.indexOf('>') != -1) {\n                    var fieldValue = token.split('>');\n                    this.addValue(fieldValue[0], '>' + fieldValue[1]);\n                    continue;\n                }\n                if (token.indexOf('=') != -1) {\n                    var fieldValue = token.split('=');\n                    this.nameValueMap[fieldValue[0]] = fieldValue[1];\n                }\n            }\n            return this.nameValueMap;\n        }\n    }\n    return SowUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3eccb12bb7703010e69dbc16de11a9a1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_3eccb12bb7703010e69dbc16de11a9a1","sys_updated_by":"admin","api_name":"sn_sow.SowUtils","sys_created_on":"2021-06-23 12:23:21","name":"SowUtils","sys_name":"SowUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Duration cannot be less than zero or equal to zero.\"\n    },\n    {\n        \"message\": \"Duration cannot be less than zero or equal to zero.\"\n    },\n    {\n        \"message\": \"Select at least one day of the week.\"\n    },\n    {\n        \"message\": \"Select at least one day of the week.\"\n    },\n    {\n        \"message\": \"Shift ends can not be later than repeat until.\"\n    },\n    {\n        \"message\": \"Shift starts can not be later than repeat until.\"\n    },\n    {\n        \"message\": \"Shift ends can not be later than repeat until.\"\n    },\n    {\n        \"message\": \"Shift starts can not be later than repeat until.\"\n    },\n    {\n        \"message\": \"Shift ends can not be empty.\"\n    },\n    {\n        \"message\": \"Shift starts can not be empty.\"\n    },\n    {\n        \"message\": \"The end date and time must be after the start date and time\"\n    },\n    {\n        \"message\": \"End date should be more than start date\"\n    },\n    {\n        \"message\": \"Shift start time cannot be later than or equal to shift end time.\"\n    }\n]","access":"package_private","sys_mod_count":"85","includes":"914b74a637c371108dfb9c7c24924b0f","sys_updated_on":"2024-09-30 05:18:42","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    class OnCallShiftCreationUtilsSNC {\n        static async validateNumber(api, helpers, id, value, isCreateShift) {\n            const numberRegex = new RegExp(/^[1-9]\\d*$/);\n            if (!numberRegex.test(value)) {\n                if (isCreateShift) {\n                    api.setState('alertMessage', await helpers.translate(\"Duration cannot be less than zero or equal to zero.\"))\n                    api.setState('hideAlert', false);\n                } else {\n                    let errors = api.state.errors;\n                    errors[id] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Duration cannot be less than zero or equal to zero.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                    api.setState('errors', {\n                        ...errors\n                    });\n                }\n                api.setState('repeats_number_invalid', true);\n            } else {\n                if (!isCreateShift) {\n                    let errors = api.state.errors;\n                    if (errors.hasOwnProperty(id))\n                        delete errors[id];\n                    api.setState('errors', {\n                        ...errors\n                    });\n                } else\n                    api.setState('hideAlert', true);\n                api.setState('repeats_number_invalid', false);\n            }\n        };\n\n        static async validateDaysSelected(api, helpers, id, daySelected, isCreateShift) {\n            const repeat_type = api.state.repeat_type;\n            if (repeat_type == 'week') {\n                let selected_days = daySelected || api.state.day_selected;\n                const day_keys = Object.keys(selected_days);\n                let at_least_one = false;\n                for (let day = 0; day < day_keys.length; day++) {\n                    if (selected_days[day_keys[day]]) {\n                        at_least_one = true;\n                        break;\n                    }\n                }\n                if (!at_least_one) {\n                    if (isCreateShift) {\n                        api.setState('alertMessage', await helpers.translate(\"Select at least one day of the week.\"));\n                        api.setState('hideAlert', false);\n                    } else {\n                        let errors = api.state.errors;\n                        errors[id] = {\n                            status: 'critical',\n                            icon: 'info-circle-outline',\n                            content: await helpers.translate('Select at least one day of the week.'),\n                            action: {\n                                type: 'dismiss'\n                            }\n                        };\n                        api.setState('errors', {\n                            ...errors\n                        });\n                    }\n                } else if (!isCreateShift) {\n                    let errors = api.state.errors;\n                    if (errors.hasOwnProperty(id))\n                        delete errors[id];\n                    api.setState('errors', {\n                        ...errors\n                    });\n                } else\n                    api.setState('hideAlert', true);\n            }\n        };\n\n        static async repeatsUntilValidation(api, helpers, shift_start, shift_end, repeats_until, isCreateShift) {\n            if (!isCreateShift) {\n                var errors = api.state.errors;\n                if (shift_end && repeats_until && (shift_end > repeats_until)) {\n                    errors[\"repeats_until_shift_ends\"] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Shift ends can not be later than repeat until.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                    api.setState('repeats_until_invalid', true);\n                } else {\n                    delete errors['repeats_until_shift_ends'];\n                    api.setState('repeats_until_invalid', false);\n                }\n                if (shift_start && repeats_until && (shift_start > repeats_until)) {\n                    errors[\"repeats_until_shift_starts\"] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Shift starts can not be later than repeat until.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                    api.setState('repeats_until_invalid', true);\n                } else {\n                    delete errors['repeats_until_shift_starts'];\n                    api.setState('repeats_until_invalid', false);\n                }\n                api.setState('errors', {\n                    ...errors\n                });\n            } else {\n                if (repeats_until && shift_end && (shift_end.split(\"T\")[0] > repeats_until)) {\n                    api.setState('alertMessage', await helpers.translate('Shift ends can not be later than repeat until.'));\n                    api.setState('hideAlert', false);\n                } else if (repeats_until && shift_start && (shift_start.split(\"T\")[0] > repeats_until)) {\n                    api.setState('alertMessage', await helpers.translate('Shift starts can not be later than repeat until.'));\n                    api.setState('hideAlert', false);\n                } else\n                    api.setState('hideAlert', true);\n            }\n        }\n\n        static async dateValidation(api, helpers, shift_start, shift_end, repeat_until_iso, validateRepeatsUntil, isCreateShift) {\n            api.setState('shift_ends_invalid', false);\n            api.setState('shift_starts_invalid', false);\n            if (!isCreateShift) {\n                let errors = api.state.errors;\n                if (!shift_end) {\n                    errors[\"shift_ends_empty\"] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Shift ends can not be empty.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                } else\n                    delete errors[\"shift_ends_empty\"];\n                if (!shift_start) {\n                    errors[\"shift_starts_empty\"] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Shift starts can not be empty.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                } else\n                    delete errors[\"shift_starts_empty\"];\n            }\n\n            if (shift_start && shift_end && ((shift_end < shift_start) || (shift_end == shift_start))) {\n                if (isCreateShift) {\n                    if (shift_end < shift_start)\n                        api.setState('alertMessage', await helpers.translate(\"The end date and time must be after the start date and time\"));\n                    else if (shift_end == shift_start)\n                        api.setState('alertMessage', await helpers.translate(\"End date should be more than start date\"));\n                    api.setState('hideAlert', false);\n                } else {\n                    let errors = api.state.errors;\n                    errors[\"shift_ends\"] = {\n                        status: 'critical',\n                        icon: 'info-circle-outline',\n                        content: await helpers.translate('Shift start time cannot be later than or equal to shift end time.'),\n                        action: {\n                            type: 'dismiss'\n                        }\n                    };\n                    api.setState('errors', {\n                        ...errors\n                    });\n                }\n                api.setState('shift_ends_invalid', true);\n                api.setState('shift_starts_invalid', true);\n                return;\n            } else {\n                if (!isCreateShift) {\n                    let errors = api.state.errors;\n                    if (errors.hasOwnProperty(\"shift_ends\"))\n                        delete errors[\"shift_ends\"];\n                    api.setState('errors', {\n                        ...errors\n                    });\n                } else\n                    api.setState('hideAlert', true);\n                api.setState('shift_ends_invalid', false);\n                api.setState('shift_starts_invalid', false);\n            }\n\n            if (validateRepeatsUntil)\n                await this.repeatsUntilValidation(api, helpers, shift_start, shift_end, repeat_until_iso, isCreateShift);\n        };\n\n        static getFormattedDateOrTime(dateTimeStr, dateFormat, timeFormat, fromTZ, toTZ, getDate) {\n            const {\n                getNowDateTime\n            } = imports['sn_uib_on_call.OnCallDateTimeUtils']();\n            return getNowDateTime(dateTimeStr, dateFormat.toUpperCase() + ' ' + timeFormat, fromTZ, toTZ).format((getDate) ? dateFormat.toUpperCase() : timeFormat);\n        };\n\n        static async handleValidations(api, event, helpers, isCreateShift) {\n            const {\n                NowDateTime\n            } = imports['sn_uxf.core_libraries']();\n\n            switch (event.elementId) {\n                case 'repeats_number':\n                    await this.validateNumber(api, helpers, event.elementId, event.payload.fieldValue, isCreateShift);\n                    break;\n                case 'shift_ends':\n                    await this.dateValidation(api, helpers, api.state.shift_starts_iso, event.payload.isoDate, api.state.repeats_until_iso, true, isCreateShift);\n                    break;\n                case 'shift_starts':\n                    await this.dateValidation(api, helpers, event.payload.isoDate, api.state.shift_ends_iso, api.state.repeats_until_iso, true, isCreateShift);\n                    break;\n                case 'repeats_until':\n                    await this.repeatsUntilValidation(api, helpers, api.state.shift_starts_iso, api.state.shift_ends_iso, event.payload.isoDate, isCreateShift);\n                    break;\n                case 'day':\n                    let daySelected = api.state.day_selected;\n                    daySelected[event.context.item.value] = !daySelected[event.context.item.value];\n                    api.setState('day_selected', {\n                        ...daySelected\n                    });\n                    await this.validateDaysSelected(api, helpers, event.elementId, daySelected, isCreateShift);\n                    break;\n                case 'all_day_shift':\n                    if (event.payload.value) {\n                        if (isCreateShift) {\n                            let startDate = (api.state.shift_starts) || \"\";\n                            startDate = startDate ? this.getFormattedDateOrTime(startDate, api.context.session.user.dateFormat, api.context.session.user.timeFormat, api.state.selected_timezone, api.state.selected_timezone, true) : api.state.start_date;\n                            let startDatIso = (api.state.shift_starts_iso) || \"\";\n                            startDatIso = startDatIso ? startDatIso.slice(0, 10) : api.state.start_date_iso;\n                            api.setState('start_date', startDate);\n                            api.setState('start_date_iso', startDatIso);\n                        } else {\n                            var errors = api.state.errors;\n                            api.setState('start_date', this.getFormattedDateOrTime(api.state.shift_starts, api.context.session.user.dateFormat, api.context.session.user.timeFormat, api.state.selected_timezone, api.state.selected_timezone, true));\n                            api.setState('start_date_iso', api.state.shift_starts_iso.slice(0, 10));\n                            if (errors.hasOwnProperty(\"shift_ends\"))\n                                delete errors[\"shift_ends\"];\n                            delete errors['repeats_until_shift_ends'];\n                            api.setState('errors', {\n                                ...errors\n                            });\n                        }\n                    } else {\n                        if (isCreateShift) {\n                            const startDate = (api.state.start_date && api.state.shift_starts) ? (api.state.start_date + ' ' + this.getFormattedDateOrTime(api.state.shift_starts, api.context.session.user.dateFormat, api.context.session.user.timeFormat, api.state.selected_timezone, api.state.selected_timezone, false)) : \"\";\n                            const startDateIso = (api.state.start_date_iso && api.state.shift_starts_iso) ? (api.state.start_date_iso + api.state.shift_starts_iso.slice(10)) : \"\";\n                            api.setState('shift_starts', startDate);\n                            api.setState('shift_starts_iso', startDateIso);\n                            await this.dateValidation(api, helpers, startDateIso, api.state.shift_ends_iso, \"\", false, isCreateShift);\n                        } else {\n                            api.setState('shift_starts', api.state.start_date + ' ' + this.getFormattedDateOrTime(api.state.shift_starts, api.context.session.user.dateFormat, api.context.session.user.timeFormat, api.state.selected_timezone, api.state.selected_timezone, false));\n                            api.setState('shift_starts_iso', api.state.start_date_iso + api.state.shift_starts_iso.slice(10));\n                            api.setState('shift_ends', api.state.start_date + ' ' + this.getFormattedDateOrTime(api.state.shift_ends, api.context.session.user.dateFormat, api.context.session.user.timeFormat, api.state.selected_timezone, api.state.selected_timezone, false));\n                            api.setState('shift_ends_iso', api.state.start_date_iso + api.state.shift_ends_iso.slice(10));\n                            await this.dateValidation(api, helpers, api.state.start_date_iso + api.state.shift_starts_iso.slice(10), api.state.start_date_iso + api.state.shift_ends_iso.slice(10), \"\", false, isCreateShift);\n                            await this.repeatsUntilValidation(api, helpers, api.state.shift_starts_iso, api.state.shift_ends_iso, api.state.repeats_until_iso, isCreateShift);\n                        }\n                    }\n                    break;\n                case 'repeats_type':\n                    if (event.payload.value === 'never') {\n                        if (!isCreateShift) {\n                            const errors = api.state.errors;\n                            if (errors.hasOwnProperty('repeats_number'))\n                                delete errors['repeats_number'];\n                            delete errors['repeats_until_shift_ends'];\n                            delete errors['repeats_until_shift_starts'];\n                            api.setState('repeats_until_invalid', false);\n                            api.setState('repeats_until', \"\");\n                            api.setState('repeats_until_iso', \"\");\n                            api.setState('errors', {\n                                ...errors\n                            });\n                            if (errors.hasOwnProperty('day'))\n                                delete errors['day'];\n                            api.setState('errors', {\n                                ...errors\n                            });\n                        } else\n                            api.setState(\"hideAlert\", true);\n                        api.setState('repeats_until', \"\");\n                        api.setState('repeats_until_iso', \"\");\n                        await this.dateValidation(api, helpers, api.state.shift_starts_iso, api.state.shift_ends_iso, api.state.repeats_until_iso, false, isCreateShift);\n                    } else if (event.payload.value === 'day') {\n                        if (!isCreateShift) {\n                            const errors = api.state.errors;\n                            if (errors.hasOwnProperty('day'))\n                                delete errors['day'];\n                            api.setState('errors', {\n                                ...errors\n                            });\n                        }\n                        await this.validateNumber(api, helpers, 'repeats_number', api.state.repeat_number, isCreateShift);\n                        await this.dateValidation(api, helpers, api.state.shift_starts_iso, api.state.shift_ends_iso, api.state.repeats_until_iso, true, isCreateShift);\n                    } else {\n                        await this.validateNumber(api, helpers, 'repeats_number', api.state.repeat_number, isCreateShift);\n                        await this.validateDaysSelected(api, helpers, 'day', null, isCreateShift);\n                        await this.dateValidation(api, helpers, api.state.shift_starts_iso, api.state.shift_ends_iso, api.state.repeats_until_iso, true, isCreateShift);\n                    }\n                    break;\n                case 'start_date':\n                    if (event.payload.value && api.state.shift_starts && api.state.shift_ends) {\n                        var shift_starts = event.payload.value + api.state.shift_starts.substring(api.state.start_date.length);\n                        var shift_ends = event.payload.value + api.state.shift_ends.substring(api.state.start_date.length);\n                        api.setState('shift_starts', shift_starts);\n                        api.setState('shift_ends', shift_ends);\n                    }\n                    if (event.payload.isoDate && api.state.shift_starts_iso && api.state.shift_ends_iso) {\n                        var shift_starts_iso = event.payload.isoDate + api.state.shift_starts_iso.slice(10);\n                        var shift_ends_iso = event.payload.isoDate + api.state.shift_ends_iso.slice(10);\n                        api.setState('shift_starts_iso', shift_starts_iso);\n                        api.setState('shift_ends_iso', shift_ends_iso);\n                    }\n                    await this.repeatsUntilValidation(api, helpers, shift_starts_iso, '', api.state.repeats_until_iso, isCreateShift);\n                    break;\n                case 'extra_start_date_time':\n                    await this.dateValidation(api, helpers, event.payload.isoDate, api.state.shift_ends_iso, \"\", false, isCreateShift);\n                    break;\n                case 'extra_end_date_time':\n                    await this.dateValidation(api, helpers, api.state.shift_starts_iso, event.payload.isoDate, \"\", false, isCreateShift);\n                    break;\n            }\n        };\n    }\n    return OnCallShiftCreationUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"3fd8e21e533631108f2bddeeff7b1200","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_3fd8e21e533631108f2bddeeff7b1200","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallShiftCreationUtilsSNC","sys_created_on":"2023-12-01 13:13:24","name":"OnCallShiftCreationUtilsSNC","sys_name":"OnCallShiftCreationUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"2","includes":"","sys_updated_on":"2022-04-14 17:20:13","sys_tags":"","script":"function include({\n    imports\n}) {\n\n        const pluginCardPayload = (payload) => {\n        const {\n            button_label,\n            aria_properties,\n            post_action_tooltip,\n            action,\n            variant,\n            size,\n            icon,\n            configure_demo_data,\n            entitlement_link,\n            plugin_home_url,\n            post_action_label,\n            plugins,\n            plugin_name,\n            plugin_details,\n            action_aria_label,\n            action_tooltip\n        } = payload.props_details;\n\n        const formattedPayload = {\n            buttonLabel: button_label,\n            mode: action,\n            plugins: plugins,\n            variant: variant,\n            size: size,\n            icon: icon,\n            configureDemoData: configure_demo_data,\n            entitlementLink: entitlement_link,\n            postActionLink: plugin_home_url,\n            postActionLabel: post_action_label,\n            pluginName: plugin_name,\n            pluginDetails: plugin_details,\n            actionAriaLabel: {\"aria-label\":action_aria_label},\n            actionTooltip: action_tooltip,\n           ariaProperties: aria_properties,\n           postActionTooltip: post_action_tooltip\n        };\n        return formattedPayload;\n    };\nreturn {\n    pluginCardPayload\n};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4107bda6533201102958ddeeff7b12af","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_4107bda6533201102958ddeeff7b12af","sys_updated_by":"admin","api_name":"sn_ace.PluginCardPayload","sys_created_on":"2022-04-14 15:40:31","name":"PluginCardPayload","sys_name":"PluginCardPayload","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n\n]","access":"public","sys_mod_count":"48","includes":"","sys_updated_on":"2023-05-23 06:29:44","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\tconst CONTENT_BLOCKS_STATE_VARIABLE = 'contentBlocks';\n\tconst BLOCK_CONTEXT_STATE_VARIABLE = 'blockcontext';\n\tlet CONTENT_BLOCKS = api.state.contentBlocks;\n\tlet BLOCK_CONTEXT = api.state.blockcontext;\n\tlet BLOCK_CONTEXT_PROMISE = [];\n\tlet CONTENT_BLOCKS_PROMISE = [];\n\tconst PAGE_PARAMS = api.state.pageParams;\n\tconst DATA_BLOCK_TYPE_SYS_ID = 'a886aedfc3dde11044104fb9c840ddb7';\n\tlet CONTROLLER_OUTPUT_CONTENT_BLOCKS = api.data.ace_default_controller_1.contentTree\n\tlet CONTROLLER_OUTPUT_BLOCK_CONTEXT = api.data.ace_default_controller_1.blockContext\n\n\t/**\n\t * Returns the content block tree from page state.\n\t * @returns {Array} Content block tree\n\t */\n\tconst getContentBlocks = () => {\n\t\tif (CONTROLLER_OUTPUT_CONTENT_BLOCKS) {\n\t\t\t\treturn Promise.all(CONTENT_BLOCKS_PROMISE).then((values) => {\n\t\t\t\t\treturn Promise.resolve([...CONTROLLER_OUTPUT_CONTENT_BLOCKS]);\n\t\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.all(CONTENT_BLOCKS_PROMISE).then((values) => {\n\t\t\t\treturn Promise.resolve([...CONTENT_BLOCKS]);\n\t\t\t});\n\t\t}\n\t}\n\n\n\t/**\n\t * Sets the content block state variable with the newContentBlocks param.\n\t * @param {Array} newContentBlocks\n\t */\n\tconst setContentBlocks = (newContentBlocks, pageTemplateType) => {\n\t\tif (CONTROLLER_OUTPUT_CONTENT_BLOCKS || pageTemplateType == 'v3' ) {\n\t\t\tPromise.all(CONTENT_BLOCKS_PROMISE).then((values) => {\n\t\t\t\tCONTENT_BLOCKS_PROMISE = [new Promise((resolve, reject) => {\n\t\t\t\t\tlet newContentTree = [...newContentBlocks];\n\t\t\t\t    updateBlockContextAndContentTree(newContentTree);\n\t\t\t\t\tCONTROLLER_OUTPUT_CONTENT_BLOCKS = newContentTree;\n\t\t\t\t\tresolve();\n\t\t\t\t})];\n\t\t\t});\n\t\t} else {\n\t\t\tPromise.all(CONTENT_BLOCKS_PROMISE).then((values) => {\n\t\t\t\tCONTENT_BLOCKS_PROMISE = [new Promise((resolve, reject) => {\n\t\t\t\t\tapi.setState(CONTENT_BLOCKS_STATE_VARIABLE,\n\t\t\t\t\t\t({\n\t\t\t\t\t\t\tcurrentValue\n\t\t\t\t\t\t}) => {\n\t\t\t\t\t\t\tCONTENT_BLOCKS = [...newContentBlocks];\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\treturn CONTENT_BLOCKS;\n\t\t\t\t\t\t});\n\t\t\t\t})];\n\t\t\t});\n\n\t\t}\n\n\n\t}\n\n\t/**\n\t * Returns current block context.\n\t * @returns {Object} Current block context.\n\t */\n\tconst getContext = () => {\n\t\tif (CONTROLLER_OUTPUT_BLOCK_CONTEXT) {\n\t\t\treturn Promise.all(BLOCK_CONTEXT_PROMISE).then((values) => {\n\t\t\t\treturn Promise.resolve(CONTROLLER_OUTPUT_BLOCK_CONTEXT);\n\t\t\t});\n\t\t}\n\t\treturn Promise.all(BLOCK_CONTEXT_PROMISE).then((values) => {\n\t\t\treturn Promise.resolve(BLOCK_CONTEXT);\n\t\t});\n\t}\n\n\t/**\n\t * Sets the page level blockcontext with supplied newBlockContext param.\n\t * @param {Object} newBlockContext\n\t */\n\tconst setContext = (newBlockContext, pageTemplateType) => {\n\t\tif (CONTROLLER_OUTPUT_BLOCK_CONTEXT || pageTemplateType == 'v3') {\n\t\t\tPromise.all(BLOCK_CONTEXT_PROMISE).then((values) => {\n\t\t\t\tBLOCK_CONTEXT_PROMISE = [new Promise((resolve, reject) => {\n\t\t\t\t\tvar newContext = {\n\t\t\t\t\t\t...CONTROLLER_OUTPUT_BLOCK_CONTEXT,\n\t\t\t\t\t\t...newBlockContext\n\t\t\t\t\t};\n\t\t\t\t\tupdateBlockContextAndContentTree(null, {\n\t\t\t\t\t\t...newContext\n\t\t\t\t\t});\n\t\t\t\t\tCONTROLLER_OUTPUT_BLOCK_CONTEXT = { ...newContext };\n\t\t\t\t\tresolve();\n\t\t\t\t})];\n\t\t\t});\n\n\t\t} else {\n\t\t\tPromise.all(BLOCK_CONTEXT_PROMISE).then((values) => {\n\t\t\t\tBLOCK_CONTEXT_PROMISE = [new Promise((resolve, reject) => {\n\t\t\t\t\tapi.setState(BLOCK_CONTEXT_STATE_VARIABLE, ({\n\t\t\t\t\t\tcurrentValue\n\t\t\t\t\t}) => {\n\t\t\t\t\t\tBLOCK_CONTEXT = {\n\t\t\t\t\t\t\t...currentValue,\n\t\t\t\t\t\t\t...newBlockContext\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t\treturn BLOCK_CONTEXT;\n\t\t\t\t\t});\n\t\t\t\t})];\n\t\t\t});\n\t\t}\n\n\n\t}\n\n\t/**\n\t * Finds the content block with the given elementId in the content tree.\n\t * @param {String} blockElementId\n\t * @param {Array} contentBlocks\n\t * @returns {Object} Content block object if found, null otherwise.\n\t */\n\tconst getBlock = async (blockElementId, contentBlocks) => {\n\t\tif (!contentBlocks) {\n\t\t\tcontentBlocks = await getContentBlocks();\n\t\t}\n\n\t\t// Find the block with the given elementId\n\t\tfunction findBlock(block) {\n\t\t\tif (block.elementId === blockElementId) {\n\t\t\t\treturn block;\n\t\t\t}\n\n\t\t\tfor (let child of block.children) {\n\t\t\t\tlet result = findBlock(child);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Call findBlock on each block in the content block array\n\t\tfor (let block of contentBlocks) {\n\t\t\tlet result = findBlock(block);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\t// If no block was found, return null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Finds the content block with the given elementId in the content tree and returns its parent block.\n\t * @param {String} childBlockElementId\n\t * @param {Array} contentBlocks\n\t * @returns {Object} Parent block of the block with the given elementId if found, null otherwise.\n\t */\n\tconst getParentBlock = async (childBlockElementId, contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\n\t\t// Find the parent block of the block with the given element id\n\t\tfunction findParent(block) {\n\t\t\tif (block.elementId === childBlockElementId && !block.isRoot) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tfor (let child of block.children) {\n\t\t\t\tlet result = findParent(child);\n\t\t\t\tif (result) {\n\t\t\t\t\treturn block;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\t// Call findParent on each block in the content blocks array\n\t\tfor (let block of contentBlocks) {\n\t\t\tlet result = findParent(block);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Finds the index of block with given elementId in various tree levels. If found, replaces it with\n\t * the given updatedBlockData.\n\t * @param {String} blockElementId\n\t * @param {Object} updatedBlockData\n\t * @param {Array} contentBlocks\n\t * @returns {Array} Updated content block tree after replacing the given block with new data.\n\t */\n\tconst updateContentBlock = async (blockElementId, updatedBlockData,\n\t\t\t\t\t\t\t\t\t  contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\tconst contentBlocksCopy = [...contentBlocks];\n\t\tconst indexOfContentBlock = contentBlocksCopy.findIndex(contentBlock => {\n\t\t\tif (contentBlock.elementId === blockElementId) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (contentBlock.children && contentBlock.children.length) {\n\t\t\t\tupdateContentBlock(blockElementId, updatedBlockData, contentBlock.children).then(response => {\n\t\t\t\t\tcontentBlock.children = response;\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\t// Found the content block in the current tree level, replace with new data.\n\t\tif (indexOfContentBlock > -1) {\n\t\t\tcontentBlocksCopy[indexOfContentBlock] = {\n\t\t\t\t...contentBlocksCopy[indexOfContentBlock],\n\t\t\t\t...updatedBlockData\n\t\t\t};\n\t\t}\n\n\t\treturn contentBlocksCopy;\n\t}\n\n\t/**\n\t * Removes the content block with the given elementId from the content tree.\n\t * @param {String} blockElementId\n\t * @param {Array} contentBlocks\n\t * @returns {Array} Updated content tree with the removed content block.\n\t */\n\tconst removeContentBlock = async (blockElementId, contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\tconst contentBlocksCopy = [...contentBlocks];\n\t\tconst indexOfContentBlock = contentBlocksCopy.findIndex(contentBlock => {\n\t\t\tif (contentBlock.elementId === blockElementId) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (contentBlock.children && contentBlock.children.length) {\n\t\t\t\tremoveContentBlock(blockElementId, contentBlock.children).then(output => {\n\t\t\t\t\tcontentBlock.children = output;\n\t\t\t\t})\n\t\t\t}\n\t\t});\n\n\t\tif (indexOfContentBlock > -1) {\n\t\t\tcontentBlocksCopy.splice(indexOfContentBlock, 1);\n\t\t}\n\n\t\treturn contentBlocksCopy;\n\t}\n\n\t/**\n\t * Shows the content block with the given elementId.\n\t * @param {String} blockElementId\n\t * @param {boolean} hideBlock\n\t * @param {Array} contentBlocks\n\t * @returns {Array} Content block tree with the given block shown.\n\t */\n\tconst showContentBlock = async (blockElementId, contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\treturn updateContentBlock(blockElementId, { visibility: true }, contentBlocks);\n\t}\n\n\t/**\n\t * Hides the content block with the given elementId.\n\t * @param {String} blockElementId\n\t * @param {boolean} hideBlock\n\t * @param {Array} contentBlocks\n\t * @returns {Array} Content block tree with the given block hidden.\n\t */\n\tconst hideContentBlock = async (blockElementId, contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\treturn updateContentBlock(blockElementId, { visibility: false }, contentBlocks);\n\t}\n\n\t/**\n\t * Add a new content block inside the block with the given parentBlockElementId.\n\t * If parentBlockElementId is null then place the block at the root level of the content tree.\n\t * @param {Object} blockData\n\t * @param {String} parentBlockElementId\n\t * @param {Integer} placementPosition\n\t * @param {Array} contentBlocks\n\t * @returns {Array}\n\t */\n\tconst addContentBlock = async (blockData, parentBlockElementId = null, placementPosition,\n\t\t\t\t\t\t\t\t   contentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\tconst contentBlocksCopy = [...contentBlocks];\n\t\tif (parentBlockElementId) {\n\t\t\tconst indexOfContentBlock = contentBlocksCopy.findIndex(contentBlock => {\n\t\t\t\tif (contentBlock.elementId === parentBlockElementId) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tif (contentBlock.children && contentBlock.children.length) {\n\t\t\t\t\taddContentBlock(blockData, parentBlockElementId, placementPosition, contentBlock.children).then(response => {\n\t\t\t\t\t\tcontentBlock.children = response;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (indexOfContentBlock > -1) {\n\t\t\t\tconst parentBlockChildrenArray = [...contentBlocksCopy[indexOfContentBlock].children];\n\t\t\t\tparentBlockChildrenArray.splice(placementPosition ? placementPosition : parentBlockChildrenArray.length, 0, blockData);\n\t\t\t\tcontentBlocksCopy[indexOfContentBlock].children = parentBlockChildrenArray;\n\t\t\t}\n\t\t} else {\n\t\t\tcontentBlocksCopy.splice(placementPosition, 0, blockData);\n\t\t}\n\n\t\treturn contentBlocksCopy;\n\t}\n\n\t/**\n\t * Moves a content block from the current position to the children of the specified parent element.\n\t * In case the parent id is null, moves the content block to root level.\n\t * @param {String} blockElementId\n\t * @param {String} parentBlockElementId\n\t * @param {Integer} placementPositionInNewParent\n\t * @param {Array} contentBlocks\n\t * @returns {Array}\n\t */\n\tconst moveContentBlock = async (blockElementId, parentBlockElementId, placementPositionInNewParent,\n\t\t\t\t\t\t\t\t\tcontentBlocks) => {\n\t\tif(!contentBlocks) contentBlocks = await getContentBlocks();\n\t\tconst blockData = await getBlock(blockElementId, contentBlocks)\n\t\tconst updatedContentBlock = await removeContentBlock(blockElementId, contentBlocks)\n\t\treturn addContentBlock(blockData, parentBlockElementId, placementPositionInNewParent, updatedContentBlock);\n\t}\n\n\tconst getModalContainers = (contentBlocks) => {\n\t\tif (!contentBlocks || contentBlocks.length == 0) {\n\t\t\treturn [];\n\t\t}\n\t\tlet modals = [];\n\t\tcontentBlocks.forEach(contentBlock => {\n\t\t\tif (contentBlock.type.route == 'modal-container') {\n\t\t\t\tmodals.push(contentBlock);\n\t\t\t}\n\t\t\tmodals = modals.concat(getModalContainers(contentBlock.children));\n\t\t})\n\t\treturn modals;\n\t}\n\n\tconst getGUID = () => {\n\t\treturn 'xxxx-xxxx-yyyyyy-xxxx-yyyyxxyy'.replace(/[xy]/g, function (c) {\n\t\t\tvar r = Math.random() * 16 | 0,\n\t\t\t\tv = c == 'x' ? r : (r & 0x3 | 0x8);\n\t\t\treturn v.toString(16);\n\t\t});\n\t}\n\n\tconst getModalBlock = (modalContentBlock) => {\n\t\tconst tempBlockId = getGUID();\n\t\tconst tempId = getGUID();\n\t\tlet modalReadOutTitle = modalContentBlock?.label || modalContentBlock?.title\n\t\ttry{\n\t\tif (typeof modalContentBlock?.children[0]?.props_details?.component_properties  == 'string') {\n\t\t\tmodalReadOutTitle = JSON.parse(modalContentBlock?.children[0]?.props_details?.component_properties).label || modalReadOutTitle;\n\t\t}\n\t\t} catch (e) {\n\t\tconsole.log(\"failed in JSON parse\", e)\n\t\t}\n\n\t\tconst modalSize = modalContentBlock.props_details.modal_size || 'md';\n\t\tconst disableClose = modalContentBlock.props_details.disable_close || false;\n\t\tconst elementId = modalContentBlock.elementId;\n\t\treturn  {\n\t\t\t\"block_id\": tempBlockId,\n\t\t\t\"id\": tempId,\n\t\t\t\"active\": true,\n\t\t\t\"name\": \"ModalBlock\",\n\t\t\t\"props_details\": {\n\t\t\t\t\"component_name\": \"now-modal\",\n\t\t\t\t\"elementId\": elementId,\n\t\t\t\t\"component_properties\": {\n\t\t\t\t\t\"modal_id\":modalContentBlock.block_id,\n\t\t\t\t\t\"elementId\":modalContentBlock.elementId,\n\t\t\t\t\t\"size\": modalSize,\n\t\t\t\t\t\"component-id\": getGUID(),\n\t\t\t\t\t\"opened\": \"${blockcontext.modalOpened}\",\n\t\t\t\t\t\"disableClose\": disableClose,\n\t\t\t\t\t\"configAria\":\n\t\t\t\t\t{\n\t\t\t\t\t\t\"dialog\": {\n\t\t\t\t\t\t\t\"role\": \"dialog\",\n\t\t\t\t\t\t\t\"aria-modal\": \"true\",\n\t\t\t\t\t\t\t\"aria-label\": modalReadOutTitle\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t\"events_data\": {\n\t\t\t\t\t\"NOW_MODAL#OPENED_SET\": {\n\t\t\t\t\t\t\"handler\": {\n\t\t\t\t\t\t\t\"name\": \"DISPATCH_EVENT\",\n\t\t\t\t\t\t\t\"eventName\": \"ACE_MODAL_CLOSED\",\n\t\t\t\t\t\t\t\"nowrap\": true\n                        }\n                    }\n                }\n\t\t\t},\n\t\t\t\"type\": {\n\t\t\t\t\"route\": \"ace-control\"\n\t\t\t},\n\t\t\t\"children\": modalContentBlock.children || []\n\t\t}\n\t}\n\n\tconst openModal = async(modalId) => {\n\t\tvar context = await getContext();\n\t\tsetContext( {\n\t\t\t...context,\n\t\t\tmodalOpened: true\n\t\t});\n\t\tvar contents = await getContentBlocks();\n\t\tcontents = contents.filter((contentItem) => contentItem.props_details.component_name != \"now-modal\");\n\t\tconst modalContainers = getModalContainers(contents);\n\t\tlet definedModalContentBlock = modalContainers.filter((contentItem) => contentItem.elementId == modalId);\n\t\tdefinedModalContentBlock = definedModalContentBlock && definedModalContentBlock.length > 0 ? definedModalContentBlock[0] : {};\n\t\tconst updatedModalBlock = getModalBlock(definedModalContentBlock);\n\t\tcontents.push(updatedModalBlock);\n\t\tsetContentBlocks(contents);\n\t}\n\n\tconst dismissModal = async(modalId) => {\n\t\tvar context = await getContext();\n\t\tsetContext(  {\n\t\t\t...context,\n\t\t\tmodalOpened: false\n\t\t});\n\t\tlet contents = await getContentBlocks();\n\t\tcontents = contents.filter((contentItem) => !(contentItem.props_details.component_name == \"now-modal\" && contentItem.props_details.elementId == modalId));\n\t\tsetContentBlocks(contents);\n\t}\n\n\n\tconst refreshPage = (blockContext, contentBlocks) => {\n\t\tif (CONTROLLER_OUTPUT_BLOCK_CONTEXT || CONTROLLER_OUTPUT_CONTENT_BLOCKS ) {\n\t\t\tCONTROLLER_OUTPUT_BLOCK_CONTEXT = blockContext;\n\t\t\tCONTROLLER_OUTPUT_CONTENT_BLOCKS = contentBlocks;\n\t\t\tupdateBlockContextAndContentTree(contentBlocks, {...blockContext});\n\t\t} else {\n\t\t\tlet payload = {};\n\t\t\tblockContext && (payload[BLOCK_CONTEXT_STATE_VARIABLE] = blockContext);\n\t\t\tcontentBlocks && (payload[CONTENT_BLOCKS_STATE_VARIABLE] = contentBlocks);\n\t\t\tapi.emit('ACE_PAGE_READY', payload)\n\t\t}\n\t}\n\n\t/**\n\t * Refreshes the block with the given blockElementId. Also refreshes the child blocks if refreshChildBlocks is true.\n\t * The newly refreshed content blocks are then appended at the right position within the content tree.\n\t *\n\t * Based on the configuration of a block, lazy script will take precedence over post script.\n\t * @param {string} blockElementId - Element id of the block that needs to be refreshed.\n\t * @param {boolean} shouldRefreshChildBlocks - Boolean indicating whether the child blocks should be refreshed too.\n\t */\n\tconst refreshContentBlock = async function(blockElementId, shouldRefreshChildBlocks) {\n\t\tconst contentBlocks = await getContentBlocks();\n\t\tif (blockElementId && contentBlocks.length) {\n\t\t\tconst REFRESH_BLOCK_API_URL = '/api/now/ace/refresh_block';\n\t\t\tconst context = await getContext();\n\t\t\tconst blockData = await getBlock(blockElementId, contentBlocks);\n\t\t\treturn await helpers.snHttp(REFRESH_BLOCK_API_URL, {\n\t\t\t\tmethod: 'POST',\n\t\t\t\tbody: {\n\t\t\t\t\tblockElementId,\n\t\t\t\t\tshouldRefreshChildBlocks,\n\t\t\t\t\tcbScriptVariables: {\n\t\t\t\t\t\tpageParams: PAGE_PARAMS,\n\t\t\t\t\t\tblockcontext: context\n\t\t\t\t\t},\n\t\t\t\t\tblockData\n\t\t\t\t}\n\t\t\t}).then(async ({response}) => {\n\t\t\t\tconst {\n\t\t\t\t\trefreshedBlock\n\t\t\t\t} = response.result;\n\t\t\t\tif (refreshedBlock && refreshedBlock.type && refreshedBlock.type.id === DATA_BLOCK_TYPE_SYS_ID) {\n\t\t\t\t\tconst blockcontext = await getContext();\n\t\t\t\t\tconst context = getUpdatedContextPostDataBlockOutputMapping(refreshedBlock, blockcontext);\n\t\t\t\t\tsetContext(context);\n\t\t\t\t}\n\t\t\t\treturn refreshedBlock;\n\t\t\t}).catch(error => {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t}\n\t}\n\n\tconst getUpdatedContextPostDataBlockOutputMapping = (dataBlock, blockContext) => {\n\n\t\tlet context = { ...blockContext};\n\n\t\tlet outputMap = dataBlock.props_details.output_map;\n\t\ttry {\n\t\t\toutputMap = typeof outputMap === 'string' && JSON.parse(outputMap);\n\t\t\tObject.keys(outputMap).forEach(key => {\n\t\t\t\tconst contextPath = key.split('.');\n\t\t\t\tconst dataBlockOutputPath = outputMap[key].split('.');\n\t\t\t\tlet dataBlockOutput = dataBlock.props_details.data_block_output;\n\t\t\t\tif (dataBlockOutputPath[0] === 'output') {\n\t\t\t\t\t// Calculate output variable value\n\t\t\t\t\tdataBlockOutputPath.shift();\n\t\t\t\t\tdataBlockOutputPath.forEach(path => dataBlockOutput = dataBlockOutput && dataBlockOutput[path]);\n\t\t\t\t\t// Calculate context variable to which we want to add the value to.\n\t\t\t\t\tlet localContext = {...context};\n\t\t\t\t\tfunction updateContext(object, newValue, path){\n\t\t\t\t\t\tlet stack = path.split('.');\n\t\t\t\t\t\twhile (stack.length > 1) {\n\t\t\t\t\t\t\tif (object.hasOwnProperty(stack[0])) {\n\t\t\t\t\t\t\t\tobject = object[stack.shift()];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (object.hasOwnProperty(stack[0])) {\n\t\t\t\t\t\t\tobject[stack.shift()] = newValue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tupdateContext(localContext, dataBlockOutput, key);\n\t\t\t\t\tcontext = {...localContext};\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (e) {\n\t\t\tconsole.log(\"Error in parsing data block output map: \" + e.toString());\n\t\t}\n\t\treturn context;\n\t}\n\tconst addDataBlockOutputMappingToContext = (contentBlocks, blockContext, pageTemplateType) => {\n\t\tconst dataBlocks = contentBlocks.filter(block => block.type.id === DATA_BLOCK_TYPE_SYS_ID && block.props_details.evaluation_mode === 'eager');\n\t\tlet context = {...blockContext};\n\t\tdataBlocks.forEach(dataBlock => {\n\t\t\tcontext = getUpdatedContextPostDataBlockOutputMapping(dataBlock, context);\n\t\t});\n\t\tsetContext({...context}, pageTemplateType);\n\t\treturn context;\n\t}\n\n\tconst updateBlockContextAndContentTree = (contentBlocks, blockContext) => {\n\t\tapi.emit('ACE_CONTROLLER_UPDATED', {\n\t\t\teventName: 'ACE_PAGE_CONTENT_UPDATED',\n\t\t\teventPayload: {\n\t\t\t\tblockContext: blockContext,\n\t\t\t\tcontentTree: contentBlocks\n\t\t\t}\n\t\t});\n\t}\n\n\treturn {\n\t\tgetContentBlocks,\n\t\tsetContentBlocks,\n\t\tgetContext,\n\t\tsetContext,\n\t\tgetBlock,\n\t\tgetParentBlock,\n\t\tupdateContentBlock,\n\t\tremoveContentBlock,\n\t\taddContentBlock,\n\t\tshowContentBlock,\n\t\thideContentBlock,\n\t\tmoveContentBlock,\n\t\topenModal,\n\t\tdismissModal,\n\t\trefreshPage,\n\t\trefreshContentBlock,\n\t\taddDataBlockOutputMappingToContext\n\t}\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"457b82c753b061104410ddeeff7b12e6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_457b82c753b061104410ddeeff7b12e6","sys_updated_by":"admin","api_name":"sn_ace.ACEClientScriptUtils","sys_created_on":"2023-02-08 12:43:56","name":"ACEClientScriptUtils","sys_name":"ACEClientScriptUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Incidents\"\n    },\n    {\n        \"message\": \"Incident\"\n    },\n    {\n        \"message\": \"Problems\"\n    },\n    {\n        \"message\": \"Problem\"\n    },\n    {\n        \"message\": \"Changes\"\n    },\n    {\n        \"message\": \"Change\"\n    },\n    {\n        \"message\": \"recently closed outages\"\n    },\n    {\n        \"message\": \"recently closed outage\"\n    },\n    {\n        \"message\": \"current opened outages\"\n    },\n    {\n        \"message\": \"current opened outage\"\n    },\n    {\n        \"message\": \"planned outages\"\n    },\n    {\n        \"message\": \"planned outage\"\n    },\n    {\n        \"message\": \"recently closed changes\"\n    },\n    {\n        \"message\": \"recently closed change\"\n    },\n    {\n        \"message\": \"current opened changes\"\n    },\n    {\n        \"message\": \"current opened change\"\n    },\n    {\n        \"message\": \"planned changes\"\n    },\n    {\n        \"message\": \"planned change\"\n    }\n]","access":"package_private","sys_mod_count":"85","includes":"","sys_updated_on":"2023-09-21 21:35:38","sys_tags":"","script":"function include() {\n\tconst generateAction = async function (decorations, helpers) {\n\t\tif (decorations.length === 0) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst tooltipMap = {\n\t\t\tincident: {\n\t\t\t\tlabelPlural: await helpers.translate('Incidents'),\n\t\t\t\tlabel: await helpers.translate('Incident')\n\t\t\t},\n\t\t\tproblem: {\n\t\t\t\tlabelPlural: await helpers.translate('Problems'),\n\t\t\t\tlabel: await helpers.translate('Problem')\n\t\t\t},\n\t\t\tchange_request: {\n\t\t\t\tlabelPlural: await helpers.translate('Changes'),\n\t\t\t\tlabel: await helpers.translate('Change')\n\t\t\t},\n\t\t\toutages_past: {\n\t\t\t\tlabelPlural: await helpers.translate('recently closed outages'),\n\t\t\t\tlabel: await helpers.translate('recently closed outage')\n\t\t\t},\n\t\t\toutages_current: {\n\t\t\t\tlabelPlural: helpers.translate('current opened outages'),\n\t\t\t\tlabel: helpers.translate('current opened outage')\n\t\t\t},\n\t\t\toutages_planned: {\n\t\t\t\tlabelPlural: await helpers.translate('planned outages'),\n\t\t\t\tlabel: await helpers.translate('planned outage')\n\t\t\t},\n\t\t\tchanges_past: {\n\t\t\t\tlabelPlural: await helpers.translate('recently closed changes'),\n\t\t\t\tlabel: await helpers.translate('recently closed change')\n\t\t\t},\n\t\t\tchanges_current: {\n\t\t\t\tlabelPlural: await helpers.translate('current opened changes'),\n\t\t\t\tlabel: await helpers.translate('current opened change')\n\t\t\t},\n\t\t\tchanges_planned: {\n\t\t\t\tlabelPlural: await helpers.translate('planned changes'),\n\t\t\t\tlabel: await helpers.translate('planned change')\n\t\t\t}\n\t\t};\n\t\tconst tooltip = await Promise.all(\n\t\t\tdecorations.map(async item => {\n\t\t\t\tlet value = item.value;\n\t\t\t\tif (value > 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t'There are {0} {1}',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttooltipMap[item.name]['labelPlural']\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t'There is {0} {1}',\n\t\t\t\t\t\tvalue,\n\t\t\t\t\t\ttooltipMap[item.name]['label']\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\treturn [{ icon: 'info-circle-outline', label: JSON.stringify(tooltip) }];\n\t};\n\tconst parseGroupTree = function (xml, parent) {\n\t\tvar nodes = [];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar items = rxml.getElementsByTagName('item');\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tlet item = items[i];\n\t\t\tlet node = {\n\t\t\t\tid: item.getAttribute('name'),\n\t\t\t\tlabel: item.getAttribute('label'),\n\t\t\t\tclass: item.getAttribute('sys_class_name'),\n\t\t\t\tchildren: [],\n\t\t\t\tchildrenAvailable: Number(\n\t\t\t\t\titem.getAttribute('sys_class_name') === 'sys_user_group'\n\t\t\t\t)\n\t\t\t};\n\t\t\tif (parent && item.getAttribute('sys_class_name') === 'sys_user')\n\t\t\t\tnode = {\n\t\t\t\t\t...node,\n\t\t\t\t\tparentId: parent.id,\n\t\t\t\t\tparentLabel: parent.label\n\t\t\t\t};\n\t\t\tnodes.push(node);\n\t\t}\n\t\treturn nodes;\n\t};\n\tconst parseGeneralTree = function (xml) {\n\t\tvar nodes = [];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar items = rxml.getElementsByTagName('item');\n\t\tfor (let i = 0; i < items.length; i++) {\n\t\t\tlet item = items[i];\n\t\t\tconst node = {\n\t\t\t\tid: item.getAttribute('name'),\n\t\t\t\tlabel: item.getAttribute('label') || item.getAttribute('display_value'),\n\t\t\t\tclass: item.getAttribute('sys_class_name'),\n\t\t\t\tchildren: [],\n\t\t\t\tchildrenAvailable: item.getAttribute('children')\n\t\t\t\t\t? item.getAttribute('children') === 'false'\n\t\t\t\t\t\t? 0\n\t\t\t\t\t\t: 1\n\t\t\t\t\t: 1\n\t\t\t};\n\t\t\tnodes.push(node);\n\t\t}\n\t\treturn nodes;\n\t};\n\tconst addNewChild = function (items, path, newChild) {\n\t\tlet currIndex = 0;\n\t\tlet tempItems = items;\n\t\tpath.forEach(id => {\n\t\t\tconst index = tempItems.findIndex(item => item.id === path[currIndex]);\n\n\t\t\tif (currIndex === path.length - 1) tempItems = tempItems[index];\n\t\t\telse tempItems = tempItems[index].children;\n\t\t\tcurrIndex += 1;\n\t\t});\n\t\tif (newChild.length != 0) {\n\t\t\ttempItems.children = newChild;\n\t\t\ttempItems.childrenAvailable = 1;\n\t\t} else {\n\t\t\ttempItems.childrenAvailable = 0;\n\t\t}\n\n\t\treturn items;\n\t};\n\tconst parseCITree = async function (xml, path = [], root, helpers) {\n\t\tlet nodes = [[], []];\n\t\tconst rxml = new DOMParser().parseFromString(xml, 'text/xml');\n\t\tvar relTypes = rxml.getElementsByTagName('cmdb_rel_type');\n\t\tfor (let relTypeIndex = 0; relTypeIndex < relTypes.length; relTypeIndex++) {\n\t\t\tlet relType = relTypes[relTypeIndex];\n\t\t\tvar temp = relType.getAttribute('type');\n\t\t\tlet ciTypes = relType.getElementsByTagName('ci_type');\n\n\t\t\tif (temp !== 'child' && temp !== 'parent') {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet nodeType = temp === 'child' ? nodes[0] : nodes[1];\n\t\t\tfor (let ciTypeIndex = 0; ciTypeIndex < ciTypes.length; ciTypeIndex++) {\n\t\t\t\tlet ciType = ciTypes[ciTypeIndex];\n\t\t\t\tlet items = ciType.getElementsByTagName('cmdb_ci');\n\t\t\t\tfor (let ciIndex = 0; ciIndex < items.length; ciIndex++) {\n\t\t\t\t\tlet item = items[ciIndex];\n\t\t\t\t\tif (item.getAttribute('nested_level') !== '0') continue;\n\n\t\t\t\t\tlet childrenAvailable = item.getAttribute('children') === '0' ? 0 : 1;\n\t\t\t\t\tlet sysID = item.getAttribute('sys_id');\n\t\t\t\t\tif (sysID === root || (path && path.indexOf(sysID) > -1)) {\n\t\t\t\t\t\tchildrenAvailable = 0;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst node = {\n\t\t\t\t\t\tid: sysID,\n\t\t\t\t\t\tlabel: item.getAttribute('display_value'),\n\t\t\t\t\t\tclass: ciType.getAttribute('name'),\n\t\t\t\t\t\tchildrenAvailable,\n\t\t\t\t\t\tactions: await generateAction(\n\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t{ name: 'incident', value: item.getAttribute('incident') },\n\t\t\t\t\t\t\t\t{ name: 'problem', value: item.getAttribute('problem') },\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'change_request',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('change_request')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_past',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_past')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_current',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_current')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'outages_planned',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('outages_planned')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_past',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_past')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_current',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_current')\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tname: 'changes_planned',\n\t\t\t\t\t\t\t\t\tvalue: item.getAttribute('changes_planned')\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t].filter(item => item.value > 0),\n\t\t\t\t\t\t\thelpers\n\t\t\t\t\t\t),\n\t\t\t\t\t\trelType: temp\n\t\t\t\t\t};\n\t\t\t\t\tnodeType.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t};\n\tconst generateTargetPath = function (index, targetPath) {\n\t\tconst path = [];\n\t\tfor (let i = 0; i <= index; i++) path.push(targetPath[i]);\n\t\treturn path;\n\t};\n\treturn {\n\t\tparseGroupTree,\n\t\tparseGeneralTree,\n\t\taddNewChild,\n\t\tparseCITree,\n\t\tgenerateTargetPath,\n\t};\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"45cf8914eb320110f7e105a3a25228ab","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f39caf7b04352210559073c06a02f73f","value":"f39caf7b04352210559073c06a02f73f"},"sys_update_name":"sys_ux_client_script_include_45cf8914eb320110f7e105a3a25228ab","sys_updated_by":"admin","api_name":"global.Content Tree Utils","sys_created_on":"2022-04-07 13:02:57","name":"Content Tree Utils","sys_name":"Content Tree Utils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"No password reset process found for the user!\"\n    },\n    {\n        \"message\": \"Contact your system administrator to get a process assigned to this user.\"\n    },\n    {\n        \"message\": \"No service-desk processes found for the selected user.\"\n    },\n    {\n        \"message\": \"Security Violation\"\n    },\n    {\n        \"message\": \"Error!\"\n    },\n    {\n        \"message\": \"You have {0} attempts remaining. Try again.\"\n    },\n    {\n        \"message\": \"Request expired.\"\n    },\n    {\n        \"message\": \"User account unlocked!\"\n    },\n    {\n        \"message\": \"The user can start using their system now.\"\n    },\n    {\n        \"message\": \"Account unlock error!\"\n    },\n    {\n        \"message\": \"Error while unlocking the account, please try again.\"\n    },\n    {\n        \"message\": \"The password reset request is no longer valid. Try again.\"\n    },\n    {\n        \"message\": \"Password reset successful!\"\n    },\n    {\n        \"message\": \"New password has been sent to the user's registered email/mobile number.\"\n    },\n    {\n        \"message\": \"Oops! Something went wrong.\"\n    },\n    {\n        \"message\": \"Technical error has occured, try again!\"\n    },\n    {\n        \"message\": \"Password reset instructions sent!\"\n    },\n    {\n        \"message\": \"Email/SMS with password reset instructions has been sent to the user's registered email/mobile number.\"\n    },\n    {\n        \"message\": \"Read the new password to the user before closing the tab.\"\n    },\n    {\n        \"message\": \"An error occured in PwdWfManager UI Script : checkWFProgress()\"\n    },\n    {\n        \"message\": \"The new password couldn't be accepted because it didn't meet the policy requirements. Review the password length, complexity, and history requirements and try again.\"\n    },\n    {\n        \"message\": \"Number of selected methods can't be more than {0}. Deselect excess method(s) to proceed.\"\n    },\n    {\n        \"message\": \"Select {0} of {1} verification methods below to proceed.\"\n    },\n    {\n        \"message\": \"Entered password doesn't meet the set password criteria.\"\n    },\n    {\n        \"message\": \"The entered passwords don't match.\"\n    },\n    {\n        \"message\": \"There is a configuration error in your system. Contact your System Administrator to know more.\"\n    },\n    {\n        \"message\": \"Verification code limit reached!\"\n    },\n    {\n        \"message\": \"Can't proceed with password reset!\"\n    },\n    {\n        \"message\": \"The user's account is locked and account unlocking isn’t supported with the {0} process.\"\n    },\n    {\n        \"message\": \"User needs a password reset, but their account is locked and can't be unlocked using the current process.\"\n    },\n    {\n        \"message\": \"User needs a password reset, but has exceeded the daily email verification code limit.\"\n    },\n    {\n        \"message\": \"User needs a password reset, but has exceeded the daily SMS verification code limit.\"\n    },\n    {\n        \"message\": \"User needs a password reset, but has exceeded the maximum verification attempt limit.\"\n    },\n    {\n        \"message\": \"Unable to reset user's password because password policy is not enabled\"\n    },\n    {\n        \"message\": \"Unable to retrieve account lock status.\"\n    },\n    {\n        \"message\": \"User account is locked.\"\n    },\n    {\n        \"message\": \"User account is not locked.\"\n    },\n    {\n        \"message\": \"Retrieving the account lock state information...\"\n    },\n    {\n        \"message\": \"Continue to reset\"\n    },\n    {\n        \"message\": \"Continue\"\n    },\n    {\n        \"message\": \"None\"\n    },\n    {\n        \"message\": \"Strong\"\n    },\n    {\n        \"message\": \"Good\"\n    },\n    {\n        \"message\": \"Weak\"\n    },\n    {\n        \"message\": \"Very weak\"\n    },\n    {\n        \"message\": \"Identify\"\n    },\n    {\n        \"message\": \"Verify\"\n    },\n    {\n        \"message\": \"Reset\"\n    },\n    {\n        \"message\": \"Reset password\"\n    },\n    {\n        \"message\": \"Confirm\"\n    }\n]","access":"package_private","sys_mod_count":"26","includes":"","sys_updated_on":"2024-06-27 16:02:45","sys_tags":"","script":"function include({ imports }) {\n    class PwdResetUxfClientUtilSNC {\n\n        static uiConstants = {\n            CRITICAL: \"critical\",\n            CIRCLE_EXCLAMATION_OUTLINE_ICON: \"circle-exclamation-outline\",\n            INFO_ICON: \"exclamation-circle-outline\",\n            REFRESH_RATE: 2500, // Default refresh rate in milliseconds\n            TIMEOUT: 90000, // Default refresh rate in milliseconds\n            RETRIEVING_LOCK_STATE: \"0\",\n            UNABLE_RETRIEVING_LOCK_STATE: \"-1\",\n            USER_ACCOUNT_LOCKED: \"1\",\n            USER_ACCOUNT_NOT_LOCKED: \"2\",\n            WORKFLOW_CONTEXT_FAULTED_STATE: \"faulted\",\n            WORKFLOW_CONTEXT_CANCELLED_STATE: \"cancelled\",\n            WORKFLOW_CONTEXT_FINISHED_STATE: \"finished\",\n            DEFAULT_URGENCY: 2,\n            PROGRESS_BAR: {\n                TYPE: {\n                    ERROR: \"error\",\n                    POSITIVE: \"positive\",\n                    GREEN: \"green\",\n                    ORANGE: \"orange\",\n                },\n                BOUNDS: {\n                    MIN_VAL: 0,\n                    MAX_VAL: 100\n                },\n                STRENGTH_LEVEL: {\n                    LEVEL_1: {\n                        THRESHOLD: 40,\n                        STYLES: \"* {color: rgb(var(--now-progress-bar_path--orange--background-color));}\"\n                    },\n                    LEVEL_2: {\n                        THRESHOLD: 60,\n                        STYLES: \"* {color: rgb(var(--now-progress-bar_path--green--background-color));}\"\n                    },\n                    LEVEL_3: {\n                        THRESHOLD: 80,\n                        STYLES: \"* {color: rgb(var(--now-progress-bar_path--positive--background-color));}\"\n                    },\n                    BASE_LEVEL: {\n                        STYLES: \"* {color: rgb(var(--now-progress-bar_path--error--background-color));}\"\n                    },\n                    DEFAULT: {\n                        STYLES: \"* {color: rgb(var(---now-color_text--secondary));}\"\n                    }\n                }\n            }\n        };\n        //If UI message need to change, please change the value associated to the UI message, It will be reflected over the UI.\n        static uiMessages = {\n            \"No password reset process found for the user!\":\n                \"No password reset process found for the user!\",\n            \"Contact your system administrator to get a process assigned to this user.\":\n                \"Contact your system administrator to get a process assigned to this user.\",\n            \"No service-desk processes found for the selected user.\":\n                \"No service-desk processes found for the selected user.\",\n            \"Security Violation\":\n                \"Security Violation\",\n            \"Error!\":\n                \"Error!\",\n            \"You have {0} attempts remaining. Try again.\":\n                \"You have {0} attempts remaining. Try again.\",\n            \"Request expired.\":\n                \"Request expired.\",\n            \"User account unlocked!\":\n                \"User account unlocked!\",\n            \"The user can start using their system now.\":\n                \"The user can start using their system now.\",\n            \"Account unlock error!\":\n                \"Account unlock error!\",\n            \"Error while unlocking the account, please try again.\":\n                \"Error while unlocking the account, please try again.\",\n            \"The password reset request is no longer valid. Try again.\":\n                \"The password reset request is no longer valid. Try again.\",\n            \"Password reset successful!\":\n                \"Password reset successful!\",\n            \"New password has been sent to the user's registered email/mobile number.\":\n                \"New password has been sent to the user's registered email/mobile number.\",\n            \"Oops! Something went wrong.\":\n                \"Oops! Something went wrong.\",\n            \"Technical error has occured, try again!\":\n                \"Technical error has occured, try again!\",\n            \"Password reset instructions sent!\":\n                \"Password reset instructions sent!\",\n            \"Email/SMS with password reset instructions has been sent to the user's registered email/mobile number.\":\n                \"Email/SMS with password reset instructions has been sent to the user's registered email/mobile number.\",\n            \"Read the new password to the user before closing the tab.\":\n                \"Read the new password to the user before closing the tab.\",\n            \"An error occured in PwdWfManager UI Script : checkWFProgress()\":\n                \"An error occured in PwdWfManager UI Script : checkWFProgress()\",\n            \"The new password couldn't be accepted because it didn't meet the policy requirements. Review the password length, complexity, and history requirements and try again.\":\n                \"The new password couldn't be accepted because it didn't meet the policy requirements. Review the password length, complexity, and history requirements and try again.\",\n            \"Number of selected methods can't be more than {0}. Deselect excess method(s) to proceed.\":\n                \"Number of selected methods can't be more than {0}. Deselect excess method(s) to proceed.\",\n            \"Select {0} of {1} verification methods below to proceed.\":\n                \"Select {0} of {1} verification methods below to proceed.\",\n            \"Entered password doesn't meet the set password criteria.\":\n                \"Entered password doesn't meet the set password criteria.\",\n            \"The entered passwords don't match.\":\n                \"The entered passwords don't match.\",\n            \"There is a configuration error in your system. Contact your System Administrator to know more.\":\n                \"There is a configuration error in your system. Contact your System Administrator to know more.\",\n           \t\"Verification code limit reached!\": \n           \t\t\"Verification code limit reached!\",\n           \t\"Can't proceed with password reset!\": \n           \t\t\"Can't proceed with password reset!\",\n           \t\"The user's account is locked and account unlocking isn’t supported with the {0} process.\": \n           \t\t\"The user's account is locked and account unlocking isn’t supported with the {0} process.\",\n           \t\"User needs a password reset, but their account is locked and can't be unlocked using the current process.\": \n           \t\t\"User needs a password reset, but their account is locked and can't be unlocked using the current process.\",\n           \t\"User needs a password reset, but has exceeded the daily email verification code limit.\": \n           \t\t\"User needs a password reset, but has exceeded the daily email verification code limit.\",\n           \t\"User needs a password reset, but has exceeded the daily SMS verification code limit.\":\n           \t\t\"User needs a password reset, but has exceeded the daily SMS verification code limit.\",\n           \t\"User needs a password reset, but has exceeded the maximum verification attempt limit.\":\n           \t\t\"User needs a password reset, but has exceeded the maximum verification attempt limit.\",\n            \"Unable to reset user's password because password policy is not enabled\":\n                \"Unable to reset user's password because password policy is not enabled\"\n        };\n\n        static async getLockStateDetail(state, helpers) {\n            let result = {\n                \"isRetrieving\": true,\n                \"message\": \"\",\n                \"type\": \"\"\n            };\n\n            switch (state) {\n                case this.uiConstants.UNABLE_RETRIEVING_LOCK_STATE:\n                    result.message = await helpers.translate(\"Unable to retrieve account lock status.\");\n                    result.isRetrieving = false;\n                    result.type = \"warning\";\n                    break;\n                case this.uiConstants.USER_ACCOUNT_LOCKED:\n                    result.message = await helpers.translate(\"User account is locked.\");\n                    result.isRetrieving = false;\n                    result.type = \"info\";\n                    break;\n                case this.uiConstants.USER_ACCOUNT_NOT_LOCKED:\n                    result.message = await helpers.translate(\"User account is not locked.\");\n                    result.isRetrieving = false;\n                    result.type = \"info\";\n                    break;\n                default:\n                    result.message = await helpers.translate(\"Retrieving the account lock state information...\");\n                    break;\n            }\n            return result;\n        }\n\n        static showAlert(api, messageHeader, messageInfo, messageType) {\n\n            var headerHTML = messageHeader ? \"<b>\" + messageHeader + \" </b>\" : \"\";\n            var payload = {\n                \"items\": [{\n                    \"id\": \"pwdreset-alert-notification\",\n                    \"action\": {\n                        \"type\": \"dismiss\"\n                    },\n                    \"content\": {\n                        // setting message content type to html to render rich text content properly\n                        \"type\": \"html\",\n                        \"value\": \"<div>\" + headerHTML + messageInfo + \"</div>\"\n                    },\n                    \"status\": messageType,\n                }]\n            };\n            api.emit('NOW_UXF_PAGE#ADD_NOTIFICATIONS', payload);\n        }\n\n        static async getTranslation(helpers, messageKey, tokens) {\n            if (!tokens || typeof tokens != \"object\") {\n                tokens = [];\n            }\n            const messageValue = this.uiMessages[messageKey]\n            if (!messageValue)\n                return await helpers.translate(messageKey, ...tokens);\n\n            return await helpers.translate(messageValue, ...tokens);\n        }\n\n        static isLastVerification(currVerificationIndex, totalVerification) {\n            return currVerificationIndex === totalVerification - 1;\n        }\n\n        static async getVerifyTransistionButtonLabel(isLastVerification, helpers) {\n            return isLastVerification ? await helpers.translate(\"Continue to reset\") : await helpers.translate(\"Continue\");\n        }\n\n        static async resetManualPWDFlowOnServerSideFailure(api, helpers, result) {\n            // Resetting input password field\n            api.setState(\"inputNewPassword\", {\n                \"fieldMessage\": {\n                    \"isInvalid\": true,\n                    \"value\": [{\n                        \"content\": await this.getTranslation(\n                            helpers,\n                            \"The new password couldn't be accepted because it didn't meet the policy requirements. Review the password length, complexity, and history requirements and try again.\"\n                        ),\n                        \"icon\": this.uiConstants.CIRCLE_EXCLAMATION_OUTLINE_ICON,\n                        \"status\": this.uiConstants.CRITICAL\n                    }]\n                },\n                \"isValid\": false,\n                \"value\": \"\"\n            });\n            // Resetting password meter\n            const initialPageDetails = api.data.get_pwd_reset_page_details.output;\n            api.setState(\"passwordStrengthMeterState\", {\n                \"isHidden\": !initialPageDetails.passwordStrength.isPasswordStrengthEnabled,\n                \"level\": {\n                    \"css\": this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.DEFAULT.STYLES,\n                    \"value\": await helpers.translate(\"None\")\n                },\n                \"meter\": {\n                    \"maxValue\": this.uiConstants.PROGRESS_BAR.BOUNDS.MAX_VAL,\n                    \"type\": this.uiConstants.PROGRESS_BAR.TYPE.ERROR,\n                    \"value\": this.uiConstants.PROGRESS_BAR.BOUNDS.MIN_VAL\n                }\n            });\n            // Resetting policy rules\n            api.setState(\"passwordPolicyRules\", initialPageDetails.passwordPolicy.passwordPolicyRuleHints);\n            // Resetting input password confirmation field\n            api.setState(\"inputNewPasswordConfirmation\", {\n                \"fieldMessage\": {\n                    \"isInvalid\": false,\n                    \"value\": [{\n                        \"content\": \"\",\n                        \"icon\": \"\",\n                        \"status\": \"\"\n                    }]\n                },\n                \"isValid\": false,\n                \"value\": \"\"\n            });\n        }\n\n        static async setPasswordMeterState(isNewPasswordNil, strengthScore, api, helpers) {\n            const passwordStrengthMeterState = {\n                ...api.state.passwordStrengthMeterState\n            };\n            let meterType = this.uiConstants.PROGRESS_BAR.TYPE.ERROR,\n                meterLevel = {\n                    value: await helpers.translate(\"None\"),\n                    css: this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.DEFAULT.STYLES\n                };\n            if (!isNewPasswordNil) {\n                if (strengthScore > this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_3.THRESHOLD) {\n                    meterType = this.uiConstants.PROGRESS_BAR.TYPE.POSITIVE;\n                    meterLevel.value = await helpers.translate(\"Strong\");\n                    meterLevel.css = this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_3.STYLES;;\n                } else if (strengthScore > this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_2.THRESHOLD) {\n                    meterType = this.uiConstants.PROGRESS_BAR.TYPE.GREEN;\n                    meterLevel.value = await helpers.translate(\"Good\");\n                    meterLevel.css = this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_2.STYLES;\n                } else if (strengthScore > this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_1.THRESHOLD) {\n                    meterType = this.uiConstants.PROGRESS_BAR.TYPE.ORANGE;\n                    meterLevel.value = await helpers.translate(\"Weak\");\n                    meterLevel.css = this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.LEVEL_1.STYLES;\n                } else {\n                    meterType = this.uiConstants.PROGRESS_BAR.TYPE.ERROR;\n                    meterLevel.value = await helpers.translate(\"Very weak\");\n                    meterLevel.css = this.uiConstants.PROGRESS_BAR.STRENGTH_LEVEL.BASE_LEVEL.STYLES;\n                }\n            }\n            passwordStrengthMeterState.meter = {\n                type: meterType,\n                value: strengthScore,\n                maxValue: passwordStrengthMeterState.meter.maxValue\n            };\n            passwordStrengthMeterState.level = meterLevel;\n            api.setState(\"passwordStrengthMeterState\", passwordStrengthMeterState);\n        }\n\n        static async errorPageRedirection(result, helpers, api) {\n            let heading = await this.getTranslation(helpers, \"Oops! Something went wrong.\"),\n                subheading = result.errorMessage,\n                content = \"\",\n                shortDescription = \"\",\n                actions = {\n                    \"restart\": {\n                        \"isHidden\": false,\n                        \"variant\": \"primary\"\n                    }\n                };\n            if (result.errorMessage === \"unlock_not_support_but_account_locked\") {\n                const processName = `<strong>${result.processName}</strong>`;\n                heading = await this.getTranslation(helpers, \"Can't proceed with password reset!\");\n                subheading = await this.getTranslation(helpers, \"The user's account is locked and account unlocking isn’t supported with the {0} process.\", [processName]);\n                shortDescription = await this.getTranslation(helpers, \"User needs a password reset, but their account is locked and can't be unlocked using the current process.\");\n                content = await this.getErrorContentForAccountLockedButNotSupported(helpers);\n                actions.createRecord = {\n                    \"isHidden\": false,\n                    \"variant\": \"secondary\"\n                }\n                actions.restart.variant = \"secondary\";\n            }\n            api.emit(\"PWD_RESET_UIB#SHOW_ERROR_PAGE_FROM_RESET\", {\n                \"errorPageObj\": {\n                    \"actions\": actions,\n                    \"content\": content,\n                    \"heading\": heading,\n                    \"icon\": \"error\",\n                    \"subHeading\": subheading,\n                    \"shortDescription\": shortDescription\n                }\n            });\n        }\n\n        static async getErrorContentForAccountLockedButNotSupported(helpers) {\n            const str1 = await this.getTranslation(helpers, \"Try one of the following.\");\n            const str2 = await this.getTranslation(helpers, \"Choose another process which supports account unlock.\");\n            const str3 = await this.getTranslation(helpers, \"To use the same process, create an incident for your system administrator to first unlock the account and try again.\");\n            return \"<p style='padding-left: var(--now-scalable-space--sm);'>\" + str1 + \"</p><div><ul><li>\" + str2 + \"</li><li>\" + str3 + \"</li></ul></div>\";\n        }\n\n        static async getErrorContentForMaxVerCodeLimitReached(helpers) {\n            const str1 = await this.getTranslation(helpers, \"Try one of the following.\");\n            const str2 = await this.getTranslation(helpers, \"Try again after 24 hours to use the same process.\");\n            const str3 = await this.getTranslation(helpers, \"Create an incident for the system administrator.\");\n            return \"<p style='padding-left: var(--now-scalable-space--sm);'>\" + str1 + \"</p><div><ul><li>\" + str2 + \"</li><li>\" + str3 + \"</li></ul></div>\";\n        }\n\n        static async navigateToResetSuccess(api, helpers) {\n            const { pageDetails } = api.state;\n            const heading = \"Password reset successful!\";\n            const subHeading = pageDetails.isSendEmail ? \"New password has been sent to the user's registered email/mobile number.\" : \"\";\n            const {\n                isAcceptPassword,\n                isAutoGeneratedPassword,\n                isProcessSupportReset\n            } = pageDetails;\n            let isDisplayPassword, newPassword;\n            if (isAcceptPassword && isProcessSupportReset && !isAutoGeneratedPassword) {\n                isDisplayPassword = true;\n                newPassword = api.state.inputNewPasswordConfirmation.value;\n            } else {\n                isDisplayPassword = pageDetails.isDisplayPassword;\n            }\n            const subText = isDisplayPassword ? \"Read the new password to the user before closing the tab.\" : \"\";\n            api.emit(\"PWD_RESET_UIB#HANDLE_NAVIGATION_FROM_RESET_PAGE\", {\n                route: \"success-password-reset-snc\",\n                token: api.state.token,\n                additionalInfo: {\n                    heading: await this.getTranslation(helpers, heading),\n                    subHeading: subHeading == \"\" ? \"\" : await this.getTranslation(helpers, subHeading),\n                    subText: subText == \"\" ? \"\" : await this.getTranslation(helpers, subText),\n                    isDisplayPassword: isDisplayPassword,\n                    newPassword: newPassword\n                }\n            });\n        }\n\n        static getIncidentDefaultUrgency() {\n            return this.uiConstants.DEFAULT_URGENCY;\n        }    \n\n        static isString(value) {\n            return (typeof value === 'string');\n        }\n\n        static isBoolean(value) {\n            return (typeof value === 'boolean');\n        }\n\n        static async getErrorPageDetailsTemplate(helpers) {\n            return {\n                \"actions\": {\n                    \"close\": {\n                        \"isHidden\": false,\n                        \"variant\": \"primary\"\n                    },\n                    \"createRecord\": {\n                        \"isHidden\": true,\n                        \"variant\": \"primary\"\n                    },\n                    \"restart\": {\n                        \"isHidden\": true,\n                        \"variant\": \"primary\"\n                    }\n                },\n                \"content\": \"\",\n                \"heading\": await this.getTranslation(helpers, \"Oops! Something went wrong.\"),\n                \"icon\": \"error\",\n                \"shortDescription\": \"\",\n                \"subHeading\": await this.getTranslation(helpers, \"Technical error has occured, try again!\")\n            };\n        }\n    }\n \n    return PwdResetUxfClientUtilSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"465e734d53490210abd8ddeeff7b1235","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_update_name":"sys_ux_client_script_include_465e734d53490210abd8ddeeff7b1235","sys_updated_by":"admin","api_name":"sn_uib_pwd_reset.PwdResetUxfClientUtilSNC","sys_created_on":"2024-03-18 18:35:46","name":"PwdResetUxfClientUtilSNC","sys_name":"PwdResetUxfClientUtilSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"1.0.0","required_translations":"","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2020-11-19 19:47:12","sys_tags":"","script":"function include() {\n\treturn {\n\t\tgetOrigin: function() {\n\t\t\treturn location.origin;\n\t\t},\n\t\tgetClipboard: function() {\n\t\t\treturn navigator.clipboard;\n\t\t},\n\t\tgetTrimmedValue: function(value) {\n\t\t\treturn (new DOMParser)\n\t\t\t\t.parseFromString(value, 'text/html')\n\t\t\t\t.documentElement.textContent.toString()\n\t\t\t\t.trim();\n\t\t}\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"475a07c623202010778fc50947bf65fe","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/69b1da7e45311410f87746a114805d2d","value":"69b1da7e45311410f87746a114805d2d"},"sys_update_name":"sys_ux_client_script_include_475a07c623202010778fc50947bf65fe","sys_updated_by":"admin","api_name":"sn_km_uib.Article actions include","sys_created_on":"2020-11-19 19:47:12","name":"Article actions include","sys_name":"Article actions include","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/69b1da7e45311410f87746a114805d2d","value":"69b1da7e45311410f87746a114805d2d"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Last updated: N/A\"\n    },\n    {\n        \"message\": \"Last updated: {0}\"\n    }\n]","access":"package_private","sys_mod_count":"159","includes":"","sys_updated_on":"2024-09-26 18:24:13","sys_tags":"","script":"function include() {\n    const CMDB_TABLE_NAMES = {\n        CMDB_DATA_MANAGEMENT_TASK : \"cmdb_data_management_task\",\n        CMDB_DM_POLICY_EXECUTION: \"cmdb_data_management_policy_execution\",\n        CMDB_DM_POLICY: \"cmdb_data_management_policy\",\n        CMDB_DM_RUNTIME_ATTRIBUTES: \"cmdb_data_management_policy_runtime_attributes\",\n        CMDB_RETIREMENT_CUSTOM_DEFINITIONS: \"cmdb_retirement_custom_definitions\",\n        CMDB_DEDUPE_TASK: \"reconcile_duplicate_task\"\n    };\n\n    const DM_POLICY_TYPE_IDS = {\n        NON_LIFECYCLE: {\n            ATTESTATION: \"7b80ed7753823010ee0dddeeff7b1223\",\n            CERTIFICATION: \"fe2a16b3436031106d8a8ef0dab8f2ff\"\n        },\n        LIFECYCLE: {\n            ARCHIVE: \"b82b20d00731201017b703767cd300e1\",\n            DELETE: \"562bec900731201017b703767cd300e7\",\n            RETIRE: \"66306fcb7352201026f6aa114df6a77c\",\n        },\n        DEPENDENT: {\n            ARCHIVE: \"b081fd511b727010a21d20a8ec4bcba1\",\n            DELETE: \"95eefab2533130108cabddeeff7b1218\",\n            RETIRE: \"fb68f7d07301011026f6aa114df6a7e4\"\n        },\n        DELETE_RELATED_ENTRY: \"c3059c79ff920110456d766cf43bf1c6\"\n    }\n\n    const DM_POLICY_STATUS = {\n        DRAFT: \"Draft\",\n        INACTIVE: \"Inactive\",\n        EVALUATION_FAILED: \"Evaluation Failed\",\n        PUBLISHED: \"Published\"\n    };\n\n    const DM_TASK_STATE = {\n         OPEN : \"1\",\n         WORK_IN_PROGRESS : \"2\",\n         CLOSED_COMPLETE : \"3\",\n         CLOSED_INCOMPLETE: \"4\",\n         CLOSED_SKIPPED: \"7\",\n         CLOSED_CANCELLED: \"8\"\n   };\n\n    const DM_PAGE_TABS = {\n        DM_OVERVIEW : \"0\",\n        POLICIES: \"1\",\n        SUBFLOWS: \"2\",\n        EXCLUDED_CIS: \"3\",\n        ANALYTICS: \"4\",\n        SETTINGS: \"5\"\n    };\n\n    const DM_POLICIES_PAGE_SUBTABS = {\n        PUBLISHED_POLICIES: \"0\",\n        DRAFT_POLICIES: \"1\",\n        DEACTIVATED_POLICIES: \"2\",\n        POLICIES_FAILING_EVALUATION: \"3\"\n    };\n\n    const MAX_NUM_QUICK_LINKS = 10;\n\n    const DATA_INGESTION_TAB_ID =\"data_ingestion\";\n\n    const HEALTH_STATUS_BADGE_COLOR = {\n        EXCELLENT : \"positive\",\n        FAIR: \"high\",\n        POOR: \"critical\"\n    };\n\n    const HEALTH_STATUS_BADGE_VARIANT = {\n        SECONDARY: \"secondary\",\n        TERTIARY: \"tertiary\"           \n    };\n\n    const LINK_TYPES = {\n        ROUTE: 'route',\n        EXTERNAL: 'external'\n    };\n\n    const PAGE_ROUTES = {\n        RECORD: 'record',\n        LIST : 'list',\n        DM_HOME: 'data-manager',\n        DM_POLICY_FORM : 'data-manager-policy-form',\n        TASK_DETAILS : 'task-detail',\n        REVIEW_CI : 'attestation-review-cis',\n        DM_POLICY_DETAILS: 'data-manager-policy-details',\n        DM_POLICY_EXECUTION_DETAILS: 'data-manager-policy-execution',\n        RETIREMENT_DEFINITION: 'retirement-definition',\n        MY_WORK: 'my-work',\n        DE_DUPE_TASK_DETAILS:'remediate-duplicate-task'\n    };\n\n    const HREF_FOR_ROUTE_TYPE = 'javascript:void(0);'\n\n    const TABLE_NAMES = {\n        SYS_DATA_SOURCE : \"sys_data_source\",\n        SCHEDULED_IMPORT_SET: \"scheduled_import_set\"\n    };\n  \n    const DM_PROPERTY_NAMES = {\n         PROP_NAME_AGING_POLICY_TASK_TIMEFRAME : \"sn_cmdb_ws.glide.cmdb.data.manager.aging.policy.task.timeframe\",\n         PROP_NAME_SUBFLOW_TIMEOUT: \"glide.cmdb.data.manager.subflow.timeout\",\n         PROP_NAME_ARCHIVAL_TIME_BEFORE_DELETE_IN_DAYS: \"glide.cmdb.data_manager.default_archive_time\",\n         PROP_NAME_STALE_TASK_LIFE_IN_DAYS: \"cmdb.data.manager.stale.task.life.in.days\"\n    };\n        \n    const OPERATORS = {\n        OR: \"^OR\",\n        AND: \"^\",\n        NEW_QUERY: '^NQ',\n        END_QUERY: '^EQ'\n    };\n\n    var _openMyWorkTaskRecordInNewTab = function (api, event) {\n        var ROUTE = {\n            \"ATTESTATION_TASK\": \"attestation-task\",\n            \"RECORD\": \"record\"\n        };\n        var ATTESTATION_POLICY_TYPE_ID = '7b80ed7753823010ee0dddeeff7b1223';\n\n        var route = ROUTE.RECORD;\n        var title = event.payload.row.rowData.value.get('number').columnData.displayValue;\n        var fields = {\n            sysId: event.payload.sys_id,\n            table: event.payload.table\n        };\n\n        var policyTypeId = event.payload.row.rowData.value.get('policy_id.cmdb_policy_type').columnData.value;\n        if (event.payload.table == 'cmdb_data_management_task' && policyTypeId == ATTESTATION_POLICY_TYPE_ID) {\n            route = ROUTE.ATTESTATION_TASK;\n            fields = {\n                sysId: event.payload.sys_id\n            };\n        }\n        var customPayload = {\n            \"route\": route,\n            \"targetRoute\": \"current\",\n            \"fields\": fields,\n            \"title\": title\n        };\n\n        api.emit('NAV_ITEM_SELECTED', customPayload);\n    }\n\n    var _getFieldValueFromEncodedQuery = function (encodedQuery, field) {\n         let value = \"\";\n         let splitQuery = encodedQuery.split('^');\n         let index = splitQuery.findIndex((x) => x.startsWith(field));\n         if (index > -1) {\n            value = splitQuery[index].split('=')[1];\n          }\n          return value;\n    }\n\n    var _handleLinkClick = function (helpers, value) {\n        if (value.type === LINK_TYPES.EXTERNAL) {\n            return;\n        }\n\n        if (value.type === LINK_TYPES.ROUTE) {\n            helpers.navigate.to(\n                value.route.route, \n                value.route.fields, \n                value.route.params || {}, \n                null, \n                null, \n                'current'\n            );\n        }\n    }\n\n    var _formatLastUpdInfoText = async function (helpers, lastUpdInfo) {\n        const defLastUpdatedInfo = await helpers.translate(\"Last updated: N/A\");\n\n        if (lastUpdInfo) {\n            return await helpers.translate(\"Last updated: {0}\", lastUpdInfo);\n        } else {\n            return defLastUpdatedInfo;\n        }\n    }\n\n    var _buildFieldMetadata = function (item) {\n        let value;\n        if (item.reference) {\n            value = {\n                \"type\": \"text-link\",\n                \"label\": item.displayValue,\n                \"href\": \"javascript:void(0)\",\n                \"value\": item.value,\n                \"data\": item.reference\n            };\n        } else {\n            value = {\n                \"type\": \"string\",\n                \"value\": item.displayValue,\n                \"data\": item\n            };\n        }\n        return {\n            \"label\": item.label,\n            \"value\": value\n        };\n    }\n\n    const handleReferenceLinkClickEvent = function({event, helpers}) {\n        const {\n            table,\n            sys_id: sysId\n        } = event.payload;\n        let route = 'record';\n        let params = {};\n        let fields = {}\n        \n        if (table == CMDB_TABLE_NAMES.CMDB_DM_POLICY || table == CMDB_TABLE_NAMES.CMDB_DM_RUNTIME_ATTRIBUTES) {\n            route = PAGE_ROUTES.DM_POLICY_DETAILS;\n            fields = {\n                policyRuntimeAttributesSysId: sysId\n            };\n            params = { ts: Date.now() };\n        } else if (table == CMDB_TABLE_NAMES.CMDB_DM_POLICY_EXECUTION) {\n            route = PAGE_ROUTES.DM_POLICY_EXECUTION_DETAILS;\n            fields = {\n                sysId\n            };\n            params = { ts: Date.now() };\n        } else if (table == CMDB_TABLE_NAMES.CMDB_DATA_MANAGEMENT_TASK) {\n            route = PAGE_ROUTES.TASK_DETAILS;\n            fields = {\n                sysId\n            };\n        } else if (table == CMDB_TABLE_NAMES.CMDB_RETIREMENT_CUSTOM_DEFINITIONS) {\n            route = PAGE_ROUTES.RETIREMENT_DEFINITION;\n            fields = {\n                sysId\n            };\n        } else if (table == CMDB_TABLE_NAMES.CMDB_DEDUPE_TASK) {\n            route = PAGE_ROUTES.DE_DUPE_TASK_DETAILS;\n            fields = {\n                table: table,\n                sysId: sysId\n            };\n        } else {\n            route = 'record';\n            params = {};\n            fields = {\n                table,\n                sysId\n            };\n        }\n\n        helpers.navigate.to(\n            route, \n            fields, \n            params, \n            null, \n            null, \n            'current'\n        );\n    }\n    \n    const APPRX_TIME_TO_MIGRATE_ONE_CERT_SCH = 300;\n    const DEFAULT_MIN_TIME = 1;\n\n    var _formatDurationMilliSeconds = function(milliseconds, options = {}, setDefaultMinTime) {\n        const {\n            count = 1,\n            units: {\n                s = 's',\n                m = 'm',\n                h = 'h',\n                d = 'd',\n            } = {},\n        } = options;\n        const final = [];\n        let days;\n        let hours;\n        let minutes;\n        let seconds;\n        // If milliseconds comes as 0 or less than 1000, just return '0 s'\n        if (!milliseconds || milliseconds < 1000) {\n            return setDefaultMinTime ? DEFAULT_MIN_TIME + ' ' + s : '0' + ' ' + s;\n        }\n        seconds = Math.floor(milliseconds / 1000);\n        minutes = Math.floor(seconds / 60);\n        seconds %= 60;\n        hours = Math.floor(minutes / 60);\n        minutes %= 60;\n        days = Math.floor(hours / 24);\n        hours %= 24;\n        if (days)\n            final.push(days + ' ' + d);\n        if (hours)\n            final.push(hours + ' ' + h);\n        if (minutes)\n            final.push(minutes + ' ' + m);\n        if (seconds)\n            final.push(seconds + ' ' + s);\n        return final.slice(0, count).join(' ');\n    }\n\n   /**\n   * This method removes any keys with null or undefined values and converts all the values to string. If the value is an object, recursively calls the sane method\n   */\n    const _sanitizeNavigationPayload = function(obj) {\n        const result = {};\n        if (!obj) return result;\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                if (Object.prototype.toString.call(obj[key]) === '[object Object]') {\n                    result[key] = _sanitizeNavigationPayload(obj[key]);\n                } else if (obj[key] != null || obj[key] != undefined) {\n                    result[key] = obj[key] + '';\n                }\n            }\n        }\n        return result;\n    }\n\n    return {\n        CMDB_TABLE_NAMES,\n        DM_POLICY_TYPE_IDS,\n        DM_POLICY_STATUS,\n        DM_TASK_STATE,\n        DM_PAGE_TABS,\n        DM_POLICIES_PAGE_SUBTABS,\n        MAX_NUM_QUICK_LINKS,\n        DATA_INGESTION_TAB_ID,\n        TABLE_NAMES,\n        LINK_TYPES,\n        PAGE_ROUTES,\n        HREF_FOR_ROUTE_TYPE,\n        DM_PROPERTY_NAMES,\n        OPERATORS,\n        APPRX_TIME_TO_MIGRATE_ONE_CERT_SCH,\n        openMyWorkTaskRecordInNewTab: _openMyWorkTaskRecordInNewTab,\n        getFieldValueFromEncodedQuery: _getFieldValueFromEncodedQuery,\n        handleLinkClick: _handleLinkClick,\n        formatLastUpdInfoText: _formatLastUpdInfoText,\n        buildFieldMetadata: _buildFieldMetadata,\n        handleReferenceLinkClickEvent,\n        sanitizeNavigationPayload: _sanitizeNavigationPayload,\n        formatDurationMilliSeconds: _formatDurationMilliSeconds\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"47dd621a53041110573addeeff7b129d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_47dd621a53041110573addeeff7b129d","sys_updated_by":"admin","api_name":"sn_cmdb_ws.cmdbWSCommonUtil","sys_created_on":"2022-06-15 04:26:17","name":"cmdbWSCommonUtil","sys_name":"cmdbWSCommonUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"4","includes":"","sys_updated_on":"2021-08-11 22:31:02","sys_tags":"","script":"/**\n * playbookActivityUIUtils\n * @return {{setFormFieldItems: (function(api, event): void)}}\n */\nfunction include() {\n\tconst setFormFieldItems = (api, event) => {\n\t\tconst {\n\t\t\tpayload: { formFieldItems = {} }\n\t\t} = event;\n\t\tconst filtered = [];\n\n\t\tfor (const name in formFieldItems) {\n\t\t\tconst field = formFieldItems[name];\n\t\t\tconst dictionaryType =\n\t\t\t\t(field.dictionary && field.dictionary.type) || null;\n\t\t\tif (dictionaryType) filtered.push(field);\n\t\t}\n\n\t\tif (filtered.length) api.setState('formFieldItems', filtered);\n\t};\n\n\treturn {\n\t\tsetFormFieldItems: setFormFieldItems\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"486f9b47ffb13010667053ea793bf11c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/8c524e101b6e0010affd0e55cc4bcbed","value":"8c524e101b6e0010affd0e55cc4bcbed"},"sys_update_name":"sys_ux_client_script_include_486f9b47ffb13010667053ea793bf11c","sys_updated_by":"admin","api_name":"sn_playbook_exp.playbookActivityUIUtils","sys_created_on":"2021-08-10 23:20:09","name":"playbookActivityUIUtils","sys_name":"playbookActivityUIUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/8c524e101b6e0010affd0e55cc4bcbed","value":"8c524e101b6e0010affd0e55cc4bcbed"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"33","includes":"","sys_updated_on":"2023-03-23 09:46:00","sys_tags":"","script":"\n/**\n * This script include is used by the controller \"Unified Map\".\n * It implements a common flow for computing expanded group nodes.\n */\nfunction include({imports}) {\n\tconst ERROR_CODES = {\n\t\t//Empty group ${groupId} cannot expand.\n\t\tWARN_EMPTY_GROUP_CANNOT_EXPAND: 'WARN_EMPTY_GROUP_CANNOT_EXPAND',\n\t\t//Detected a loop in nesting of group nodes for the node ${nodeId}.\n\t\tERR_GROUP_NESTING_LOOP: 'ERR_GROUP_NESTING_LOOP'\n\t};\n\n\tconst _getItemId = item => item?.id || '';\n\n\tconst _getParentGroupId = node => {\n\t\tconst groupIds = node?.groupIds;\n\t\treturn groupIds ? groupIds[0] : '';\n\t};\n\n\tconst _getMergedEdgeId = (sourceId, targetId) =>\n\t\t`sn_node_map_unified_ctrl:merged_edge_${sourceId}_${targetId}`;\n\n\n\t/**\n\t * Set all groups the groupCounter property which indicate the amount of their children.\n\t * @private\n\t * @param {{}} groups - map between groupId->to it's node\n\t * @param {Number} groupsCounter - Indicate the amount of children per each group\n\t */\n\tconst _updateGroupsCounter = (groups, groupsCounter) => {\n\t\tfor (let g in groups) {\n\t\t\tconst group = groups[g]; //Get the real group node\n\t\t\tconst groupCount = groupsCounter[group.id] || 0; //Get the amount of children for this group\n\n\t\t\tif (group.viewData)\n\t\t\t\tgroup.viewData.groupCount = groupCount;\n\t\t\telse\n\t\t\t\tgroup.viewData = {groupCount};\n\t\t}\n\t}\n\n\t/**\n\t * Indexing all nodes and groupIds.\n\t * @private\n\t * @param {Array<Node>} nodes\n\t * @returns {nodesIndex: {}, declaredGroups: Set<String>}\n\t */\n\tconst _buildNodesIndex = nodes => {\n\t\tconst {nodesIndex, groups, groupsCounter, declaredGroups} = nodes.reduce((result, node) => {\n\t\t\tconst {nodesIndex, groups, groupsCounter, declaredGroups} = result;\n\t\t\tnodesIndex[_getItemId(node)] = node;\n\t\t\tconst parentGroupId = _getParentGroupId(node);\n\t\t\tif (parentGroupId) {\n\t\t\t\tgroupsCounter[parentGroupId] = ++groupsCounter[parentGroupId] || 1;\n\t\t\t\tdeclaredGroups.add(parentGroupId);\n\t\t\t}\n\n\t\t\tif (node.isGroup)\n\t\t\t\tgroups[node.id] = node;\n\n\t\t\treturn result;\n\t\t}, {\n\t\t\tnodesIndex: {}, //hashtable nodeId -> node\n\t\t\tgroups: {}, //map between groupId->to it's node\n\t\t\tgroupsCounter: {}, //count how many children per each group\n\t\t\tdeclaredGroups: new Set() //IDs of group nodes that appear in any node as parent group.\n\t\t});\n\n\t\t_updateGroupsCounter(groups, groupsCounter);\n\t\treturn {nodesIndex, declaredGroups};\n\t};\n\n\t/**\n\t * Computes path of containing groups for the given node.\n\t * @private\n\t * @param {*} ctx\n\t * @param {Node} node\n\t * @returns {Array<String>} array of groupIds in which the given node is nested.\n\t * Sorted from the topmost group down to the node.id always as the last array item.\n\t */\n\tconst _getNestingPath = (ctx, node) => {\n\t\tif (!node)\n\t\t\treturn [];\n\n\t\tconst {nestingPaths, nodesIndex} = ctx;\n\t\tconst nodeId = _getItemId(node);\n\t\tconst cachedPath = nestingPaths[nodeId];\n\n\t\tif (cachedPath)\n\t\t\treturn cachedPath;\n\n\t\t//loops detection\n\t\tif (cachedPath === null) {\n\t\t\t//set error state, preserve the message from the first error detection.\n\t\t\tctx.error = ctx.error || {code: ERROR_CODES.ERR_GROUP_NESTING_LOOP, nodeId};\n\t\t\treturn null;\n\t\t}\n\n\t\t//loops detection: indicates that the path for the current nodeId is being calculated.\n\t\tnestingPaths[nodeId] = null;\n\n\t\tconst groupId = _getParentGroupId(node);\n\t\tconst parentGroup = nodesIndex[groupId];\n\t\tconst subpath = _getNestingPath(ctx, parentGroup);\n\n\t\tif (ctx.error) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst path = [...subpath, nodeId];\n\t\tnestingPaths[nodeId] = path;\n\n\t\treturn path;\n\t};\n\n\t/**\n\t * An operand function for Array.find.\n\t * `this` is expected to be and object containing {expandedGroupNodeIds, nodesIndex}\n\t * @private\n\t * @param {String} nodeId and id of any node (group or not).\n\t * @returns {Boolean} true if the node with the given id is a collapsed group.\n\t */\n\tconst _isCollapsedGroup = function (nodeId) {\n\t\tconst {expandedGroupNodeIds, nodesIndex} = this;\n\t\tconst node = nodesIndex[nodeId];\n\n\t\treturn node?.isGroup && !expandedGroupNodeIds.includes(nodeId);\n\t};\n\n\t/**\n\t * Finds the groups containing the given node and being visible on the map.\n\t * Namely, the first collapsed group on the nesting path of the node, starting from the top.\n\t * @private\n\t * @param {*} ctx\n\t * @param {NodeMeta} node\n\t * @returns {String|null} the id of the first collapsed group containing the given node.\n\t * Returns `null` if no collapsed group found on the nesting path.\n\t */\n\tconst _findTopmostGroupId = (ctx, node) => {\n\t\tconst {topmostGroupIds} = ctx;\n\t\tconst nodeId = _getItemId(node);\n\t\tif (topmostGroupIds[nodeId])\n\t\t\treturn topmostGroupIds[nodeId];\n\n\t\tconst path = _getNestingPath(ctx, node);\n\n\t\tif (!path)\n\t\t\treturn null;\n\n\t\tconst topmostId = path.find(_isCollapsedGroup, ctx) || null;\n\t\ttopmostGroupIds[nodeId] = topmostId === nodeId ? null : topmostId;\n\t\treturn topmostGroupIds[nodeId];\n\t};\n\n\t/**\n\t * Detects whether the given node is hidden behind a collapsed group.\n\t * @private\n\t * @param {*} ctx\n\t * @param {Node} node\n\t * @returns {Boolean} true if the node is behind a collapsed group\n\t */\n\tconst _fixNodeBehindCollapsedGroup = (ctx, node) => {\n\t\tconst topmostGroupId = _findTopmostGroupId(ctx, node);\n\t\tif (topmostGroupId)\n\t\t\treturn true;\n\n\t\treturn false;\n\t};\n\n\n\t/**\n\t * Array.map operand function.\n\t * this=ctx\n\t * @private\n\t * @param {Node} node\n\t * @returns {Node} a node representing the input node in the map view.\n\t */\n\tconst _getFixedNodePresentation = function (node) {\n\t\tconst {nodesIndex, topmostGroupIds} = this;\n\t\tconst nodeId = _getItemId(node);\n\t\tconst grId = topmostGroupIds[nodeId];\n\t\treturn nodesIndex[grId] || node;\n\t};\n\n\t/**\n\t * Called on each edge that has to be modified before it can be part of the nodemap data.\n\t * @param {{edgesIndex, mergedEdges}} ctx global context\n\t * @param {Edge} edge current edge to process.\n\t * @param {String} fixedSourceId id of the suggested source: the first visible container of the original source.\n\t * @param {String} fixedTargetId id of the suggested target: the first visible container of the original target.\n\t * @returns {Edge|null} a valid Edge object to replace the current edge with,\n\t * or `null` to remove the current edge from the map data.\n\t */\n\tconst _modifyEdge = (ctx, edge, fixedSourceId, fixedTargetId) => {\n\t\tconst {edgesIndex, mergedEdges} = ctx;\n\n\t\t//self-loop edges are removed.\n\t\tif (fixedSourceId === fixedTargetId)\n\t\t\treturn null;\n\n\t\t//merging the edge\n\t\tconst mergedEdgeId = _getMergedEdgeId(fixedSourceId, fixedTargetId);\n\t\tconst existingMergedEdge = edgesIndex[mergedEdgeId];\n\t\tconst mergedEdge = existingMergedEdge || {\n\t\t\tid: mergedEdgeId,\n\t\t\tsourceId: fixedSourceId,\n\t\t\ttargetId: fixedTargetId,\n\t\t\tisMergedEdge: true,\n\t\t\toriginalEdges: []\n\t\t};\n\t\tconst {originalEdges} = mergedEdge;\n\t\toriginalEdges.push(edge);\n\n\t\t//current edge was added to existing merging edge\n\t\tif (existingMergedEdge)\n\t\t\treturn null;\n\n\t\t//created new merged edge\n\t\tedgesIndex[mergedEdgeId] = mergedEdge;\n\t\tmergedEdges.push(mergedEdge);\n\t\treturn mergedEdge;\n\t};\n\n\t/**\n\t * Operator function of map()\n\t * Decide if the given edge should be merged.\n\t * Adds the given original edge to a merged edge.\n\t * Edges that resolve to a self-loop on a group node will be removed/skipped.\n\t * Merging of nested and duplicate edges\n\t * @private\n\t * @param {{candidateMergeEdges, usedEdgeCandidates, nodesIndex, edgesIndex}} ctx\n\t * @param {Edge} edge an original edge to merge in.\n\t * @returns {Edge} the new merged edge if such was created.\n\t * If the given original edge was skipped or merged into an existing merged edge, then `null` is returned.\n\t */\n\tconst _mergeEdge = (ctx, edge) => {\n\t\tconst {candidateMergeEdges, usedEdgeCandidates, nodesIndex, edgesIndex} = ctx;\n\t\tconst {sourceId, targetId} = edge;\n\n\t\tconst [source, target] = [sourceId, targetId].map(id => nodesIndex[id]);\n\t\tconst [fixedSource, fixedTarget] = [source, target].map(_getFixedNodePresentation, ctx);\n\n\n\t\tconst [fixedSourceId, fixedTargetId] = [fixedSource, fixedTarget].map(_getItemId);\n\t\tconst mergedEdgeId = _getMergedEdgeId(fixedSourceId, fixedTargetId);\n\n\t\t// Adding current edge to existing merged edge\n\t\tif (edgesIndex[mergedEdgeId])\n\t\t\treturn _modifyEdge(ctx, edge, fixedSourceId, fixedTargetId);\n\n\t\tconst duplicate = candidateMergeEdges[mergedEdgeId];\n\t\t// Merging current edge with duplicate\n\t\tif (duplicate) {\n\t\t\tusedEdgeCandidates.add(_getItemId(duplicate));\n\t\t\tconst mergedEdge = _modifyEdge(ctx, duplicate, fixedSourceId, fixedTargetId);\n\t\t\t_modifyEdge(ctx, edge, fixedSourceId, fixedTargetId);\n\t\t\treturn mergedEdge;\n\t\t}\n\n\t\t// Current edge is not Translated: saving as a candidate\n\t\tif (source === fixedSource && target === fixedTarget) {\n\t\t\tcandidateMergeEdges[mergedEdgeId] = edge;\n\t\t\treturn edge; //the edge is not affected, not merging\n\t\t}\n\n\t\t// Translated edge (source or target is changing)\n\t\treturn _modifyEdge(ctx, edge, fixedSourceId, fixedTargetId);\n\t};\n\n\t/**\n\t * Sub-routine of _indexEdge to add nested edges inside a merged edge to the index.\n\t * `this` is expected to have {edgesIndex, mergedEdge}.\n\t * @param {Edge} nestedEdge\n\t */\n\tconst _indexNestedEdge = function (nestedEdge) {\n\t\tconst {edgesIndex, mergedEdge} = this;\n\t\tconst nestedEdgeId = _getItemId(nestedEdge);\n\t\tedgesIndex[nestedEdgeId] = mergedEdge;\n\t};\n\n\t/**\n\t * Adds the given edge to the edgesIndex.\n\t * For merged edges adds each nested edgeId to also point to the merged edge object.\n\t * @param {{edgesIndex}} ctx\n\t * @param edge the given edge or null.\n\t * @returns {Edge} the give edge or null.\n\t */\n\tconst _indexEdge = (ctx, edge) => {\n\t\tconst {edgesIndex, usedEdgeCandidates} = ctx;\n\t\tconst edgeId = _getItemId(edge);\n\n\t\t// Removing edges what have be merged\n\t\tif (!edge || usedEdgeCandidates.has(edgeId))\n\t\t\treturn null;\n\n\t\tedgesIndex[edgeId] = edge;\n\n\t\tconst {isMergedEdge, originalEdges} = edge;\n\t\t// Making sure original edge id, point to merged edge\n\t\tif (isMergedEdge)\n\t\t\toriginalEdges.forEach(_indexNestedEdge, {edgesIndex, mergedEdge: edge});\n\n\t\treturn edge;\n\t};\n\n\t/**\n\t * Verifies for all groupIds in expandedGroupNodeIds that there are no empty expanded groups.\n\t *\n\t * @param {{}} args.nodesIndex\n\t * @param {Array<String>} args.expandedGroupNodeIds\n\t * @param {Set<String>} args.declaredGroups ids that were reffered as \"groupIds\" from any existing node.\n\t * @returns {String|null} If any empty expanded group is detected, returning the id of that group and stopping.\n\t * Otherwise returns `null`.\n\t */\n\tconst _detectEmptyExpandedGroups = ({nodesIndex, expandedGroupNodeIds, declaredGroups}) => {\n\t\t//find any groupId of an existing group node wich no children nodes\n\t\tconst invalidGroupId = expandedGroupNodeIds.find(groupId =>\n\t\t\t(nodesIndex[groupId] && !declaredGroups.has(groupId))\n\t\t);\n\t\treturn invalidGroupId || null;\n\t};\n\n\t/**\n\t * Returning only parts of ctx that need to be cached on the controller.\n\t * @param {*} ctx\n\t * @returns\n\t */\n\tconst _getCtx = ctx => {\n\t\tconst {\n\t\t\tnestingPaths,\n\t\t\tnodesIndex,\n\t\t\tdeclaredGroups,\n\t\t\tedgesIndex,\n\t\t\tmergedEdges,\n\t\t\toutHiddenEdgeIds,\n\t\t\ti18n\n\t\t} = ctx;\n\t\treturn {\n\t\t\tnestingPaths,\n\t\t\tnodesIndex,\n\t\t\tdeclaredGroups,\n\t\t\t//`edgesIndex` is added to the cached `ctx` for the use of another feature in the controller (programmatic selection).\n\t\t\t//`edgesIndex` is discarded and built from scratch on each invocation of syncExpandedNodes()\n\t\t\tedgesIndex,\n\t\t\tmergedEdges,\n\t\t\toutHiddenEdgeIds,\n\t\t\ti18n\n\t\t};\n\t};\n\n\t/**\n\t * Internal API of functions with the shared context.\n\t * @param {Array<Node>} ctx.nodes\n\t * @param {{}} ctx.nodesIndex\n\t * @param {Array<String>} ctx.expandedGroupNodeIds\n\t * @returns {Object}\n\t */\n\tconst utilsProvider = ctx => {\n\t\tconst _ctx = {\n\t\t\t//cached ctx from the controller state\n\t\t\t...ctx,\n\n\t\t\tnestingPaths: {}, //caching nesting paths per node\n\t\t\ttopmostGroupIds: {}, //caching topmost group per node\n\n\t\t\t/*\n\t\t\t * ids of original map edges mapped to actual edges:\n\t\t\t * - id of a translated edge points to the merged edge object.\n\t\t\t * - id of a merged edge also points to the merged edge object.\n\t\t\t */\n\t\t\tedgesIndex: {},\n\n\t\t\t//array of merged edges (only). Used for efficient iteration on change in hiddenEdgeIds.\n\t\t\tmergedEdges: [],\n\t\t\tcandidateMergeEdges: {}, // mapping edges by source-target key to detect duplicates\n\t\t\tusedEdgeCandidates: new Set(), // keeping track of edges that were merged and should be removed from visibleEdges.\n\n\t\t};\n\n\t\treturn {\n\t\t\tfixNodeBehindCollapsedGroup: node => _fixNodeBehindCollapsedGroup(_ctx, node),\n\t\t\tmergeEdge: edge => _mergeEdge(_ctx, edge),\n\t\t\tindexEdge: edge => _indexEdge(_ctx, edge),\n\t\t\tgetCtx: () => _getCtx(_ctx),\n\t\t\tgetError: () => (_ctx.error || null)\n\t\t};\n\t};\n\n\t/**\n\t * Computes nodes and edges for the node-map, based on the input nodes, edges, and expandedGroupNodeIds.\n\t * @param {Array<Node>} nodes\n\t * @param {Array<Edge>} edges\n\t * @param {Array<String>} expandedGroupNodeIds\n\t * @param {*} ctx cached context object for optimized runs.\n\t * @param {{}} i18n cached translated strings {key: value}\n\t * @returns {{visibleNodes: Array<Node>, visibleEdges: Array<Edge>, ctx: {}, errorCode: String, ...}}\n\t */\n\tconst syncExpandedNodes = (nodes, edges, expandedGroupNodeIds, ctx, i18n) => {\n\t\tconst {nodesIndex, declaredGroups} = ctx || _buildNodesIndex(nodes);\n\n\t\tconst invalidGroupId = _detectEmptyExpandedGroups({nodesIndex, expandedGroupNodeIds, declaredGroups});\n\t\tif (invalidGroupId)\n\t\t\treturn {\n\t\t\t\terrorCode: ERROR_CODES.WARN_EMPTY_GROUP_CANNOT_EXPAND,\n\t\t\t\tgroupId: invalidGroupId\n\t\t\t};\n\n\t\tconst {\n\t\t\tfixNodeBehindCollapsedGroup,\n\t\t\tmergeEdge,\n\t\t\tindexEdge,\n\t\t\tgetCtx,\n\t\t\tgetError\n\t\t} = utilsProvider({\n\t\t\t...(ctx || {}),\n\t\t\ti18n,\n\t\t\tnodes,\n\t\t\tnodesIndex,\n\t\t\tdeclaredGroups,\n\t\t\texpandedGroupNodeIds\n\t\t});\n\n\t\t//filtering out the non-visible nodes. May detect invalid input and set an error code.\n\t\tconst visibleNodes = nodes.filter(node => !fixNodeBehindCollapsedGroup(node));\n\t\tconst error = getError();\n\n\t\tif (error) {\n\t\t\tconst {code, ...props} = error;\n\t\t\treturn {\n\t\t\t\terrorCode: code,\n\t\t\t\t...props\n\t\t\t};\n\t\t}\n\n\t\t//transforming & merging the edges.\n\t\tconst visibleEdges = edges.map(mergeEdge).filter(indexEdge);\n\t\tconst cachedCtx = getCtx();\n\n\t\treturn {visibleNodes, visibleEdges, ctx: cachedCtx};\n\t};\n\n\t/**\n\t * Iterator function to filter visible (not hidden) edges among the original edges.\n\t * Also removes the current edge from outHiddenEdgeIds.\n\t * @param {Edge} edge current original edge to rocess.\n\t * @param {Set<String>} this.inHiddenEdgeIds\n\t * @returns {Boolean} true if current edge is NOT hidden.\n\t */\n\tconst _filterVisibleOriginalEdge = function (edge) {\n\t\tconst {inHiddenEdgeIds} = this;\n\t\treturn !inHiddenEdgeIds.has(edge.id);\n\t};\n\n\t/**\n\t * This function iterates visibleEdges of a mergedEdge.\n\t * If one of the visibleEdges' path contains a hidden Node then the entire merged edge should be hidden as well\n\t * @param {object} ctx cached context.\n\t * @param {Set<String>} hiddenNodeIds - contains all hidden nodes.\n\t * @param {Set<String>} visibleEdges contains the list of edges merged into one\n\t */\n\tconst _hasMergedEdgeIncludesHiddenNode = (ctx, hiddenNodeIds, visibleEdges) => {\n\t\t//Iterate of all mergedEdge's edges\n\t\tfor (let i = 0; i < visibleEdges.length; i++) {\n\t\t\tconst {sourceId, targetId} = visibleEdges[i];\n\t\t\tconst paths = [...ctx.nestingPaths[sourceId], ...ctx.nestingPaths[targetId]];\n\n\t\t\tlet hasHidden = false;\n\t\t\tpaths.forEach(node => {\n\t\t\t\tif (hiddenNodeIds.has(node)) {\n\t\t\t\t\thasHidden = true;\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (hasHidden)\n\t\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Iterator function to process a single mergedEdge to update the info about the hidden edges.\n\t * @param {Edge} mergedEdge current merged edge to update.\n\t * @param {{object}} this.ctx cached context computed by syncExpandedNodes and stored on the controller state.\n\t * @param {Set<String>} this.hiddenNodeIds contains the updated hidden nodes.\n\t * @param {Set<String>} this.inHiddenEdgeIds from the controller in_prop.\n\t * @param {Set<String>} this.outHiddenEdgeIds modified to contain out_prop.hiddenEdgeIds. Initialized with inHiddenEdgeIds.\n\t */\n\tconst _syncHiddenEdges = function (mergedEdge) {\n\t\tconst {ctx, hiddenNodeIds, inHiddenEdgeIds, outHiddenEdgeIds} = this;\n\n\t\tconst {originalEdges} = mergedEdge;\n\t\tconst visibleEdges = (inHiddenEdgeIds.size === 0) ? originalEdges :\n\t\t\toriginalEdges.filter(_filterVisibleOriginalEdge, {inHiddenEdgeIds});\n\n\t\tconst visibleEdgesCount = visibleEdges.length;\n\t\tconst hasHiddenNode = _hasMergedEdgeIncludesHiddenNode(ctx, hiddenNodeIds, visibleEdges);\n\n\t\tif (hasHiddenNode || visibleEdgesCount === 0) {\n\t\t\toutHiddenEdgeIds.add(mergedEdge.id);\n\t\t\treturn;\n\t\t}\n\n\t\tconst {i18n} = ctx;\n\n\t\tif (visibleEdgesCount === 1) {\n\t\t\tconst {label, ariaLabel} = visibleEdges[0];\n\t\t\tmergedEdge.label = label || '';\n\t\t\tmergedEdge.ariaLabel = i18n['Translated edge {label}'].replace('$LABEL', ariaLabel || label || '');\n\t\t} else {\n\t\t\t//merged edge (multiple original edges)\n\t\t\tmergedEdge.label = String(visibleEdgesCount);\n\t\t\tmergedEdge.ariaLabel = i18n['Aggregation of {count} edges'].replace('$COUNT', visibleEdgesCount);\n\t\t}\n\n\t};\n\n\t/**\n\t *\n\t * @param {Array<String>} inHiddenNodeIds the updated hiddenNodes\n\t * @param {Array<String>} hiddenEdgeIds from the controller in_prop.\n\t * @param {{mergedEdges, i18n}} ctx cached context computed by syncExpandedNodes and stored on the controller state.\n\t * @return {Array<String>} out.hiddenEdgeIds transformed with merged edges taken into account.\n\t */\n\tconst syncHiddenEdges = (inHiddenNodeIds, hiddenEdgeIds, ctx) => {\n\t\tconst {mergedEdges} = ctx;\n\n\t\tconst hiddenNodeIds = new Set(Array.isArray(inHiddenNodeIds) ? inHiddenNodeIds : []);\n\n\t\tconst inHiddenEdgeIds = new Set(Array.isArray(hiddenEdgeIds) ? hiddenEdgeIds : []);\n\t\tconst outHiddenEdgeIds = new Set(inHiddenEdgeIds);\n\n\t\tmergedEdges.forEach(_syncHiddenEdges, {ctx, hiddenNodeIds, inHiddenEdgeIds, outHiddenEdgeIds});\n\n\t\tctx.outHiddenEdgeIds = outHiddenEdgeIds;\n\t\treturn [...outHiddenEdgeIds.values()];\n\t};\n\n\n\t/**\n\t *\n\t * @param {{}} payload the event payload as arrived from the node-map event.\n\t * @param {{outHiddenEdgeIds}} ctx current context from the controller state.\n\t * @param {String} selectedId from `state.lastRequestedSelectionId`\n\t * @returns {{}} modified event payload with resolved merged edge info, if applicable.\n\t */\n\tconst translateEventPayload = (payload, ctx, selectedId) => {\n\t\tconst {edge, ...restPayload} = payload;\n\t\tif (!edge)\n\t\t\treturn payload;\n\n\t\tconst {isMergedEdge, originalEdges} = edge;\n\n\t\tif (!isMergedEdge)\n\t\t\treturn payload;\n\n\t\tif (originalEdges.length === 1)\n\t\t\treturn {\n\t\t\t\t...payload,\n\t\t\t\tedge: originalEdges[0]\n\t\t\t};\n\n\t\tconst {outHiddenEdgeIds} = ctx;\n\n\t\t//check if a single originalEdge was selected programmatically\n\t\tconst selectedEdge = originalEdges.find(edge => edge.id === selectedId);\n\n\t\tif (selectedEdge) {\n\t\t\treturn {\n\t\t\t\t...payload,\n\t\t\t\tedge: selectedEdge\n\t\t\t};\n\t\t}\n\n\t\tconst edges = (outHiddenEdgeIds.size === 0) ?\n\t\t\toriginalEdges :\n\t\t\toriginalEdges.filter(edge => !outHiddenEdgeIds.has(edge.id));\n\n\t\treturn {\n\t\t\tedges,\n\t\t\t...restPayload\n\t\t};\n\t};\n\n\t//API\n\treturn {\n\t\tsyncExpandedNodes,\n\t\tsyncHiddenEdges,\n\t\ttranslateEventPayload,\n\t\tERROR_CODES\n\t};\n}\n\n\n","sys_class_name":"sys_ux_client_script_include","sys_id":"4ba22b865b80111046f91c8fb681c71e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/aaa03175b7fd511060aa2f19ce11a9e9","value":"aaa03175b7fd511060aa2f19ce11a9e9"},"sys_update_name":"sys_ux_client_script_include_4ba22b865b80111046f91c8fb681c71e","sys_updated_by":"admin","api_name":"sn_app_ux_commons.nodeMapExpandedGroups","sys_created_on":"2022-06-14 13:46:54","name":"nodeMapExpandedGroups","sys_name":"nodeMapExpandedGroups","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/aaa03175b7fd511060aa2f19ce11a9e9","value":"aaa03175b7fd511060aa2f19ce11a9e9"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2024-04-12 14:12:36","sys_tags":"","script":"function include({ imports }) {\n    class PasswordPolicyUXF {\n        static CONSTANTS = {\n            STRENGTH_LOWER_BOUND: 20,\n            STRENGTH_UPPER_BOUND: 100,\n            CHARACTER_LIMIT_BONUS: 5,\n            CHARACTER_COUNT_BONUS: 10,\n            SIMILAR_ASC_DESC_COUNT_PENALTY: -5,\n            SPECIAL_CHAR_BONUS: 20 \n        }\n\n        static getPasswordStrength(passwordStrengthCalculator, password) {\n            return passwordStrengthCalculator(password, this.CONSTANTS);\n        }\n\n        static getPasswordStrengthCalculator(strengthCalRegexList, characterLimit, characterCount, similarAscendingDescendingCount, splCharLimit) {\n            /* \n            This method implements getStrengthScript method of PasswordPolicy.java \n            under package com.glide.sys.password.policy \n            to be consumed on client side under UXF layer\n            */\n\n            /*\n            This method is invoked during the password reset and password change steps.\n            It is used to calculate the strength of the new password.\n            The return value should be between 0 and upper bound, inclusive.\n            */\n\n            return function (password, CONSTANTS) {\n\n                // Return 0 if password is not valid\n                const regexList = strengthCalRegexList;\n                for (let i = 0; i < regexList.length; i++) {\n                    if (!(regexList[i].test(password))) return 0;\n                }\n\n                // Start with a score of lower bound (poor password)\n                let strength = CONSTANTS.STRENGTH_LOWER_BOUND;\n\n                // Award points for every character after the nth:\n                strength += (CONSTANTS.CHARACTER_LIMIT_BONUS * (Math.max(password.length, characterLimit) - characterLimit));\n                // Count number of unique characters:\n                let uniqueCount = 0;\n                const charMap = {};\n                for (let i = 0; i < password.length; i++) {\n                    if (typeof charMap[password[i]] === \"undefined\")\n                        uniqueCount++;\n                    charMap[password[i]] = true;\n                }\n\n                // Award points for every unique character after the nth character:\n                strength += (CONSTANTS.CHARACTER_COUNT_BONUS * (Math.max(uniqueCount, characterCount) - characterCount));\n\n                // Search for n similar, ascending or descending characters in sequence:\n                let countSimilar = 0;\n                let countAscending = 0;\n                let countDescending = 0;\n                for (let j = 0; j < (password.length - similarAscendingDescendingCount + 1); j++) {\n                    let similar = true;\n                    let ascending = true;\n                    let descending = true;\n                    for (let k = 0; k < similarAscendingDescendingCount - 1; k++) {\n                        if (similar && (password[j + k] === password[j + k + 1])) {\n                            if (k === (similarAscendingDescendingCount - 2))\n                                countSimilar++;\n                        }\n                        else\n                            similar = false;\n                        if (ascending && (password.charCodeAt(j + k) === (password.charCodeAt(j + k + 1) + 1))) {\n                            if (k === (similarAscendingDescendingCount - 2))\n                                countAscending++;\n                        }\n                        else\n                            ascending = false;\n                        if (descending && (password.charCodeAt(j + k) === (password.charCodeAt(j + k + 1) - 1))) {\n                            if (k === (similarAscendingDescendingCount - 2))\n                                countDescending++;\n                        }\n                        else\n                            descending = false;\n                    }\n                }\n\n                // Reduce points for using 3 similar, ascending or descending characters in sequence:\n                strength += (CONSTANTS.SIMILAR_ASC_DESC_COUNT_PENALTY * (countSimilar + countAscending + countDescending));\n\n                // Award points for use of n or more special characters:\n                if (/(.*\\\\W){splCharLimit,}/.test(password))\n                    strength += CONSTANTS.SPECIAL_CHAR_BONUS;\n\n                // Always return a value between lower bound (poor) and upper bound (strong)\n                return Math.min(CONSTANTS.STRENGTH_UPPER_BOUND, Math.max(CONSTANTS.STRENGTH_LOWER_BOUND, strength));\n            }\n        }\n\n    }\n\n    return PasswordPolicyUXF;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4bb0852c93a9c2105bbeca32b389181f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/f915e73304712210559073c06a02f7e1","value":"f915e73304712210559073c06a02f7e1"},"sys_update_name":"sys_ux_client_script_include_4bb0852c93a9c2105bbeca32b389181f","sys_updated_by":"admin","api_name":"global.PasswordPolicyUXF","sys_created_on":"2024-04-10 12:02:25","name":"PasswordPolicyUXF","sys_name":"PasswordPolicyUXF","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"4","includes":"","sys_updated_on":"2022-03-25 03:24:26","sys_tags":"","script":"function include({\n    imports\n}) {class SowPerfHeaderUtilsSNC {\n        /**\n                Data frame returns data for breakdown and breakdown relation\n                filter and get scores for logged in user\n             */\n        static getScoresForUser(rows, userId) {\n            if (!rows || rows.length === 0)\n                return;\n            for (let i = 0; i < rows.length; i++) {\n                const userBreakdown = Object.keys(rows[i].breakdowns).filter(b => b == userId);\n                if (userBreakdown && userBreakdown.length == 1)\n                    return rows[i].scores;\n            }\n        }\n        \n        static getPerfMetricsExceedingTarget(kpiDetails, scores) {\n            if (!kpiDetails || !scores)\n                return;\n            let validPerfMetrics = {},\n                score = '0';\n            for (let i in scores) {\n                if (kpiDetails[i] && !isNaN(scores[i].average) && scores[i].average != 0) {\n                    if (kpiDetails[i].displayAggregate === 'average')\n                        score = scores[i].formattedAverage;\n                    if (kpiDetails[i].displayAggregate === 'sum')\n                        score = scores[i].stats.formattedSumOfScores;\n                    if (kpiDetails[i].target && kpiDetails[i].target.value)\n                        if (parseFloat(score) > parseFloat(kpiDetails[i].target.value))\n                            validPerfMetrics[kpiDetails[i].displayValue] = score;\n                }\n            }\n            return validPerfMetrics;\n        }\n    }\n    return SowPerfHeaderUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4bff7b65097c4510f8771350f7e25cb2","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_4bff7b65097c4510f8771350f7e25cb2","sys_updated_by":"admin","api_name":"sn_sow_inc.SowPerfHeaderUtilsSNC","sys_created_on":"2022-01-02 12:59:53","name":"SowPerfHeaderUtilsSNC","sys_name":"SowPerfHeaderUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Incidents assigned to you\"\n    },\n    {\n        \"message\": \"Incidents assigned to your team\"\n    },\n    {\n        \"message\": \"Incident SLAs\"\n    },\n    {\n        \"message\": \"Unassigned incidents\"\n    },\n    {\n        \"message\": \"Catalog tasks assigned to you\"\n    },\n    {\n        \"message\": \"Catalog tasks assigned to your team\"\n    },\n    {\n        \"message\": \"Tasks delegated to you\"\n    },\n    {\n        \"message\": \"Your work\"\n    },\n    {\n        \"message\": \"Your team's work\"\n    },\n    {\n        \"message\": \"Incident SLA time remaining - {0}\"\n    }\n]","access":"package_private","sys_mod_count":"215","includes":"","sys_updated_on":"2025-01-09 07:52:18","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    class ServiceDeskLandingPageUtilsSNC {\n\n        /**\n         * Returns visualization configs\n         * @param {object} helpers\n         * @param {string} mode\n         * @param {number} conditionalRecordCount\n         * @return object\n         */\n        static async getVisualizationConfig(helpers, mode, conditionalRecordCount=0) {\n            const evamDef = this.getEvamDef();\n            const visualizationConfig = [{\n                    \"id\": \"incident_assigned\",\n                    \"tableName\": \"incident\",\n                    \"tableDisplayValue\": \"Incident\",\n                    \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state!=6\",\n                    \"myTeamQuery\": \"active=true^assigned_toISNOTEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^state!=6\",\n                    \"listView\": mode == \"your_work\" ? \"sow_landing_page_assigned\" : \"sow_landing_page\",\n                    \"header\": mode == 'your_work' ? await helpers.translate(\"Incidents assigned to you\") : await helpers.translate(\"Incidents assigned to your team\"),\n                    \"groupByField\": \"state\",\n                    \"evamId\": evamDef['incidentEvamDefinitionId'],\n                    \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                    \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_incident_write\"] : [\"itil\",\"sn_incident_read\"],\n                },\n                {\n                    \"id\": \"incident_sla\",\n                    \"tableName\": \"task_sla\",\n                    \"tableDisplayValue\": \"Task SLA\",\n                    \"myWorkQuery\": \"task.sys_class_name=incident^task.assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^task.active=true^sla.type=SLA^ORsla.type=OLA^active=true^time_left<=1970-01-08 00:00:00\",\n                    \"myTeamQuery\": \"task.sys_class_name=incident^task.assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^task.active=true^sla.type=SLA^ORsla.type=OLA^active=true^time_left<=1970-01-08 00:00:00\",\n                    \"listView\": 'sow_landing_page',\n                    \"header\": await helpers.translate(\"Incident SLAs\"),\n                    \"groupByField\": \"time_left\",\n                    \"evamId\": evamDef['incidentSlaEvamDefinitionId'],\n                    \"updated_on\": \"^ORDERBYtime_left\",\n                    \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_incident_write\"] : [\"itil\",\"sn_incident_read\"],\n                },\n                {\n                    \"id\": \"unassigned_incidents\",\n                    \"tableName\": \"incident\",\n                    \"tableDisplayValue\": \"Incident\",\n                    \"myWorkQuery\": \"active=true^assigned_toISEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\",\n                    \"myTeamQuery\": \"active=true^assigned_toISEMPTY^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\",\n                    \"listView\": mode == \"your_work\" ? \"sow_landing_page_assigned\" : \"sow_landing_page\",\n                    \"header\": await helpers.translate(\"Unassigned incidents\"),\n                    \"groupByField\": \"priority\",\n                    \"evamId\": evamDef['incidentEvamDefinitionId'],\n                    \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                    \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_incident_read\"] : [\"itil\",\"sn_incident_read\"],\n                },\n                {\n                    \"id\": \"catalog_tasks\",\n                    \"tableName\": \"sc_task\",\n                    \"tableDisplayValue\": \"Catalog Task\",\n                    \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe\",\n                    \"myTeamQuery\": \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\",\n                    \"listView\": mode == \"your_work\" ? \"sow_landing_page_assigned\" : \"sow_landing_page\",\n                    \"header\": mode == 'your_work' ? await helpers.translate(\"Catalog tasks assigned to you\") : await helpers.translate(\"Catalog tasks assigned to your team\"),\n                    \"groupByField\": \"state\",\n                    \"evamId\": evamDef[\"catalogTaskEvamDefinitionId\"],\n                    \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                    \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_request_write\"] : [\"itil\",\"sn_request_read\"],\n                }\n            ];\n\n            if(mode=='your_work' && conditionalRecordCount>0){\n                const conditionalConfig = await this.getConditionalVisualizationConfig(helpers);\n                visualizationConfig.push(conditionalConfig);\n            }\n\n            return visualizationConfig;\n        }\n\n        /**\n         * Returns conditional visualization config\n         * @param {object} helpers\n         * @return object\n         */\n         static async getConditionalVisualizationConfig(helpers) {\n            const evamDef = this.getEvamDef();\n            const visualizationConfig = {\n                    \"id\": \"delegated_task\",\n                    \"tableName\": \"task\",\n                    \"tableDisplayValue\": \"Task\",\n                    \"myWorkQuery\": \"active=true^assigned_to=javascript:getMyAssignments()^assigned_to.sys_id!=javascript: gs.getUserID()^sys_class_name=incident^ORsys_class_name=sc_task\",\n                    \"myTeamQuery\": \"active=true^assigned_to=javascript:getMyAssignments()^assigned_to.sys_id!=javascript: gs.getUserID()^sys_class_name=incident^ORsys_class_name=sc_task\",\n                    \"listView\": \"sow_landing_page_assigned\",\n                    \"header\": await helpers.translate(\"Tasks delegated to you\"),\n                    \"groupByField\": \"sys_class_name\",\n                    \"evamId\": evamDef['delegatedTaskEvamDefinitionId'],\n                    \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                    \"roles\": [\"itil\",\"sn_incident_write\",\"sn_request_write\"],\n                };\n\n            return visualizationConfig;\n        }\n\n        /**\n         * Returns initial visualization config\n         * @param {object} helpers\n         * @return object\n         */\n        static getInitialVisualizationConfig() {\n            const visualizationConfig = {\n                \"table\": \"incident\",\n                \"elementId\": \"incident_assigned\",\n                \"title\": \"Incidents assigned to you\",\n                \"query\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state!=6^ORDERBYDESC$AGGREGATE$^ORDERBYDESCsys_updated_on\",\n                \"evamId\": \"01a404e8b7203010e69dbc16de11a93f\",\n                \"queryForViewAllRecordCount\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state!=6^ORDERBYDESC$AGGREGATE$^ORDERBYDESCsys_updated_on\",\n                \"tableForViewAllRecordCount\": \"incident\",\n                \"groupByField\": \"state\",\n                \"listView\": \"sow_landing_page_assigned\"\n            };\n            return visualizationConfig;\n        }\n\n        /**\n         * Build visualization card configurations (Donut)\n         * @param {object} helpers\n         * @param {string} mode\n         * @param {number} conditionalRecordCount\n         * @return object\n         */\n        static async getDonutConfig(helpers, mode, conditionalRecordCount,api) {\n            var donutConfig = [];\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                var obj = {};\n\t        var visibility = api ? this.containsRole(api.context.session.user.roles, visualizationConfig[i][\"roles\"]) : true;\n                if(visibility){\n                    obj = {\n                        \"id\": visualizationConfig[i].id,\n                        \"header\": visualizationConfig[i].header,\n                        \"evamId\": visualizationConfig[i].evamId,\n                        \"updated_on\": visualizationConfig[i][\"updated_on\"],\n                        \"listView\": visualizationConfig[i].listView,\n                        \"datasource\": [{\n                            \"isDatabaseView\": false,\n                            \"allowRealTime\": true,\n                            \"sourceType\": \"table\",\n                            \"label\": {\n                            \"message\": visualizationConfig[i].tableDisplayValue\n                            },\n                            \"tableOrViewName\": visualizationConfig[i].tableName,\n                            \"filterQuery\": mode == 'your_work' ? visualizationConfig[i].myWorkQuery : visualizationConfig[i].myTeamQuery,\n                            \"id\": visualizationConfig[i].id\n                        }],\n                        \"metric\": [{\n                            \"dataSource\": visualizationConfig[i].id,\n                            \"id\": visualizationConfig[i].id + \"metric\",\n                            \"aggregateFunction\": \"COUNT\",\n                            \"numberFormat\": {\n                                \"customFormat\": false\n                            },\n                            \"axisId\": \"primary\"\n                        }],\n                        \"groupBy\": [{\n                            \"maxNumberOfGroups\": \"ALL\",\n                            \"numberOfGroupsBasedOn\": \"NO_OF_GROUP_BASED_ON_PER_METRIC\",\n                            \"showOthers\": false,\n                            \"hideZeroValues\": true,\n                            \"groupBy\": [{\n                                \"dataSource\": visualizationConfig[i].id,\n                                \"groupByField\": visualizationConfig[i].groupByField,\n                                \"isRange\": false,\n                                \"isPaBucket\": false\n                            }]\n                        }]\n                    };\n                    donutConfig.push(obj);\n                }\n            }\n            return donutConfig;\n        }\n\n        static getEvamDef() {\n            const evamDef = {\n                'incidentEvamDefinitionId': '01a404e8b7203010e69dbc16de11a93f',\n                'incidentSlaEvamDefinitionId': '749b857eb7283010e69dbc16de11a98d',\n                'catalogTaskEvamDefinitionId': '4a59c876c7323010d7e818b1c7c26083',\n                'delegatedTaskEvamDefinitionId': '615d205d94df0110f87765e94545da03'\n            };\n            return evamDef;\n        }\n\n        /**\n         * Returns configuration for work persona dropdown\n         * @param {object} helpers\n         * @return {object}\n         */\n        static async getWorkPersonaConfig(helpers) {\n            return {\n                \"items\": [{\n                        \"id\": \"your_work\",\n                        \"label\": await helpers.translate(\"Your work\")\n                    },\n                    {\n                        \"id\": \"your_team_work\",\n                        \"label\": await helpers.translate(\"Your team's work\")\n                    }\n                ],\n                \"defaultSelected\": [\"your_work\"]\n            }\n        }\n\n        static containsRole(userRoles, widgetRoles) {\n            if(userRoles.includes(\"admin\"))\n                return true;\n            return userRoles.some(item => widgetRoles.includes(item));\n        }\n\n        static getRangeObject(query, key) {\n            var ans = {}\n            var queryTokens = query.split('^');\n            for (var index in queryTokens) {\n                var token = queryTokens[index];\n                if (token.indexOf(key) == -1)\n                    continue;\n                token = token.replace('=', '');\n                if (token.indexOf('<') != -1)\n                    ans.end_value = token.substring(token.indexOf('<') + 1)\n                else\n                    ans.start_value = token.substring(token.indexOf('>') + 1)\n            }\n            return ans;\n        }\n\n        static getRangeObjectFromQuerysegment(querySegment, key) {\n            var ans = {}\n            for(var i=0; i<querySegment.length; i++) {\n                var segment = querySegment[i];\n                if(segment.field === key) {\n                    if(segment.operator.includes(\">\")) ans.start_value = segment.values[0];\n                    else if(segment.operator.includes(\"<\")) ans.end_value = segment.values[0];\n                }\n            }\n            return ans;\n        }\n\n        static async getSLAHeader(range, report_ranges, helpers) {\n            for (var index in report_ranges) {\n                if (range.end_value == report_ranges[index].upper_value_duration)\n                    return (await helpers.translate(\"Incident SLA time remaining - {0}\", report_ranges[index].label));\n            }\n            return (await helpers.translate('Incident SLAs'));\n        }\n\n        static getFieldMap() {\n            const fieldMap = {\n                'State': 'state',\n                'Priority': 'priority',\n                'Actual time left': 'time_left',\n                'Task type': 'sys_class_name'\n            };\n            return fieldMap;\n        }\n\n        static async fetchTitleForSLA(query, reportRanges, helpers, querySegment) {\n           var range = {};\n            if(querySegment)\n                range = this.getRangeObjectFromQuerysegment(querySegment, 'time_left'); \n            else\n                range = this.getRangeObject(query, 'time_left');\n\n            return (await this.getSLAHeader(range, reportRanges, helpers));\n        }\n    \n        static async fetchTitle(table, selectedField, groupByField, groupMode = false) {\n            if(selectedField == undefined){\n                 selectedField = 'all';\n                }\n            const labelMap = {\n                'incident': {\n                    'state': {\n                        'all':'Incidents',\n                        '1': 'New incidents',\n                        '2': 'In Progress incidents',\n                        '3': 'On Hold incidents',\n                        '6': 'Resolved incidents'\n                    },\n                    'priority': {\n                        'all':'Unassigned incidents',\n                        '1': 'P1 unassigned incidents',\n                        '2': 'P2 unassigned incidents',\n                        '3': 'P3 unassigned incidents',\n                        '4': 'P4 unassigned incidents',\n                        '5': 'P5 unassigned incidents'\n                    }\n                },\n                'sc_task': {\n                    'state': {\n                        'all':'Catalog tasks',\n                        '-5': 'Pending catalog tasks',\n                        '1': 'Open catalog tasks',\n                        '2': 'Work in progress catalog tasks'\n                    }\n                },\n                'task': {\n                    'sys_class_name': {\n                        'sc_task': 'Catalog tasks delegated to you',\n                        'incident': 'Incidents delegated to you'\n                    }\n                }\n            };\n\n            if((table == 'incident' && groupByField == 'priority') || table == 'task')\n                return labelMap[table][groupByField][selectedField];\n\n            if (groupMode)\n                return labelMap[table][groupByField][selectedField] + ' assigned to your team';\n            return labelMap[table][groupByField][selectedField] + ' assigned to you';\n        }\n\n        static async getVisualisationCardConfig(id, helpers, mode, conditionalRecordCount) {\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n            var currentVizSelection = {};\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                if (visualizationConfig[i].id === id) {\n                    currentVizSelection.table = visualizationConfig[i].tableName;\n                    currentVizSelection.query = mode === \"your_team_work\" ? visualizationConfig[i].myTeamQuery + visualizationConfig[i][\"updated_on\"] : visualizationConfig[i].myWorkQuery + visualizationConfig[i][\"updated_on\"];\n                    currentVizSelection.evamId = visualizationConfig[i].evamId;\n                    currentVizSelection.elementId = visualizationConfig[i].id;\n                    currentVizSelection.title = visualizationConfig[i].header;\n                    currentVizSelection.groupByField = visualizationConfig[i].groupByField;\n                    currentVizSelection.listView = visualizationConfig[i].listView;\n                    break;\n                }\n            }\n            return currentVizSelection;\n        }\n\n        static async getVisualisationCardQuery(vizSelection, nameValueMap, helpers, mode, conditionalRecordCount) {\n            var field = this.getFieldMap()[vizSelection.groupBy] !== undefined ? this.getFieldMap()[vizSelection.groupBy] : vizSelection.groupByField;\n            var value = nameValueMap[field];\n            var query = '';\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                if (visualizationConfig[i].id === vizSelection.elementId) {\n                    query = mode === \"your_team_work\" ? visualizationConfig[i].myTeamQuery : visualizationConfig[i].myWorkQuery;\n                    break;\n                }\n            }\n            if (Array.isArray(value)) {\n                for (let index in value)\n                    query += '^' + field + value[index];\n            } else {\n                if (value.includes('='))\n                    query += '^' + field + value;\n                else\n                    query += '^' + field + '=' + value;\n            }\n            return query + visualizationConfig[0][\"updated_on\"];\n        }\n    }\n\n    return ServiceDeskLandingPageUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4c36c1e3b77c3010e69dbc16de11a9a1","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_4c36c1e3b77c3010e69dbc16de11a9a1","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentLandingPageUtilsSNC","sys_created_on":"2021-06-23 08:25:08","name":"SowIncidentLandingPageUtilsSNC","sys_name":"SowIncidentLandingPageUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"10","includes":"","sys_updated_on":"2023-10-03 12:32:33","sys_tags":"","script":"function include( {imports} ) {\n\n    // Prepare navigation payload with route, required params (fields) and optional params (params)\n    const generateNavigationPayload = (endpoint, currentRouteRequiredParams, currentRouteOptionalParams, canReloadPage = true) => {\n        try {\n            if (!endpoint)\n                return null;\n\n            let payload = {\n                reload: canReloadPage\n            };\n            const [route, params] = endpoint.split('?');\n            if (!route)\n                return null;\n\n            payload.route = route;\n            if (params) {\n                payload.fields = {};\n                const allParams = params.split('&');\n                allParams.forEach(param => {\n                    if (param.match(/optional=(.+)/)) {\n                        payload.params = {};\n                        let optionalParams = param.match(/optional=(.+)/)[1].split('^');\n                        optionalParams.forEach(optionalParam => {\n                            const [optionalParamName, optionalParamValue] = optionalParam.split('=');\n                            payload.params[optionalParamName] = getParamValue(optionalParamValue, currentRouteOptionalParams);\n                        });\n                    } else {\n                        const [paramName, paramValue] = param.split('=');\n                        payload.fields[paramName] = getParamValue(paramValue, currentRouteRequiredParams);\n                    }\n                });\n            }\n            return payload;\n        } catch (error) {\n            console.error('[ACE] ERROR generating navigation payload');\n\n            return null;\n        }\n    }\n\n    const areEqual = (o1, o2) => {\n        let obj1 = o1 || {};\n        let obj2 = o2 || {};\n\n        const keys1 = Object.keys(obj1);\n        const keys2 = Object.keys(obj2);\n        if (keys1.length !== keys2.length)\n            return false;\n\n        for (let key1 of keys1) {\n            if (obj1[key1] !== obj2[key1])\n                return false;\n        }\n        return true;\n    }\n\n    const isEndpointUrlLoaded = (endpoint, {\n        route,\n        fields,\n        params\n    }) => {\n        const payloadFromEndpoint = generateNavigationPayload(endpoint, fields, params);\n\n        if (!payloadFromEndpoint || payloadFromEndpoint.route !== route || !areEqual(payloadFromEndpoint.fields, fields) || !areEqual(payloadFromEndpoint.params, params))\n            return false;\n\n        return true;\n    }\n\n    // Replace placeholder template text with current route parameters \n    const getParamValue = (template, currentRouteParams) => {\n        const templateMatches = template.match(/{(.+)}/);\n        if (!templateMatches)\n            return template;\n\n        const matchedName = templateMatches[1];\n        return currentRouteParams[matchedName] || '';\n    }\n\n    return {\n        generateNavigationPayload,\n        isEndpointUrlLoaded\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4c8a77abb7a151109cfe23508e11a93b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_4c8a77abb7a151109cfe23508e11a93b","sys_updated_by":"admin","api_name":"sn_ace.Navigation Payload","sys_created_on":"2022-09-01 20:43:54","name":"Navigation Payload","sys_name":"Navigation Payload","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"4","includes":"","sys_updated_on":"2023-12-15 09:19:43","sys_tags":"","script":"/**\n  * Copy of sn_sow_on_call.SOWOnCallRelativeDateTime\n  */\nfunction include({imports}) { \n\tconst {NowDateTime} = imports['sn_uxf.core_libraries']();\n\n\tconst DEFAULT_DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\tconst DEFAULT_RELATIVE_DATE_FORMAT = 'DD-MMM-YYYY';\n\tconst DEFAULT_RELATIVE_TIME_FORMAT = 'HH:mm';\n\n\tconst getCurrentDateTime = function(tgtTZ) {\n\t\tlet ndt = new NowDateTime();\n\t\tif (!tgtTZ) return ndt;\n\t\treturn ndt.tz(tgtTZ);\n\t};\n\n\tconst getTimeTillDateChangeInMillis = function(tgtTZ) {\n\t\tif (!tgtTZ) return;\t\t\n\t\tlet now = getCurrentDateTime(tgtTZ);\n\t\treturn now.startOf('day').add(1, 'days').diff(now);\n\t};\n\n\tconst getFormattedDateText = function(date, timeZone, format) {\n\t\tif(!date) return;\n\t\tif(!format) format = DEFAULT_DATE_TIME_FORMAT;\n\t\tif(!timeZone) return date.format(format);\n\t\treturn date.tz(timeZone).format(format);\n\t};\n\n\n\tconst getRelativeDay = function(date, tgtTZ) {\n\t\tif (!date) return;\n\n\t\tlet now = getCurrentDateTime(tgtTZ);\n\t\tnow = date.add(now.$d.valueOf() - date.valueOf(), 'millisecond');\n\t\tconst dayDiff = Math.abs(date.startOf('day').diff(now.startOf('day'), 'days'));\n\t\tconst isPast = date.isBefore(now);\n\n\t\tif (dayDiff === 0)\n\t\t\treturn ('today');\n\t\telse if (dayDiff === 1)\n\t\t\treturn isPast ?  'yesterday' :  'tomorrow';\n\t\telse return getFormattedDateText(date, null, DEFAULT_RELATIVE_DATE_FORMAT);\n\t};\n\n\tconst getRelativeDayAndTime = function(date, timeFormat, tgtTZ) {\n\t\tif(!date) return;\n\t\tif (!timeFormat) timeFormat = DEFAULT_RELATIVE_TIME_FORMAT;\n\n\t\tlet dayText = getRelativeDay(date, tgtTZ);\n\t\tlet timeText = date.format(timeFormat);\n\n\t\treturn [dayText , timeText];\n\t};\n\n\tconst getRelativeDateTime = function(dateTimeStr, timeOnly, tgtTZ, time_fmt) {\n\t\tif (!dateTimeStr) return;\n\n\t\tvar dateTime = new NowDateTime(dateTimeStr);\n\n\t\tif (timeOnly) \n\t\t\treturn getFormattedDateText(dateTime, null, time_fmt || DEFAULT_RELATIVE_TIME_FORMAT);\n\t\t\n\t\treturn getRelativeDayAndTime(dateTime, time_fmt || DEFAULT_RELATIVE_TIME_FORMAT, tgtTZ);\n\t};\n\n\treturn {\n\t\tgetRelativeDateTime,\n\t\tgetTimeTillDateChangeInMillis\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"4dfef86a37c371108dfb9c7c24924bdd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_4dfef86a37c371108dfb9c7c24924bdd","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallRelativeDateTimeUtils","sys_created_on":"2023-12-14 10:25:43","name":"OnCallRelativeDateTimeUtils","sys_name":"OnCallRelativeDateTimeUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"15","includes":"","sys_updated_on":"2023-09-14 01:51:12","sys_tags":"","script":"// Portal App Shell client script include\n\nfunction include() {\n\tclass PortalAppShellUtils {\n\t\tstatic dataFetchSuccess(api, event, helpers, imports) {\n\t\t\tconst appShellDataSource = api.data.portal_app_shell_data_source.uxPropertiesAndAuthRoutes;\n\t\t\tconst isMenuItemsPageProperty = appShellDataSource?.chrome_menu && appShellDataSource?.chrome_menu?.global.length !== 0;\n\t\t\tlet menuItems = appShellDataSource?.chrome_menu?.global || [];\n\t\t\tlet actionButtons = appShellDataSource?.chrome_menu_actions?.global || [];\n\n\t\t\tif (!isMenuItemsPageProperty) {\n\t\t\t\tconst dataOutput = { ...api.data.portal_appshell_menu_provider.output };\n\t\t\t\tmenuItems = dataOutput?.items || [];\n\t\t\t\tactionButtons = dataOutput?.actionButtons || {};\n\t\t\t}\n\n\t\t\tapi.setState('menuItems', menuItems);\n\t\t\tapi.setState('menuActionButtons', actionButtons);\n\t\t}\n\t}\n\n\treturn PortalAppShellUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"524ec841536111101c7eddeeff7b1249","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7db24612c331101080d6d3658940dd47","value":"7db24612c331101080d6d3658940dd47"},"sys_update_name":"sys_ux_client_script_include_524ec841536111101c7eddeeff7b1249","sys_updated_by":"admin","api_name":"app_shell_portal.PortalAppShellUtils","sys_created_on":"2022-08-24 09:05:27","name":"PortalAppShellUtils","sys_name":"PortalAppShellUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7db24612c331101080d6d3658940dd47","value":"7db24612c331101080d6d3658940dd47"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Error - {0}\"\n    },\n    {\n        \"message\": \"Query successfully deleted\"\n    }\n]","access":"package_private","sys_mod_count":"10","includes":"","sys_updated_on":"2023-10-19 15:27:11","sys_tags":"","script":"function include({imports}) {\n      const ERROR_NOTIFICATION_PROPS = {\n            \"status\": \"critical\",\n            \"icon\": \"exclamation-triangle-fill\",\n            \"action\": {\n                \"type\": \"dismiss\"\n           }\n    };\n\n   const SUCCESS_NOTIFICATION_PROPS = {\n            \"status\": \"positive\",\n            \"icon\": \"check-circle-outline\",\n            \"action\": {\n                \"type\": \"dismiss\"\n            }\n       };\n\n    var _handleRemoveNotifications = function(emit, notificationId, helpers) {\n         const timeoutId = helpers.timing.setTimeout(() => {\n         emit('NOW_UXF_PAGE#REMOVE_NOTIFICATIONS', {\n          items: [{id: notificationId}]\n          }); }, 5000);\n    }\n\n     var _emitErrorNotification = async function(errorMessage,emit,translate,helpers) {\n         const notifications = [];\n         const notificationId = 'errorId' + new Date().valueOf();\n \n         if(!errorMessage) {\n              errorMessage = \"invalid error\";\n         }\n         notifications.push({\n             ...ERROR_NOTIFICATION_PROPS,\n              \"content\": await translate(\"{0}\", errorMessage),\n              \"id\": notificationId \n        });\n        emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notifications\n        });\n       _handleRemoveNotifications(emit,notificationId,helpers);\n   }\n\n   var _emitSuccessNotification = async function(successMessage,emit,translate,helpers) {\n         const notifications = [];\n         const notificationId = 'successId' + new Date().valueOf();\n \n         notifications.push({\n             ...SUCCESS_NOTIFICATION_PROPS,\n              \"content\": await translate(\"{0}\", successMessage),\n              \"id\": notificationId \n        });\n        emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notifications\n        });\n       _handleRemoveNotifications(emit,notificationId,helpers);\n   }\n\n    var _handleDeleteQueryNotifications = async function(api, helpers, status,error) {\n          const notifications = [];\n          if(status === \"failure\" && error) {\n            notifications.push({\n                ...ERROR_NOTIFICATION_PROPS,\n                \"content\": await helpers.translate(\"Error - {0}\", error.message)\n               });\n           } \n\n          if(status === \"success\") {\n            var messageContent = await helpers.translate(\"Query successfully deleted\");\n            const notificationId = 'successId' + new Date().valueOf();\n            notifications.push({\n                ...SUCCESS_NOTIFICATION_PROPS,\n                \"content\": messageContent,\n                \"id\": notificationId\n            });\n        }\n\n        if (notifications.length > 0) {\n            api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n                items: notifications\n            });\n        }\n\n        if (notifications.length > 0) {\n            notifications.forEach(item => {\n                _handleRemoveNotifications(api.emit, item.id, helpers);\n            });\n        }\n      \n    }\n\n    return {\n        ERROR_NOTIFICATION_PROPS,\n        SUCCESS_NOTIFICATION_PROPS,\n        emitErrorNotification : _emitErrorNotification,\n        emitSuccessNotification : _emitSuccessNotification,\n        handleRemoveNotifications: _handleRemoveNotifications,\n        handleDeleteQueryNotifications: _handleDeleteQueryNotifications\n   };\n   \n }","sys_class_name":"sys_ux_client_script_include","sys_id":"53aaf8b777bc511023651605bc5a9911","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_53aaf8b777bc511023651605bc5a9911","sys_updated_by":"admin","api_name":"sn_cmdb_ws.cmdbMultisourceUtil","sys_created_on":"2022-07-26 18:38:38","name":"cmdbMultisourceUtil","sys_name":"cmdbMultisourceUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Response SLA\"\n    },\n    {\n        \"message\": \"Time to respond\"\n    },\n    {\n        \"message\": \"Resolution SLA\"\n    },\n    {\n        \"message\": \"Time to resolve\"\n    }\n]","access":"public","sys_mod_count":"108","includes":"","sys_updated_on":"2023-12-12 09:27:04","sys_tags":"","script":"function include({\n    imports\n}) {\n    class SOWRecordInformationUtilsSNC {\n\n        static async getSlaConfig(helpers) {\n            var config = [{\n                    \"configId\": \"af871ab3532730102d05ddeeff7b124f\",\n                    \"slaTimerLabel\": await helpers.translate(\"Response SLA\"),\n                    \"timeLabel\": await helpers.translate(\"Time to respond\")\n                },\n                {\n                    \"configId\": \"aca7d6b3532730102d05ddeeff7b12ec\",\n                    \"slaTimerLabel\": await helpers.translate(\"Resolution SLA\"),\n                    \"timeLabel\": await helpers.translate(\"Time to resolve\")\n                }\n            ];\n            return config;\n        };\n        static getSpIconMapping() {\n            return {\n                \"Microsoft Teams\": \"microsoft-teams-fill\",\n                \"Zoom\": \"zoom-outline\",\n                \"TwilioDirect\": \"twilio-outline\",\n                \"Cisco Webex\": \"user-group-outline\"\n            };\n        };\n    };\n\n    return SOWRecordInformationUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"55616816437431107f08ff53e9b8f24d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_55616816437431107f08ff53e9b8f24d","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWRecordInformationUtilsSNC","sys_created_on":"2023-08-23 17:16:17","name":"SOWRecordInformationUtilsSNC","sys_name":"SOWRecordInformationUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"There are overlapping dates between this rotation and existing rotations. If you continue, any existing rotations with matching dates will be replaced.\"\n    },\n    {\n        \"message\": \"Selected dates overlap with existing rotations. Continuing will replace agents assigned to the overlapping rotations with agents assigned to this rotation on overlapping dates.\"\n    }\n]","access":"public","sys_mod_count":"50","includes":"","sys_updated_on":"2024-10-11 17:46:13","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    const {\n        NowDateTime\n    } = imports['sn_uxf.core_libraries']();\n\n    const convertDateFormat = function(dateStr) {\n        if (!dateStr || dateStr === '') return '';\n        return NowDateTime(dateStr).format('YYYY-MM-DD') + '';\n    };\n\n    const getInfiniteDateAsString = function() {\n        return '9999-12-31';\n    };\n\n    const doesOverlap = async function(newBucket, existingBuckets, helpers, api) {\n        var message = '';\n        for (let i = 0; i < existingBuckets.length; i++) {\n            let existingStart = convertDateFormat(existingBuckets[i].start),\n                existingEnd = convertDateFormat(existingBuckets[i].end);\n            newBucket.start = convertDateFormat(newBucket.start), newBucket.end = convertDateFormat(newBucket.end);\n            // If existing range has no end date, consider it as infinity\n            if (!existingEnd) {\n                existingEnd = getInfiniteDateAsString();\n            }\n            // If new range has no end date, consider it as infinity\n            if (!newBucket.end) {\n                newBucket.end = getInfiniteDateAsString();\n            }\n            // Otherwise, compare both start and end dates\n            if (existingStart >= newBucket.start && existingEnd <= newBucket.end) {\n                message = await helpers.translate(\"There are overlapping dates between this rotation and existing rotations. If you continue, any existing rotations with matching dates will be replaced.\");\n                break;\n            }\n            if (newBucket.start <= existingEnd && newBucket.end >= existingStart) {\n                message = await helpers.translate(\"Selected dates overlap with existing rotations. Continuing will replace agents assigned to the overlapping rotations with agents assigned to this rotation on overlapping dates.\");\n                break;\n            }\n        }\n        if (message) {\n            //Just for loading effect\n            if (api.state.bucketOverlappingMessage) {\n                api.setState('bucketOverlappingMessage', '')\n                helpers.timing.setTimeout(() => {\n                    api.setState('bucketOverlappingMessage', message);\n                }, 1000);\n            } else {\n                api.setState('bucketOverlappingMessage', message);\n            }\n        } else {\n            api.setState('bucketOverlappingMessage', '');\n        }\n    };\n\n    const compareObjects = function(obj1, obj2) {\n\n\n        /* Checking if the types and values of the two arguments are the same. */\n        if (obj1 === obj2) return true;\n\n\n        /* Checking if any arguments are null */\n        if (obj1 === null || obj2 === null) return false;\n\n        /* Checking if any argument is none object */\n        if (typeof obj1 !== 'object' || typeof obj2 !== 'object') return false;\n\n\n\n        /* Using Object.getOwnPropertyNames() method to return the list of the objects’ properties */\n        let obj1_keys = Object.getOwnPropertyNames(obj1);\n\n        let obj2_keys = Object.getOwnPropertyNames(obj2);\n\n\n\n        /* Checking if the objects' length are same*/\n        if (obj1_keys.length !== obj2_keys.length) return false;\n\n\n\n\n        /* Iterating through all the properties of the obj1 object with the for of method*/\n        for (let key of obj1_keys) {\n\n\n            /* Making sure that every property in the obj1 object also exists in obj2 object. */\n            if (!Object.hasOwn(obj2, key)) return false;\n\n\n            /* Using the compareObjects function recursively (calling itself) and passing the values of each property into it to check if they are equal. */\n            if (compareObjects(obj1[key], obj2[key]) === false) return false;\n\n        }\n\n\n\n        /* if no case matches, returning true */\n        return true;\n\n\n    };\n\n    const shiftDetailChanges = function(state) {\n        var shift_details_state_var = ['all_day_shift', 'shift_starts_iso', 'shift_ends_iso', 'repeat_type', 'repeat_number', 'day_selected', 'selected_timezone', 'repeats_until_iso', 'selected_holiday_schedule', 'start_date_iso'];\n        var initState = state.init_state || {};\n        var finalShiftState = {};\n        shift_details_state_var.forEach(detail => {\n            var initValue = initState[detail];\n            var currentValue = state[detail];\n            //avoid inital load\n            if ((typeof initValue !== 'undefined') && (typeof currentValue !== 'undefined') && (!compareObjects(initValue, currentValue))) {\n                if (detail == \"repeats_until_iso\") {\n                    finalShiftState[detail] = state[\"repeats_until\"];\n                } else {\n                    finalShiftState[detail] = state[detail];\n                }\n            } else {\n                if (finalShiftState.hasOwnProperty(detail))\n                    delete finalShiftState[detail];\n            }\n        });\n        return finalShiftState;\n    };\n\n    const fieldsComparator = function(obj, newObj, compare) {\n        var fieldsToCompare = ['sys_id', 'dow_for_rotate', 'reminder_lead_time', 'order', 'rotation_start_time', 'rotation_interval_type', 'rotation_interval_count'];\n\n        for (let fdx = 0; fdx < fieldsToCompare.length; fdx++) {\n            let field = fieldsToCompare[fdx];\n            if (!(field in obj)) return false;\n            if (!compare) newObj[field] = obj[field].value;\n            else {\n                if (!(field in newObj) || obj[field] != newObj[field].value) return false;\n            }\n        }\n\n        return true;\n    };\n\n    const compareShifts = function(a, b) {\n        if(compareObjects(a, b)) return true;\n\n        if (!a.hasOwnProperty('shifts') || !b.hasOwnProperty('shifts') ||\n            !a.shifts.hasOwnProperty('rosters') || !b.shifts.hasOwnProperty('rosters')) {\n            return false;\n        }\n\n        const rostersA = a.shifts.rosters;\n        const rostersB = b.shifts.rosters;\n\n        if (rostersA.length !== rostersB.length) return false;\n\n        if ((!rostersA.length || !rostersB.length) && (rostersA != rostersB)) return false;\n\n        const createMap = arr => arr.reduce((map, roster) => (map[roster.sys_id.value] = {}, map), {});\n\n        const jsonMap1 = createMap(rostersA);\n\n        if (!rostersA.every((roster, idx) => fieldsComparator(roster, jsonMap1[roster.sys_id.value], false))) return false;\n\n        return rostersB.every(roster => {\n            const rosterId = roster.sys_id.value;\n            return rosterId in jsonMap1 && fieldsComparator(jsonMap1[rosterId], roster, true);\n        });\n    };\n\n    return {\n        shiftDetailChanges: shiftDetailChanges,\n        compareShifts: compareShifts,\n        doesOverlap: doesOverlap,\n        compareObjects: compareObjects\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"560b3da97722b110d4fa1aceca5a9961","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_560b3da97722b110d4fa1aceca5a9961","sys_updated_by":"admin","api_name":"sn_uib_on_call.ShiftUtility","sys_created_on":"2023-11-16 16:04:07","name":"ShiftUtility","sys_name":"ShiftUtility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"1.0.0","required_translations":"","access":"public","sys_mod_count":"84","includes":"","sys_updated_on":"2022-10-05 15:46:50","sys_tags":"","script":"function include({ imports }) {\n    const buildDefaultRoutePayload = (route, defaultTargetRoute, event, domainId = undefined) => {\n        const { table, sysId, params, multiInstField, title, passiveNavigation, redirect, targetRoute, external } = _getPayloadParams(event, domainId);\n\n        return {\n            \"route\": route,\n            \"targetRoute\": (targetRoute || targetRoute === '') ? targetRoute : defaultTargetRoute, \n            \"fields\": { \"table\": table, \"sysId\": sysId },\n            \"params\": params,\n            \"redirect\": redirect,\n            \"passiveNavigation\": passiveNavigation,\n            \"title\": title,\n            \"multiInstField\": multiInstField,\n            \"external\": external\n        };\n    };\n\n    const routeMapping = (routeMap, defaultRoutePayload, event, domainId = undefined) => {\n        const { elementId, sourceActionId, table, sysId, params, multiInstField, title } = _getPayloadParams(event, domainId);\n        const { payload } = event;\n        var tableRoute;\n        if (routeMap)\n            tableRoute = routeMap[table];\n\n        var param_payload = defaultRoutePayload;\n        if (tableRoute && elementId) {\n            Object.keys(tableRoute).map((key) => {\n                if (elementId.includes(key) || (sourceActionId && sourceActionId.includes(key))) {\n                    param_payload = tableRoute[key].payload;\n                    var pattern = /\\{\\{([^}]+)\\}\\}/ig;\n                    var matches = param_payload.match(pattern);\n                    matches.forEach(\n                        function(token) {\n                            var paramKey = token.substr(2, token.length - 4);\n                            var newToken = \"\";\n                            if (payload.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.sysId\n                                newToken = payload[paramKey];\n                            } else if (payload.fields && payload.fields.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.fields.sysId\n                                newToken = payload.fields[paramKey];\n                            } else if (payload.params && payload.params.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.params.sysId\n                                newToken = payload.params[paramKey];\n                            } else if (paramKey == 'sysId') { //Handle case when param_payload come with \"sysId\" while event payload come with \"sys_id\"\n                                newToken = payload.hasOwnProperty('sys_id') ? payload['sys_id'] :\n                                        payload.fields && payload.fields.hasOwnProperty('sys_id') ? payload.fields['sys_id'] : \n                                        (payload.params && payload.params.hasOwnProperty('sys_id') ? payload.params['sys_id'] : '');\n                            } else if (paramKey == 'sys_id') { //Handle case when param_payload come with \"sys_id\" while event payload come with \"sysId\"\n                                newToken = payload.hasOwnProperty('sysId') ? payload['sysId'] :\n                                        payload.fields && payload.fields.hasOwnProperty('sysId') ? payload.fields['sysId'] : \n                                        (payload.params && payload.params.hasOwnProperty('sysId') ? payload.params['sysId'] : '');\n                            }\n                            param_payload = param_payload.replace(token, newToken);\n                        }\n                    );\n                    param_payload = JSON.parse(param_payload);\n                    if (param_payload.fields) \n                        param_payload.fields.sysId = sysId;\n                    param_payload.params = params;\n                    param_payload.multiInstField = multiInstField;\n                    param_payload.title = title;\n                    return param_payload;\n                }\n            });\n        }\n        return param_payload;\n    };\n\n    const _getPayloadParams = (event, domainId) => {\n        const { elementId, payload } = event;\n        const { fields, params, query, row, nativeEvent, redirect = false, targetRoute, external } = payload;\n        const sourceAction = payload.__sourceAction || {};\n        var table = payload.table || fields.table;\n        var sysId = payload.sysId || payload.sys_id || fields.sysId || fields.sys_id;\n        var title = payload.title;\n\n        const metaKeyPressed = nativeEvent && (nativeEvent.metaKey || nativeEvent.ctrlKey);\n\n        if (row) {\n            sysId = sysId || row.sys_id.value;\n            title = row.displayValue.value;\n        }\n\n        var multiInstField = sysId === '-1' ? \"sysId\" : \"\";\n\n        var outputPayloadParams = {};\n        if (params) {\n            outputPayloadParams = JSON.parse(JSON.stringify(params));\n            outputPayloadParams.extraParams = Object.keys(params).map((x) => { return `${x}/${params[x]}` }).join(\"/\");\n        }\n\n        if (query) {\n            outputPayloadParams.query = query;\n        }\n\n        // create or update `query` with domainId when state has domainId \n        if (domainId) {\n            if (!outputPayloadParams.query)\n                outputPayloadParams.query = '';\n\n            outputPayloadParams.query += (outputPayloadParams.query ? '^' : '') + 'sys_domain=' + domainId;            \n        }\n\n        var res = {};\n        res.elementId = elementId || payload.elementId;\n        res.sourceActionId = sourceAction.id;\n        res.table = table;\n        res.sysId = sysId;\n        res.params = outputPayloadParams;\n        res.title = title;\n        res.multiInstField = multiInstField;\n        res.external = external || \"\";\n\n        if (targetRoute || targetRoute === '') {\n            res.targetRoute = targetRoute;   \n        }\n\n        res.passiveNavigation = metaKeyPressed;\n        res.redirect = redirect;\n\n        return res;\n    };\n\n    return ({ routeMapping, buildDefaultRoutePayload });\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"58d17acf0b531010a8b1c96237673a68","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/71faafff04f12210559073c06a02f7a2","value":"71faafff04f12210559073c06a02f7a2"},"sys_update_name":"sys_ux_client_script_include_58d17acf0b531010a8b1c96237673a68","sys_updated_by":"admin","api_name":"global.recordRoutesMapping","sys_created_on":"2020-09-21 17:13:00","name":"recordRoutesMapping","sys_name":"recordRoutesMapping","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"8","includes":"e09dcd960b105210ced5480b383749ca","sys_updated_on":"2024-08-30 16:49:59","sys_tags":"","script":"function include({imports}) { \n    let SOWControllerSNC = imports['sn_sow.SOWControllerSNC']();\n    class SOWController extends SOWControllerSNC {\n    }\n    return SOWController;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"58dc81560b105210ced5480b383749fd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_58dc81560b105210ced5480b383749fd","sys_updated_by":"admin","api_name":"sn_sow.SOWController","sys_created_on":"2024-08-30 16:19:23","name":"SOWController","sys_name":"SOWController","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"18","includes":"","sys_updated_on":"2024-09-04 13:40:30","sys_tags":"","script":"function include({ imports }) {\n  const parseLookupData = (rowData, fields, showEmptyValues, emptyFieldValue, highlightedValues) => {\n    //preprocess highlighted Values\n    const hasHighlightedValues = highlightedValues && highlightedValues.length > 0;\n    const highlightedValuesMap = {};\n    if (hasHighlightedValues) {\n      highlightedValues.forEach(hv => {\n        highlightedValuesMap[hv.field] = {\n          type: 'highlighted-value',\n          label: hv.value,\n          color: hv.colorName,\n          variant: hv.variantName,\n          showIcon: hv.showIcon,\n          icon: hv.iconName,\n          status: hv.status\n        };\n      });\n    }\n\n    const parsedLookupData = fields.map(field => {\n      let fieldData = getDotWalkedValue(field, rowData);\n\n      if (!fieldData)\n        return null;\n\n      //highlighted values takes precedence\n      if (hasHighlightedValues && fieldData.field in highlightedValuesMap) {\n        return {\n          label: fieldData.label,\n          value: highlightedValuesMap[fieldData.field]\n        };\n      }\n\n      switch (fieldData.internalType) {\n        case 'ph_number': case 'phone_number_e164':\n          return {\n            label: fieldData.label,\n            value: fieldData.value ? {\n              linkType: 'phone',\n              label: fieldData.value,\n              type: 'text-link',\n              href: 'javascript:void(0)'\n            } : getEmptyFieldEntry(showEmptyValues, emptyFieldValue)\n          };\n        case 'reference':\n          return {\n            label: fieldData.label,\n            value: fieldData.value ? {\n              linkType: 'reference',\n              label: fieldData.displayValue,\n              value: fieldData.value,\n              referenceTable: fieldData.referenceTable || extractReferenceTableName(fieldData.__typename),\n              type: 'text-link',\n              href: 'javascript:void(0)'\n            } : getEmptyFieldEntry(showEmptyValues, emptyFieldValue)\n          };\n        case 'email':\n          return {\n            label: fieldData.label,\n            value: fieldData.value ? {\n              linkType: 'email',\n              label: fieldData.value,\n              type: 'text-link',\n              href: 'javascript:void(0)'\n            } : getEmptyFieldEntry(showEmptyValues, emptyFieldValue)\n          };\n        default:\n          return {\n            label: fieldData.label,\n            value: fieldData.value ? fieldData.displayValue : (showEmptyValues ? emptyFieldValue : null),\n            type: 'string'\n          };\n      }\n    }).filter(e => !!(e && e.value));\n    return parsedLookupData;\n  };\n\n  function getEmptyFieldEntry(showEmptyValues, emptyFieldValue) {\n    return showEmptyValues ? {\n      label: emptyFieldValue,\n      value: emptyFieldValue,\n      type: 'string'\n    } : null;\n  }\n\n  function getDotWalkedValue(field, data) {\n    // Return fieldData if field is not dot-walked\n    if (!field.includes(\".\") || data._isAdvancedSearch) {\n      return { field, ...data[field] };\n    }\n\n    // Build key path into data object from dot-walked field path\n    const keyPath = field.split('.').join('._reference.').split('.');\n    // Find the nested value in the object using the key path\n    const value = keyPath.reduce((dataObject, key) => {\n      return dataObject[key];\n    }, data);\n    return { field, ...value };\n  }\n\n  function extractReferenceTableName(__typename) {\n    //e.x For 'Caller' field on incident record, __typename returns as 'GlideRecord_ReferenceFieldType_sys_user'\n    return __typename.replace('GlideRecord_ReferenceFieldType_', '');\n  }\n\n  return ({ parseLookupData });\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"58f42a3677f72110a8b1f335ae5a9999","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3552a6ee392fa110740d28303df22c0a","value":"3552a6ee392fa110740d28303df22c0a"},"sys_update_name":"sys_ux_client_script_include_58f42a3677f72110a8b1f335ae5a9999","sys_updated_by":"admin","api_name":"sn_record_lookup.lookupDataParser","sys_created_on":"2023-07-06 23:15:37","name":"lookupDataParser","sys_name":"lookupDataParser","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3552a6ee392fa110740d28303df22c0a","value":"3552a6ee392fa110740d28303df22c0a"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"23","includes":"","sys_updated_on":"2024-02-07 11:43:51","sys_tags":"","script":"function include({ imports }) {\n\n    const reloadListWithFilters = (stepValue, kpiSearchTerm, userName) => {\n\n        let stateValues = { showBookmarked: false, filterCondition: '' };\n\n        switch (stepValue) {\n            case 'all':\n                if (kpiSearchTerm)\n                    stateValues['filterCondition'] = 'descriptionLIKE' + kpiSearchTerm + '^ORnameLIKE' + kpiSearchTerm;\n                else\n                    stateValues['filterCondition'] = '';\n                break;\n            case 'created_by_me':\n                stateValues['showBookmarked'] = false;\n                if (kpiSearchTerm)\n                    stateValues['filterCondition'] = 'descriptionLIKE' + kpiSearchTerm + '^ORnameLIKE' + kpiSearchTerm + '^sys_created_by=' + userName;\n                else\n                    stateValues['filterCondition'] = 'sys_created_by=' + userName;\n                break;\n            case 'bookmarked':\n                stateValues['showBookmarked'] = true;\n                if (kpiSearchTerm)\n                    stateValues['filterCondition'] = 'descriptionLIKE' + kpiSearchTerm + '^ORnameLIKE' + kpiSearchTerm;\n                break;\n         default:\n                if (kpiSearchTerm)\n                    stateValues['filterCondition'] = 'descriptionLIKE' + kpiSearchTerm + '^ORnameLIKE' + kpiSearchTerm;\n        }\n\n        return stateValues;\n    }\n\n    return {\n        reloadListWithFilters\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"59c9674460031110f87729648b07b76b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/513b0006c3610110f2ace0dd9740dd12","value":"513b0006c3610110f2ace0dd9740dd12"},"sys_update_name":"sys_ux_client_script_include_59c9674460031110f87729648b07b76b","sys_updated_by":"admin","api_name":"sn_app_analytics_w.GenerateFilter","sys_created_on":"2022-11-04 12:06:27","name":"GenerateFilter","sys_name":"GenerateFilter","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/513b0006c3610110f2ace0dd9740dd12","value":"513b0006c3610110f2ace0dd9740dd12"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2022-09-13 14:42:56","sys_tags":"","script":"function include({\n    imports\n}) {\n    return {\n        navigateTo: _navigateTo,\n        getHighlightedTextColor: _getHighlightedTextColor,\n        getHighlightedTextIcon: _getHighlightedTextIcon\n    };\n\n//  Get Configure and Non-Configure highlighted text color\n function _getHighlightedTextColor (api) { \n    var state = api.context.props.payload.props_details.compliance_state;\n    if (state == \"Compliant\") {\n        api.setState(\"color\",  \"green\");\n    } else if (state == \"Not compliant\") {\n        api.setState(\"color\", \"warning\");\n    } \n }\n\n//  Get Configure and Non-Configure highlighted text icon\n function  _getHighlightedTextIcon (api) {\n    var state = api.context.props.payload.props_details.compliance_state;\n    if (state == \"Compliant\") {\n        api.setState(\"icon\",  \"Circle Check Outline\");\n    } else if (state == \"Not compliant\") {\n        api.setState(\"icon\",  \"Diamond Exclamation Outline\");\n    } \n}\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"5a6b546ba9f91110f8773bf0fd83cb99","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_update_name":"sys_ux_client_script_include_5a6b546ba9f91110f8773bf0fd83cb99","sys_updated_by":"maint","api_name":"sn_vsc.ConfigureTextUtil","sys_created_on":"2022-09-13 14:42:56","name":"ConfigureTextUtil","sys_name":"ConfigureTextUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Incidents assigned to you\"\n    },\n    {\n        \"message\": \"Incidents assigned to your team\"\n    },\n    {\n        \"message\": \"Problems assigned to you\"\n    },\n    {\n        \"message\": \"Problems assigned to your team\"\n    },\n    {\n        \"message\": \"Changes assigned to you\"\n    },\n    {\n        \"message\": \"Changes assigned to your team\"\n    },\n    {\n        \"message\": \"Tasks assigned to you\"\n    },\n    {\n        \"message\": \"Tasks assigned to your team\"\n    },\n    {\n        \"message\": \"Tasks delegated to you\"\n    },\n    {\n        \"message\": \"Your work\"\n    },\n    {\n        \"message\": \"Your team's work\"\n    }\n]","access":"package_private","sys_mod_count":"96","includes":"","sys_updated_on":"2025-01-09 08:39:28","sys_tags":"","script":"function include({ imports }) {\n\n    class SOWLandingPageTier2UtilsSNC {\n\n        /**\n         * Returns visualization config's\n         * @param {object} helpers\n         * @param {string} mode\n         * @param {number} conditionalRecordCount\n         * @return object\n         */\n        static async getVisualizationConfig(helpers, mode, conditionalRecordCount) {\n            const visualizationConfig = [{\n                \"id\": \"incidentAssigned\",\n                \"tableName\": \"incident\",\n                \"tableDisplayValue\": \"Incident\",\n                \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state!=6\",\n                \"myTeamQuery\": \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^state!=6\",\n                \"header\": mode == 'your_work' ? await helpers.translate(\"Incidents assigned to you\") : await helpers.translate(\"Incidents assigned to your team\"),\n                \"groupByField\": \"state\",\n                \"evamId\": \"01a404e8b7203010e69dbc16de11a93f\",\n                \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_incident_write\"] : [\"itil\",\"sn_incident_read\"],\n            },\n            {\n                \"id\": \"problemsAssigned\",\n                \"tableName\": \"problem\",\n                \"tableDisplayValue\": \"Problem\",\n                \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe\",\n                \"myTeamQuery\": \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\",\n                \"header\": mode == 'your_work' ? await helpers.translate(\"Problems assigned to you\") : await helpers.translate(\"Problems assigned to your team\"),\n                \"groupByField\": \"state\",\n                \"evamId\": \"5f0697b8f49bc510f8773ad5bd0ae292\",\n                \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                \"roles\":mode == \"your_work\" ? [\"itil\",\"problem_coordinator\"] : [\"itil\",\"sn_problem_read\",\"problem_task_analyst\"],\n            },\n            {\n                \"id\": \"changesAssigned\",\n                \"tableName\": \"change_request\",\n                \"tableDisplayValue\": \"Change Request\",\n                \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe\",\n                \"myTeamQuery\": \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\",\n                \"header\": mode == 'your_work' ? await helpers.translate(\"Changes assigned to you\") : await helpers.translate(\"Changes assigned to your team\"),\n                \"groupByField\": \"state\",\n                \"evamId\": \"e1f06c4194130110f87765e94545da91\",\n                \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_change_write\"] : [\"itil\",\"sn_change_read\"],\n            },\n            {\n                \"id\": \"taskAssigned\",\n                \"tableName\": \"task\",\n                \"tableDisplayValue\": \"Task\",\n                \"myWorkQuery\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^sys_class_name=incident_task^ORsys_class_name=problem_task^ORsys_class_name=change_task^ORsys_class_name=sc_task\",\n                \"myTeamQuery\": \"active=true^assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744^sys_class_name=incident_task^ORsys_class_name=problem_task^ORsys_class_name=change_task^ORsys_class_name=sc_task\",\n                \"header\": mode == 'your_work' ? await helpers.translate(\"Tasks assigned to you\") : await helpers.translate(\"Tasks assigned to your team\"),\n                \"groupByField\": \"sys_class_name\",\n                \"evamId\": \"615d205d94df0110f87765e94545da03\",\n                \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                \"roles\":mode == \"your_work\" ? [\"itil\",\"sn_incident_write\",\"sn_incident_task_assigned_user\",\"problem_task_analyst\",\"sn_change_write\",\"sn_change_task_assigned_user\",\"sn_request_write\"] : [\"itil\",\"sn_incident_read\",\"sn_incident_task_assigned_user\",\"sn_problem_read\",\"problem_task_analyst\",\"sn_change_read\",\"sn_change_task_assigned_user\",\"sn_request_read\",\"catalog\"],\n            }];\n\n            if(mode=='your_work' && conditionalRecordCount>0){\n                const conditionalConfig = await this.getConditionalVisualizationConfig(helpers);\n                visualizationConfig.push(conditionalConfig);\n            }\n\n            return visualizationConfig;\n        }\n        \n\n        /**\n         * Returns conditional visualization config\n         * @param {object} helpers\n         * @return object\n         */\n         static async getConditionalVisualizationConfig(helpers) {\n            const visualizationConfig = {\n                    \"id\": \"delegated_task\",\n                    \"tableName\": \"task\",\n                    \"tableDisplayValue\": \"Task\",\n                    \"myWorkQuery\": \"active=true^assigned_to=javascript:getMyAssignments()^assigned_to.sys_id!=javascript: gs.getUserID()^sys_class_name=incident^ORsys_class_name=problem^ORsys_class_name=change_request^ORsys_class_name=incident_task^ORsys_class_name=problem_task^ORsys_class_name=change_task^ORsys_class_name=sc_task\",\n                    \"myTeamQuery\": \"active=true^assigned_to=javascript:getMyAssignments()^assigned_to.sys_id!=javascript: gs.getUserID()^sys_class_name=incident^ORsys_class_name=problem^ORsys_class_name=change_request^ORsys_class_name=incident_task^ORsys_class_name=problem_task^ORsys_class_name=change_task^ORsys_class_name=sc_task\",\n                    \"listView\": \"sow_landing_page_assigned\",\n                    \"header\": await helpers.translate(\"Tasks delegated to you\"),\n                    \"groupByField\": \"sys_class_name\",\n                    \"evamId\": \"615d205d94df0110f87765e94545da03\",\n                    \"updated_on\": \"^ORDERBYDESCsys_updated_on\",\n                    \"roles\":[\"itil\", \"sn_incident_write\", \"problem_coordinator\", \"sn_change_write\",\"sn_incident_task_assigned_user\", \"problem_task_analyst\", \"sn_change_task_assigned_user\", \"sn_request_write\"],\n                };\n            return visualizationConfig;\n        }\n\n        /**\n         * Build visualization card configurations (Dounut)\n         * @param {object} helpers\n         * @param {string} mode\n         * @param {number} conditionalRecordCount\n         * @return object\n         */\n        static async getDonutConfig(helpers, mode, conditionalRecordCount,api) {\n            var donutConfig = [];\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                var obj = {};\n                var visibility = api ? this.containsRole(api.context.session.user.roles, visualizationConfig[i][\"roles\"]) : true;\n                if(visibility){\n                    obj = {\n                        \"id\": visualizationConfig[i].id,\n                        \"header\": visualizationConfig[i].header,\n                        \"evamId\": visualizationConfig[i].evamId,\n                        \"updated_on\": visualizationConfig[i][\"updated_on\"],\n                        \"datasource\": [{\n                            \"isDatabaseView\": false,\n                            \"allowRealTime\": true,\n                            \"sourceType\": \"table\",\n                            \"label\": {\n                                \"message\": visualizationConfig[i].tableDisplayValue\n                            },\n                            \"tableOrViewName\": visualizationConfig[i].tableName,\n                            \"filterQuery\": mode == 'your_work' ? visualizationConfig[i].myWorkQuery : visualizationConfig[i].myTeamQuery,\n                            \"id\": visualizationConfig[i].id\n                        }],\n                        \"metric\": [{\n                            \"dataSource\": visualizationConfig[i].id,\n                            \"id\": visualizationConfig[i].id + \"metric\",\n                            \"aggregateFunction\": \"COUNT\",\n                            \"numberFormat\": {\n                                \"customFormat\": false\n                            },\n                            \"axisId\": \"primary\"\n                        }],\n                        \"groupBy\": [{\n                            \"maxNumberOfGroups\": \"ALL\",\n                            \"numberOfGroupsBasedOn\": \"NO_OF_GROUP_BASED_ON_PER_METRIC\",\n                            \"showOthers\": false,\n                            \"groupBy\": [{\n                                \"dataSource\": visualizationConfig[i].id,\n                                \"groupByField\": visualizationConfig[i].groupByField,\n                                \"isRange\": false,\n                                \"isPaBucket\": false\n                            }]\n                        }]\n                    };\n                    donutConfig.push(obj);\n                }\n            }\n            return donutConfig;\n        }\n\n        /**\n         * Returns initial visualization config\n         * @param {object} helpers\n         * @return object\n         */\n        static getInitialVisualizationConfig() {\n            const visualizationConfig = {\n                \"table\": \"incident\",\n                \"elementId\": \"incidentAssigned\",\n                \"title\": \"Incidents assigned to you\",\n                \"query\": \"active=true^assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe^state!=6^ORDERBYDESC$AGGREGATE$^ORDERBYDESCsys_updated_on\",\n                \"evamId\": \"01a404e8b7203010e69dbc16de11a93f\",\n                \"recordCount\": 0,\n                \"groupByField\": \"state\"\n            };\n            return visualizationConfig;\n        }\n\n        /**\n         * Returns configuration for work persona dropdown\n         * @param {object} helpers\n         * @return {object}\n         */\n        static async getWorkPersonaConfig(helpers) {\n            return {\n                \"items\": [\n                    {\n                        \"id\": \"your_work\",\n                        \"label\": await helpers.translate(\"Your work\")\n                    },\n                    {\n                        \"id\": \"your_team_work\",\n                        \"label\": await helpers.translate(\"Your team's work\")\n                    }],\n                \"defaultSelected\": [\"your_work\"]\n            }\n        }\n\n        static containsRole(userRoles, widgetRoles) {\n            if(userRoles.includes(\"admin\"))\n                return true;\n            return userRoles.some(item => widgetRoles.includes(item));\n        }\n\n        static async fetchTitle(table, nameValueMap, groupMode = false, elementId) {\n            if(table === \"task\") {\n                return this.getLabelMaps(table, nameValueMap['sys_class_name'], groupMode, elementId);\n            }\n            return this.getLabelMaps(table, nameValueMap['state'], groupMode, elementId);\n        }\n\n        static getLabelMaps(table, selectedField, groupMode = false, elementId) {\n            if(selectedField == undefined){\n                selectedField = 'all';\n             }\n            const labelMap = {\n                'incident': {\n                    '1': 'New incidents',\n                    '2': 'In Progress incidents',\n                    '3': 'On Hold incidents',\n                    '6': 'Resolved incidents',\n                    'all':'Incidents'\n                },\n                'change_request': {\n                    '0': 'In Review changes',\n                    '-1': 'Implement changes',\n                    '-2': 'Scheduled changes',\n                    '-3': 'Authorize changes',\n                    '-4': 'Assess changes',\n                    '-5': 'New changes',\n                    'all':'Changes'\n                },\n                'problem': {\n                    '101': 'New problems',\n                    '102': 'Assess problems',\n                    '106': 'Resolved problems',\n                    '104': 'Fix in Progress problems',\n                    '103': 'Root Cause Analysis problems',\n                    'all':'Problems'\n                },\n                'task': {\n                    'incident_task': 'Incident tasks',\n                    'problem_task': 'Problem tasks',\n                    'change_task': 'Change tasks',\n                    'sc_task': 'Catalog tasks',\n                    'incident': 'Incidents',\n                    'problem': 'Problems',\n                    'change_request': 'Change requests',\n                    'all':'Tasks'\n                }\n            };\n            if(elementId === 'delegated_task')\n                return labelMap[table][selectedField] + ' delegated to you';\n            if (groupMode)\n                return labelMap[table][selectedField] + ' assigned to your team';\n            return labelMap[table][selectedField] + ' assigned to you';\n        }\n\n        static async getVisualisationCardConfig(id, helpers, mode, conditionalRecordCount) {\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n            var currentVizSelection = {};\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                if(visualizationConfig[i].id === id) {\n                    currentVizSelection.table = visualizationConfig[i].tableName;\n                    currentVizSelection.query = mode === \"your_team_work\" ? visualizationConfig[i].myTeamQuery + visualizationConfig[i][\"updated_on\"] : visualizationConfig[i].myWorkQuery + visualizationConfig[i][\"updated_on\"]; \n                    currentVizSelection.evamId = visualizationConfig[i].evamId;\n                    currentVizSelection.elementId = visualizationConfig[i].id;\n                    currentVizSelection.title = visualizationConfig[i].header;\n                    break;\n                }\n            }\n            return currentVizSelection;\n        }\n\n        static async getVisualisationCardQuery(vizSelection, nameValueMap, helpers, mode, conditionalRecordCount) {\n            const fieldMap = {\n                'State': 'state',\n                'Task type': 'sys_class_name'\n            };\n            var field = fieldMap[vizSelection.groupBy] !== undefined ? fieldMap[vizSelection.groupBy] : vizSelection.groupByField;\n            var value = nameValueMap[field];\n            var query = '';\n            var visualizationConfig = await this.getVisualizationConfig(helpers, mode, conditionalRecordCount);\n            for (var i = 0; i < visualizationConfig.length; i++) {\n                if(visualizationConfig[i].id === vizSelection.elementId) {\n                    query = mode === \"your_team_work\" ? visualizationConfig[i].myTeamQuery : visualizationConfig[i].myWorkQuery; \n                    break;\n                }\n            }\n            if (Array.isArray(value)) {\n                for (let index in value)\n                    query += '^' + field + value[index];\n            } else {\n                if (value.includes('='))\n                    query += '^' + field + value;\n                else\n                    query += '^' + field + '=' + value;\n            }\n            return query + visualizationConfig[0][\"updated_on\"];\n        }\n    }\n\n    return SOWLandingPageTier2UtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"5b80cf8e530301103eacddeeff7b12f6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_5b80cf8e530301103eacddeeff7b12f6","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWLandingPageTier2UtilsSNC","sys_created_on":"2022-04-25 18:01:51","name":"SOWLandingPageTier2UtilsSNC","sys_name":"SOWLandingPageTier2UtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"26","includes":"","sys_updated_on":"2023-09-12 23:55:33","sys_tags":"","script":"/**\t\n * userRoleUtils\t\n * @param args\t\n * @return {{hasCmdbAdminOrAdminOrMaint: (function(*): boolean)}}\t\n */\t\nfunction include() {\t\n\tconst CMDB_ADMIN = 'sn_cmdb_admin';\t\n\tconst CMDB_EDITOR = 'sn_cmdb_editor';\t\n        const MS_ADMIN = 'cmdb_ms_admin';\n        const MS_EDITOR = 'cmdb_ms_editor';\n        const MS_USER = 'cmdb_ms_user';\n        const DATA_MANAGER_ADMIN = 'data_manager_admin';\n\tconst ADMIN = 'admin';\t\n\tconst MAINT = 'maint';\t\n        const ITIL = 'itil';\n        const ITIL_ADMIN = 'itil_admin';\n        const ASSET = 'asset';\n        const CMDB_INST_ADMIN = 'cmdb_inst_admin';\n\treturn {\t\t\n\t\thasCmdbEditor: function (roles) {\t\n\t\t\treturn roles.includes(CMDB_EDITOR);\t\n\t\t},\t\n\t\thasMsUser: function (roles) {\t\n\t\t\treturn roles.includes(MS_USER);\t\n\t\t},\t\n\t\thasMsEditor: function (roles) {\t\n\t\t\treturn roles.includes(MS_EDITOR);\t\n\t\t},\t\n\t\thasMsAdmin: function (roles) {\t\n\t\t\treturn roles.includes(MS_ADMIN);\t\n\t\t},\t\n                hasItil: function(roles) {\n                         return roles.includes(ITIL);\n                },\n                hasDataManagerAdminOrAdminOrMaint: function(roles) {\n                          return roles.includes(DATA_MANAGER_ADMIN) || roles.includes(ADMIN) || roles.includes(MAINT);\n                },\n\t\thasCmdbAdminOrAdminOrMaint: function (roles) {\n\t\t\treturn roles.includes(CMDB_ADMIN) || roles.includes(ADMIN) || roles.includes(MAINT);\t\n\t\t},\n               hasAdminOrMaint: function (roles) {\t\n\t\t\treturn roles.includes(ADMIN) || roles.includes(MAINT);\t\n\t\t},\n               hasCmdbInstAdmin: function(roles) {\n                        return roles.includes(CMDB_INST_ADMIN);       \n               }\n\t};\t\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"5c76a44f8f72a410960c53ac37bdee5b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_5c76a44f8f72a410960c53ac37bdee5b","sys_updated_by":"admin","api_name":"sn_cmdb_ws.userRoleUtils","sys_created_on":"2021-03-14 06:45:44","name":"userRoleUtils","sys_name":"userRoleUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"56","includes":"","sys_updated_on":"2023-05-17 10:18:44","sys_tags":"","script":"\nfunction include() {\n\tconst getNumberSeparators = () => {\n\t\treturn {\n\t\t\tdecimal: '.',\n\t\t\tgrouping: ',',\n\t\t};\n\t};\n\n\tconst getI18nNumber = (number = 0, locale = 'en-US') => {\n\t\tconst separators = getNumberSeparators();\n\t\t// Because we use custom formatiing, we convert to a known format and\n\t\t// replace the separators manually\n\t\treturn new Intl.NumberFormat(locale).format(number)\n\t\t\t.replace(',', separators.grouping)\n\t\t\t.replace('.', separators.decimal);\n\t};\n\n\tconst formatNumber = (number = 0, options = {}) => {\n\t\tconst {\n\t\t\tunits: {\n\t\t\t\tk = 'k',\n\t\t\t\tm = 'm',\n\t\t\t\tb = 'b',\n\t\t\t} = {},\n\t\t\tlocale = 'en-US',\n\t\t} = options;\n\n\t\t// If we need to display the full number, then just display the number\n\t\tif (options.full)\n\t\t\treturn getI18nNumber(number, locale);\n\n\t\tif (number >= 10 ** 9)\n\t\t\treturn getI18nNumber(Math.round(number / (10 ** 8)) / 10, locale) + b;\n\n\t\tif (number >= 10 ** 6)\n\t\t\treturn getI18nNumber(Math.round(number / (10 ** 5)) / 10, locale) + m;\n\n\t\tif (number >= 10 ** 3)\n\t\t\treturn getI18nNumber(Math.round(number / (10 ** 2)) / 10, locale) + k;\n\n\t\treturn getI18nNumber(number, locale);\n\t};\n\n\tconst formatDuration = (milliseconds, options = {}) => {\n\t\tconst {\n\t\t\tcount = 1,\n\t\t\tunits: {\n\t\t\t\ts = 's',\n\t\t\t\tm = 'm',\n\t\t\t\th = 'h',\n\t\t\t\td = 'd',\n\t\t\t} = {},\n\t\t} = options;\n\t\tconst final = [];\n\t\tlet days; let hours; let minutes; let\n\t\t\tseconds;\n\n\t\t// If milliseconds comes as 0, just return '0s'\n\t\tif (!milliseconds)\n\t\t\treturn '0' + s;\n\n\n\t\tseconds = Math.floor(milliseconds / 1000);\n\t\tminutes = Math.floor(seconds / 60);\n\t\tseconds %= 60;\n\t\thours = Math.floor(minutes / 60);\n\t\tminutes %= 60;\n\t\tdays = Math.floor(hours / 24);\n\t\thours %= 24;\n\n\t\tif (days)\n\t\t\tfinal.push(days + d);\n\t\tif (hours)\n\t\t\tfinal.push(hours + h);\n\t\tif (minutes)\n\t\t\tfinal.push(minutes + m);\n\t\tif (seconds)\n\t\t\tfinal.push(seconds + s);\n\n\t\treturn final.slice(0, count).join(' ');\n\t};\n\n\tconst getNewCIMFormPayload = (input) => {\n\t\tconst modelDefinitionId = input.modelDefinitionId;\n\t\tconst domain = input.domain;\n\t\treturn {\n\t\t\tredirect: true,\n\t\t\troute: 'record',\n\t\t\tfields: {\n\t\t\t\ttable: 'sn_cim_register',\n\t\t\t\tsysId: '-1',\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tquery: `parent=${modelDefinitionId}^source_id=${modelDefinitionId}^source_table=promin_project^sys_domain=${domain}`,\n\t\t\t\tselectedTabIndex: '0',\n\t\t\t},\n\t\t};\n\t};\n\tconst getNewCOEFormPayload = (input) => {\n\t\treturn {\n\t\t\tredirect: true,\n\t\t\troute: 'record',\n\t\t\tfields: {\n\t\t\t\ttable: 'sn_ac_automation_request',\n\t\t\t\tsysId: '-1',\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\tquery: `source_table=${input.sourceTable}^source_record=${input.sourceRecord}^intake_source=process_opt`,\n\t\t\t\tselectedTabIndex: '0',\n\t\t\t},\n\t\t};\n\t};\n\n\tconst getEntityName = (entity) => {\n\t\treturn entity.name;\n\t};\n\n\tconst getTransitionActivityLabel = (item, nodes, entities) => {\n\t\tconst from = nodes[item.from] || {};\n\t\tconst to = nodes[item.to] || {};\n\t\tconst showEntityName = Object.values(entities).length > 1;\n\n\t\tif (from.entityId === to.entityId)\n\t\t\treturn from.fieldLabel + ' - ' + to.fieldLabel + (showEntityName ? ' (' + getEntityName(entities[to.entityId]) + ')' : '');\n\n\t\treturn from.fieldLabel + ' (' + getEntityName(entities[from.entityId]) + ') - ' + to.fieldLabel + ' (' + getEntityName(entities[to.entityId]) + ')';\n\t};\n\n\tconst makeTransitions = ({\n\t\tedges,\n\t\tnodes,\n\t\tentities,\n\t\ttype,\n\t\tmetric,\n\t\tsearch,\n\t\tincludeStartStop,\n\t}) => {\n\t\tconst allEdges = edges.reduce((acc, item) => {\n\t\t\tconst nodeFrom = nodes[item.from] || {};\n\t\t\tconst nodeTo = nodes[item.to] || {};\n\t\t\tconst label = nodeFrom.label + ' - ' + nodeTo.label;\n\n\t\t\t// Transitions are filtered according to the following rules:\n\t\t\t// 1. Their `label` must match (at least partially) the `search` term\n\t\t\t// 2. The `type` from state is equal to `ALL_TYPES_ID` or to the transition's `from.activityId` and `to.activityId`\n\t\t\t// 3. They are not \"start/stop\" transitions depending if the `includeStartStop` flag is false\n\t\t\tif (\n\t\t\t\tlabel.toLowerCase().includes(search.toLowerCase()) &&\n\t\t\t\t\t\t\t(type === 'ALL' || (type === nodeFrom.activityId && type === nodeTo.activityId)) &&\n\t\t\t\t\t\t\t(includeStartStop || (!nodeFrom.isStart && !nodeFrom.isEnd && !nodeTo.isStart && !nodeTo.isEnd))\n\t\t\t) {\n\t\t\t\tconst activityLabel = getTransitionActivityLabel(item, nodes, entities);\n\t\t\t\tacc.push({\n\t\t\t\t\t...item,\n\t\t\t\t\tlabel,\n\t\t\t\t\tactivityLabel,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t}, []);\n\n\t\treturn allEdges.sort((a, b) => {\n\t\t\treturn b[metric] - a[metric];\n\t\t});\n\t};\n\n\tconst getTransitions = ({\n\t\ttransitions,\n\t\tnodes,\n\t\tprojectEntities,\n\n\t\t// Pagination\n\t\titemsPerPage,\n\t\ttotalPages,\n\t\tcurrentPage,\n\t\tcaseCount,\n\t\tversionId,\n\t}) => {\n\t\t// Get the items\n\t\tconst currentTransitions = transitions.slice(itemsPerPage * currentPage, itemsPerPage * (currentPage + 1));\n\t\treturn {\n\t\t\tpage_cursor: `page-${currentPage}`,\n\t\t\tpage_size: itemsPerPage,\n\t\t\tpage_number: currentPage,\n\t\t\tis_last_page: (currentPage === totalPages - 1),\n\t\t\titems: currentTransitions.map(item => ({\n\t\t\t\ttemplate: 'sn-promin-transition-item',\n\t\t\t\tpropValues: {\n\t\t\t\t\titem,\n\t\t\t\t\tnodes,\n\t\t\t\t\tprojectEntities,\n\t\t\t\t\tcaseCount,\n\t\t\t\t\tversionId,\n\t\t\t\t},\n\t\t\t})),\n\t\t};\n\t};\n\n\tconst getRootModel = ({\n\t\tprojectEntities,\n\t\taggregates,\n\t}) => {\n\t\tconst rootEntity = (projectEntities || []).find(entity => entity.parentId === null); // To get root entity\n\t\tconst rootAggregate = (aggregates || []).find(aggregate => aggregate.entityId === rootEntity.entityId);\n\n\t\treturn {\n\t\t\trootEntity,\n\t\t\trootAggregate,\n\t\t};\n\t};\n\n\n\tfunction getWindowObject() {\n\t\tconst fnConstr = (function () {}).constructor;\n\t\treturn fnConstr('return this')();\n\t}\n\n\treturn ({\n\t\tformatNumber: formatNumber,\n\t\tformatDuration: formatDuration,\n\t\tgetNewCIMFormPayload: getNewCIMFormPayload,\n\t\tgetNewCOEFormPayload: getNewCOEFormPayload,\n\t\tmakeTransitions: makeTransitions,\n\t\tgetTransitions: getTransitions,\n\t\tgetRootModel: getRootModel,\n\t\tgetEntityName: getEntityName,\n\t\tgetTransitionActivityLabel: getTransitionActivityLabel,\n\t\tgetWindowObject: getWindowObject,\n\t});\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"5d7619b953022010e7cdddeeff7b12f5","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/885d9eb1db6710104fcdebca13961927","value":"885d9eb1db6710104fcdebca13961927"},"sys_update_name":"sys_ux_client_script_include_5d7619b953022010e7cdddeeff7b12f5","sys_updated_by":"admin","api_name":"global.prominUtils","sys_created_on":"2021-02-01 06:26:23","name":"prominUtils","sys_name":"prominUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/885d9eb1db6710104fcdebca13961927","value":"885d9eb1db6710104fcdebca13961927"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"6","includes":"17ad952a533cb1102f10ddeeff7b129b","sys_updated_on":"2023-08-24 17:20:38","sys_tags":"","script":"function include({\n    imports\n}) { \n    let sowIncidentImpactGeomapUtilsSNC = imports['sn_sow_inc.SowIncidentImpactGeomapUtilsSNC']();\n    class SowIncidentImpactGeomapUtils extends sowIncidentImpactGeomapUtilsSNC {\n\n    }\n    return SowIncidentImpactGeomapUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"5e4665aa533cb1102f10ddeeff7b12e8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_5e4665aa533cb1102f10ddeeff7b12e8","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentImpactGeomapUtils","sys_created_on":"2023-08-24 17:01:02","name":"SowIncidentImpactGeomapUtils","sys_name":"SowIncidentImpactGeomapUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Email sent\"\n    },\n    {\n        \"message\": \"{0}\"\n    }\n]","access":"public","sys_mod_count":"341","includes":"","sys_updated_on":"2024-10-07 12:10:55","sys_tags":"","script":"function include(proxyArg, params) {\n  const {\n      api,\n      event,\n      helpers,\n      imports\n  } = params;\n  const SECONDARY_ACTION_CLICKED = \"NOW_DROPDOWN#ITEM_CLICKED\";\n  const PRIMARY_ACTION_CLICKED = \"NOW_BUTTON#CLICKED\";\n  const COPY_LINK = 'copy-link';\n  const COPY_LINK_DETAILED_EXPERIENCE = 'copy-link-detailed-experience';\n  const GUIDANCE_ADD_NOTIFICATION = \"SN_GUIDANCE#ADD_NOTIFICATIONS\";\n  const SN_SEARCH_RESULT_CONTAINER_DECLARATIVE_ACTION = \"SN_SEARCH_RESULTS_CONTAINER#DECLARATIVE_ACTION\";\n  const RA_EXPANDED_SEARCH_ADD_NOTIFICATION = \"RA_EXPANDED_SEARCH#ADD_NOTIFICATION\";\n  const READ_FULL_ARTICLE = \"read-full-article\";\n  const READ_ARTICLE_FULL_VIEW = \"read-article-full-view\";\n  const ADD_LINK_IN_WORKNOTE = \"attach-article-worknotes\";\n  const ATTACH_ARTICLE_EMAIL = 'attach-article-email';\n  const ATTACH_ARTICLE_COMMENT = \"attach-article-comment\";\n  const ON_DRILL_DOWN_ACTION = \"ON_DRILL_DOWN_ACTION\";\n  const NOW_BUTTON_BARE_CLICKED = \"NOW_BUTTON_BARE#CLICKED\";\n  const SIDE_PANEL = \"contextual_side_panel\";\n  const ON_DRILL_DOWN_ACTION_INITIATE = \"ON_DRILL_DOWN_ACTION_INITIATE\";\n  const GUIDANCE_ACTION_TYPE = \"e38f55b9b72120107d472397ee11a9be\";//sys_id for \"Guidance\" action type\n  const SN_GUIDANCE_EXPERIENCE_CONNECTED_GUIDANCE_NOTIFICATION_PROPOGATION = \"SN_GUIDANCE_EXPERIENCE_CONNECTED#GUIDANCE_NOTIFICATION_PROPOGATION\"\n  const COPY_LINK_NOTIFICATION_MESSAGE = 'Link copied to clipboard';\n  const ATTACH_ARTICLE_TO_COMMENTS_ACTION = \"ATTACH_ARTICLE_TO_COMMENTS_ACTION\";\nconst ATTACH_ARTICLE_TO_TASK_ACTION = \"ATTACH_ARTICLE_TO_TASK_ACTION\";\n  const ON_SINGLE_CLICK_ACTION_INITIATE = \"ON_SINGLE_CLICK_ACTION_INITIATE\";\n  const SEARCH_USE_CASE = \"search\";\n  const SINGLE_CLICK_ACTION = \"single_click\";\n  const GUIDANCE_ACTION_CLICKED = \"GUIDANCE_ACTION_CLICKED\";\n  const ATTACH_ARTICLE_TO_COMMENT_GUIDANCE_ACTION = \"9af39aaa436f0210f81d92621ab8f2d8\";\n  const ATTACH_ARTICLE_TO_WORKNOTE_GUIDANCE_ACTION = \"f2245eaa436f0210f81d92621ab8f293\";\n  const ATTACH_GUIDANCE_ACTION = \"1e8392aa436f0210f81d92621ab8f291\";\n  const SN_NEXT_BEST_ACTION_LIST_CONNECTED_ACTION_TRIGGERED_PROPAGATION = 'SN_NEXT_BEST_ACTION_LIST_CONNECTED#ACTION_TRIGGERED_PROPAGATION';\n   const EMAIL_SENT_NOTIFICATION_MESSAGE = 'Email sent';\n  const TASK_KB_GUIDANCE = 'e8421a2a436f0210f81d92621ab8f2da';\n  const SEND_CHAT = \"send-chat\";\n  const SEND_PRIVATE_CHAT = \"send-private-chat\";\n  const FLAG_ARTICLE = \"flag-article\";\n  const SEND_IN_CHAT_ACTION = \"5c0ad28753501210f917ddeeff7b1248\";\n  const SEND_IN_PRIVATE_CHAT_ACTION = \"9ebc5e0b53501210f917ddeeff7b1289\";\n  const INTERACTION_KB_GUIDANCE = '550918d9439412102280698f38b8f26a';\n  const READ_ARTICLE_PROP_ID = \"readArticle\";\n  const MARK_ARTICLE_PROP_ID= \"markArticle\";\n  const FLAG_ARTICLE_PROP_ID = \"flagArticle\";\n  const READ_ARTICLE_FULL_VIEW_PROP_ID = \"readArticleInFullView\";\n  const ATTACH_ARTICLE_COMMENT_PROP_ID = \"attachAndAddLinkInComment\";\n  const ATTACH_ARTICLE_EMAIL_PROP_ID = \"attachAndAddLinkInEmail\";\n  const ATTACH_ARTICLE_TO_WORKNOTE_PROP_ID = \"addLinkInWorkNote\";\n  const COPY_LINK_PROP_ID = \"copyLink\";\n  const SEND_CHAT_PROP_ID = \"sendChat\";\n  const SEND_PRIVATE_CHAT_PROP_ID=\"sendPrivateChat\";\n  const guidancePreviewAndDetailOnlyActions = {\n        [TASK_KB_GUIDANCE]:{\n            \"detailOnlyActions\":{\n                [MARK_ARTICLE_PROP_ID] : \"true\",\n                [FLAG_ARTICLE_PROP_ID] : \"true\",\n                [READ_ARTICLE_FULL_VIEW_PROP_ID] : \"true\"\n            },\n            \"previewOnlyActions\":{\n                [READ_ARTICLE_PROP_ID] : \"true\"\n            }\n        },\n        [INTERACTION_KB_GUIDANCE]:{\n            \"detailOnlyActions\":{\n                [MARK_ARTICLE_PROP_ID] : \"true\",\n                [FLAG_ARTICLE_PROP_ID] : \"true\",\n                [READ_ARTICLE_FULL_VIEW_PROP_ID] : \"true\"\n            },\n            \"previewOnlyActions\":{\n                [READ_ARTICLE_PROP_ID] : \"true\"\n            }\n        }\n    }\n\n  const guidanceRequiredProperties = {\n        [TASK_KB_GUIDANCE] : [ATTACH_ARTICLE_COMMENT_PROP_ID, ATTACH_ARTICLE_EMAIL_PROP_ID, ATTACH_ARTICLE_TO_WORKNOTE_PROP_ID, READ_ARTICLE_PROP_ID, READ_ARTICLE_FULL_VIEW_PROP_ID, COPY_LINK_PROP_ID, MARK_ARTICLE_PROP_ID, FLAG_ARTICLE_PROP_ID],\n        [INTERACTION_KB_GUIDANCE] : [READ_ARTICLE_PROP_ID, READ_ARTICLE_FULL_VIEW_PROP_ID, COPY_LINK_PROP_ID, MARK_ARTICLE_PROP_ID, FLAG_ARTICLE_PROP_ID, SEND_CHAT_PROP_ID, SEND_PRIVATE_CHAT_PROP_ID]\n    }\n\n  const handleCopyLinkAction = (actionId) => {\n      helpers.timing.setTimeout(function() {\n          var kbLink = this.location.host + `/kb_view.do?sys_kb_id=${api.state.knowledgeArticleId}`;\n          this.navigator.clipboard.writeText(kbLink).then(() => {\n              if(actionId === COPY_LINK){\n                  emitNotificationEvent(GUIDANCE_ADD_NOTIFICATION, COPY_LINK_NOTIFICATION_MESSAGE);\n                  emitNotificationEvent(SN_SEARCH_RESULT_CONTAINER_DECLARATIVE_ACTION, COPY_LINK_NOTIFICATION_MESSAGE);\n              }\n              else if(actionId === COPY_LINK_DETAILED_EXPERIENCE){\n                  emitNotificationEvent(SN_GUIDANCE_EXPERIENCE_CONNECTED_GUIDANCE_NOTIFICATION_PROPOGATION, COPY_LINK_NOTIFICATION_MESSAGE);\n              }\n          });\n\n      }, function(err) {\n          console.log('Error occurred when trying to copy link to clipboard. ', err);\n      });\n  }\n\n  const handleReadFullArticleAction = () => {\n      api.emit(ON_DRILL_DOWN_ACTION_INITIATE, {\n          table: api.context.props.customExpProps.table,\n          tableSysId: api.context.props.customExpProps.tableSysId,\n          actionType: GUIDANCE_ACTION_TYPE,\n          actionInputs: api.context.props.customExpProps.actionInputs,\n          actionId: api.context.props.customExpProps.actionId,\n          sysId: api.context.props.customExpProps.sysId,\n          name: api.context.props.customExpProps.name,\n          actionStateValue: api.context.props.customExpProps.actionStateValue,\n          actionMetadata: api.context.props.customExpProps.callToActions[0],\n          renderer: api.context.props.customExpProps.renderer,\n          contextSysId: api.context.props.customExpProps.contextSysId\n      });\n  }\n\n  const handleReadArticleFullViewAction = () => {\n      helpers.navigate.to('kb_view', {\n          'table': 'kb_knowledge',\n          'sysId': api.state.knowledgeArticleId\n      }, {}, false, false, 'current');\n  }\n\n    const handleAttachArticleEmailAction = () => {\n        api.setState('showModal', true);\n        const isPreviewExperience = event.name == PRIMARY_ACTION_CLICKED ? api.state.primaryAction.isPreviewExperience : event.payload.item.isPreviewExperience;\n        if (isPreviewExperience == true) {\n            const {\n                table,\n                actionInputs: {\n                    task,\n                    knowledge\n                }\n            } = api.state.customExpProps;\n            api.emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', {\n                viewportElementId: 'viewport_1',\n                route: 'add-article-link-in-email-modal',\n                fields: {\n                    'taskSysId': task,\n                    'kbSysId': knowledge,\n                    'taskTable': table,\n                    'title': api.data.get_preview_fields.result.short_description.displayValue,\n                    'kbNumber': api.data.get_preview_fields.result.number.displayValue,\n                },\n              params: {\n                  'isPreviewExperience': true\n              }\n            });\n        } else{\n            const {\n                number,\n                shortDescription,\n            } = api.data.get_knowledge_record_details_1.articleDetails.articleInfo;\n            const {\n                task,\n                knowledge,\n            } = api.context.props.guidanceInputs;\n            api.emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', {\n                viewportElementId: 'viewport_1',\n                route: 'add-article-link-in-email-modal',\n                fields: {\n                    'taskSysId': task.value,\n                    'kbSysId': knowledge.value,\n                    'taskTable': api.context.props.tableName,\n                    'title': shortDescription,\n                    'kbNumber': number,\n                }\n            });\n        }\n    }\n\n\n  const handleSecondaryActionsClicked = (guidanceId, actionConfigMetaData) => {\n        const {\n            payload: {\n                item\n            }\n        } = event;\n        handleActionsClicked(item.id, guidanceId, actionConfigMetaData);\n    };\n\n  const handlePrimaryActionClicked = (guidanceId, actionConfigMetaData) => {\n    const actionId = api.state.primaryAction.id;\n    handleActionsClicked(actionId, guidanceId, actionConfigMetaData);\n  }\n\n  const handleActionsClicked = (actionId, guidanceId, actionConfigMetaData) => {\n    if (actionId === COPY_LINK || actionId === COPY_LINK_DETAILED_EXPERIENCE) {\n        handleCopyLinkAction(actionId);\n    } else if (actionId == READ_FULL_ARTICLE) {\n        handleReadFullArticleAction();\n    } else if (actionId == READ_ARTICLE_FULL_VIEW) {\n        handleReadArticleFullViewAction();\n    }else if (actionId == ADD_LINK_IN_WORKNOTE) {\n        if(actionConfigMetaData['eventSupported']){\n            emitEventForModelessDialog(guidanceId, actionConfigMetaData, \"addLinkInWorkNote\");\n        } else{\n            openAttachArticleModal(true);\n        }\n    } else if (actionId == ATTACH_ARTICLE_EMAIL) {\n        if (actionConfigMetaData['eventSupported']) {\n            handleAttachArticleToTaskAction(false);\n            emitEventForModelessDialog(guidanceId, actionConfigMetaData, \"attachAndAddLinkInEmail\");\n        } else {\n            handleAttachArticleEmailAction();\n        }\n   } else if (actionId === ATTACH_ARTICLE_COMMENT) {\n        if(actionConfigMetaData['eventSupported']){\n            handleAttachArticleToTaskAction(false);\n            emitEventForModelessDialog(guidanceId, actionConfigMetaData, \"attachAndAddLinkInComment\");\n        } else{\n            openAttachArticleModal(false);\n        }\n    } else if (actionId === SEND_CHAT) {\n        handleSendToChatAction(false);\n    } else if (actionId === SEND_PRIVATE_CHAT) {\n        handleSendToChatAction(true);\n    }\n  }\n\n    const handleSendToChatAction = (isPrivateChat) => {\n        let sendInChatActionId = isPrivateChat ? SEND_IN_PRIVATE_CHAT_ACTION : SEND_IN_CHAT_ACTION;\n        let isPreviewExperience = event.name == PRIMARY_ACTION_CLICKED ? api.state.primaryAction.isPreviewExperience : event.payload.item.isPreviewExperience;\n        if (isPreviewExperience) {\n            let singleClickActionPayload = {};\n            const callToActions = api.state.customExpProps.callToActions;\n            let actionMetadata = callToActions.find(guidanceAction => guidanceAction.id === sendInChatActionId);\n            actionMetadata.actionBehavior = SINGLE_CLICK_ACTION;\n            if (api.state.customExpProps.useCase === SEARCH_USE_CASE) {\n                const {\n                    table,\n                    tableSysId,\n                    contextSysId,\n                    name,\n                    actionStateValue,\n                    actionTypeSysId,\n                    actionInputs,\n                    actionId\n                } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    table: table,\n                    tableSysId: tableSysId,\n                    contextSysId: contextSysId,\n                    actionType: actionTypeSysId,\n                    actionInputs: actionInputs,\n                    actionId: actionId,\n                    name: name,\n                    actionMetadata: actionMetadata,\n                    actionStateValue: actionStateValue,\n                };\n            } else {\n                const {\n                    sysId,\n                    name,\n                    actionStateValue\n                } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    sysId: sysId,\n                    name: name,\n                    actionStateValue: actionStateValue,\n                    actionMetadata: actionMetadata,\n                };\n            }\n            api.emit(ON_SINGLE_CLICK_ACTION_INITIATE, singleClickActionPayload);\n        } else {\n            const {\n                guidanceActions\n            } = api.context.props;\n            const action = guidanceActions.find(guidanceAction => guidanceAction.action_sys_id === sendInChatActionId);\n            api.emit(GUIDANCE_ACTION_CLICKED, {\n                action\n            });\n        }\n    };\n\n  const openAttachArticleModal = (isWorkNoteExperience) => {\n      api.setState('showModal', true);\n      if(api.state.customExpProps != undefined){\n            const {\n              task,\n              knowledge,\n              additional_notes\n          } = api.state.customExpProps.actionInputs;\n\n          const {\n              number,\n              short_description,\n          } = api.data.get_preview_fields.result;\n\n          const viewportPayload = {\n              viewportElementId: \"viewport_1\",\n              route: \"attach-article-in-comment-modal\",\n              fields: {'taskSysId': task,\n                  'kbSysId': knowledge,\n                  'title': short_description.displayValue,\n                  'kbNumber': number.displayValue,\n                },\n              params: {\n                  'isPreviewExperience': true,\n                  \"additionalNotes\": additional_notes,\n                  \"isWorkNoteExperience\": isWorkNoteExperience\n              }\n          };\n          api.emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', viewportPayload);\n\n      } else if(api.context.props != undefined){\n\n          const {\n            task,\n            knowledge,\n            guidance_input_form_fields: {\n                additional_notes\n                },\n            } = api.context.props.guidanceInputs;\n\n            const {\n              number,\n              shortDescription,\n          } = api.data.get_knowledge_record_details_1.articleDetails.articleInfo;\n          \n\n          const viewportPayload = {\n              viewportElementId: \"viewport_1\",\n              route: \"attach-article-in-comment-modal\",\n              fields: {'taskSysId': task.value,\n                  'kbSysId': knowledge.value,\n                  'title': shortDescription,\n                  'kbNumber': number\n                },\n              params: {\n                  \"additionalNotes\": additional_notes.recordValue ? additional_notes.recordValue.displayValue : '',\n                  \"isWorkNoteExperience\": isWorkNoteExperience\n              }\n          };\n        api.emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', viewportPayload);\n      }\n\n  }\n\n  const emitEventForModelessDialog = (guidanceId, actionConfigMetaData, eventName) => {\n        const {actionType, actionName, articleId, articleTitle} = actionConfigMetaData;\n        api.emit(SN_NEXT_BEST_ACTION_LIST_CONNECTED_ACTION_TRIGGERED_PROPAGATION,{\n            \"actionSysId\": guidanceId,\n            \"actionName\": actionName,     \n            \"actionType\": actionType,\n            \"eventName\": eventName,\n            \"payload\": {\n                \"articleSysId\": articleId, \n                \"articleTitle\": articleTitle\n            }\n        });\n    }\n\n  const handleViewDetailsClicked = () => {\n      const {\n          sysId,\n          name,\n          actionStateValue,\n          attributes,\n          renderer\n      } = api.state.customExpProps;\n      const actionBehavior = (attributes && attributes['actionBehaviour']) ? attributes['actionBehaviour'] : SIDE_PANEL;\n      api.emit(ON_DRILL_DOWN_ACTION, {\n          sysId: sysId,\n          name: name,\n          actionStateValue: actionStateValue,\n          actionBehavior: actionBehavior,\n          selectedActionAttributes: attributes,\n          renderer: renderer,\n      });\n  };\n\n\n    const handleAttachArticleToTaskAction = (isFixedModal) => {\n    let isPreviewExperience;\n    if (isFixedModal) {\n        isPreviewExperience = event.payload.isPreviewExperience;\n    } else {\n        isPreviewExperience = event.name == PRIMARY_ACTION_CLICKED ? api.state.primaryAction.isPreviewExperience : event.payload.item.isPreviewExperience;\n    }\n        if (isPreviewExperience) {\n            if (isFixedModal) {\n                emitNotificationEvent(GUIDANCE_ADD_NOTIFICATION, EMAIL_SENT_NOTIFICATION_MESSAGE, 'email');\n                emitNotificationEvent(SN_SEARCH_RESULT_CONTAINER_DECLARATIVE_ACTION, EMAIL_SENT_NOTIFICATION_MESSAGE, 'email');\n            }\n            let singleClickActionPayload = {};\n            const callToActions = api.state.customExpProps.callToActions;\n            let actionMetadata = callToActions.find(guidanceAction => guidanceAction.id === ATTACH_GUIDANCE_ACTION);\n            actionMetadata.actionBehavior = SINGLE_CLICK_ACTION;\n            if (api.state.customExpProps.useCase === SEARCH_USE_CASE) {\n                const {\n                    table,\n                    tableSysId,\n                    contextSysId,\n                    name,\n                    actionStateValue,\n                    actionTypeSysId,\n                    actionInputs,\n                    actionId\n                } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    table: table,\n                    tableSysId: tableSysId,\n                    contextSysId: contextSysId,\n                    actionType: actionTypeSysId,\n                    actionInputs: actionInputs,\n                    actionId: actionId,\n                    name: name,\n                    actionMetadata: actionMetadata,\n                    actionStateValue: actionStateValue,\n                };\n            } else {\n                const {\n                    sysId,\n                    name,\n                    actionStateValue\n                } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    sysId: sysId,\n                    name: name,\n                    actionStateValue: actionStateValue,\n                    actionMetadata: actionMetadata,\n                };\n            }\n            api.emit(ON_SINGLE_CLICK_ACTION_INITIATE, singleClickActionPayload);\n        } else {\n            const {\n                guidanceActions,\n                guidanceInputs\n            } = api.context.props;\n        if (isFixedModal) {\n            emitNotificationEvent(SN_GUIDANCE_EXPERIENCE_CONNECTED_GUIDANCE_NOTIFICATION_PROPOGATION, EMAIL_SENT_NOTIFICATION_MESSAGE, 'email');\n        }\n            const action = guidanceActions.find(guidanceAction => guidanceAction.action_sys_id === ATTACH_GUIDANCE_ACTION);\n            api.emit(GUIDANCE_ACTION_CLICKED, {\n                action\n            });\n        }\n    };\n  const handleAttachArticleEvents = (guidanceId, actionConfigMetaData) => {\n        if (event.name === SECONDARY_ACTION_CLICKED) {\n            handleSecondaryActionsClicked(guidanceId, actionConfigMetaData);\n        } else if (event.name === NOW_BUTTON_BARE_CLICKED) {\n            handleViewDetailsClicked();\n        } else if (event.name === ATTACH_ARTICLE_TO_COMMENTS_ACTION) {\n            if(event.payload.isWorkNoteExperience){\n               handleAttachArticleToCommentOrWorkNoteAction(false);\n            }else{\n               handleAttachArticleToCommentOrWorkNoteAction(true);\n            }\n        } else if (event.name === PRIMARY_ACTION_CLICKED) {\n            handlePrimaryActionClicked(guidanceId, actionConfigMetaData);\n        } else if (event.name === ATTACH_ARTICLE_TO_TASK_ACTION) {\n            handleAttachArticleToTaskAction(true);\n        }\n    }\n\nconst emitNotificationEvent = async (eventName, message, type) => {\n    let items;\n    if (type && type == 'email') {\n        items = [{\n            id: 'email-sent',\n            type: 'success',\n            message: await helpers.translate(\"Email sent\"),\n        }]\n    } else {\n        items = [{\n            message: await helpers.translate(\"{0}\", message),\n            type: \"success\",\n        }];\n    }\n    if (eventName === SN_SEARCH_RESULT_CONTAINER_DECLARATIVE_ACTION) {\n        api.emit(eventName, {\n            event: RA_EXPANDED_SEARCH_ADD_NOTIFICATION,\n            payload: {\n                items\n            }\n        });\n    } else {\n        api.emit(eventName, {\n            items\n        });\n    }\n};\n\n  const getTrimmedValue = (value) => {\n      return (new DOMParser)\n          .parseFromString(value, 'text/html')\n          .documentElement.textContent.toString()\n          .trim();\n   }\n\n\n    const getConfiguredGuidanceActions = (actionConfigurationProperty, guidanceId, isPreview) => {\n        if(!isValidActionConfigurationProperty(actionConfigurationProperty, guidanceId)){\n            let response = isPreview?api.state.actions:api.state.detailViewActions;\n            return response;\n        }\n        let  actionProperties = actionConfigurationProperty[guidanceId][\"configuration\"];\n        let stateListOfActions = isPreview?[...api.state.actions.listOfActions]:[...api.state.detailViewActions.listOfActions];\n        for(let indx=0; indx < stateListOfActions.length; indx++){\n            let action = stateListOfActions[indx];\n            let actionConfig = actionProperties[action[\"actionConfigId\"]];\n            let actionOrder = isPreview?actionConfig.orderInPreview:actionConfig.orderInDetail;\n            if (typeof actionOrder === 'string') {\n                    actionOrder = actionOrder.replace(/\\\\|\"/g, '').trim();\n                    actionOrder = Number(actionOrder);\n                }\n            let isActionAvailable =  actionConfig.isSupported && (isPreview?actionConfig.visibleInPreview : actionConfig.visibleInDetail);\n            stateListOfActions[indx][\"hideAction\"]=!isActionAvailable;\n            stateListOfActions[indx][\"order\"]=actionOrder;\n            }\n        let response = {\"listOfActions\":stateListOfActions};\n        return response;\n    }\n\n    const getPrimaryAction = (actions, isDetailExperience = false, showFlag = false) => {\n        if (isDetailExperience && !showFlag) {\n            actions = actions.filter(action => action.id != FLAG_ARTICLE);\n        }\n        let availableActions = []; \n        for (let i = 0; i < actions.length; i++){\n            if (!actions[i].hideAction){\n                availableActions.push(actions[i]);\n            }\n        }\n        const sortedArray = availableActions.sort((a, b) => a.order - b.order);\n        return sortedArray[0];\n    }\n\n    const getPrimaryAndSecondaryActions = (actions, isDetailExperience = false, showFlag = false) => {\n        if (isDetailExperience && !showFlag) {\n            actions = actions.filter(action => action.id != FLAG_ARTICLE);\n        }\n        let availableActions = []; \n        for (let i = 0; i < actions.length; i++){\n            if (!actions[i].hideAction){\n                availableActions.push(actions[i]);\n            }\n        }\n        const sortedArray = availableActions.sort((a, b) => a.order - b.order);\n        const primaryAction = sortedArray.shift();\n        return {\n            primaryAction: primaryAction,\n            secondaryActions: sortedArray,\n        }\n    }\n\n    //Check if any ids already present in the array or not\n    const containsId = (array, id) => {\n        var idExists = array.some(action => action.id === id);\n        return idExists;\n    }\n\n    // Function to check if the recommendedActionProperty is valid\n    const isValidActionConfigurationProperty = (obj, guidanceId) => {\n        // Check if main key exists\n        if (!obj.hasOwnProperty(guidanceId)) {\n            return false;\n        }\n        const requiredProperties = guidanceRequiredProperties[guidanceId];\n        const detailOnlyActions = guidancePreviewAndDetailOnlyActions[guidanceId] ? guidancePreviewAndDetailOnlyActions[guidanceId][\"detailOnlyActions\"] : {};\n        const previewOnlyActions = guidancePreviewAndDetailOnlyActions[guidanceId] ? guidancePreviewAndDetailOnlyActions[guidanceId][\"previewOnlyActions\"] : {};\n        const properties = obj[guidanceId].configuration;\n        // Check if each required property exists and has both isSupported and order fields\n        for (let prop of requiredProperties) {\n            if (!properties.hasOwnProperty(prop)) { \n                return false;\n            }\n            // Get the order, isSupported, and visibleInDetail values\n            let { orderInDetail, orderInPreview, isSupported, visibleInDetail, visibleInPreview } = properties[prop];\n            //readArticle only present in preview experience\n            if(!previewOnlyActions.hasOwnProperty(prop)){\n                if (typeof orderInDetail === 'string') {\n                    orderInDetail = orderInDetail.replace(/\\\\|\"/g, '').trim();\n                }\n                if (orderInDetail === null || typeof orderInDetail === 'undefined' || orderInDetail === \"\" || isNaN(Number(orderInDetail))) {\n                    return false;\n                }\n                if (visibleInDetail !== null && visibleInDetail !== undefined && typeof visibleInDetail !== 'boolean') {\n                    return false;\n                }\n            }\n\n            //markArticle, readArticleInFullView and flagArticle only present in detail experience.\n            if(!detailOnlyActions.hasOwnProperty(prop) ){\n                if (typeof orderInPreview === 'string') {\n                    orderInPreview = orderInPreview.replace(/\\\\|\"/g, '').trim();\n                }\n                if (orderInPreview === null || typeof orderInPreview === 'undefined' || orderInPreview === \"\" || isNaN(Number(orderInPreview))) {\n                    return false;\n                }\n                if (visibleInPreview !== null && visibleInPreview !== undefined && typeof visibleInPreview !== 'boolean') {\n                    return false;\n                }\n            }\n            if (isSupported !== null && isSupported !== undefined && typeof isSupported !== 'boolean') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    const getOrderValue = (obj) => {\n        var key = Object.keys(obj)[0];\n        return obj[key].order;\n    }\n\n    const getSupportedPropertyValue = (obj) => {\n        return Object.values(obj)[0].isSupported;\n    }\n\n    const getVisibleInDetailPropertyValue = (obj) => {\n        return Object.values(obj)[0].visibleInDetail;\n    }\n\n    const getActionConfigMetaData = (actionConfigurations, guidanceId, knowledge, articleTitle) => {\n        var actionConfigMetaData = {};\n        actionConfigMetaData['articleId'] = knowledge;\n        actionConfigMetaData['articleTitle'] = articleTitle;\n        if (actionConfigurations.hasOwnProperty(guidanceId)) {\n            actionConfigMetaData['actionType'] = actionConfigurations[guidanceId].actionType;\n            actionConfigMetaData['actionName'] = actionConfigurations[guidanceId].actionName;\n            const config = actionConfigurations[guidanceId].configuration;\n            if (config) {\n                const eventSupported = config.eventSupported;\n                if (eventSupported) {\n                    actionConfigMetaData['eventSupported'] = eventSupported;\n                } else{\n                    actionConfigMetaData['eventSupported'] = false;\n                }\n            }\n        }\n        return actionConfigMetaData;\n    };\n    const handleAttachArticleToCommentOrWorkNoteAction = (isComment) => {\n        const { isPreviewExperience, additionalNotes } = event.payload;\n        let actionId = isComment == true ? ATTACH_ARTICLE_TO_COMMENT_GUIDANCE_ACTION : ATTACH_ARTICLE_TO_WORKNOTE_GUIDANCE_ACTION;\n        if (isPreviewExperience) {\n            let singleClickActionPayload = {};\n            const callToActions = api.state.customExpProps.callToActions;\n            let actionMetadata = callToActions.find(guidanceAction => guidanceAction.id === actionId);\n            actionMetadata.actionBehavior = SINGLE_CLICK_ACTION;\n            if (api.state.customExpProps.useCase === SEARCH_USE_CASE) {\n                const { table, tableSysId, contextSysId, name, actionStateValue, actionTypeSysId, actionInputs, actionId } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    table: table,\n                    tableSysId: tableSysId,\n                    contextSysId: contextSysId,\n                    actionType: actionTypeSysId,\n                    actionInputs: actionInputs,\n                    formFieldInputs: { additional_notes: additionalNotes },\n                    actionId: actionId,\n                    name: name,\n                    actionMetadata: actionMetadata,\n                    actionStateValue: actionStateValue,\n                };\n            } else {\n                const { sysId, name, actionStateValue } = api.state.customExpProps;\n                singleClickActionPayload = {\n                    sysId: sysId,\n                    name: name,\n                    actionStateValue: actionStateValue,\n                    actionMetadata: actionMetadata,\n                    formFieldInputs: { additional_notes: additionalNotes },\n                };\n            }\n  \n            api.emit(ON_SINGLE_CLICK_ACTION_INITIATE, singleClickActionPayload);\n        } else {\n            const { guidanceActions, guidanceInputs } = api.context.props;\n            const action = guidanceActions.find(guidanceAction => guidanceAction.action_sys_id === actionId);\n            api.emit(GUIDANCE_ACTION_CLICKED, {\n                action,\n                model: {\n                    fields: [\n                        {\n                            name: \"additional_notes\",\n                            value: additionalNotes,\n                        },\n                    ]\n                }\n            });\n        }        \n    };\n\n    const filterGuidanceActionsBySessionAndAccess = (guidanceActions, configData) =>  {\n        const { isLiveAgentChatActive, userHasKbAccess } = configData;\n        let guidanceActionsToHide = {};\n        if (!isLiveAgentChatActive) {\n            guidanceActionsToHide = { [SEND_CHAT]: true, [SEND_PRIVATE_CHAT]: true };\n        } else if (!userHasKbAccess) {\n            guidanceActionsToHide = { [SEND_CHAT]: true }\n        }\n    \n        guidanceActions.forEach(guidanceAction => {\n            if(guidanceActionsToHide.hasOwnProperty(guidanceAction.id)){\n                guidanceAction.hideAction = true;\n            }\n        });\n\n        return guidanceActions;\n    };\n\n    const openViewportModal = () => {\n        let route = event.payload.route;\n        let options = {};\n        if (route == 'add-article-link-in-email-modal') {\n            options = {\n                bare: true,\n                size: \"lg\",\n                resizableConfig: {\n                    enableResizable: true,\n                    resizableMinHeight: '460',\n                    resizableMinWidth: '800'\n                }\n            };\n        } else {\n            options = {\n                bare: true,\n            }\n        }\n        helpers.modal.open('modal_viewport_1', options);\n    };\n  \n    return {\n        handleSecondaryActionsClicked: handleSecondaryActionsClicked,\n        handleAttachArticleEvents: handleAttachArticleEvents,\n        emitNotificationEvent: emitNotificationEvent,\n        getConfiguredGuidanceActions: getConfiguredGuidanceActions,\n        getActionConfigMetaData: getActionConfigMetaData,\n        getPrimaryAction: getPrimaryAction,\n        getPrimaryAndSecondaryActions: getPrimaryAndSecondaryActions,\n        filterGuidanceActionsBySessionAndAccess: filterGuidanceActionsBySessionAndAccess,\n        openViewportModal: openViewportModal,\n        getTrimmedValue\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"60bd35d9434b0210ec3bc8641ab8f2b2","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/e44100732ce74110f8771fb93f5c7ccd","value":"e44100732ce74110f8771fb93f5c7ccd"},"sys_update_name":"sys_ux_client_script_include_60bd35d9434b0210ec3bc8641ab8f2b2","sys_updated_by":"admin","api_name":"sn_guidances.AttachArticleGuidanceHelper","sys_created_on":"2024-06-26 13:57:57","name":"AttachArticleGuidanceHelper","sys_name":"AttachArticleGuidanceHelper","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/e44100732ce74110f8771fb93f5c7ccd","value":"e44100732ce74110f8771fb93f5c7ccd"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"23","includes":"","sys_updated_on":"2024-02-22 21:21:39","sys_tags":"","script":"function include({ imports }) {\n    //unifiedMapPropertiesUtils shared client script include in (CI) Properties UI Controller\n    const _CONNECTIONS_EXCLUSION_FIELDS = {\n        DIRECTION : 'direction', \n        ENDPOINTS: 'endpoints', \n        ID: 'id', \n        EPID: 'epId', \n        IS_REFERENCE: 'isReference', \n        IS_VIRTUAL_CONNECTION: 'isVirtualConnection',\n        STYLE: 'style',\n        SYSID: 'sysId', \n        LABEL: '_label',\n        TABLENAME:  'tableName',\n        SOURCEID: 'sourceId',\n        TARGETID: 'targetId',\n        PORT: 'port',\n        IP_ADDRESS:'IP Address',\n        IS_SERVICE_MAPPING: 'isServiceMapping',\n        ORIGINAL_TARGET_ID: 'originalTargetId',\n        ORIGINAL_SOURCE_ID: 'originalSourceId',\n        COMMENTS: 'comments',\n        COMMAND_LINE: 'Command line',\n        ATTACHMENT_INFO: 'Attachment Info',\n        COMMAND_LINE_PARAMETERS: 'Command Line Parameters',\n        STORAGE_PATH: 'Storage Path'\n    };\n\n    const _PROP_CLASS = 'Class';\n\n    const _CI_GROUP_MEMBER_FIELDS = {\n        CLASS : 'class', \n        DISCOVERY_SOURCE: 'discovery source', \n        OWNED_BY: 'owned by', \n        MOST_RECENT_DISCOVERY: 'most recent discovery'\n    };\n\n    const _LOCATION = {\n        NAME: \"name\",\n        CITY: \"city\"\n    };\n\n    const _SM_INPUT_EDGE_PROPERTIES = {\n        ENDPOINT_ID: \"epId\",\n        BUSINESS_SERVICE_ID: \"bsId\",\n        STABLE_ID: \"stableId\",\n        ORIGINAL_ID: \"originalId\",\n        EDGES: \"edges\"\n    };\n\n    const _CI_FIELDS = {\n        ENTRY_POINTS: \"Entry Points\",\n        LOCATION: \"Location\"\n    };\n\n    const  _buildStackedValueObj = function(name, value) {\n        return {\n            label: name,\n            value: {\n                type: \"string\",\n                value: value \n            }\n        };\n    };\n\n    const _getNameObj = function(name){\n        return {\n            label: name,\n            size: \"md\",\n            variant: \"primary\",\n        };\n\n    }\n\n    const  _getClassDisplayNameObj = function(name) {\n       return {\n            label: name,\n            lines: 1,\n            size: \"md\",\n        }\n    }\n\n    const _buildDynamicCIGroupRouteObject = function(ciSysId, dynamicCiText) {\n        return {\n            route: \"list\",\n            fields: {\n                table: _TABLE_NAME.SVC_CI_ASSOC,\n            },\n            params: {\n              columns: 'ci_id.name,ci_id.sys_class_name,ci_id.owned_by,ci_id.discovery_source,ci_id.last_discovered',\n              fixedFilter: 'service_id=' + ciSysId,\n              listTitle: dynamicCiText,\n              hideActions: true\n            }\n        };\n    }\n\n    const _CLASS_NAME = {\n        CMDB_CI_QUERY_BASED_SERVICE: 'cmdb_ci_query_based_service'\n    }\n\n    const _TABLE_NAME = {\n        SVC_CI_ASSOC: 'svc_ci_assoc'\n    }\n\n    const _isDynamicCIGroup = function(className) {\n        return className && className === _CLASS_NAME.CMDB_CI_QUERY_BASED_SERVICE;\n    }\n\n    const _DYNAMIC_GROUP_COLUMNS = {\n        NAME: \"name\",\n        DISPLAY_NAME: \"displayName\"\n    }\n\n    return {\n        buildStackedValueObj: _buildStackedValueObj,\n        getNameObj: _getNameObj,\n        buildDynamicCIGroupRouteObject: _buildDynamicCIGroupRouteObject,\n        isDynamicCIGroup:_isDynamicCIGroup,\n        getClassDisplayNameObj: _getClassDisplayNameObj,\n        CONNECTION_EXCLUSION_FIELDS: _CONNECTIONS_EXCLUSION_FIELDS,\n        CI_GROUP_MEMBER_FIELDS: _CI_GROUP_MEMBER_FIELDS,\n        CI_FIELDS: _CI_FIELDS,\n        LOCATION: _LOCATION,\n        TABLE_NAME: _TABLE_NAME,\n        CLASS_NAME: _CLASS_NAME,\n        DYNAMIC_GROUP_COLUMNS: _DYNAMIC_GROUP_COLUMNS,\n        PROP_CLASS: _PROP_CLASS,\n        SM_INPUT_EDGE_PROPERTIES: _SM_INPUT_EDGE_PROPERTIES\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"616b61b0ff212110f563bb63aad33e1d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_616b61b0ff212110f563bb63aad33e1d","sys_updated_by":"admin","api_name":"sn_cmdb_ws.unifiedMapPropertiesUtils","sys_created_on":"2023-03-10 17:26:14","name":"unifiedMapPropertiesUtils","sys_name":"unifiedMapPropertiesUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"4","includes":"55616816437431107f08ff53e9b8f24d","sys_updated_on":"2023-08-23 17:33:29","sys_tags":"","script":"function include({ imports }) {\n\tlet SOWRecordInformationUtilsSNC = imports['sn_sow_itsm_common.SOWRecordInformationUtilsSNC']();\n\tclass SOWRecordInformationUtils extends SOWRecordInformationUtilsSNC {\n\n\t}\n\treturn SOWRecordInformationUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"6541a416437431107f08ff53e9b8f2fa","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_6541a416437431107f08ff53e9b8f2fa","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWRecordInformationUtils","sys_created_on":"2023-08-23 17:16:28","name":"SOWRecordInformationUtils","sys_name":"SOWRecordInformationUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"435","includes":"","sys_updated_on":"2025-04-11 10:04:39","sys_tags":"","script":"function include({ imports }) {\n  return {\n    getAggregateScoreGraphJson: _getAggregateScoreTemplate,\n    getTimeSeriesLineGraphData: _getTimeSeriesLineGraphData,\n    getTopicFetchQuery: _getTopicFetchQuery,\n    getAggregateMbInAndOut: _getAggregateMbInAndOut,\n    getTopicUsageBarGraphData: _getTopicUsageBarGraphData,\n    getAppData: _getAppData,\n    getServiceIdData: _getServiceIdData,\n    getTopicData: _getTopicData,\n    DEFAULT_MONTHS_AGO: _getDefaultMonthsAgo(),\n    getHermesUsageQuery: _getHermesUsageQuery,\n    getNotificationTemplate: _getNotificationTemplate,\n    getDateDiffInDays: _getDateDiffInDays\n  };\n\n  /**\n   * Get score graph template\n   *\n   * @param {aggValue} args\n   * @returns JSON - score graph template with aggregate value\n   */\n  function _getAggregateScoreTemplate(args) {\n    let { aggValue } = args;\n    let scoreTemplate = [\n      {\n        data: [\n          {\n            change: \"0\",\n            changePercent: \"0\",\n            value: \"\", // to be updated for score graph\n          },\n        ],\n        metadata: {\n          format: {\n            unitFormat: \"{0}\",\n            frequency: \"daily\",\n            precision: 4,\n          },\n        },\n      },\n    ];\n    scoreTemplate[0][\"data\"][0][\"value\"] = aggValue;\n    return scoreTemplate;\n  }\n\n  /**\n   * Get line graph template\n   *\n   * @param {timeSeriesData} args\n   * @returns JSON - line graph template with time series values\n   */\n  function _getTimeSeriesLineGraphData(args) {\n    let { timeSeriesData, userSessionTimeZoneOffset } = args;\n    let lineGraphDataTemplate = [\n      {\n        data: [], // to be filled for 1st line graph\n        metadata: {\n          dataSourceLabel: \"BYTES IN (MB)\",\n          series: [\n            {\n              label: \"BYTES IN (MB)\",\n              id: \"value\",\n              type: \"value\",\n            },\n          ],\n          format: {\n            unitFormat: \"{0}\",\n            frequency: \"hourly\",\n            precision: 4,\n          },\n        },\n      },\n    ];\n    let gropedMetricData = Object.groupBy(\n      timeSeriesData,\n      ({ metric_name }) => metric_name.value\n    );\n    let graphLineIndex = 0;\n    let metricNames = _getMetricList();\n    for (let metric of metricNames) {\n      for (let metricData of gropedMetricData[metric] ?? []) {\n        lineGraphDataTemplate[graphLineIndex][\"data\"].push({\n            timestamp: _convertGlideDateTimeToUnixTimeStamp( {\n              utcValue: metricData[\"sys_created_on\"].value,\n              userSessionTimeZoneOffset\n            }),\n          value: metricData[\"hour_total_mb_value\"].value,\n        });\n      }\n      graphLineIndex++;\n    }\n    return lineGraphDataTemplate;\n  }\n\n  /**\n   * List of metrics used\n   *\n   * @param\n   * @returns Array - metrics used\n   */\n  function _getMetricList() {\n    return [\"BytesInPerSec\"];\n  }\n\n  /**\n   * Convert glideDateTime utc value to unix time stamp, adjusted to user session timezone\n   *\n   * @param {dateStr, userSessionTimeZoneOffset} glideDateTime string, userSessionTimeZoneOffset long\n   * @returns String - unix time stamp\n   */\n  function _convertGlideDateTimeToUnixTimeStamp(args) {\n    // Date format YYYY-MM-DDTHH:mm:ss.sssZ\n    let { utcValue, userSessionTimeZoneOffset } = args;\n    let dateTime = utcValue.split(\" \");\n    let utcString = `${dateTime[0]}T${dateTime[1]}Z`;\n    let dateUtc = new Date(utcString);\n    let timeZoneAdjustedTimeStamp = dateUtc.getTime() + userSessionTimeZoneOffset;\n    return timeZoneAdjustedTimeStamp + \"\";\n  }\n\n  /**\n   * Build topic encoded query from selected options\n   *\n   * @param {selectedServiceId} serivce Id\n   * @param {selectedAppId} app Id\n   * @returns String - encodedQuery\n   */\n  function _getTopicFetchQuery(selectedServiceId, selectedAppId) {\n    let topicFetchArgs = {\n      selectedApp: {\n        item: {\n          id: selectedAppId,\n        },\n      },\n      selectedService: {\n        item: {\n          id: selectedServiceId,\n        },\n      },\n    };\n    return topicFetchArgs;\n  }\n\n  /**\n   * aggregate metric values from time series\n   *\n   * @param {timeSeriesData} args\n   * @returns Map - <Metric, Aggregated value>\n   */\n  function _getAggregateMbInAndOut(args) {\n    let { timeSeriesData } = args;\n    let gropedMetricData = Object.groupBy(\n      timeSeriesData,\n      ({ metric_name }) => metric_name.value\n    );\n\n    let mbAggregateValueMap = new Map();\n    let metricNames = _getMetricList();\n    for (let metricName of metricNames) {\n      for (let metric of gropedMetricData[metricName] ?? []) {\n        if (!mbAggregateValueMap.has(metricName)) {\n          mbAggregateValueMap.set(\n            metricName,\n            Number(metric[\"hour_total_mb_value\"][\"value\"])\n          );\n        } else\n          mbAggregateValueMap.set(\n            metricName,\n            mbAggregateValueMap.get(metricName) +\n              Number(metric[\"hour_total_mb_value\"][\"value\"])\n          );\n      }\n    }\n    return mbAggregateValueMap;\n  }\n\n  /**\n   * Get bar graph template\n   *\n   * @param {topicData} args\n   * @returns JSON - bar graph template with topic data\n   */\n  function _getTopicUsageBarGraphData(args) {\n    let { topicData } = args;\n    let topicUsageBarGraphData = [];\n    let groupedTopicData = Object.groupBy(\n      topicData,\n      ({ topic_name }) => topic_name.value\n    );\n    let barGraphTemplate = [\n      {\n        data: [],\n        metadata: {\n          dataSourceLabel: \"BYTES IN (MB)\",\n          eventData: {\n            table: \"hermes_usage_metrics\",\n          },\n          groupBy: [],\n          format: {\n            unitFormat: \"{0}\",\n            precision: 4,\n          },\n        },\n      },\n    ];\n    let topics = Object.keys(groupedTopicData) ?? [];\n    let topicMbAggregateMap = new Map();\n    for (let topic of topics) {\n      let metricGroupedData;\n      metricGroupedData = Object.groupBy(\n        groupedTopicData[topic],\n        ({ metric_name }) => metric_name.value\n      );\n      let mbInAggregate = 0,\n        mbOutAggregate = 0;\n      metricGroupedData?.[\"BytesInPerSec\"] &&\n        metricGroupedData[\"BytesInPerSec\"].forEach((data) => {\n          mbInAggregate += Number(data[\"hour_total_mb_value\"][\"value\"]);\n        });\n      topicMbAggregateMap.set(topic, [mbInAggregate]);\n    }\n    let elementObj = {\n      elements: [],\n      id: \"topic_name\",\n      fieldType: \"String\",\n      label: \"Topic Name\",\n    };\n    for (let [topic, aggValues] of topicMbAggregateMap.entries()) {\n      barGraphTemplate[0][\"data\"].push({\n        topic_name: topic,\n        value: aggValues[0],\n      });\n      elementObj[\"elements\"].push({\n        defaultColor: \"9,162,191\",\n        label: topic,\n      });\n    }\n    barGraphTemplate[0][\"metadata\"][\"groupBy\"].push(elementObj);\n    return barGraphTemplate;\n  }\n\n  /**\n   * Get dropdown template for appIds\n   *\n   * @param {appData} args\n   * @returns JSON - dropdown template with app data\n   */\n  function _getAppData(args) {\n    let { appData } = args;\n    let appdataJson = [];\n    //default option\n    appdataJson.push({\n      id: \"all\",\n      label: \"All\",\n    });\n    for (let app of appData) {\n      appdataJson.push({\n        id: app,\n        label: app,\n      });\n    }\n    return appdataJson;\n  }\n\n  /**\n   * Get dropdown template for serviceIds\n   *\n   * @param {serviceIdData} args\n   * @returns JSON - dropdown template with serviceId data\n   */\n  function _getServiceIdData(args) {\n    let { serviceIdData } = args;\n    let serviceIdDataJson = [];\n    //default option\n    serviceIdDataJson.push({\n      id: \"all\",\n      label: \"All\",\n    });\n    //let serviceIds = serviceIdData[\"distinctValues\"] ?? [];\n    for (let serviceId of serviceIdData) {\n      serviceIdDataJson.push({\n        id: serviceId,\n        label: serviceId,\n      });\n    }\n    return serviceIdDataJson;\n  }\n\n  /**\n   * Get dropdown template for topics\n   *\n   * @param {topicData} args\n   * @returns JSON - dropdown template with topic data\n   */\n  function _getTopicData(args) {\n    let { topicData } = args;\n    let topicDataJson = [];\n    if (topicData.length == 0) return [];\n\n    //default option\n    topicDataJson.push({\n      id: \"all\",\n      label: \"All\",\n    });\n    for (let topic of topicData) {\n      topicDataJson.push({\n        id: topic,\n        label: topic,\n      });\n    }\n    return topicDataJson;\n  }\n\n  /**\n   * Default months for date range picker\n   *\n   * @param\n   * @returns Number\n   */\n  function _getDefaultMonthsAgo() {\n    return 1;\n  }\n\n  function _getDateDiffInDays(args) {\n    let { startDateStr, endDateStr } = args;\n    let startDate = new Date(startDateStr);\n    let endDate = new Date(endDateStr);\n    let timeDifference = Math.abs(startDate - endDate);\n    let daysDifference = Math.ceil(timeDifference / (1000 * 60 * 60 * 24));\n    return daysDifference;\n  }\n\n  function _getNotificationTemplate(args) {\n    let { infoMessage } = args;\n    let notificationAlertTemplate = {\n      items: [\n        {\n          id: \"monthly_roll_up_filter_info\",\n          status: \"info\",\n          icon: \"info-circle-outline\",\n          content: infoMessage,\n          action: {\n            type: \"dismiss\",\n          },\n        },\n      ],\n    };\n    return notificationAlertTemplate;\n  }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"66243e0643c3311023ebbbd32fb8f22f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/03d4abbf04312210559073c06a02f7f9","value":"03d4abbf04312210559073c06a02f7f9"},"sys_update_name":"sys_ux_client_script_include_66243e0643c3311023ebbbd32fb8f22f","sys_updated_by":"admin","api_name":"global.HermesUsageMetricsUtil","sys_created_on":"2023-12-13 05:40:02","name":"HermesUsageMetricsUtil","sys_name":"HermesUsageMetricsUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2021-02-16 04:20:09","sys_tags":"","script":"function include({imports}) {\n\tconst querySelectorDeep = (selector, rootEl) => {\n\t\tif (rootEl.matches && rootEl.matches(selector)) return rootEl;\n\t\tconst children = rootEl.children;\n\t\tfor (let i = 0; i < children.length; i++) {\n\t\t\tif (children[i].matches && children[i].matches(selector))\n\t\t\t\treturn children[i];\n\t\t\tconst child = querySelectorDeep(selector, children[i]);\n\t\t\tif (child) return child;\n\t\t}\n\t\tif (rootEl.shadowRoot)\n\t\t\treturn querySelectorDeep(selector, rootEl.shadowRoot);\n\t\treturn null;\n\t};\n\tconst closestDeep = (el, selector) => {\n\t\tif (!el) return null;\n\t\tif (el.matches(selector)) return el;\n\t\tif (el.parentElement !== null)\n\t\t\treturn closestDeep(el.parentElement, selector);\n\t\t// escape the shadow root\n\t\tif (el.getRootNode() !== null)\n\t\t\treturn closestDeep(el.getRootNode().host, selector);\n\t};\n\tconst focusInside = (el, selector, event) => {\n\t\tconst internalElem = querySelectorDeep(selector, el);\n\t\tif (internalElem) {\n\t\t\tevent.preventDefault();\n\t\t\tinternalElem.focus();\n\t\t}\n\t};\n\tconst focusOutside = (el, selector, event) => {\n\t\tconst parentElement = closestDeep(el, selector);\n\t\tif (parentElement) {\n\t\t\tevent.preventDefault();\n\t\t\tparentElement.focus();\n\t\t}\n\t};\n\treturn {\n\t\tquerySelectorDeep,\n\t\tclosestDeep,\n\t\tfocusInside,\n\t\tfocusOutside\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"667b8fcfc7e120109a57797c95c26081","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_667b8fcfc7e120109a57797c95c26081","sys_updated_by":"admin","api_name":"sn_vtb.VisualBoardAccessibilityUtils","sys_created_on":"2021-01-11 15:26:32","name":"VisualBoardAccessibilityUtils","sys_name":"VisualBoardAccessibilityUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"48","includes":"","sys_updated_on":"2024-08-06 13:48:36","sys_tags":"","script":"function include(proxyArg, params) {\n    const { api, event, helpers, imports } = params;\n    const gform = api.data.gform;\n    //for form controller form access\n    const gform2 = api.data.glide_form_1;\n    const NEW_RECORD_SYS_ID = \"-1\";\n    const isNewRecord = api.context.props.sysId == NEW_RECORD_SYS_ID;\n    const FIELDS_TO_MONITOR = \"fieldsToMonitor\";\n    const RECOMMENDED_FIELDS = \"recommendedFields\";\n    const FIELD_NAME = \"name\";\n    const FIELD_VALUE = \"value\";\n    const FIELD_ORIGINAL_VALUE = \"originalValue\";\n    const FIELD_DISPLAY_VALUE = \"displayValue\";\n    const STAMP_VALUE = \"value\";\n    const STAMP_DISPlAY_VALUE = \"displayValue\";\n    const FIELD_NAME_KEY = \"fieldName\";\n    const INFO_MESSAGE_TYPE = \"info\";\n    const GET_RECOMMENDATIONS_ACTION_DETAILS_KEY = \"actionDetails\";\n    const GET_RECOMMENDATIONS_FIELDS_TO_MONITOR_KEY = \"fieldsToMonitor\";\n    const GET_RECOMMENDATIONS_CUSTOM_ATTRIBUTES_KEY = \"customAttributes\";\n    const FIELD_RECOMMENDATION_MESSAGE_KEY = \"recommendationMessage\";\n    const FIELD_RECOMMENDATION_IS_CONFIDENT_KEY = \"isConfident\";\n    const FIELD_RECOMMENDATION_STAMP_DETAILS_KEY = \"stampDetails\";\n    const FIELD_VALUE_CHANGED = \"CTRL_RECORD#FIELD_VALUE_CHANGED\";\n    const FIELD_VALUE_CHANGED_NEW_EVENT= \"SN_FORM_DATA_CONNECTED#FIELD_VALUE_CHANGED\";\n    const HIDE_FIELD_MESSAGE = \"RECORD#GFORM_HIDE_FIELD_MESSAGE\";\n    const SHOW_FIELD_MESSAGE = \"RECORD#GFORM_SHOW_FIELD_MESSAGE\";\n    const SET_FIELD_VALUE = \"RECORD#GFORM_SET_VALUE\";\n    const NAV_ITEM_SELECTED = \"NAV_ITEM_SELECTED\";\n    const NOW_UXF_PAGE_ADD_NOTIFICATIONS = \"NOW_UXF_PAGE#ADD_NOTIFICATIONS\";\n    const NOW_UXF_PAGE_REMOVE_NOTIFICATIONS = \"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\";\n    const RA_ADD_NOTIFICATION_REQUESTED = \"RECOMMENDED_ACTIONS#ADD_NOTIFICATION_REQUESTED\";\n    const RA_ACTION_CLICKED = \"RECOMMENDED_ACTIONS#ACTION_CLICKED\";\n    const RA_LINK_CLICKED = \"SN_NEXT_BEST_ACTION_LIST_CONNECTED#LINK_CLICKED\";\n\n    var formDataController;\n    const isDataControllerInitialized = () => {\n        if(typeof gform.table === 'string' && gform.table.length > 0){\n            formDataController = gform.form;\n            return true;\n        }\n        else if(typeof gform2.table === 'string' && gform2.table.length > 0){\n            formDataController = gform2.nowRecordFormBlob;\n            return true;\n        }\n        return false;\n    }\n    const clearPreviousRecommendations = () => {\n        const previousRecommendedFields = api.state[RECOMMENDED_FIELDS] || [];\n        for (var fieldIdx = 0; fieldIdx < previousRecommendedFields.length; fieldIdx++) {\n            const field = previousRecommendedFields[fieldIdx];\n            api.emit(HIDE_FIELD_MESSAGE, {\n                fieldName: field,\n                clearAll: true\n            });\n        }\n    }\n    const showFieldMessage = (fieldName, message) => {\n        api.emit(SHOW_FIELD_MESSAGE, {\n            fieldName: fieldName,\n            message: message,\n            type: INFO_MESSAGE_TYPE\n        });\n    }\n    const showFieldMessages = (fieldMessageRecommendations) => {\n        const fieldNames = Object.keys(fieldMessageRecommendations);\n        for (let fieldIdx = 0; fieldIdx < fieldNames.length; fieldIdx++) {\n            const fieldName = fieldNames[fieldIdx];\n            const messages = new Set(fieldMessageRecommendations[fieldName]);\n            messages.forEach(function (message) {\n                showFieldMessage(fieldName, message);\n            });\n        }\n        api.setState(RECOMMENDED_FIELDS, fieldNames);\n    };\n    const stampFieldRecommendations = (stampRecommendations) => {\n        const fields = Object.keys(stampRecommendations);\n        for (let fieldIdx = 0; fieldIdx < fields.length; fieldIdx++) {\n            const field = fields[fieldIdx];\n            const fieldDetails = formDataController.fields[field] || {};\n            const currentValue = fieldDetails[FIELD_VALUE];\n            const stampDetail = stampRecommendations[field];\n            if (currentValue == \"\") {\n                let payload = {};\n                payload[FIELD_NAME_KEY] = field;\n                payload[FIELD_VALUE] = stampDetail[STAMP_VALUE];\n                if (stampDetail[STAMP_DISPlAY_VALUE]) {\n                    payload[FIELD_DISPLAY_VALUE] = stampDetail[STAMP_DISPlAY_VALUE];\n                }\n                api.emit(SET_FIELD_VALUE, payload);\n            }\n        }\n    }\n    const getChangedFields = () => {\n        let updatedFields = {};\n        const formFields = formDataController.fields;\n        const fieldNames = Object.keys(formFields);\n        for (let fieldIndex = 0; fieldIndex < fieldNames.length; fieldIndex++) {\n            const fieldName = fieldNames[fieldIndex];\n            const field = formFields[fieldName];\n            if (field.hasOwnProperty(FIELD_ORIGINAL_VALUE) && field[FIELD_ORIGINAL_VALUE] != field[FIELD_VALUE]) {\n                updatedFields[field[FIELD_NAME]] = field[FIELD_VALUE];\n            }\n        }\n        if (event.name == FIELD_VALUE_CHANGED || event.name == FIELD_VALUE_CHANGED_NEW_EVENT) {\n            let payload = event.payload;\n            updatedFields[payload[FIELD_NAME_KEY]] = payload[FIELD_VALUE];\n        }\n        return updatedFields;\n    }\n    const showRecommendations = () => {\n        isDataControllerInitialized();\n        const result = event.payload.data.output.result;\n        let fieldMessageRecommendations = {};\n        let fieldStampRecommendations = {};\n        const actionDetails = result[GET_RECOMMENDATIONS_ACTION_DETAILS_KEY];\n        const fieldsToMonitor = result[GET_RECOMMENDATIONS_FIELDS_TO_MONITOR_KEY];\n        api.setState(FIELDS_TO_MONITOR, fieldsToMonitor);\n        for (let recommendationIdx = 0; recommendationIdx < actionDetails.length; recommendationIdx++) {\n            const actionDetail = actionDetails[recommendationIdx];\n            const allFieldRecommendations = actionDetail[GET_RECOMMENDATIONS_CUSTOM_ATTRIBUTES_KEY];\n            const fields = Object.keys(allFieldRecommendations);\n            for (let fieldIdx = 0; fieldIdx < fields.length; fieldIdx++) {\n                const field = fields[fieldIdx];\n                const fieldMessages = [];\n                const fieldRecommendations = allFieldRecommendations[field];\n                for (let fieldRecommendationIdx = 0; fieldRecommendationIdx < fieldRecommendations.length; fieldRecommendationIdx++) {\n                    const fieldRecommendation = fieldRecommendations[fieldRecommendationIdx];\n                    fieldMessages.push(fieldRecommendation[FIELD_RECOMMENDATION_MESSAGE_KEY]);\n                    if (isNewRecord && fieldRecommendation[FIELD_RECOMMENDATION_IS_CONFIDENT_KEY] && !fieldStampRecommendations[field]) {\n                        fieldStampRecommendations[field] = fieldRecommendation[FIELD_RECOMMENDATION_STAMP_DETAILS_KEY];\n                    }\n                }\n                if (fieldMessageRecommendations[field]) {\n                    fieldMessageRecommendations[field].push(...fieldMessages);\n                } else {\n                    fieldMessageRecommendations[field] = fieldMessages;\n                }\n            }\n        }\n        clearPreviousRecommendations();\n        if (isNewRecord) {\n            stampFieldRecommendations(fieldStampRecommendations);\n        }\n        showFieldMessages(fieldMessageRecommendations);\n    }\n    const getRecommendations = () => {\n        const fieldsToMonitor = api.state[FIELDS_TO_MONITOR] || [];\n        if (event.name == FIELD_VALUE_CHANGED || event.name == FIELD_VALUE_CHANGED_NEW_EVENT) {\n            const fieldName = event.payload.fieldName;\n            if (fieldsToMonitor.indexOf(fieldName) == -1) {\n                return;\n            }\n        }\n        let fields = {};\n        if (isDataControllerInitialized() && (event.name == FIELD_VALUE_CHANGED) || event.name == FIELD_VALUE_CHANGED_NEW_EVENT)\n            fields = getChangedFields();\n        api.data.get_field_recommendations.execute({\n            'table': api.context.props.table,\n            'sysId': (isNewRecord ? NEW_RECORD_SYS_ID : api.context.props.sysId),\n            'fields': JSON.stringify(fields)\n        });\n    }\n\n    const handleOpenRecord = () => {\n        const {\n            routeMapping,\n            buildDefaultRoutePayload\n        } = imports[\"global.recordRoutesMapping\"]();\n        var route = 'record';\n        var targetRoute = 'current';\n        const defaultRoutePayload = buildDefaultRoutePayload(route, targetRoute, event);\n        const routeMap = api.data.recommended_actions_dynamic_routing.routeMap;\n        const payload = routeMapping(routeMap, defaultRoutePayload, event);\n        api.emit(NAV_ITEM_SELECTED, payload);\n    }\n\n    const addRANotification = () => {\n        var item = event.payload.notificationItem;\n        var itemId = event.payload.notificationItem.id;\n        api.emit(NOW_UXF_PAGE_ADD_NOTIFICATIONS, {\n            items: [\n                item\n            ],\n        });\n        helpers.timing.setTimeout(() => api.emit(NOW_UXF_PAGE_REMOVE_NOTIFICATIONS, {\n            items: [{ id: itemId }]\n        }), 5000);\n\n    }\n\n    const handleActionClicked = () => {\n        if (event.payload.actionProps) {\n            if (event.payload.actionProps.type == 'guidedDecisionGuidance'){\n                helpers.navigate.to('guidance', { 'recommender': event.payload.actionProps.recommender, 'recommendedBy': event.payload.actionProps.recommendedBy}, {\"actionConfigurations\": JSON.stringify(event.payload.actionProps.actionConfigurations)}, false, false, 'current');\n            }else if (event.payload.actionProps.type == 'guidedDecision')\n                helpers.navigate.to('guided-decisions', { 'executionId': event.payload.actionProps.executionId, 'decisionTreeId': event.payload.actionProps.decisionTreeId }, {}, false, false, 'current');\n            else if (event.payload.actionProps.type == 'raExpandedSearch') {\n                const { contextTable, contextId, contextSysId, searchTerm,selectedFilterTab,selectedFacetOptions, selectedSortOption,actionConfigurations } = event.payload.actionProps;\n                helpers.navigate.to('ra-expanded-search', { 'contextTable': contextTable, 'contextId': contextId }, {'contextSysId': contextSysId, 'searchTerm': searchTerm, 'selectedFilterTab': selectedFilterTab, 'selectedFacetOptions': selectedFacetOptions, 'selectedSortOption': selectedSortOption , 'actionConfigurations': JSON.stringify(actionConfigurations)}, false, false, 'current');\n            }\n        }\n\n    }\n\n    const handleRAEvents = () => {\n        if (event.name === RA_ADD_NOTIFICATION_REQUESTED)\n            addRANotification();\n        else if (event.name === RA_ACTION_CLICKED)\n            handleActionClicked();\n        else if (event.name === RA_LINK_CLICKED)\n            handleOpenRecord();\n    }\n\n    return {\n        getRecommendations: getRecommendations,\n        showRecommendations: showRecommendations,\n        handleRAEvents: handleRAEvents\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"670f1aa2693b0d10f877d79bb5fe3238","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/427fe83177221010d7159b71a91061e1","value":"427fe83177221010d7159b71a91061e1"},"sys_update_name":"sys_ux_client_script_include_670f1aa2693b0d10f877d79bb5fe3238","sys_updated_by":"admin","api_name":"sn_nb_action.RAHelper","sys_created_on":"2022-06-03 11:38:38","name":"RAHelper","sys_name":"RAHelper","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/427fe83177221010d7159b71a91061e1","value":"427fe83177221010d7159b71a91061e1"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"3","includes":"","sys_updated_on":"2024-10-04 20:12:08","sys_tags":"","script":"function include({imports}) {\n\n    /**\n     * \n     * @param elementName A element ideally in the format <sectionName>:<fieldName> but will accept <fieldName> only\n     * @param updatedVal Value to set\n     * @param policyData Policy data json\n     * @returns Updated policy data json\n     */\n    const _setPolicyModelData = (elementName, updatedVal, policyData) => {\n\n        let section, fieldName;\n        if (elementName && elementName.includes(\":\")) {\n            const nameArr = elementName.split(\":\");\n            section = nameArr[0];\n            fieldName = nameArr[1];\n        } else {\n            fieldName = elementName;\n        }\n\n        if (!section) {\n            // search the policyData json for the correct key/value. policy data should only 2 levels deep.\n            section = Object.keys(policyData).find((policyDataSection) => Object.values(policyDataSection).includes(fieldName));\n            if (!section) {\n                // Given field wasn't found on the model, print warning and return original policyData object \n                console.warn(\"Could not find fieldName in policy data for \" + fieldName);\n                return policyData;\n            }\n        }\n        policyData[section][fieldName] = updatedVal;\n        return policyData;\n    }\n\n\n    return {\n        setPolicyModelData: _setPolicyModelData\n    }\n }","sys_class_name":"sys_ux_client_script_include","sys_id":"676c2b2343c0b11017b739603ab8f24f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_676c2b2343c0b11017b739603ab8f24f","sys_updated_by":"admin","api_name":"sn_cmdb_ws.SetPolicyModelData","sys_created_on":"2023-07-21 22:34:07","name":"SetPolicyModelData","sys_name":"SetPolicyModelData","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"12","includes":"bfb0833a5330211029d7ddeeff7b1247","sys_updated_on":"2023-04-04 23:45:29","sys_tags":"","script":"function include({\n    imports\n}) {\n    const {\n        NowDateTime\n    } = imports['sn_uxf.core_libraries']();\n    const {\n        dateFormatMap\n    } = imports['global.ScheduleCalendarUtils']();\n\n    const DEFAULT_DATETIME_FORMAT = \"YYYY-MM-DD HH:mm:ss\";\n\n    const convertTimezone = function (time, fromTZ, toTZ, dateTimeFormat) {\n        dateTimeFormat = dateTimeFormat == null ? DEFAULT_DATETIME_FORMAT : dateTimeFormat;\n        return NowDateTime.tz(time, dateTimeFormat, fromTZ)\n            .tz(toTZ)\n            .format(dateTimeFormat);\n    };\n\n    const getNowDateTimeWithTZ = (api, dateTime, scheduleTimeZone, dateTimeFormat) => {\n        const userTimeZone = api.context.session.user.timeZone;\n\n        if (scheduleTimeZone) {\n            dateTime = convertTimezone(dateTime, userTimeZone, scheduleTimeZone, dateTimeFormat);\n        }\n        return NowDateTime(dateTime, dateFormat);\n    };\n\n    const getFormattedDateStringForMoveEventModal = async function (api, helpers, startDateTime, endDateTime, scheduleTimeZone) {\n        const userTimeFormat = api.context.session.user.timeFormat;\n        const userDateFormat = dateFormatMap['DAY'][api.context.session.user.dateFormat];\n        const startDateTimeConvertedTZ = getNowDateTimeWithTZ(api, startDateTime, scheduleTimeZone, DEFAULT_DATETIME_FORMAT);\n        const endDateTimeConvertedTZ = getNowDateTimeWithTZ(api, endDateTime, scheduleTimeZone, DEFAULT_DATETIME_FORMAT);\n        const startDateFormatted = startDateTimeConvertedTZ.format(userDateFormat);\n        const startTime = startDateTimeConvertedTZ.format(userTimeFormat);\n        const endDateTimeFormatted = endDateTimeConvertedTZ.format(userDateFormat);\n        const endTime = endDateTimeConvertedTZ.format(userTimeFormat);\n        const returnStringTemplate = 'Please confirm that you would like to move this event to now start on {0} {1} and end on {2} {3}.';\n        return await helpers.translate(returnStringTemplate, startDateFormatted, startTime, endDateTimeFormatted, endTime);\n    }\n\n    return {\n        convertTimezone: convertTimezone,\n        getFormattedDateStringForMoveEventModal: getFormattedDateStringForMoveEventModal\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"67c7c603432da11089418f2c8ab8f214","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/15672bfb04b12210559073c06a02f7e3","value":"15672bfb04b12210559073c06a02f7e3"},"sys_update_name":"sys_ux_client_script_include_67c7c603432da11089418f2c8ab8f214","sys_updated_by":"maint","api_name":"global.TimeZoneUtil","sys_created_on":"2023-03-17 19:42:11","name":"TimeZoneUtil","sys_name":"TimeZoneUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Escalation policy name is required.\"\n    },\n    {\n        \"message\": \"Shift field is required.\"\n    },\n    {\n        \"message\": \"Escalation policy template is required.\"\n    },\n    {\n        \"message\": \"Description field is required.\"\n    },\n    {\n        \"message\": \"Order field is required.\"\n    },\n    {\n        \"message\": \"Table field is required.\"\n    },\n    {\n        \"message\": \"Escalation step name is required, found empty for step {0}\"\n    },\n    {\n        \"message\": \"Escalation step {0} has cyclic dependency on the same group on which this escalation policy is defined\"\n    },\n    {\n        \"message\": \"Time between notifications is required when number of notifications is set, found empty for step {0}\"\n    },\n    {\n        \"message\": \"Notification preferences template is required.\"\n    },\n    {\n        \"message\": \"Escalation notification contact preference attempt number is required, found empty for attempt {0}\"\n    },\n    {\n        \"message\": \"Escalation notification contact preference type is required, found empty for attempt {0}\"\n    }\n]","access":"package_private","sys_mod_count":"104","includes":"","sys_updated_on":"2024-06-07 09:34:28","sys_tags":"","script":"function include({\n    imports\n}) {\n    class OnCallEscalationPolicyClientUtilsSNC {\n        static getTransformedPayloadForSubmit(policyName, basicInfoSection, conditionsSection, stepsSection, notificationsSection, escalationPolicyType, rotaId, escalationSetId) {\n            var transformedLoad = {};\n            transformedLoad.escalation_policy_type = escalationPolicyType;\n            if (rotaId && rotaId != \"\") {\n                transformedLoad.sys_id = \"-1\";\n                transformedLoad.is_dirty = true;\n            } else if (escalationSetId && escalationSetId != \"\") {\n                transformedLoad.sys_id = escalationSetId;\n                transformedLoad.is_dirty = true;\n            }\n            transformedLoad.basic_info = {\n                \"active\": basicInfoSection.active,\n                \"cmn_rota\": basicInfoSection.cmn_rota,\n                \"default\": basicInfoSection.default,\n                \"order\": basicInfoSection.default ? \"\" : basicInfoSection.order,\n                \"description\": basicInfoSection.description,\n                \"name\": policyName.value\n            };\n            transformedLoad.conditions = {\n                \"table\": basicInfoSection.default ? \"\" : conditionsSection.table,\n                \"encoded_query\": basicInfoSection.default ? \"\" : conditionsSection.condition\n            };\n            transformedLoad.escalation_notifications = {\n                \"override_user_contact_preference\": notificationsSection.overrideUserContactPreference\n            };\n            transformedLoad.escalation_notifications.notifications = notificationsSection.attempts;\n            let notifArr = transformedLoad.escalation_notifications.notifications;\n            for (var i = 0; i < notifArr.length; i++) {\n\n                let commTypes = [...notifArr[i].communication_types];\n                var commTypesStr = \"\";\n                for (var j = 0; j < commTypes.length; j++) {\n                    if (commTypesStr != \"\")\n                        commTypesStr += \",\";\n                    commTypesStr += commTypes[j].sys_id;\n                }\n                notifArr[i].communication_types = commTypesStr;\n                notifArr[i].cmn_rota_escalation_set = escalationSetId || \"-1\";\n                notifArr[i].type = \"escalation_set\";\n                notifArr[i].is_dirty = true;\n            }\n            transformedLoad.escalation_notifications.notifications = notifArr;\n            transformedLoad.escalation_steps = {\n                \"steps\": [...stepsSection.steps]\n            };\n            return transformedLoad;\n        };\n\n        static async validateEscPolicyData(helpers, policyName, basicInfoSection, conditionsSection, stepsSection, notificationsSection, groupId) {\n            var dataValidationResult = {\n                status: \"error\",\n                errorMsgs: []\n            };\n            basicInfoSection.isInvalid = false;\n            conditionsSection.isInvalid = false;\n            stepsSection.isInvalid = false;\n            notificationsSection.isInvalid = false;\n            if (!policyName.value || policyName.value == \"\") {\n                dataValidationResult.errorMsgs.push(await helpers.translate(\"Escalation policy name is required.\"));\n            }\n            if (!basicInfoSection.cmn_rota || basicInfoSection.cmn_rota == \"\") {\n                dataValidationResult.errorMsgs.push(await helpers.translate(\"Shift field is required.\"));\n                basicInfoSection.isInvalid = true;\n            }\n            if(basicInfoSection.createMode == \"from_template\" && (!basicInfoSection.template || basicInfoSection.template == \"\")){\n                dataValidationResult.errorMsgs.push(await helpers.translate(\"Escalation policy template is required.\"));\n                basicInfoSection.isInvalid = true;\n            }\n            if (!basicInfoSection.description || basicInfoSection.description== \"\") {\n                    dataValidationResult.errorMsgs.push(await helpers.translate(\"Description field is required.\"));\n                    basicInfoSection.isInvalid = true;\n            }\n            if (!basicInfoSection.default) {\n                if (!basicInfoSection.order || basicInfoSection.order == \"\") {\n                    dataValidationResult.errorMsgs.push(await helpers.translate(\"Order field is required.\"));\n                    basicInfoSection.isInvalid = true;\n                }\n                if (!conditionsSection.table || conditionsSection.table == \"\") {\n                    dataValidationResult.errorMsgs.push(await helpers.translate(\"Table field is required.\"));\n                    conditionsSection.isInvalid = true;\n                }\n            }\n            if (stepsSection.steps.length > 0) {\n                for (var i = 0; i < stepsSection.steps.length; i++) {\n                    var step = stepsSection.steps[i];\n                    if (!step.name || step.name == \"\" || (typeof step.name != \"string\" && step.name.value == \"\")) {\n                        dataValidationResult.errorMsgs.push(await helpers.translate(\"Escalation step name is required, found empty for step {0}\", (i + 1)));\n                        stepsSection.isInvalid = true;\n                    }\n                   var specificGroups = step.sys_user_groups || \"\";\n                   if (specificGroups.indexOf(groupId) !== -1) {\n                        dataValidationResult.errorMsgs.push(await helpers.translate('Escalation step {0} has cyclic dependency on the same group on which this escalation policy is defined', i+1));\n                        stepsSection.isInvalid = true;\n                  }\n                   if (step.reminders && !step.time_between_reminders) {\n                        dataValidationResult.errorMsgs.push(await helpers.translate(\"Time between notifications is required when number of notifications is set, found empty for step {0}\", (i + 1)));\n                        stepsSection.isInvalid = true;\n                   }\n                }\n            }\n            if(notificationsSection.preferenceMode == \"template\" && (!notificationsSection.template || notificationsSection.template == \"\")){\n                dataValidationResult.errorMsgs.push(await helpers.translate(\"Notification preferences template is required.\"));\n                notificationsSection.isInvalid = true;\n            }\n            if (notificationsSection.attempts.length > 0) {\n                for (var i = 0; i < notificationsSection.attempts.length; i++) {\n                    var attempt = notificationsSection.attempts[i];\n                    if (!attempt.contact_attempt || attempt.contact_attempt == \"\") {\n                        dataValidationResult.errorMsgs.push(await helpers.translate(\"Escalation notification contact preference attempt number is required, found empty for attempt {0}\", (i + 1)));\n                        notificationsSection.isInvalid = true;\n                    }\n                    if (!attempt.communication_types || attempt.communication_types.length == 0) {\n                        dataValidationResult.errorMsgs.push(await helpers.translate(\"Escalation notification contact preference type is required, found empty for attempt {0}\", (i + 1)));\n                        notificationsSection.isInvalid = true;\n                    }\n                }\n            }\n            return dataValidationResult;\n        };\n\n\t//time strings are expected in d HH:mm:ss\n\tstatic addTimeDuration(timeStr1, timeStr2) {\n\t\tif (!timeStr1 || !timeStr2) return;\n\n\t\tvar tokens1 = timeStr1.split(\" \");\n\t\tvar tokens2 = timeStr2.split(\" \");\n\n\t\tif (tokens1.length != 2 || tokens2.length != 2) return;\n\n\t\tconst dayRegex = new RegExp(/^\\d+$/);\n\t\tif (!dayRegex.test(tokens1[0]) || !dayRegex.test(tokens2[0])) return;\n\n\t\tconst timeRegex = new RegExp(/^(?:[01]?[0-9]|2[0-3]):[0-5]?[0-9](?::[0-5]?[0-9])?$/);\n\t\tif (!timeRegex.test(tokens1[1]) || !timeRegex.test(tokens2[1])) return;\n\n\t\tvar days1 = tokens1[0];\n\t\tvar days2 = tokens2[0];\n\t\tvar timeStrArr1 = tokens1[1].split(\":\");\n\t\tvar timeStrArr2 = tokens2[1].split(\":\");\n\n\t\tvar secs =  (parseInt(timeStrArr1[2]) + parseInt(timeStrArr2[2])) % 60;\n\t\tvar mins =  Math.floor((parseInt(timeStrArr1[2]) + parseInt(timeStrArr2[2])) / 60);\n\t\tmins =  mins + (parseInt(timeStrArr1[1]) + parseInt(timeStrArr2[1])) % 60;\n\t\tvar hrs =  Math.floor((parseInt(timeStrArr1[1]) + parseInt(timeStrArr2[1])) / 60);\n\t\thrs =  hrs + (parseInt(timeStrArr1[0]) + parseInt(timeStrArr2[0])) % 24;\n\t\tvar days =  Math.floor((parseInt(timeStrArr1[0]) + parseInt(timeStrArr2[0])) / 24);\n\t\tdays =  days + parseInt(days1) + parseInt(days2);\n\n\t\tsecs = (secs < 10) ? \"0\" + secs : \"\" + secs;\n\t\tmins = (mins < 10) ? \"0\" + mins : \"\" + mins;\n\t\thrs = (hrs < 10) ? \"0\" + hrs : \"\" + hrs;\n\t\t\n\t\treturn days + \" \" + hrs + \":\" + mins + \":\" + secs;\n\t};\n\n\t//time string is expected in d HH:mm:ss\n\tstatic repeatTimeDuration(timeStr, count) {\n\t\tif (!timeStr || !count) return;\n\n\t\tvar totalTime = \"0 00:00:00\";\n\n\t\tfor (var i = 0; i < count; i++) {\n\t\t\ttotalTime = this.addTimeDuration(totalTime, timeStr);\n\t\t\tif (!totalTime) return;\n\t\t};\n\n\t\treturn totalTime;\n\t};\n\n\tstatic updateTotalTimeToCurStep(escalationStepSection, curStepIndex) {\n\t\tvar totalTimeDurToCurStep;\n\t\tfor (var ind = curStepIndex; ind < escalationStepSection.steps.length; ind++) {\n\t\t\tif (ind === 0){\n\t\t\t\ttotalTimeDurToCurStep = \"0 00:00:00\";\n\t\t\t\tescalationStepSection.steps[0].total_time_to_cur_step = {\n\t\t\t\t\tvalue: totalTimeDurToCurStep,\n\t\t\t\t\tduration_value: totalTimeDurToCurStep\n\t\t\t\t};\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tvar stepData = escalationStepSection.steps[ind];\n\t\t\tvar previousStepData = escalationStepSection.steps[ind - 1];\n\t\t\tvar reminders = previousStepData.reminders.value;\n\t\t\tif (reminders) reminders = parseInt(reminders);\n\t\t\tvar timeBetweenReminders = previousStepData.time_between_reminders.value;\n\t\t\tif (timeBetweenReminders) {\n\t\t\t\ttimeBetweenReminders = timeBetweenReminders.split(\" \");\n\t\t\t\tif (timeBetweenReminders.length) timeBetweenReminders = timeBetweenReminders[timeBetweenReminders.length - 1];\n\t\t\t}\n\t\t\tvar timeToNextStep = previousStepData.time_to_next_step.value;\n\t\t\tif (timeToNextStep) {\n\t\t\t\ttimeToNextStep = timeToNextStep.split(\" \");\n\t\t\t\tif (timeToNextStep.length) timeToNextStep = timeToNextStep[timeToNextStep.length - 1];\n\t\t\t}\n\n\t\t\ttotalTimeDurToCurStep = previousStepData.total_time_to_cur_step.duration_value;\n\t\t\tif (totalTimeDurToCurStep.split(\" \").length < 2) totalTimeDurToCurStep = \"0 \" + totalTimeDurToCurStep;\n\n\t\t\tif (reminders && timeBetweenReminders) {\n\t\t\t\tvar totalReminderTimeDur = this.repeatTimeDuration(\"0 \" + timeBetweenReminders, reminders);\n\t\t\t\ttotalReminderTimeDur = totalReminderTimeDur || \"0 00:00:00\";\n\t\t\t\ttotalTimeDurToCurStep = this.addTimeDuration(totalTimeDurToCurStep, totalReminderTimeDur);\n\t\t\t}\n\t\t\tif (timeToNextStep) {\n\t\t\t\ttotalTimeDurToCurStep = this.addTimeDuration(totalTimeDurToCurStep, \"0 \" + timeToNextStep);\n\t\t\t}\n\n\t\t\tstepData.total_time_to_cur_step = {\n\t\t\t\tvalue: totalTimeDurToCurStep,\n\t\t\t\tduration_value: totalTimeDurToCurStep\n\t\t\t};\n\t\t}\n\t};\n\n    }\n    return OnCallEscalationPolicyClientUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"68e79c7d433ab910b8cf8beeaab8f284","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_68e79c7d433ab910b8cf8beeaab8f284","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallEscalationPolicyClientUtilsSNC","sys_created_on":"2023-11-29 13:23:19","name":"OnCallEscalationPolicyClientUtilsSNC","sys_name":"OnCallEscalationPolicyClientUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2024-02-21 07:02:39","sys_tags":"","script":"async function include({imports}, helpers, dashboardId, visibility){\n    let url = '/api/now/v1/par/dashboards/' + dashboardId + '?visibility=' + visibility;\n    let response = await helpers.snHttp(url, {\n        method: 'GET',\n        body: {}\n    });\n    return response;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"6b4623285324461066e3ddeeff7b1209","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_update_name":"sys_ux_client_script_include_6b4623285324461066e3ddeeff7b1209","sys_updated_by":"admin","api_name":"sn_sd.getPARDashboardAPI","sys_created_on":"2024-02-21 07:02:39","name":"getPARDashboardAPI","sys_name":"getPARDashboardAPI","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Certification field\"\n    },\n    {\n        \"message\": \"(empty)\"\n    }\n]","access":"package_private","sys_mod_count":"29","includes":"","sys_updated_on":"2024-03-21 20:29:40","sys_tags":"","script":"function dataCertificationListUtil(proxyArg, params) { \n    const { api, event, helpers, imports } = params;\n\n    const transformColumnsForDisplay = async (columnDefs, certificationFields) => {\n        const CERTIFICATION_FIELD_LABEL = await helpers.translate('Certification field');\n        let updatedColumnDefs = JSON.parse(JSON.stringify(columnDefs));\n        updatedColumnDefs.columns.forEach((column) => {\n             if (certificationFields.includes(column.key)) {\n                 column.icons.endIcons = [{label: CERTIFICATION_FIELD_LABEL, value: 'circle-check-outline'}, ...column.icons.endIcons];\n             }\n         });\n\n        return updatedColumnDefs;\n    }\n\n    const transformRowsForDisplay = async (rowDefs, columnDefs, certificationFields, attributeStatus) => {\n        const EMPTY_VALUE_LABEL = await helpers.translate('(empty)');\n        let updatedRowDefs = JSON.parse(JSON.stringify(rowDefs));\n        updatedRowDefs.rows.forEach((row) => {\n            columnDefs.columns.forEach((column) => {\n                if (certificationFields.includes(column.key)) {\n                    let certificationState = attributeStatus[row.key][column.key].status;\n                    let cell = row.cells[column.key];\n                    let label = cell.value;\n                    if (cell && cell.type && (cell.type == 'number' || cell.type == 'boolean'))\n                        label = cell.metadata.internalValue;\n                    label = label || EMPTY_VALUE_LABEL;\n                    switch (certificationState) {\n                        case \"failed\":\n                            cell[\"highlightedValue\"] = {\n                                color: \"critical\",\n                                value: label,\n                                variant: \"tertiary\",\n                                showIcon: true,\n                                iconName: \"close-fill\"\n                            };\n                            break;\n                        case \"certified\":\n                            cell[\"highlightedValue\"] = {\n                                value: label,\n                                color: \"positive\",\n                                variant: \"tertiary\",\n                                showIcon: true,\n                                iconName: \"check-fill\"\n                            };\n                            break;\n                        case \"cancelled\":\n                            cell[\"highlightedValue\"] = {\n                                color: \"gray\",\n                                value: label,\n                                variant: \"tertiary\",\n                                showIcon: true,\n                                iconName: \"ban-fill\"\n                            };\n                            break;\n                    }\n                }\n            });\n        });\n\n        return updatedRowDefs;\n    }\n\n    return {\n        transformColumnsForDisplay,\n        transformRowsForDisplay\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"6b5ebe0a53c102106adfddeeff7b12a3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_6b5ebe0a53c102106adfddeeff7b12a3","sys_updated_by":"admin","api_name":"sn_cmdb_ws.DataCertificationListUtil","sys_created_on":"2024-03-21 16:33:36","name":"DataCertificationListUtil","sys_name":"DataCertificationListUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"2","includes":"5b80cf8e530301103eacddeeff7b12f6","sys_updated_on":"2022-04-25 18:05:57","sys_tags":"","script":"function include({imports}) { \n\n    let SOWLandingPageTier2UtilsSNC = imports['sn_sow_itsm_common.SOWLandingPageTier2UtilsSNC']();\n    class SOWLandingPageTier2Utils extends SOWLandingPageTier2UtilsSNC {\n\n    }\n\n    return SOWLandingPageTier2Utils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"6ce083ce530301103eacddeeff7b1208","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_6ce083ce530301103eacddeeff7b1208","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWLandingPageTier2Utils","sys_created_on":"2022-04-25 18:03:11","name":"SOWLandingPageTier2Utils","sys_name":"SOWLandingPageTier2Utils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"3","includes":"d618d457430d2110cd5b8beeaab8f240","sys_updated_on":"2023-02-22 08:00:31","sys_tags":"","script":"function include({imports}) { \n    let SowRemediateServerPlaybookConfigSNC = imports['sn_sow_inc.SowRemediateServerPlaybookConfigSNC']();\n    class SowRemediateServerPlaybookConfig extends SowRemediateServerPlaybookConfigSNC {\n\n    }\n    return SowRemediateServerPlaybookConfig;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"6e481c57430d2110cd5b8beeaab8f221","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_6e481c57430d2110cd5b8beeaab8f221","sys_updated_by":"admin","api_name":"sn_sow_inc.SowRemediateServerPlaybookConfig","sys_created_on":"2023-02-21 09:14:33","name":"SowRemediateServerPlaybookConfig","sys_name":"SowRemediateServerPlaybookConfig","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"This action couldn’t be completed due to an error. Contact your ServiceNow administrator about this situation.\"\n    }\n]","access":"public","sys_mod_count":"235","includes":"","sys_updated_on":"2024-09-02 10:00:33","sys_tags":"","script":"function include(proxyArg, params) {\n    const {\n        api,\n        event,\n        helpers,\n        imports\n    } = params;\n    const handleSearchEvents = () => {\n        const {\n            name,\n            payload\n        } = event;\n        switch (name) {\n            case 'MACROPONENT_READY': {\n                handleMacroponentPropertyChange();\n                break;\n            }\n            case 'MACROPONENT_PROPERTY_CHANGED': {\n                handleMacroponentPropertyChange();\n                break;\n            }\n            case 'MACROPONENT_VIEWPORT_LOAD_COMPLETED': {\n                if(payload.route == \"guidance\"){\n                    api.setState('hideSidepanel', false);\n                }\n                break;\n            }\n            case 'NOW_INPUT#VALUE_SET': {\n                helpers.navigate.setRouteParams({\n                    'params': {\n                        'contextSysId': api.context.props.contextSysId,\n                        'searchTerm': payload.value,\n                        'selectedFilterTab': 'all-filter',\n                        'selectedFacetOptions': 'empty-facet',\n                        'selectedSortOption': \"empty-sort-option\"\n                    }\n                });\n                break;\n            }\n            case 'NOW_INPUT#ENTER_KEYDOWN': {\n                helpers.navigate.setRouteParams({\n                    'params': {\n                        'contextSysId': api.context.props.contextSysId,\n                        'searchTerm': payload.fieldValue,\n                        'selectedFilterTab': 'all-filter',\n                        'selectedFacetOptions': 'empty-facet',\n                        'selectedSortOption': \"empty-sort-option\"\n                    }\n                });\n                break;\n            }\n            case 'SN_SEARCH_RESULT_WRAPPER#TAB_FILTER_SELECTED': {\n                let selectedFilter = JSON.parse(payload.selectedFilter);\n                if (!selectedFilter) {\n                    selectedFilter = [];\n                }\n                api.setState('selectedFilterTab', selectedFilter);\n                api.setState('facetFilters', []);\n                helpers.navigate.setRouteParams({\n                    'params': {\n                        'contextSysId': api.context.props.contextSysId,\n                        'searchTerm': api.state.searchTerm,\n                        'selectedFilterTab': selectedFilter.length > 0 ? selectedFilter : 'all-filter',\n                        'selectedFacetOptions': api.state.selectedFacetOptions.length > 0  ?  api.state.selectedFacetOptions : 'empty-facet',\n                        'selectedSortOption': api.state.selectedSortOption.length > 0 ? api.state.selectedSortOption : \"empty-sort-option\"\n                    }\n                });\n                break;\n            }\n            case 'SN_SEARCH_RESULT_WRAPPER#FACET_SELECTIONS_UPDATED': {\n                var selectedFilters = payload.selectedFilters;\n                if (typeof selectedFilters === 'object') {\n                    selectedFilters = [];\n                } else {\n                    selectedFilters = JSON.parse(selectedFilters);\n                }\n                api.setState('selectedFacetOptions', selectedFilters);\n                var selectedFilterParam = selectedFilters.length > 0 ? selectedFilters : 'empty-facet';\n                const {\n                    searchTerm,\n                    selectedFilterTab,\n                    selectedSortOption\n                } = api.state;\n                helpers.navigate.setRouteParams({\n                    'params': {\n                        'contextSysId': api.context.props.contextSysId,\n                        'searchTerm': searchTerm,\n                        'selectedFilterTab': selectedFilterTab.length > 0 ? selectedFilterTab : 'all-filter',\n                        'selectedFacetOptions': selectedFilterParam,\n                        'selectedSortOption': selectedSortOption.length > 0 ? selectedSortOption : \"empty-sort-option\"\n                    }\n                });\n                break;\n            }\n            case 'SN_SEARCH_RESULT_WRAPPER#PAGINATION_BUTTON_CLICKED': {\n                const paginationToken = payload.paginationToken;\n                const {\n                    searchTerm,\n                    selectedFilterTab,\n                    selectedFacetOptions,\n                    selectedSortOption\n                } = api.state;\n                fetchSearchResults({\n                    search_term: searchTerm,\n                    filter: selectedFilterTab,\n                    facet_filter: selectedFacetOptions,\n                    sort_filter: selectedSortOption,\n                    paginationToken\n                });\n                break;\n            }\n            case 'SN_SEARCH_RESULT_WRAPPER#SORT_FILTER_SELECTED' : {\n                const selectedSortOption = JSON.parse(payload.selectedFilter);\n                const {\n                    searchTerm,\n                    selectedFilterTab,\n                    selectedFacetOptions\n                } = api.state;\n                api.setState('selectedSortOption', selectedSortOption);\n                helpers.navigate.setRouteParams({\n                    'params': {\n                        'contextSysId': api.context.props.contextSysId,\n                        'searchTerm': searchTerm,\n                        'selectedFilterTab': selectedFilterTab.length > 0 ? selectedFilterTab : 'all-filter',\n                        'selectedFacetOptions': selectedFacetOptions.length > 0 ? selectedFacetOptions : 'empty-facet',\n                        'selectedSortOption': selectedSortOption.length > 0 ? selectedSortOption : \"empty-sort-option\"\n                    }\n                });\n                break;\n            }\n            case 'NOW_BUTTON_ICONIC#CLICKED': {\n                api.setState('hideSidepanel', true);\n                updateSelectedSearchResult();\n                break;\n            }\n        }\n    };\n\n    const handleMacroponentPropertyChange = () => {\n        const searchTerm = api.context.props.searchTerm;\n        let selectedFilterTab = api.context.props.selectedFilterTab;\n        let selectedFacetOptions = api.context.props.selectedFacetOptions;\n        let selectedSortOption = api.context.props.selectedSortOption;\n        selectedFilterTab = selectedFilterTab == null || selectedFilterTab == 'all-filter' ||  selectedFilterTab == 'selected-facet-options' ? [] : selectedFilterTab;\n        selectedFilterTab = typeof selectedFilterTab == 'object' ? selectedFilterTab : [selectedFilterTab];\n        selectedFacetOptions = selectedFacetOptions == null ||  selectedFacetOptions == 'empty-facet'  || selectedFacetOptions == 'selected-sort-option' ? [] : selectedFacetOptions;\n        selectedFacetOptions = typeof selectedFacetOptions == 'object' ? selectedFacetOptions : selectedFacetOptions.split(',');\n        selectedSortOption = (selectedSortOption == null || selectedSortOption == [] || selectedSortOption == \"empty-sort-option\" )?[]:selectedSortOption;\n        selectedSortOption = typeof selectedSortOption == 'object' ? selectedSortOption : [selectedSortOption];\n        updateProperties(searchTerm, selectedFilterTab, selectedFacetOptions, selectedSortOption);\n        fetchSearchResults({\n            search_term: searchTerm,\n            filter: selectedFilterTab,\n            facet_filter: selectedFacetOptions,\n            sort_filter: selectedSortOption\n        });\n    } \n    const updateProperties = (searchTerm, selectedFilterTab, selectedFacetOptions, selectedSortOption) => {\n        api.setState('searchTerm', searchTerm);\n        api.setState('selectedFilterTab', selectedFilterTab);\n        api.setState('selectedFacetOptions', selectedFacetOptions);\n        api.setState('selectedSortOption', selectedSortOption);\n    };\n\n    const fetchSearchResults = (payload) => {\n        const searchTerm = payload.search_term;\n        api.setState('isLoading', true);\n        api.setState('hideSidepanel', true);\n        if (!searchTerm || !searchTerm.trim()) {\n            api.setState('searchResults', []);\n            api.setState('searchFilters', []);\n            api.setState('facetFilters', []);\n            api.setState('selectedFilterTab', []);\n            api.setState('selectedFacetOptions', []);\n            api.setState('appliedFacetFiltersMetadata', []);\n            api.setState('isLoading', false);\n            return;\n        }\n        let currentPage = api.state.currentPage;\n        const paginationToken = payload.paginationToken;\n        if (!paginationToken) {\n            currentPage = 1;\n        } else {\n            const { previousPageToken, nextPageToken } = api.state.searchResultMetadata;\n            if (paginationToken === previousPageToken) {\n                currentPage--;\n            } else if (paginationToken === nextPageToken) {\n                currentPage++;\n            }\n        }\n        api.setState('currentPage', currentPage);\n        helpers.snHttp('/api/sn_nb_action/v1/next_best_action/actions/get_search_result_actions', {\n            method: \"POST\",\n            body: {\n                table: api.context.props.contextTable,\n                sys_id: api.context.props.contextId,\n                context_sys_id: api.context.props.contextSysId,\n                ...payload\n            },\n        }).then(response => {\n            const result = response.response.result;\n            const {\n                actionDetails,\n                filters,\n                facetFilters,\n                selectedFilter,\n                appliedFacetFiltersMetadata,\n                previousPaginationToken,\n                searchResultLimit,\n                paginationToken,\n                contextId,\n                applicableSortOptions\n            } = result;\n            var searchActionsCardDataObj = getListOfActionsData(actionDetails);\n            api.setState('searchResults', searchActionsCardDataObj);\n            var searchFilters = getSearchFilters(filters);\n            var sortOptions = getSortOptions(applicableSortOptions);\n            api.setState('searchFilters', searchFilters);\n            api.setState('sortOptions', sortOptions);\n            if (!selectedFilter || selectedFilter.length == 0) {\n                api.setState('facetFilters', []);\n                api.setState('appliedFacetFiltersMetadata', []);\n            } else {\n                api.setState('facetFilters', facetFilters);\n                api.setState('appliedFacetFiltersMetadata', appliedFacetFiltersMetadata);\n            }\n            const totalResultCount = getTotalResultCount(searchFilters, payload.filter);\n            api.setState('totalResultCount', totalResultCount);\n            api.setState('searchResultLimit', searchResultLimit);\n            const searchResultMetadata = {\n                previousPageToken: previousPaginationToken,\n                nextPageToken: paginationToken,\n                totalHits: getResultCountMessage(currentPage, searchActionsCardDataObj.items, searchResultLimit, totalResultCount),\n                searchTerm: searchTerm,\n                showResultCount: true,\n            };\n            api.setState('searchResultMetadata', searchResultMetadata);\n            api.setState('nbaContextRecordId', contextId);\n            api.setState('isLoading', false);\n        }).catch(error => {\n            api.setState('isLoading', false);\n            console.log('Error: ', error);\n        });\n    };\n\n    const getTotalResultCount = (filters, selectedFilterTab) => {\n        const sysId = (!selectedFilterTab || selectedFilterTab.length == 0) ? 'all' : selectedFilterTab[0];\n        const filter = filters.find(filter => filter.sysId == sysId);\n        return filter ? filter.count : 0;\n    };\n\n    const getSearchFilters = (filters) => {\n        return filters.map(filter => {\n            return {\n                sysId: filter.label.toLowerCase() == 'all' ? 'all' : filter.id,\n                ...filter\n            };\n        });\n    };\n\n    const getSortOptions = (applicableSortOptions) => {\n        return applicableSortOptions.map(applicableSortOption => {\n            return {\n                sysId: applicableSortOption.id,\n                label: applicableSortOption.label\n            };\n        })\n    }\n\n    const getNoEventSupportedActionConfigurations = (actionConfigurations) => {\n        for (let key in actionConfigurations) {\n            if (actionConfigurations.hasOwnProperty(key)) {\n                let config = actionConfigurations[key].configuration;\n                // Check if 'eventSupported' is present\n                if (config.hasOwnProperty('eventSupported')) {\n                    // Set 'eventSupported' to false\n                    config.eventSupported = false;\n                }\n            }\n        }\n        return actionConfigurations;\n    };\n\n    const getListOfActionsData = (listOfActions) => {\n        if (!listOfActions) {\n            return {\n                items: []\n            };\n        }\n        var listOfActionsCardData = [];\n        for (var i = 0; i < listOfActions.length; i++) {\n            let actionCard = getActionCardObject(listOfActions[i]);\n            actionCard.propValues.table = api.context.props.contextTable;\n            actionCard.propValues.tableSysId = api.context.props.contextId;\n            actionCard.propValues.contextSysId = api.context.props.contextSysId;\n            actionCard.propValues.searchResultId = i;\n            let actionConfigurations = api.context.props.actionConfigurations;\n             if (typeof actionConfigurations === 'string') {\n                    actionConfigurations = JSON.parse(actionConfigurations);\n                } \n            actionCard.propValues.actionConfigurations = getNoEventSupportedActionConfigurations(actionConfigurations);\n            listOfActionsCardData.push(actionCard);\n        }\n\n        var searchActionsCardDataObj = {};\n        searchActionsCardDataObj.items = listOfActionsCardData;\n        return searchActionsCardDataObj;\n    };\n\n    const getActionCardObject = (actionData) => {\n        let actionCard = {};\n        actionCard['template'] = \"sn-next-best-action-wrapper\";\n        actionCard['propValues'] = mapActionDataToPropValues(actionData);\n        return actionCard;\n    };\n\n    const mapActionDataToPropValues = (actionData) => {\n        const propValues = {};\n        propValues['name'] = actionData['title'];\n        propValues['description'] = actionData['description'];\n        propValues['recommendationHint'] = actionData['recommendationHint'];\n        propValues['callToActions'] = actionData['callToActions'];\n        propValues['actionTypeLabel'] = actionData['actionType'];\n        propValues['icon'] = actionData['iconName'];\n        propValues['actionStateLabel'] = actionData['actionState']['label'];\n        propValues['actionStateValue'] = actionData['actionState']['value'];\n        propValues['previewFields'] = actionData['customAttributes'] ? actionData['customAttributes']['previewFields'] : null;\n        propValues['customExperience'] = actionData['customExperience'];\n        propValues['sysId'] = actionData['actionId'];\n        propValues['actionAttributes'] = '';\n        propValues['useCase'] = actionData['useCase'];\n        propValues['actionInputs'] = actionData['actionInputs'];\n        propValues['actionTypeSysId'] = actionData['actionTypeSysId'];\n        propValues['actionId'] = actionData['actionId'];\n        propValues['renderer'] = actionData['renderer'];\n        propValues['isGenius'] = actionData['isGenius'];\n        propValues['isFullSearchView'] = true;\n        propValues['isSelected'] = false;\n\n        return propValues;\n    };\n\n    const handleSearchResultActions = () => {\n        var {\n            name,\n            payload\n        } = event;\n        switch (name) {\n            case 'SN_SEARCH_RESULT_WRAPPER#DECLARATIVE_ACTION':\n                {\n                    var eventName = payload.event;\n                    var actionPayload = payload.payload;\n                    if (eventName == 'ON_SINGLE_CLICK_ACTION') {\n                        var pathParams = {\n                            table_name: api.context.props.contextTable,\n                            sys_id: api.context.props.contextId,\n                            action_id: actionPayload.sysId\n                        };\n                        var body = {\n                            actionInputs: actionPayload.actionInputs,\n                            actionMetadata: actionPayload.actionMetadata\n                        };\n                        api.setState('selectedActionId', actionPayload.sysId);\n                        updateSelectedSearchResult();\n                        onSingleClickActionClicked(pathParams, body);\n                    }\n                    else if (eventName == 'ON_DRILL_DOWN_ACTION') {\n                        var contextTable = api.context.props.contextTable;\n                        var contextId = api.context.props.contextId;\n                        var selectedActionId = actionPayload.sysId;\n                        var actionBehavior = actionPayload.actionBehavior ?\n                            actionPayload.actionBehavior :\n                            actionPayload.actionMetadata.actionBehavior;\n                        var selectedActionState = actionPayload.actionStateValue;\n                        api.setState('selectedActionId', selectedActionId);\n                        updateSelectedSearchResult();\n                        if (selectedActionState == 'new') {\n                            onDrillDownActionClicked(contextTable, contextId, selectedActionId, actionBehavior);\n                        }\n                    }\n                    else if (eventName == 'UPDATE_SEARCH_RESULT_EXECUTION_ID') {\n                        var actionDetailId = actionPayload.actionDetailId;\n                        var searchResultId = actionPayload.searchResultId;\n                        var searchActionsCardDataObj = api.state.searchResults;\n                        var items = searchActionsCardDataObj.items.map((searchObj) => {\n                            if (searchObj.propValues.searchResultId === searchResultId) {\n                                searchObj.propValues.actionDetailId = actionDetailId;\n                            }\n                            return searchObj;\n                        });\n                        searchActionsCardDataObj.items = items;\n                        api.setState('searchResults', searchActionsCardDataObj);\n                    }\n                    else if (eventName == 'SN_NEXT_BEST_ACTION_LIST_CONNECTED#LINK_CLICKED') {\n                        var fieldProps = actionPayload.openRecordProps;\n                        if (fieldProps) {\n                            helpers.navigate.to(fieldProps.table === 'kb_knowledge' ? 'kb_view' : 'record', {\n                                'table': fieldProps.table,\n                                'sysId': fieldProps.sys_id\n                            }, {}, false, false, 'current');\n                        } else {\n                            helpers.navigate.to(actionPayload.table === 'kb_knowledge' ? 'kb_view' : 'record', {\n                                'table': actionPayload.table,\n                                'sysId': actionPayload.sys_id\n                            }, {}, false, false, 'current');\n                        }\n                    } else if (eventName == 'RA_EXPANDED_SEARCH#ADD_NOTIFICATION') {\n                        api.emit(eventName, actionPayload);\n                    }\n                    break;\n                }\n            case 'RECORD_WATCHER#MESSAGE_RECEIVED':\n                {\n                    var searchResultsObject = api.state.searchResults;\n                    var clickedActionDetailId = event.payload.data.sys_id;\n                    var searchResults = { ...searchResultsObject };\n                    let items = [];\n                    let isSearchResultFound = false;\n                    searchResults.items.forEach(searchActionObj => {\n                        if (searchActionObj.propValues.actionDetailId == clickedActionDetailId) {\n                            isSearchResultFound = true;\n                        } else {\n                            items.push(searchActionObj);\n                        }\n                    });\n                    if (isSearchResultFound) {\n                        api.setState('hideSidepanel', true);\n                    }\n                    searchResults.items = items;\n                    api.setState('searchResults', searchResults);\n\n                    let searchResultMetadata = { ...api.state.searchResultMetadata };\n                    const { currentPage, searchResultLimit, totalResultCount } = api.state;\n                    searchResultMetadata.totalHits = getResultCountMessage(currentPage, items, searchResultLimit, totalResultCount);\n                    api.setState('searchResultMetadata', searchResultMetadata);\n                    break;\n                }\n        }\n    };\n\n    const onSingleClickActionClicked = (pathParams, body) => {\n        api.setState('hideSidepanel', true);\n        api.setState('isLoading', true);\n        helpers.snHttp('/api/sn_nb_action/v1/next_best_action/actions/' + pathParams.table_name + '/' + pathParams.sys_id + '/' + pathParams.action_id + '/execute', {\n            method: \"PATCH\",\n            body: body\n        }).then(response => {\n            var result = response.response.result;\n            var actionState = result.state ? result.state : \"\";\n            var statusCode = result.actionDetails && result.actionDetails.statusCode ? result.actionDetails.statusCode : '200';\n            api.setState('isLoading', false);\n            if (actionState == 'in_error') {\n                showRecommendationErrorMessage(result);\n            } else if (statusCode == '405') {\n                showRecommendationErrorMessage(result);\n                hideCurrentAction(api.state.searchResults, result);\n            } else {\n                showRecommendationCompletionMessage(result);\n            }\n        }).catch(error => {\n            api.setState('isLoading', false);\n            console.log('Execute API Error: ', error);\n        });\n    };\n\n    const onDrillDownActionClicked = (contextTable, contextId, selectedActionId, actionBehavior) => {\n        api.setState('hideSidepanel', true);\n        api.setState('isLoading', true);\n        helpers.snHttp('/api/sn_nb_action/v1/next_best_action/actions/' + contextTable + '/' + contextId + '/' + selectedActionId + '/start', {\n            method: \"PATCH\",\n        }).then(response => {\n            var result = response.response.result;\n            var statusCode = result.actionDetails && result.actionDetails.statusCode ? result.actionDetails.statusCode : '200';\n            api.setState('isLoading', false);\n            if (statusCode == '405') {\n                showRecommendationErrorMessage(result);\n            } else {\n                var actionConfigurations = JSON.parse(api.context.props.actionConfigurations);\n                var noEventSupportedActionConfigurations = getNoEventSupportedActionConfigurations(actionConfigurations);\n                var selectedActionTag = result.actionDetails.renderer;\n                var showInSubTab = actionBehavior === 'sub_tab';\n                if (showInSubTab) {\n                    if (result.actionDetails.attributes.type == 'guidedDecisionGuidance') {\n                       \n                        helpers.navigate.to('guidance', {\n                            'recommender': result.actionDetails.attributes.recommender,\n                            'recommendedBy': result.actionDetails.attributes.recommendedBy\n                        }, {'actionConfigurations':noEventSupportedActionConfigurations}, false, false, 'current');\n                    } else if (result.actionDetails.attributes.type == 'guidedDecision') {\n                        helpers.navigate.to('guided-decisions', {\n                            'executionId': result.actionDetails.attributes.executionId,\n                            'decisionTreeId': result.actionDetails.attributes.decisionTreeId\n                        }, {}, false, false, 'current');\n                    }\n                } else {\n                    if(typeof noEventSupportedActionConfigurations === \"object\"){\n                        actionConfigurations = JSON.stringify(noEventSupportedActionConfigurations);\n                    }\n                    \n                    const { recommender, recommendedBy } = result.actionDetails.attributes;\n                    api.emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', {\n                        viewportElementId: 'viewport_1',\n                        route: 'guidance',\n                        fields: { \"recommender\": recommender, \"recommendedBy\": recommendedBy },\n                        params: { \"isFullSearchView\": true , \"actionConfigurations\": noEventSupportedActionConfigurations}\n                    });\n                    updateSelectedSearchResult(selectedActionId);\n                }\n            }\n        }).catch(error => {\n            api.setState('isLoading', false);\n            console.log('Start API Error: ', error);\n        });\n\n    };\n\n    const updateSelectedSearchResult = (selectedActionId = '') => {\n        let searchActionsCardDataObj = { ...api.state.searchResults };\n        let items = searchActionsCardDataObj.items.map(searchObj => {\n            let actionDetailId = searchObj.propValues.actionDetailId;\n            searchObj.propValues.isSelected = !!actionDetailId && actionDetailId === selectedActionId;\n            return searchObj;\n        });\n        searchActionsCardDataObj.items = items;\n        api.setState('searchResults', searchActionsCardDataObj);\n    };\n\n    const showRecommendationCompletionMessage = (result) => {\n        var completionMessage = result.completionMessage ? result.completionMessage : '';\n        var notificationItem = {\n            id: \"nba_completed\",\n            type: \"success\",\n            message: completionMessage,\n            action: {\n                type: \"dismiss\"\n            },\n        };\n        api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: [\n                notificationItem\n            ],\n        });\n        helpers.timing.setTimeout(() => api.emit(\"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\", {\n            items: [{\n                id: \"nba_completed\"\n            }]\n        }), 5000);\n    };\n\n    const showRecommendationErrorMessage = async (result) => {\n        var message = await helpers.translate('This action couldn’t be completed due to an error. Contact your ServiceNow administrator about this situation.');\n        if (result.actionDetails && result.actionDetails.actionStatus == 'error') {\n            message = result.actionDetails && result.actionDetails.errorMessage ? result.actionDetails.errorMessage : message;\n        }\n        var notificationItem = {\n            id: \"nba_errored\",\n            status: \"critical\",\n            icon: \"circle-info-outline\",\n            content: {\n                type: \"html\",\n                value: \"<span>\" + message + \"</span>\",\n            },\n            action: {\n                type: \"dismiss\"\n            },\n        };\n        api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: [\n                notificationItem\n            ],\n        });\n        helpers.timing.setTimeout(() => api.emit(\"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\", {\n            items: [{\n                id: notificationItem.id\n            }]\n        }), 5000);\n    };\n\n    const hideCurrentAction = (searchResults, result) => {\n        var searchResults = { ...searchResults};\n        var items = searchResults.items.filter((searchActionObj) => searchActionObj.propValues.actionDetailId != result.actionDetails.actionDetailId);\n        searchResults.items = [...items];\n        api.setState('searchResults', searchResults);\n    };\n\n    const getResultCountMessage = (currentPage, items, itemsPerPage, totalCount) => {\n        const geniusItems = items.filter(item => item.propValues.isGenius === true);\n        const searchCount = items.length - geniusItems.length;\n        if (searchCount == 0) {\n            return `Showing 0 of ${totalCount}`;\n        }\n        const startIndex = (currentPage - 1) * itemsPerPage + 1;\n        let endIndex = startIndex + searchCount - 1;\n        if (endIndex > totalCount) {\n            endIndex = totalCount;\n        }\n\n        return `Showing ${startIndex} - ${endIndex} of ${totalCount}`;\n    };\n\n    return {\n        handleSearchEvents: handleSearchEvents,\n        handleSearchResultActions: handleSearchResultActions,\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"739bb99b43a842108d82c8641ab8f247","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/427fe83177221010d7159b71a91061e1","value":"427fe83177221010d7159b71a91061e1"},"sys_update_name":"sys_ux_client_script_include_739bb99b43a842108d82c8641ab8f247","sys_updated_by":"admin","api_name":"sn_nb_action.RAFullSearchViewHelper","sys_created_on":"2024-02-29 12:19:39","name":"RAFullSearchViewHelper","sys_name":"RAFullSearchViewHelper","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/427fe83177221010d7159b71a91061e1","value":"427fe83177221010d7159b71a91061e1"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"5","includes":"","sys_updated_on":"2023-02-07 13:45:30","sys_tags":"","script":"function include({\n    imports\n}) {\n    class SOWFormModalSNC {\n\n        static getModals() {\n            const modals = {\n                \"incident_form_resolve\": {\n                    requiredFields: [\"close_code\", \"parent_incident\", \"close_notes\", \"number\"],\n                    initializeFields: (fields) => {\n                        this.setMandatory(fields, \"close_code\", true);\n                        this.setMandatory(fields, \"close_notes\", true);\n                        this.setVisible(fields, \"close_code\", true);\n                        this.setVisible(fields, \"close_notes\", true);\n                        this.setVisible(fields, \"number\", false);\n                        if (fields[\"close_code\"].value == \"Duplicate\") {\n                            this.setVisible(fields, \"parent_incident\", true);\n                            this.setMandatory(fields, \"parent_incident\", true);\n                        } else {\n                            this.setVisible(fields, \"parent_incident\", false);\n                        }\n                    },\n                    processField: (fields, fieldName, value, displayValue, api) => {\n                        if (fieldName == \"parent_incident\" && (fields.close_notes.value == \"\" || fields.close_notes.value == api.state.generatedResolutionNotes)) {\n                            var message = fields.number.value + \" is marked as a duplicate of \" + displayValue;\n                            this.setValue(fields, \"close_notes\", message);\n                            api.setState('generatedResolutionNotes', message);\n                        }\n                        if (fieldName == \"close_code\") {\n                            if (value == \"Duplicate\") {\n                                this.setMandatory(fields, \"parent_incident\", true);\n                                this.setVisible(fields, \"parent_incident\", true);\n                            } else {\n                                this.setMandatory(fields, \"parent_incident\", false);\n                                this.setVisible(fields, \"parent_incident\", false);\n                                if (fields.close_notes.value == api.state.generatedResolutionNotes) {\n                                    this.setValue(fields, \"parent_incident\", \"\");\n                                    this.setValue(fields, \"close_notes\", \"\");\n                                    api.setState('generatedResolutionNotes', message);\n                                }\n                            }\n                        }\n                    }\n                },\n                \"assign_modal\": {\n                    processField: (fields, fieldName, value, displayValue) => {\n                        if (fieldName == \"assignment_group\") {\n                            this.setValue(fields, \"assigned_to\", \"\", \"\");\n                        }\n                    }\n                }\n            };\n            return modals;\n        }\n\n        static setMandatory(fields, fieldName, value) {\n            if (fields[fieldName]) {\n                fields[fieldName]['mandatory'] = value;\n            }\n        };\n\n        static setValue(fields, fieldName, value, displayValue) {\n            if (fields[fieldName]) {\n                fields[fieldName]['value'] = value;\n                fields[fieldName]['displayValue'] = displayValue ? displayValue : value;\n            }\n        };\n\n        static setVisible(fields, fieldName, value) {\n            if (fields[fieldName]) {\n                fields[fieldName]['visible'] = value;\n            }\n        };\n\n        static getProcessFields(modalPath) {\n            var modals = this.getModals();\n            if (modals[modalPath] && modals[modalPath].processField) {\n                return modals[modalPath].processField;\n            }\n            return;\n        };\n\n        static getInitializeFields(modalPath) {\n            var modals = this.getModals();\n            if (modals[modalPath] && modals[modalPath].processField) {\n                return modals[modalPath].initializeFields;\n            }\n            return;\n        };\n\n        static getRequiredFields(modalPath) {\n            var modals = this.getModals();\n            return modals[modalPath].requiredFields;\n        };\n\n        static getFieldMap(inputFields, requiredFields) {\n            var fields = {};\n\n            for (var i = 0; i < requiredFields.length; i++) {\n                if (inputFields[requiredFields[i]])\n                    fields[requiredFields[i]] = this.proessField(inputFields[requiredFields[i]]);\n            }\n            return fields;\n        };\n\n        static proessField(field) {\n            //Remove field decorators\n            field.declarativeUiActions = [];\n            return field;\n        };\n\n        static getSectionMap(requiredFields, modalPath) {\n            var section = [{\n                rows: [\n                    [{\n                        fields: []\n                    }]\n                ],\n                id: 0\n            }];\n\n            if (!requiredFields.length) {\n                requiredFields = this.getRequiredFields(modalPath);\n                if (requiredFields)\n                    return fields;\n            }\n\n            var fields = [];\n            for (var i = 0; i < requiredFields.length; i++) {\n                fields.push(requiredFields[i]);\n    }\n            section[0][\"rows\"][0][0][\"fields\"] = fields;\n            return section;\n        };\n    }\n    return SOWFormModalSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"7755a906778f1110a3f706e57b5a9931","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_7755a906778f1110a3f706e57b5a9931","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWFormModalSNC","sys_created_on":"2022-11-10 07:33:58","name":"SOWFormModalSNC","sys_name":"SOWFormModalSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Loading...\"\n    },\n    {\n        \"message\": \"Server Error:\"\n    }\n]","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2024-08-27 07:42:46","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\n    function getApiAction(action) {\n        const actions = {\n            \"add-role\": \"rolesToAssign\",\n            \"remove-role\": \"rolesToRemove\",\n            \"add-group\": \"groupsToAssign\",\n            \"remove-group\": \"groupsToRemove\"\n        };\n        return actions[action];\n    }\n\n    function updateState(objKey, key, value) {\n        let data = value == undefined ? key : {\n            [key]: value\n        };\n        api.setState(objKey, ctx => ({\n            ...ctx.currentValue,\n            ...data\n        }));\n    }\n\n    // use this if value of objKey in state is a array\n    function updateArrayState(objKey, ...data) {\n        api.setState(objKey, ctx => ([\n            ...ctx.currentValue,\n            ...data\n        ]));\n    }\n\n    function updateComponentProps(key, value) {\n        updateState(\"componentProps\", key, value);\n    }\n\n    async function showLoader(message) {\n        let msg = message || await helpers.translate(\"Loading...\");\n        updateState(\"loader\", {\n            visible: true,\n            message: msg\n        });\n    }\n\n    function hideLoader() {\n        updateState(\"loader\", \"visible\", false);\n    }\n\n    function emitActionPerformed(eventName, eventPayload) {\n        api.emit('SIMULATOR_ACTION_PERFORMED', {\n            eventName,\n            eventPayload\n        });\n    }\n\n    function updateScreenStatus(isDirty = true) {\n        api.emit(\"SCREEN_STATUS_CHANGED\", {\n            isDirty\n        });\n    }\n\n    function addNotification(header, content, status = \"positive\", icon = \"circle-check-outline\", actionType = \"dismiss\", actionLabel = null) {\n        api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: [{\n                id: \"pageNotification\",\n                status: status,\n                icon: icon,\n                header: header,\n                content: content,\n                action: {\n                    type: actionType,\n                    label: actionLabel\n                }\n            }]\n        });\n    }\n\n    function removeNotification(id = null) {\n        api.emit(\"NOW_UXF_PAGE#REMOVE_NOTIFICATIONS\", {\n            items: [{\n                id: id || \"pageNotification\"\n            }]\n        });\n    }\n\n    function hasServerError(event) {\n        return event.name == \"DATA_OP_FAILED\" || event.name == \"DATA_FETCH_FAILED\";\n    }\n\n    async function showPageError(header = null, content = null) {\n        header = header || await helpers.translate(\"Server Error:\");\n        content = content || await helpers.translate(\"The server encountered an internal error and couldn't process your request. Please try again after sometime.\")\n        addNotification(header, content, \"critical\", \"circle-info-outline\")\n    }\n\n    function hidePageError() {\n        removeNotification(\"pageNotification\");\n    }\n\n    function getSimulatedResult(dataBrokerName, userSysId, tableName, recordSysId, fieldSysId, action, roleOrGroupSysId, includeDetails = true) {\n    \t_callApi(dataBrokerName, \"getSimulatedResult\", userSysId, tableName, recordSysId, fieldSysId, action, roleOrGroupSysId, includeDetails);\n    }\n\n    function getDebugLog(dataBrokerName, userSysId, tableName, recordSysId, fieldSysId, includeDetails = true) {\n    \t_callApi(dataBrokerName, \"getAccessResult\", userSysId, tableName, recordSysId, fieldSysId, null, null, includeDetails);\n    }\n\n    function getSimulatedChanges(dataBrokerName, userSysId, action, roleOrGroupId) {\n        updateComponentProps(\"serverError\", null);\n        let act = getApiAction(action);\n        api.data[dataBrokerName].execute({\n            action: 'getAccessSimulatorChanges',\n            payload: {\n            \t[act]: [roleOrGroupId],\n                userSysId: userSysId\n            }\n        });\n    }\n\n    function _callApi(dataBrokerName, apiName, userSysId, tableName, recordSysId, fieldSysId, action, roleOrGroupSysId, includeDetails) {\n        let operations = [\"read\", \"write\", \"create\",\n            \"report_view\", \"report_on\",\n            \"list_edit\", \"add_to_list\",\n            \"save_as_template\", \"personalize_choices\",\n            \"query_match\", \"query_range\"\n        ];\n\n        if (!fieldSysId) {\n            operations.push(\"delete\");\n        }\n\n        let req = {\n            entitySysId: userSysId,\n            entityType: \"USER\",\n            targetName: tableName,\n            targetResource: \"RECORD\",\n            targetField: fieldSysId,\n            targetRecord: recordSysId,\n            targetMethod: \"\",\n            targetOperations: operations\n        };\n\n        if (action && roleOrGroupSysId)\n            req[action] = roleOrGroupSysId;\n\n        api.data[dataBrokerName].execute({\n            action: apiName,\n            payload: {\n                request: req,\n                includeDetails: includeDetails\n            }\n        })\n    }\n\n    function execute(fnMap, event) {\n        const fn = fnMap[event.elementId] || fnMap[event.name];\n        if (fn)\n            fn();\n    }\n\n    return {\n        getApiAction,\n        updateState,\n        updateArrayState,\n        updateComponentProps,\n        showLoader,\n        hideLoader,\n        emitActionPerformed,\n        updateScreenStatus,\n        addNotification,\n        removeNotification,\n        showPageError,\n        hidePageError,\n        hasServerError,\n        getSimulatedResult,\n        getDebugLog,\n        getSimulatedChanges,\n        execute\n    }\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"77808c4443020210717d19405bb8f2fd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_77808c4443020210717d19405bb8f2fd","sys_updated_by":"admin","api_name":"sn_access_analyzer.AccessSimulatorUtil","sys_created_on":"2024-05-03 14:39:15","name":"AccessSimulatorUtil","sys_name":"AccessSimulatorUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"public","sys_mod_count":"79","includes":"7755a906778f1110a3f706e57b5a9931","sys_updated_on":"2022-11-28 11:21:25","sys_tags":"","script":"function include({\n    imports\n}) {\n    let sowFormModalSNC = imports['sn_sow_itsm_common.SOWFormModalSNC']();\n    class SOWFormModal extends sowFormModalSNC {\n\n                        }\n    return SOWFormModal;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"7afbcec4533330102d05ddeeff7b1232","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_update_name":"sys_ux_client_script_include_7afbcec4533330102d05ddeeff7b1232","sys_updated_by":"admin","api_name":"sn_sow_itsm_common.SOWFormModal","sys_created_on":"2021-11-08 19:55:05","name":"SOWFormModal","sys_name":"SOWFormModal","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0eef12637311301045216238edf6a75e","value":"0eef12637311301045216238edf6a75e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"3","includes":"e5a3facea36131108d561e3f26fcda11","sys_updated_on":"2023-10-02 11:35:18","sys_tags":"","script":"function include({imports}) { \n    let CommunicationDetailsTaskFilterUtilSNC = imports[\"sn_uib_tcm.CommunicationDetailsTaskFilterUtilSNC\"]();\n   class CommunicationDetailsTaskFilterUtil extends CommunicationDetailsTaskFilterUtilSNC {}\n   return CommunicationDetailsTaskFilterUtil;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"7bc37e02a3a131108d561e3f26fcdae4","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0d2383dd53687510b256ddeeff7b12b8","value":"0d2383dd53687510b256ddeeff7b12b8"},"sys_update_name":"sys_ux_client_script_include_7bc37e02a3a131108d561e3f26fcdae4","sys_updated_by":"admin","api_name":"sn_uib_tcm.CommunicationDetailsTaskFilterUtil","sys_created_on":"2023-09-29 16:04:24","name":"CommunicationDetailsTaskFilterUtil","sys_name":"CommunicationDetailsTaskFilterUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0d2383dd53687510b256ddeeff7b12b8","value":"0d2383dd53687510b256ddeeff7b12b8"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2024-05-03 10:26:06","sys_tags":"","script":"\nfunction include({ imports }) {\n\n    /**\n     * Gets the value based on path of object\n     * ie: \n     * books[0].title\n     * books[@name=goahead].name\n     * books[*].name\n     */\n    function find(json, path) {\n        return path.replace(/\\[|\\]\\.?/g, '.').split(\".\").reduce(_parse, json);\n    }\n\n    function _parse(obj, key) {\n        if (key && Array.isArray(obj)) {\n            if (key.startsWith(\"@\")) {\n                let arr = key.split(\"=\");\n                if (arr.length < 2)\n                    return null;\n                return obj.filter(item => item[arr[0].substring(1)] == arr[1]);\n            }\n            if (key == \"*\")\n                return obj;\n            \n            if (/^\\d+$/.test(key))\n                return obj[key];\n            \n            return obj.map(item => item[key]);\n        }\n        return key ? obj[key] : obj;\n    }\n\n\n    function update(json, key, value) {\n        (typeof key == \"string\") ? _update(json, key, value) : Object.keys(key).forEach(k => _update(json, k, key[k]));\n    }\n\n    function _update(json, path, value) {\n        let arr = path.split(\".\");\n        let key = arr[arr.length - 1];\n        arr.pop();\n        let obj = find(json, arr.join(\".\"));\n        if (obj == null)\n            return;\n        if (Array.isArray(obj))\n            obj.forEach(item => item[key] = value);\n        else\n            obj[key] = value;\n    }\n\n\n    return {\n        find,\n        update\n    }\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"7fd420bf43010210717d19405bb8f2a8","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_7fd420bf43010210717d19405bb8f2a8","sys_updated_by":"admin","api_name":"sn_access_analyzer.JSONQuery","sys_created_on":"2024-03-26 15:52:04","name":"JSONQuery","sys_name":"JSONQuery","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"12","includes":"","sys_updated_on":"2024-08-25 20:12:08","sys_tags":"","script":"function include({imports}) { \nconst preferredPhone = \"mobile_phone\"; //assign \"phone\" for business phone and \"mobile_phone\" for personal phone number\nreturn preferredPhone;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"807f9d90a338311016ccd63f26fcda33","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_807f9d90a338311016ccd63f26fcda33","sys_updated_by":"admin","api_name":"sn_sow.ContactPreferred","sys_created_on":"2023-08-17 16:39:14","name":"Agent Popover Preferred Contact Source","sys_name":"Agent Popover Preferred Contact Source","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"3","includes":"98f9726c0f662010ad4437a98b767e0e,0b8a766c0f662010ad4437a98b767e89","sys_updated_on":"2021-02-24 07:35:13","sys_tags":"","script":"function include({\n    imports\n}, {\n    fromPosition,\n    toPosition,\n    id,\n    lanes = [],\n    hiddenLanes = []\n}) {\n    const {\n        'sn_vtb.loadashUtil': loadashUtil,\n        'sn_vtb.reorderLanes': reorderLanes\n    } = imports;\n    const {\n        cloneDeep\n    } = loadashUtil();\n\n    const laneIds = lanes.filter((lane) => !hiddenLanes.includes(lane.sys_id));\n\n    //fromPosition and toPosition are getting from now-visual-board\n    //These are updated w.r.t hiddenLanes\n    const fromPositionUpdated = lanes.findIndex((lane) => lane.sys_id === id);\n    const toPositionSysId = laneIds[toPosition].sys_id;\n    const toPositionUpdated = lanes.findIndex((lane) => lane.sys_id === toPositionSysId);\n    const allLanes = cloneDeep(lanes);\n    const laneObj = allLanes[fromPositionUpdated];\n\n    // Delete from old position and insert at new position\n    allLanes.splice(fromPositionUpdated, 1);\n    allLanes.splice(toPositionUpdated, 0, laneObj);\n\n    const laneIdList = allLanes.map((lane) => lane.sys_id);\n    return reorderLanes({\n        laneIdList,\n        lanes: allLanes\n    });\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"80fa766c0f662010ad4437a98b767e8d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_80fa766c0f662010ad4437a98b767e8d","sys_updated_by":"admin","api_name":"sn_vtb.moveLane","sys_created_on":"2021-02-22 12:52:50","name":"moveLane","sys_name":"moveLane","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2024-06-01 07:22:58","sys_tags":"","script":"/**\n * Access Simulator Guided Experience Handler\n */\nfunction include({ imports }, api, helpers) {\n\n    let eventHandlers = {};\n\n    const SubPageEvent = {\n        PAGE_READY: \"PAGE_READY\",\n        PAGE_CLOSE_REQUEST: \"PAGE_CLOSE_REQUEST\",\n        PAGE_CLOSE_RESPONSE: \"PAGE_CLOSE_RESPONSE\",\n        VALIDATE: \"VALIDATE\",\n        BUTTON_CLICKED: \"BUTTON_CLICKED\",\n        ADD_NOTIFICATIONS: \"ADD_NOTIFICATIONS\"\n    };\n\n\n    const UPDATE_CONF = \"UPDATE_CONF\";\n    const MACROPONENT_READY = \"MACROPONENT_READY\";\n    const MACROPONENT_PROPERTY_CHANGED = \"MACROPONENT_PROPERTY_CHANGED\";\n    const ACCESS_SIMULATOR_EVENT = \"ACCESS_SIMULATOR_EVENT\";\n    const STORE_DATA = \"STORE_DATA\";\n    \n    /**\n     * Default page close handler, it can be overridden on script files.\n     */\n    eventHandlers[SubPageEvent.PAGE_CLOSE_REQUEST] = (request) => close(request);\n\n    function sendMessage(eventName, eventPayload) {\n        api.emit(ACCESS_SIMULATOR_EVENT, {\n            name: eventName,\n            payload: eventPayload\n        });\n    }\n\n    function close(request) {\n        sendMessage(SubPageEvent.PAGE_CLOSE_RESPONSE, request);\n    }\n\n    function updateConf(params) {\n        sendMessage(UPDATE_CONF, params);\n    }\n\n    function onReceive(eventName, callback) {\n        eventHandlers[eventName] = callback;\n    }\n\n    function addNotifications(items) {\n        sendMessage(SubPageEvent.ADD_NOTIFICATIONS, items);\n    }\n\n    function enableButtons(...buttonNames) {\n        _updateButtonBehaviour(buttonNames, \"enabled\", true);\n    }\n\n    function disableButtons(...buttonNames) {\n        _updateButtonBehaviour(buttonNames, \"enabled\", false);\n    }\n\n    function visibleButtons(...buttonNames) {\n        _updateButtonBehaviour(buttonNames, \"visible\", true);\n    }\n\n    function hideButtons(...buttonNames) {\n        _updateButtonBehaviour(buttonNames, \"visible\", false);\n    }\n\n    function _updateButtonBehaviour(buttonNames, key, flag) {\n        let conf = {};\n        buttonNames.forEach(name => conf[`buttons[@name=${name}].${key}`] = flag);\n        updateConf(conf);\n    }\n\n    function showLoader(message = null) {\n    \tsendMessage(\"SHOW_LOADER\", message);\n    }\n    \n    function hideLoader() {\n    \tsendMessage(\"HIDE_LOADER\");\n    }\n    \n    function showPageError(header = null, content = null) {\n    \tsendMessage(\"SHOW_PAGE_ERROR\", {\n    \t\theader: header,\n    \t\tcontent: content\n    \t});\n    }\n    \n    function hidePageError() {\n    \tsendMessage(\"HIDE_PAGE_ERROR\");    \t\n    }\n    \n    function storeData(key, data) {\n        sendMessage(STORE_DATA, {\n            pageName: api.context.props.name,\n            key: key,\n            data: data\n        });\n    }\n\n    function exit() {\n        sendMessage(\"EXIT\");\n    }\n\n    function emit(handlerName, args) {\n        let handler = eventHandlers[handlerName];\n        if (handler)\n            return handler.apply(null, args);\n    }\n\n    function handle(event) {\n        switch (event.name) {\n            case MACROPONENT_READY:\n                let payload = api.context.props.payload.payload;\n                let p = api.state.pageParams ? api.state.pageParams : {};\n                Object.keys(payload.pageParams || {}).forEach(n => p[n] = payload.pageParams[n]);\n                emit(SubPageEvent.PAGE_READY, [payload]);\n                break;\n            case MACROPONENT_PROPERTY_CHANGED:\n                let ev = event.payload.value;\n                emit(ev.eventName, [ev.payload]);\n                break;\n        }\n    }\n\n    return {\n        SubPageEvent,\n        close,\n        onReceive,\n        sendMessage,\n        updateConf,\n        getPageData,\n        storeData,\n        handle,\n        enableButtons,\n        disableButtons,\n        visibleButtons,\n        hideButtons,\n        addNotifications,\n        showLoader,\n        hideLoader,\n        storeData,\n        showPageError,\n        hidePageError,\n        exit\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"81afafea43b331102c5119405bb8f2dc","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_81afafea43b331102c5119405bb8f2dc","sys_updated_by":"admin","api_name":"sn_access_analyzer.GuidedExperienceSubPageHandler","sys_created_on":"2024-01-21 06:04:19","name":"GuidedExperienceSubPageHandler","sys_name":"GuidedExperienceSubPageHandler","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Error - {0}\"\n    },\n    {\n        \"message\": \"{0} CIs attested\"\n    },\n    {\n        \"message\": \"{0} CI attested\"\n    },\n    {\n        \"message\": \"{0} CIs rejected\"\n    },\n    {\n        \"message\": \"{0} CI rejected\"\n    },\n    {\n        \"message\": \"{0} CIs unattested\"\n    },\n    {\n        \"message\": \"{0} CI unattested\"\n    },\n    {\n        \"message\": \"{0} CIs excluded\"\n    },\n    {\n        \"message\": \"{0} CI excluded\"\n    },\n    {\n        \"message\": \"{0} CIs removed from task. De-duplication task created {1}\"\n    },\n    {\n        \"message\": \"{0} CI removed from task. De-duplication task created {1}\"\n    },\n    {\n        \"message\": \"Assign to me\"\n    },\n    {\n        \"message\": \"CIs ready for attestation.\"\n    },\n    {\n        \"message\": \"Reassign\"\n    },\n    {\n        \"message\": \"Records ready for review.\"\n    },\n    {\n        \"message\": \"Request reassignment\"\n    },\n    {\n        \"message\": \"Task has been sent to administration team for reassignment.\"\n    },\n    {\n        \"message\": \"Task is now available for their review\"\n    },\n    {\n        \"message\": \"Task reassigned\"\n    },\n    {\n        \"message\": \"Task reassigned to you.\"\n    },\n    {\n        \"message\": \"Task Sent for Reassignment\"\n    },\n    {\n        \"message\": \"Unable to update {0} CIs\"\n    }\n]","access":"package_private","sys_mod_count":"107","includes":"ab4eb7a0ef513110c445bba98d97d7cc,47dd621a53041110573addeeff7b129d,396c663153a5b110fdadddeeff7b12ae","sys_updated_on":"2024-07-01 16:26:45","sys_tags":"","script":"function include({ imports }) {\n\n    const { handleRemoveNotifications } = imports['sn_cmdb_ws.CMDBWsDMTaskUtil']();\n    const { DM_POLICY_TYPE_IDS } = imports['sn_cmdb_ws.cmdbWSCommonUtil']();\n    const DATA_MANAGER_USER_ROLE_ID = 'c627309e53722010af64ddeeff7b1232';\n    const {\n        ERROR_NOTIFICATION_PROPS,\n        SUCCESS_NOTIFICATION_PROPS\n    } = imports[\"sn_cmdb_ws.CMDBWsNotificationUtil\"]();\n    const SYS_RELATIONSHIP_DEFINITION = {\n        ATTESTED: {\n            label: \"Attested\",\n            value: \"REL:5d70c2937785011023651605bc5a99e0\"\n        },\n        REJECTED: {\n            label: \"Rejected\",\n            value: \"REL:158106d37785011023651605bc5a99af\"\n        },\n        NOT_YET_REVIEWED: {\n            label: \"Not Yet Reviewed\",\n            value: \"REL:54dba1937745011023651605bc5a9917\",\n        }\n    };\n\n    const ATTESTATION_ACTION = {\n            ATTEST: 'attest',\n            UNATTEST: 'unattest',\n            REJECT: 'reject',\n            DUPLICATE: 'duplicate',\n            EXCLUDE: 'exclude'\n    }\n\n    const ERROR_MESSAGES = {\n\t\tUNAUTHORIZED : {\n\t\t\terror : {\n\t\t\t\tcode: 'UNAUTHORIZED',\n\t\t\t\tmessage: 'This task is not assigned to you.'\n\t\t\t}\n\t\t},\n\t\tINVALID_ACTION : {\n\t\t\terror: {\n                code: 'INVALID_ACTION',\n                message: 'Invalid attestation action'\n            }\n\t\t},\n\t\tINVALID_INPUT : {\n\t\t\terror: {\n                code: 'INVALID_INPUT',\n                message: 'At least one CI sysId required.'\n            }\n\t\t},\n\t\tDUPLICATE_MINIMUM: {\n\t\t\terror: {\n\t\t\t\tcode: 'DUPLICATE_NEEDS_TWO_MINIMUM',\n\t\t\t\tmessage: 'Cannot create a duplicate task with just 1 CI. Must select at least 2.'\n\t\t\t}\n\t\t},\n\t\tMULTIPLE_IRE_RULES: {\n\t\t\terror: {\n\t\t\t\tcode: 'MULTIPLE_IRE_RULES',\n\t\t\t\tmessage: 'Cannot create a duplicate task for CIs with multiple IRE rules.'\n\t\t\t}\n\t\t},\n\t\tDUPLICATE_TASK_FAILED : {\n\t\t\terror: {\n\t\t\t\tcode: 'DUPLICATE_TASK_FAILED',\n\t\t\t\tmessage: 'Failed to create Remediate Duplicate Task.'\n\t\t\t}\n\t\t}\n\t};\n\n    const TASK_STATE = {\n         OPEN : \"1\",\n         WORK_IN_PROGRESS : \"2\",\n         CLOSED_COMPLETE : \"3\"\n   };\n\n    const UI_DEFAULT_LIMIT = {\n         ATTEST_RECORDS: 100\n   };\n\n    var _getReassignOptions = async function(translate, isAssignedToCurrentUser, isAdmin, assignmentGroupSysId) {\n        const reassignTxt = await translate('Reassign');\n        let moreOptionsTxt = '';\n        let options = [];\n        if (isAdmin || !!assignmentGroupSysId) {\n            options.push({\n                id: 'assign_to_other',\n                label: reassignTxt\n            });\n        }\n        if (!isAssignedToCurrentUser) {\n            options.push({\n                id: 'assign_to_me',\n                label: await translate('Assign to me')\n            });\n        }\n       options.push({\n            id: 'send_to_admin',\n            label: await translate('Request reassignment')\n       });\n    const primaryOption = options.shift();\n    let reassignOptions = {\n        primaryLabel: primaryOption.label,\n        primaryId: primaryOption.id\n    };\n    if (!options) {\n        reassignOptions = {\n             ...reassignOptions,\n             ariaConfig: {\n                  \"aria-label\": primaryOption.label\n             },\n             tooltipLabel: primaryOption.label\n        }\n    } else {\n        moreOptionsTxt = await translate('More reassignment options');\n        reassignOptions = {\n             ...reassignOptions,\n            listItems: options,\n            ariaConfig: {\n                  action: { \"aria-label\": primaryOption.label },\n                  trigger: { \"aria-label\": moreOptionsTxt }\n             },\n            tooltipConfig: {\n                  action: primaryOption.label,\n                  trigger: moreOptionsTxt\n            }\n        }\n   }\n\n        return reassignOptions;\n    }\n\n    var _handleAssignToMe = function(currentAssignee, api, openModal) {\n        if (currentAssignee === null) {\n            api.data.update_task_assignment.execute({\n                sysIds: [api.context.props.sysId],\n                assignee: api.context.session.user.sys_id\n            });\n        } else {\n            api.setState('reassignmentData', {\n                'assignee': api.context.session.user.sys_id\n            });\n            openModal('reassign_confirm_modal');\n        }\n    }\n\n    var _handleAssignToOther = function(viewportId, isAdmin, assignmentGroupSysId, emit, openModal) {\n        const baseQuery = 'user.active=true';\n        const filterQuery = isAdmin ? `role=${DATA_MANAGER_USER_ROLE_ID}` : `group=${assignmentGroupSysId}`;\n        let viewportConfig = {\n            viewportElementId: viewportId,\n            route: 'assign-to-other',\n            fields: {\n                userTable: isAdmin ? 'sys_user_has_role' : 'sys_user_grmember',\n                encodedQuery: `${baseQuery}^${filterQuery}`,\n                isAdmin: isAdmin,\n                timestamp: Date.now()\n            }\n        }\n        setViewportContent(viewportConfig, emit);\n        openModal('assign_to_other_modal', { bare: true });\n    }\n\n    var _handleSendToAdmin = function(viewportId, emit, openModal) {\n        let viewportConfig = {\n            viewportElementId: viewportId,\n            route: 'send-to-admin',\n            fields: {\n                timestamp: Date.now()\n            }\n        }\n        setViewportContent(viewportConfig, emit);\n        openModal('send_to_admin_modal', { bare: true });\n    }\n\n    var _handleAssignmentModalPayload = function(event, isTaskAssigned, api, openModal) {\n        let assignmentObj = {\n            ...(event.payload.comments !== null && {comments: event.payload.comments})\n        };\n        if (event.name === 'ASSIGN_TO_OTHER#PRIMARY_ACTION') {\n            assignmentObj.assignee = event.payload.assigneeSysId;\n            if (event.payload.assignmentGroupSysId) {\n                assignmentObj.assignmentGroup = event.payload.assignmentGroupSysId;\n            }\n        } else if (event.name === 'SEND_TO_ADMIN#PRIMARY_ACTION') {\n            assignmentObj.assignee = '';\n            assignmentObj.assignmentGroup = '';\n        }\n        if (!isTaskAssigned) {\n            //just do the assignment\n            api.data.update_task_assignment.execute({\n                sysIds: [api.context.props.sysId],\n                ...assignmentObj\n            });\n        } else {\n            //save the data, trigger the confirm modal\n            api.setState('reassignmentData', assignmentObj);\n            openModal('reassign_confirm_modal');\n        }\n    }\n\n    var _handleReassignToMeSuccess = async function(emit, translate, helpers, policyTypeId) {\n        const notificationId = 'assignToMeSuccess' + new Date().valueOf();\n        var messageContent = policyTypeId == DM_POLICY_TYPE_IDS.NON_LIFECYCLE.ATTESTATION ? await translate(\"CIs ready for attestation.\") : await translate(\"Records ready for review.\");\n        emit('NOW_UXF_PAGE#ADD_NOTIFICATIONS', {\n            items: [{\n                id: notificationId,\n                status: \"positive\",\n                header: await translate(\"Task reassigned to you.\"),\n                icon: \"info-circle-outline\",\n                content: messageContent,\n                action: {\n                    type: \"dismiss\"\n                }\n            }]\n        });\n        handleRemoveNotifications(emit, notificationId, helpers);\n    }\n\n    var _handleReassignToOtherSuccess = async function(viewportId, emit, translate, openModal) {\n        let viewportConfig = {\n            viewportElementId: viewportId,\n            route: 'reassign-success',\n            fields: {\n                header: await translate(\"Task reassigned\"),\n                message: await translate(\"Task is now available for their review\")\n            }\n        }\n        setViewportContent(viewportConfig, emit);\n        openModal('reassign_success_modal', {\n            bare: true\n        });\n    }\n\n    var _handleSendToAdminSuccess = async function(viewportId, emit, translate, openModal) {\n        let viewportConfig = {\n            viewportElementId: viewportId,\n            route: 'reassign-success',\n            fields: {\n                header: await translate(\"Task Sent for Reassignment\"),\n                message: await translate(\"Task has been sent to administration team for reassignment.\")\n            }\n        }\n        setViewportContent(viewportConfig, emit);\n        openModal('reassign_success_modal', {\n            bare: true\n        });\n    }\n\n   var _emitErrorNotification = async function(error,emit,translate,helpers) {\n         const notifications = [];\n         const notificationId = 'errorId' + new Date().valueOf();\n         var errorMessage = error.message;\n         if(!errorMessage) {\n              errorMessage = \"invalid error\";\n         }\n         notifications.push({\n             ...ERROR_NOTIFICATION_PROPS,\n              \"content\": await translate(\"{0}\", errorMessage),\n              \"id\": notificationId \n        });\n        emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notifications\n        });\n       handleRemoveNotifications(emit,notificationId,helpers);\n   }\n\n    var _handleSubmitTaskSuccess = async function(viewportId, taskSummaryObj, emit, translate, openModal) {\n        let viewportConfig = {\n            viewportElementId: viewportId,\n            route: 'submit-task-success',\n            fields: {\n                taskSummaryObj: taskSummaryObj\n            }\n        }\n        setViewportContent(viewportConfig, emit);\n        openModal('submit_task_success_modal', {\n            bare: true\n        });\n    }\n\n    function setViewportContent(viewportConfig, emit) {\n        emit('MACROPONENT_VIEWPORT_LOAD_REQUESTED', viewportConfig);\n    }\n\n    const getRelatedLists = function(data) {\n        return data.related && data.related.lists ? data.related.lists: null;\n   }\n\n    const getFormFields = function(data) {\n         return data.form && data.form.fields ? data.form.fields : null;\n    }\n\n    const SR_CONTROLLER_OUTPUT_FIELDS = {\n          RELATED_LIST: 'related',\n          FORM: 'form'\n    }\n\n    var _handleAttestationNotification = async function(response, hasItil, hasAdminOrMaint, api, event, helpers) {\n        const {\n                error,\n                action,\n                successCount,\n                failureCount,\n                deDupeTaskNumber,\n                deDupeUrl\n            } = response.result;\n\n            const notifications = [];\n\n            if (error && error.message) {\n                notifications.push({\n                    ...ERROR_NOTIFICATION_PROPS,\n                    \"content\": await helpers.translate(\"Error - {0}\", error.message)\n                });\n            }\n            if (successCount > 0) {\n                let messageContent = '';\n                let txtLinkProp = {};\n                if (action === 'attest') {\n                    messageContent = successCount > 1 ?\n                        await helpers.translate(\"{0} CIs attested\", successCount) :\n                        await helpers.translate(\"{0} CI attested\", successCount);\n                } else if (action === 'reject') {\n                    messageContent = successCount > 1 ?\n                        await helpers.translate(\"{0} CIs rejected\", successCount) :\n                        await helpers.translate(\"{0} CI rejected\", successCount);\n                } else if (action === 'unattest') {\n                    messageContent = successCount > 1 ?\n                        await helpers.translate(\"{0} CIs unattested\", successCount) :\n                        await helpers.translate(\"{0} CI unattested\", successCount);\n                } else if (action === 'exclude') {\n                    messageContent = successCount > 1 ?\n                        await helpers.translate(\"{0} CIs excluded\", successCount) :\n                        await helpers.translate(\"{0} CI excluded\", successCount);\n                } else if (action === 'duplicate') {\n                    var deDupeNumberDisplay = \"\";\n                    if (deDupeTaskNumber && deDupeUrl) {\n                        if (hasItil(api.context.session.user.roles) || hasAdminOrMaint(api.context.session.user.roles)) {\n                            txtLinkProp = {\n                                \"label\": deDupeTaskNumber,\n                                \"href\": deDupeUrl\n                            };\n                        } else {\n                            deDupeNumberDisplay = deDupeTaskNumber;\n                        }\n                    }\n                    messageContent = successCount > 1 ?\n                        await helpers.translate(\"{0} CIs removed from task. De-duplication task created {1}\", successCount, deDupeNumberDisplay) :\n                        await helpers.translate(\"{0} CI removed from task. De-duplication task created {1}\", successCount, deDupeNumberDisplay);\n\n                    if (deDupeTaskNumber && deDupeUrl) {\n                        txtLinkProp = {\n                            \"label\": deDupeTaskNumber,\n                            \"href\": deDupeUrl\n                        };\n                    }\n                }\n                const notificationId = 'successId' + new Date().valueOf();\n                notifications.push({\n                    ...SUCCESS_NOTIFICATION_PROPS,\n                    \"content\": messageContent,\n                    \"textLinkProps\": txtLinkProp,\n                    \"id\": notificationId\n                });\n            }\n            if (failureCount > 0) {\n                notifications.push({\n                    ...ERROR_NOTIFICATION_PROPS,\n                    \"content\": await helpers.translate(\"Unable to update {0} CIs\", failureCount)\n                });\n            };\n            if (notifications.length > 0) {\n                api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n                    items: notifications\n                });\n            }\n\n            if (notifications.length > 0) {\n                notifications.forEach(item => {\n                    handleRemoveNotifications(api.emit, item.id, helpers);\n                });\n            }\n   }\n\n    var _setDonutProgress = function(api, event, helpers) {\n         const taskId = api.context.props.sysId;\n         const MAX_NUMBER_OF_GROUPS = 10;\n         const NUMBER_OF_GROUPS_BASED_ON = \"NO_OF_GROUP_BASED_ON_PER_METRIC\";\n\n        const progressDonutConfig = {};\n        progressDonutConfig.dataSource = [{\n            \"allowRealTime\": true,\n            \"label\": \"Progress\",\n            \"sourceType\": \"table\",\n            \"tableOrViewName\": \"sn_cmdb_ws_attestation_task_to_ci\",\n            \"filterQuery\": \"cmdb_data_management_task=\" + taskId,\n            \"reportSourceSysId\": null,\n            \"id\": \"sn_cmdb_ws_attestation_task_to_ci_\" + taskId\n        }];\n\n        progressDonutConfig.metrics = [{\n            \"dataSource\": \"sn_cmdb_ws_attestation_task_to_ci_\" + taskId,\n            \"id\": \"sn_cmdb_ws_attestation_task_to_ci_\" + new Date().valueOf(),\n            \"label\": \"Items\",\n            \"aggregateFunction\": \"COUNT\",\n            \"numberFormat\": {\n                \"customFormat\": false\n            },\n            \"axisId\": \"primary\"\n        }];\n\n        progressDonutConfig.groupBy = [{\n            \"maxNumberOfGroups\": MAX_NUMBER_OF_GROUPS,\n            \"numberOfGroupsBasedOn\": NUMBER_OF_GROUPS_BASED_ON,\n            \"showOthers\": false,\n            \"groupBy\": [{\n                \"dataSource\": \"sn_cmdb_ws_attestation_task_to_ci_\" + taskId,\n                \"groupByField\": \"ci.attestation_status\",\n                \"isPaBucket\": false,\n                \"isRange\": false\n            }]\n        }];\n\n        api.setState('progressDonutConfig', progressDonutConfig);\n    }\n\n    return {\n        SYS_RELATIONSHIP_DEFINITION,\n        ERROR_MESSAGES,\n        TASK_STATE,\n        UI_DEFAULT_LIMIT,\n        ATTESTATION_ACTION,\n        getDecimalNumberWithGivenScale: function (number, scale) {\n            return (number.indexOf(\".\") > -1) ? number.slice(0, (number.indexOf(\".\")) + scale) : number;\n        },\n        getReassignOptions: _getReassignOptions,\n        handleAssignToMe: _handleAssignToMe,\n        handleAssignToOther: _handleAssignToOther,\n        handleSendToAdmin: _handleSendToAdmin,\n        handleAssignmentModalPayload: _handleAssignmentModalPayload,\n        handleReassignToMeSuccess: _handleReassignToMeSuccess,\n        handleReassignToOtherSuccess: _handleReassignToOtherSuccess,\n        handleSendToAdminSuccess: _handleSendToAdminSuccess,\n        handleSubmitTaskSuccess: _handleSubmitTaskSuccess,\n        emitErrorNotification : _emitErrorNotification,\n        handleAttestationNotification: _handleAttestationNotification,\n        setDonutProgress: _setDonutProgress,\n        getRelatedLists,\n        getFormFields,\n        SR_CONTROLLER_OUTPUT_FIELDS\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"83fbeb59b76d411094bb21208e11a981","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_83fbeb59b76d411094bb21208e11a981","sys_updated_by":"admin","api_name":"sn_cmdb_ws.cmdbWSAttestationUtil","sys_created_on":"2022-02-07 23:50:55","name":"cmdbWSAttestationUtil","sys_name":"cmdbWSAttestationUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"15","includes":"","sys_updated_on":"2023-09-12 23:55:33","sys_tags":"","script":"function include(rawArray, sortDirection, sortField, searchTerm) {\n\t/**\n\t * Search function takes an arbitrary array of json objects and searches / sorts against the included searchTerm\n\t * sortField, and sort direction\n\t */\n\n\tconst SORT = {\n\t\tASC: \"asc\",\n\t\tDESC: \"desc\",\n\t}\n\n\tconst TYPES = {\n\t\tNUMBER: \"number\",\n\t\tSTRING: \"string\",\n\t\tOBJECT: \"object\"\n\t}\n\n\tconst _sortAndFilter = (rawArray, sortDirection, sortField, searchTerm) => {\n\t\tlet sortedAndFilteredArray = rawArray;\n\t\tsortedAndFilteredArray = sortedAndFilteredArray.filter((card) => {\n\t\t\tif (!card.properties) {\n\t\t\t\tconsole.error(\"SearchSortUtility expects a card to have an object called properties. Unable to search.\")\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn Object.values(card.properties).findIndex(value => {\n\t\t\t\tif (!value || typeof value === TYPES.OBJECT)\n\t\t\t\t\treturn false;\n\t\t\t\tif (typeof value === TYPES.NUMBER) {\n\t\t\t\t\tif (isNaN(searchTerm))\n\t\t\t\t\t\treturn false;\n\t\t\t\t\telse\n\t\t\t\t\t\treturn (value + \"\").includes(searchTerm);\n\t\t\t\t} else {\n\t\t\t\t\treturn value.toUpperCase().includes(searchTerm.toUpperCase());\n\t\t\t\t}\n\t\t\t}) > -1;\n\t\t});\n\t\tsortedAndFilteredArray.sort((firstSvc, secondSvc) => {\n\t\t\tif (!firstSvc.properties || !secondSvc.properties)\n\t\t\t\treturn 0;\n\n\t\t\tlet firstProp = firstSvc.properties[sortField];\n\t\t\tlet secondProp = secondSvc.properties[sortField];\n\t\t\t// ensure that mixed numbers and null are sorted correctly. \n\t\t\t// If the type is not a number, assign empty string to string compare\n\t\t\tif (!firstProp) {\n\t\t\t\tif (typeof secondProp === TYPES.NUMBER)\n\t\t\t\t\treturn sortDirection === SORT.ASC ? -1 : 1;\n\t\t\t\telse\n\t\t\t\t\tfirstProp = \"\";\n\t\t\t} else if (!secondProp) {\n\t\t\t\tif (typeof firstProp === TYPES.NUMBER)\n\t\t\t\t\treturn sortDirection === SORT.ASC ? 1 : -1;\n\t\t\t\telse\n\t\t\t\t\tsecondProp = \"\";\n\t\t\t}\n\t\t\tif (typeof firstProp === TYPES.NUMBER && typeof secondProp === TYPES.NUMBER) {\n\t\t\t\tif (firstProp < secondProp)\n\t\t\t\t\treturn sortDirection === SORT.ASC ? -1 : 1;\n\t\t\t\telse if (firstProp > secondProp)\n\t\t\t\t\treturn sortDirection === SORT.ASC ? 1 : -1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else if (typeof firstProp === TYPES.STRING && typeof secondProp === TYPES.STRING) {   \n\t\t\t\tif (firstProp.toUpperCase() < secondProp.toUpperCase())\n\t\t\t\t\treturn sortDirection === SORT.ASC ? -1 : 1;\n\t\t\t\telse if (firstProp.toUpperCase() > secondProp.toUpperCase())\n\t\t\t\t\treturn sortDirection === SORT.ASC ? 1 : -1;\n\t\t\t\telse\n\t\t\t\t\treturn 0;\n\t\t\t} else {\n\t\t\t\t// could not compare\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\treturn sortedAndFilteredArray;\n\t}\n\n\tconst _SORT_SEARCH_DEFAULTS = {\n\t\tSORT_CATEGORY: \"name\",\n\t\tSORT_DIRECTION: \"asc\",\n\t\tSEARCH_TERM: \"\"\n\t}\n\n\treturn {\n\t\tSORT_SEARCH_DEFAULTS: _SORT_SEARCH_DEFAULTS,\n\t\tsortAndFilter: _sortAndFilter\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"84c2245f43b4611017b739603ab8f208","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_84c2245f43b4611017b739603ab8f208","sys_updated_by":"admin","api_name":"sn_cmdb_ws.UnifiedMapSearchSortUtility","sys_created_on":"2023-02-08 23:44:50","name":"UnifiedMapSearchSortUtility","sys_name":"UnifiedMapSearchSortUtility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"60","includes":"","sys_updated_on":"2021-02-24 12:48:59","sys_tags":"","script":"function include({\n    imports\n}) {\n    const DATA_BROKER_OP = {\n        CARD_MOVE: 'CARD_MOVE',\n        LANE_MOVE: 'LANE_MOVE',\n        SWIMLANE_MOVE: 'SWIMLANE_MOVE',\n        CARD_ARCHIVED: 'CARD_ARCHIVED',\n        ARCHIVE_ALL_CARDS_BY_LANE: 'ARCHIVE_ALL_CARDS_BY_LANE',\n        FETCH_ARCHIVE_CARD: 'FETCH_ARCHIVE_CARD',\n        FETCH_ARCHIVE_CARDS: 'FETCH_ARCHIVE_CARDS',\n        RESTORE_CARD: 'RESTORE_CARD',\n        CREATE_LANE_REQUEST: 'CREATE_LANE_REQUEST',\n        SET_USER_PREFERENCE: 'SET_USER_PREFERENCE',\n        LANE_HEADER_UPDATED: 'LANE_HEADER_UPDATED',\n        FETCH_VTB_USERS: 'FETCH_VTB_USERS',\n        FETCH_VTB_CARD: 'FETCH_VTB_CARD',\n        ADD_CARD: 'ADD_CARD',\n        DELETE_LANE: 'DELETE_LANE'\n    };\n\n    const ACTIONS = {\n        CARD_MOVED: 'VTB#CARD_MOVED',\n        LANE_MOVED: 'VTB#LANE_MOVED',\n        SWIMLANE_MOVED: 'VTB#SWIMLANE_MOVED',\n        NOW_VISUAL_BOARD_CARD_MOVED: 'NOW_VISUAL_BOARD#CARD_MOVED',\n        NOW_VISUAL_BOARD_LANE_MOVED: 'NOW_VISUAL_BOARD#LANE_MOVED',\n        NOW_VISUAL_BOARD_SWIMLANE_MOVED: 'NOW_VISUAL_BOARD#SWIMLANE_MOVED',\n        VTB_CREATE_LANE_ACTION_PERFORMED: 'VTB#CREATE_LANE_ACTION_PERFORMED',\n        VTB_SWIMLANE_ACTION: 'VTB#SWIMLANE_ACTION_PERFORMED',\n        VTB_ADD_CARD_CLICKED: 'VTB#ADD_CARD_CLICKED',\n        VTB_ATTACHMENT_UPLOADED: 'VTB#ATTACHMENT_UPLOADED',\n        VTB_FREEFORM_CARD_ADDED: 'VTB#FREEFORM_CARD_ADDED',\n        VTB_REMOVE_FREEFORM_PLACEHOLDER_CARD: 'VTB#FREEFORM_PLACEHOLDER_CARD_REMOVED',\n        VTB_DATA_DRIVEN_CARD_ADDED: 'VTB#DATA_DRIVEN_CARD_ADDED',\n        NOW_UXF_PAGE_SET_LOADING_STATE: 'NOW_UXF_PAGE#SET_LOADING_STATE',\n        NOW_UXF_PAGE_ADD_NOTIFICATIONS: 'NOW_UXF_PAGE#ADD_NOTIFICATIONS',\n        NOW_UXF_PAGE_REMOVE_NOTIFICATIONS: 'NOW_UXF_PAGE#REMOVE_NOTIFICATIONS',\n        VTB_LANE_HIDE_SELECTED: 'VTB#LANE_HIDE_SELECTED',\n        VTB_LANE_HEADER_UPDATED: 'VTB#LANE_HEADER_UPDATED',\n        VTB_CONFIRMATION_MODAL_SELECTED: 'VTB#CONFIRMATION_MODAL_SELECTED',\n    };\n\n    const BOARD = {\n        FREEFORM: 'FREEFORM',\n        FLEXIBLE: 'FLEXIBLE',\n        GUIDED: 'GUIDED',\n    };\n\n    const ELEMENTS_IDS = {\n        MUTATION_DATA_BROKER_ELEMENT_ID: 'visualBoardMutationCompositeDataBroker'\n    };\n\n    const DATA_BROKERS_IDS = {\n        MUTATION_DATA_BROKER_ID: \"f547801a0f121010461d37a98b767e8d\"\n    };\n\n    const STATE_PROPS_NAMES = {\n        BOARD_STATE: 'boardState',\n        BOARD_FILTERED_STATE: 'boardFilteredState',\n        BOARD_DIRTY_STATE: 'boardDirtyState',\n        INITIALISE_AMB: 'initialiseAMB',\n        BOARD_FOCUS_STATE: 'boardFocusState',\n        TRANSLATED_MESSAGE: 'translatedMessages'\n    };\n\n    const STATUS = {\n        CRITICAL: 'critical',\n        INFO: 'info'\n    };\n\n    const ICONS = {\n        CIRCLE_CLOSE_OUTLINE: 'circle-close-outline',\n        CIRCLE_INFO_OUTLINE: 'circle-info-outline',\n        CIRCLE_CHECK_OUTLINE: 'circle-check-outline'\n    };\n\n    const LOADING_LABEL = 'Visual Board Loading...';\n    const LOADING_ID = 'blocking';\n    const ATTACHMENT_UPLOAD_SUCCESS_MESSAGE = 'uploaded successfully';\n    const ATTACHMENT_UPLOAD_FAILURE_MESSAGE = 'upload failed';\n    const DONT_HAVE_PERMISSIONS_MESSAGE = 'You do not have the permissions to modify this record';\n    const INSUFFICIENT_PERMISSIONS = \"Insufficient Permissions\";\n\n    const MENU_ITEMS = {\n        ADD_CARD: 'Add Card',\n        HIDE_LANE: 'Hide Lane',\n        MOVE_LANE: 'Move Lane',\n        DELETE_LANE: 'Delete Lane',\n        ARCHIVE_ALL_CARDS: 'Archive All Cards',\n        COLLAPSE_ALL: 'Collapse All',\n        EXPAND_ALL: 'Expand All',\n        MOVE_SWIMLANE: 'Move Swimlane',\n        HIDE_SWIMLANE: 'Hide Swimlane',\n        DELETE_SWIMLANE: 'Delete Swimlane',\n        ARCHIVE_CARD: 'Archive Card',\n        MOVE_CARD: 'Move Card'\n    };\n\n    const ACCESSIBILITY = {\n        VTB_CARD_SELECTOR: '.sn-vtb-card',\n        NOW_CARD_SELECTOR: '.now-card',\n        ADD_CARD_SELECTOR: '.add-card',\n        ADD_LANE_SELECTOR: '.lane-add-btn',\n        LANE_HEADER_SELECTOR: '.sn-vtb-lane-header',\n        CARD_FIRST_ELEM_SELECTOR: 'button.now-dropdown',\n        LANE_HEADER_FIRST_ELEM_SELECTOR: '.value-label ',\n        SWIMLANE_HEADER_SELECTOR: '.sn-vtb-swimlane-header .container',\n        SWIMLANE_HEADER_FIRST_ELEM_SELECTOR: '.value-label'\n    };\n\n    return {\n        DONT_HAVE_PERMISSIONS_MESSAGE,\n        INSUFFICIENT_PERMISSIONS,\n        LOADING_ID,\n        LOADING_LABEL,\n        ACTIONS,\n        DATA_BROKER_OP,\n        ELEMENTS_IDS,\n        STATE_PROPS_NAMES,\n        DATA_BROKERS_IDS,\n        BOARD,\n        STATUS,\n        ICONS,\n        ATTACHMENT_UPLOAD_SUCCESS_MESSAGE,\n        ATTACHMENT_UPLOAD_FAILURE_MESSAGE,\n        ACCESSIBILITY,\n        MENU_ITEMS\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"881d20a10fe21010ad4437a98b767e2a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_881d20a10fe21010ad4437a98b767e2a","sys_updated_by":"admin","api_name":"sn_vtb.constants","sys_created_on":"2020-08-10 08:55:08","name":"constants","sys_name":"constants","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Checking\"\n    },\n    {\n        \"message\": \"Unknown\"\n    },\n    {\n        \"message\": \"Malfunction\"\n    },\n    {\n        \"message\": \"Degraded\"\n    },\n    {\n        \"message\": \"Operational\"\n    },\n    {\n        \"message\": \"Disabled\"\n    },\n    {\n        \"message\": \"Unknown\"\n    },\n    {\n        \"message\": \"The Key Management Framework is not properly installed on this cloud instance.\"\n    },\n    {\n        \"message\": \"The Key Management Framework is not configured on this on-premise instance.\"\n    },\n    {\n        \"message\": \"The Key Management Framework is not configured on this instance.\"\n    },\n    {\n        \"message\": \"The Key Management Framework doesn't appear configured. Please check again in a few days and raise a request if the issue persists.\"\n    },\n    {\n        \n    },\n    {\n        \"message\": \"Key Management Framework is currently unavailable.\"\n    },\n    {\n        \"message\": \"An item requires your attention.\"\n    },\n    {\n        \"message\": \"An item requires your attention: {0}.\"\n    },\n    {\n        \"message\": \"Several items require your attention: {0}.\"\n    },\n    {\n        \"message\": \"Everything looks good. Have a nice day!\"\n    },\n    {\n        \"message\": \"Hold tight while we check your instance...\"\n    }\n]","access":"package_private","sys_mod_count":"27","includes":"","sys_updated_on":"2023-11-02 18:15:03","sys_tags":"","script":"function include({imports}) {\n    var exports = {};\n\n    var NAME_EXCLUSIONS = ['EJBCA', 'PKI', 'LDAP', 'CRL'];\n    var NAME_TRANSFORMS = {\n        'IKEK': 'Instance Key Encryption Key',\n        'IHMAC': 'Instance HMAC Key',\n        'ICSK': 'Instance Certificate Signing Key',\n        'IAEK': 'Instance Asymmetric Encryption Key',\n        'ISK': 'Instance Signing Key',\n        'KEY_SECURE': 'Hardware Root of Trust',\n    };\n    var UNK_COMPONENT = {id: \"UNKNOWN\", health: \"UNKNOWN\", warnings: []};\n\n    /**\n     * Transform a KMF Component ID to its friendly name.\n     */\n    function componentIdToName(id) {\n        var output = \"\";\n        var words = id.split('_');\n        for (var i = 0; i < words.length; ++i) {\n            var word = words[i];\n            if (i > 0)\n                output += \" \";\n            if (NAME_EXCLUSIONS.indexOf(word) !== -1)\n                output += word;\n            else {\n                var transformed = NAME_TRANSFORMS[word];\n                if (transformed)\n                    output += transformed;\n                else if (word.length <= 1)\n                    output += word;\n                else\n                    output += word.charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n            }\n        }\n        return output;\n    }\n\n    exports['componentIdToName'] = componentIdToName;\n\n    function __walkToComponent(snKmfUi, componentPath) {\n        if (!snKmfUi)\n            return UNK_COMPONENT;\n\n        var component = snKmfUi;\n        var children = component.children;\n        var id = \"UNKNOWN\";\n        for (let i = 0; i < componentPath.length; ++i) {\n            id = componentPath[i];\n            component = children[id];\n            if (!component) {\n                console.warn(\"Non-existent component: \" + componentPath.join('.'));\n                return UNK_COMPONENT;\n            }\n            children = component.children;\n            if (!children && i !== componentPath.length - 1) {\n                console.warn(\"Non-parent component \" + id + \" in \" + componentPath.join('.'));\n                return UNK_COMPONENT;\n            }\n        }\n\n        return Object.assign({}, component, {id});\n    }\n\n    async function __componentHealthToLabel(component, helpers) {\n        if (!component)\n            return await helpers.translate(\"Checking\");\n\n        if (!component.health)\n            return await helpers.translate(\"Unknown\");\n\n        switch (component.health) {\n            case \"RED\":\n                return await helpers.translate(\"Malfunction\");\n            case \"YELLOW\":\n                return await helpers.translate(\"Degraded\");\n            case \"GREEN\":\n                return await helpers.translate(\"Operational\");\n            case \"GRAY\":\n                return await helpers.translate(\"Disabled\");\n            default:\n                return await helpers.translate(\"Unknown\");\n        }\n    }\n\n    function __componentHealthToColor(component) {\n        if (!component || !component.health)\n            return 'moderate';\n\n        switch (component.health) {\n            case \"RED\":\n                return 'critical';\n            case \"YELLOW\":\n                return 'high';\n            case \"GREEN\":\n                return 'positive';\n            case \"GRAY\":\n                return 'low';\n            default:\n                return 'moderate';\n        }\n    }\n\n    function __componentHealthToVariant(component) {\n        if (!component || !component.health)\n            return 'tertiary';\n\n        switch (component.health) {\n            case \"RED\":\n            case \"YELLOW\":\n                return 'primary';\n            case \"GREEN\":\n            case \"GRAY\":\n            default:\n                return 'tertiary';\n        }\n    }\n\n    async function __parseComponentHealth(problems, snKmfUi, componentPath, helpers) {\n        const component = __walkToComponent(snKmfUi, componentPath);\n\n        if (problems && (component.health === 'YELLOW' || component.health === 'RED'))\n            problems.push(componentIdToName(component.id));\n        \n        return {\n            health: component.health,\n            statusColor: __componentHealthToColor(component),\n            statusVariant: __componentHealthToVariant(component),\n            statusLabel: await __componentHealthToLabel(component, helpers),\n            warnings: component.warnings\n        };\n    }\n\n    async function __buildInfoBox(state, api, helpers) {\n        // If KMF is not enabled (no root wrapper...)\n        if (!state.health.rootKeyWrappers.enabled) {\n            // If we're maint...\n            if (api.context.session.user.roles.indexOf('maint') !== -1) {\n                // If we're in DC...\n                if (state.instanceType === \"DATACENTER\")\n                    return {\n                        icon: 'circle_close_outline',\n                        type: 'critical',\n                        message: await helpers.translate(\"The Key Management Framework is not properly installed on this cloud instance.\"),\n                        link: {\n                            \"label\": \"Learn more.\",\n                            \"href\": \"https://support.servicenow.com/kb?id=kb_article_view&sysparm_article=KB0965129#u_kb_resolution\",\n                            \"target\": \"_blank\"\n                        }\n                    }\n                if (state.instanceType === \"SELF_HOSTED\")\n                    return {\n                        type: 'high',\n                        icon: 'diamond_exclamation_outline',\n                        message: await helpers.translate(\"The Key Management Framework is not configured on this on-premise instance.\"),\n                        link: {\n                            \"label\": \"Learn more.\",\n                            \"href\": \"https://support.servicenow.com/kb?id=kb_article_view&sysparm_article=KB0951869\",\n                            \"target\": \"_blank\"\n                        }\n                    }\n                return {\n                    icon: 'circle_close_outline',\n                    type: 'critical',\n                    message: await helpers.translate(\"The Key Management Framework is not configured on this instance.\"),\n                }\n            }\n            return {\n                type: 'high',\n                icon: 'diamond_exclamation_outline',\n                message: await helpers.translate(\"The Key Management Framework doesn't appear configured. Please check again in a few days and raise a request if the issue persists.\"),\n                link: {\n                    \"label\": \"Get help.\",\n                    \"href\": \"https://support.servicenow.com/\",\n                    \"target\": \"_blank\"\n                }\n            }\n        }\n\n        // If we're maint...\n        if (api.context.session.user.roles.indexOf('maint') !== -1)\n            return {\n                type: 'info',\n                icon: 'circle_info_outline',\n                message: await helpers.translate(\"For more information about this page, please check the related article.\"),\n                link: {\n                    \"label\": \"Learn more.\",\n                    \"href\": \"https://support.servicenow.com/kb?id=kb_article_view&sysparm_article=KB1002078\",\n                    \"target\": \"_blank\"\n                }\n            }\n        return {hide: true};\n    }\n\n    exports['loadState'] = async function(snKmfUi, api, helpers) {\n        var problems = [];\n        var health = {\n            overall: await __parseComponentHealth(null, snKmfUi, [], helpers),\n            rootKeyWrappers: await (async function() {\n                var health = {\n                    keySecure: await (async function() {\n                        var health = await __parseComponentHealth(problems, snKmfUi, [\"KEY_SECURE\"], helpers);\n                        health[\"enabled\"] = (health.health !== \"GRAY\");\n                        return health;\n                    })(),\n                    fileKeyStore: await (async function() {\n                        var health = await __parseComponentHealth(problems, snKmfUi, [\"FILE_KEY_STORE\"], helpers);\n                        health[\"enabled\"] = (health.health !== \"GRAY\");\n                        return health;\n                    })(),\n                };\n                health[\"enabled\"] = (health['keySecure'].enabled || health['fileKeyStore'].enabled);\n                return health;\n            })(),\n            instanceKeys: {\n                keyEncryptionKey: await __parseComponentHealth(problems, snKmfUi, [\"IKEK\"], helpers),\n                hmacKey: await __parseComponentHealth(problems, snKmfUi, [\"IHMAC\"], helpers),\n            },\n            cryptoModules: {\n                glideEncrypter: await __parseComponentHealth(problems, snKmfUi, [\"GLIDE_ENCRYPTER\"], helpers),\n            },\n            snPki: await (async function() {\n                var health = {\n                    ldap: await (async function() {\n                        const health = await __parseComponentHealth(problems, snKmfUi, [\"EJBCA_PKI\"], helpers);\n                        health[\"conn\"] = await __parseComponentHealth(null, snKmfUi, [\"EJBCA_PKI\", \"LDAP\"], helpers);\n                        health[\"iaek\"] = await __parseComponentHealth(null, snKmfUi, [\"EJBCA_PKI\", \"IAEK\"], helpers);\n                        health[\"isk\"] = await __parseComponentHealth(null, snKmfUi, [\"EJBCA_PKI\", \"ISK\"], helpers);\n                        health[\"enabled\"] = (health[\"iaek\"].health !== \"GRAY\");\n                        health[\"hide\"] = !health[\"enabled\"];\n                        return health;\n                    })(),\n                    vault: await (async function() {\n                        const health = await __parseComponentHealth(problems, snKmfUi, [\"VAULT_PKI\"], helpers);\n                        health[\"conn\"] = await __parseComponentHealth(null, snKmfUi, [\"VAULT_PKI\", \"VAULT_CONNECTIVITY\"], helpers);\n                        health[\"iaek\"] = await __parseComponentHealth(null, snKmfUi, [\"VAULT_PKI\", \"IAEK\"], helpers);\n                        health[\"isk\"] = await __parseComponentHealth(null, snKmfUi, [\"VAULT_PKI\", \"ISK\"], helpers);\n                        health[\"enabled\"] = (health[\"conn\"].health !== \"GRAY\");\n                        health[\"hide\"] = !health[\"enabled\"];\n                        return health;\n                    })(),\n                }\n                health[\"enabled\"] = (health[\"ldap\"].enabled || health[\"vault\"].enabled);\n                health[\"hide\"] = !health[\"enabled\"];\n                return health;\n            })(),\n            instancePki: await (async function() {\n                const health = await __parseComponentHealth(problems, snKmfUi, [\"INSTANCE_PKI\"], helpers);\n                health[\"icsk\"] = await __parseComponentHealth(null, snKmfUi, [\"INSTANCE_PKI\", \"ICSK\"], helpers);\n                health[\"issuingCertificate\"] = await __parseComponentHealth(null, snKmfUi, [\"INSTANCE_PKI\", \"ISSUING_CERTIFICATE\"], helpers);\n                health[\"crlEndpoint\"] = await __parseComponentHealth(null, snKmfUi, [\"INSTANCE_PKI\", \"CRL_ENDPOINT\"], helpers);\n                health[\"enabled\"] = (health[\"issuingCertificate\"].health !== \"GRAY\");\n                health[\"hide\"] = !health[\"enabled\"];\n                return health;\n            })(),\n        };\n\n        // Force the overall state to be RED if KMF isn't configured.\n        if (!health.rootKeyWrappers.enabled)\n            health['overall'].health = \"RED\";\n        \n        var state = Object.assign({\n            loading: false,\n            instanceType: snKmfUi && snKmfUi.instanceType || \"UNKNOWN\",\n            config: {\n                // The PKI that the instance is currently using\n                currentPki: (function() {\n                    if (health.snPki.ldap.enabled)\n                        return \"LDAP\";\n                    if (health.snPki.vault.enabled)\n                        return \"Vault\";\n                    return null;\n                })(),\n            },\n            statusIcons: {\n                green: health.overall.health !== \"GREEN\",\n                yellow: health.overall.health !== \"YELLOW\",\n                red: health.overall.health !== \"RED\",\n            },\n            statusString: await (async function() {\n                switch (health.overall.health) {\n                    case \"RED\":\n                        return await helpers.translate('Key Management Framework is currently unavailable.');\n                    case \"YELLOW\": {\n                        if (problems.length === 0)\n                            return await helpers.translate('An item requires your attention.');\n                        if (problems.length === 1)\n                            return await helpers.translate('An item requires your attention: {0}.', problems[0]);\n                        return await helpers.translate('Several items require your attention: {0}.', problems.join(', '));\n                    }\n                    case \"GREEN\":\n                        return await helpers.translate('Everything looks good. Have a nice day!');\n                    default:\n                        return await helpers.translate('Hold tight while we check your instance...');\n                }\n            })(),\n            lastChecked: snKmfUi && new Date(snKmfUi.date + 'Z').toLocaleTimeString() || \"now\",\n            health,\n        }, problems);\n        state['infoBox'] = await __buildInfoBox(state, api, helpers);\n        return state;\n    }\n\n    return exports;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"89c89330c3db01109a21ccbfea40dd01","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/032ba5b8614f0110654df4ebc0d811b6","value":"032ba5b8614f0110654df4ebc0d811b6"},"sys_update_name":"sys_ux_client_script_include_89c89330c3db01109a21ccbfea40dd01","sys_updated_by":"maint","api_name":"sn_kmf_ui.KMFUIHealth","sys_created_on":"2022-05-04 08:52:36","name":"KMFUIHealth","sys_name":"KMFUIHealth","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/032ba5b8614f0110654df4ebc0d811b6","value":"032ba5b8614f0110654df4ebc0d811b6"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Compare with all\"\n    },\n    {\n        \"message\": \"Compare with {0}\"\n    },\n    {\n        \"message\": \"Count\"\n    },\n    {\n        \"message\": \"Percentage\"\n    },\n    {\n        \"message\": \"Hours\"\n    },\n    {\n        \"message\": \"Days\"\n    },\n    {\n        \"message\": \"Benchmarks\"\n    },\n    {\n        \"message\": \"Top Performers\"\n    },\n    {\n        \"message\": \"Instance Score\"\n    },\n    {\n        \"message\": \"N/A\"\n    },\n    {\n        \"message\": \"Your Instance & Percentile Rank\"\n    },\n    {\n        \"message\": \"N/A\"\n    },\n    {\n        \"message\": \"Global Benchmark\"\n    },\n    {\n        \"message\": \"Industry\"\n    },\n    {\n        \"message\": \"Number of users\"\n    },\n    {\n        \"message\": \"Region\"\n    },\n    {\n        \"message\": \"Summary\"\n    },\n    {\n        \"message\": \"Your Industry\"\n    },\n    {\n        \"message\": \"Compared with\"\n    },\n    {\n        \"message\": \"KPI Name\"\n    },\n    {\n        \"message\": \"Benchmark\"\n    },\n    {\n        \"message\": \"Top Performers Benchmark\"\n    },\n    {\n        \"message\": \"Your Instance\"\n    },\n    {\n        \"message\": \"Monthly Change\"\n    },\n    {\n        \"message\": \"Percentile Rank\"\n    },\n    {\n        \"message\": \"Month\"\n    },\n    {\n        \"message\": \"Top Performers Benchmark\"\n    },\n    {\n        \"message\": \"Your Instance\"\n    },\n    {\n        \"message\": \"Percentile Rank\"\n    }\n]","access":"public","sys_mod_count":"205","includes":"","sys_updated_on":"2024-09-25 13:13:03","sys_tags":"","script":"function include({\n    imports\n}) {\n    class BenchmarksUtilsSNC {\n        /**\n         * Returns category dropdown data\n         *@param {array} categoryIds\n         *@param {object} categories\n         * @return {object}\n         */\n        static async getCategoryDropdown(categories) {\n            var categoriesDropDownData = [];\n            for (var key in categories) {\n                var category = {};\n                category.id = key;\n                category.label = categories[key];\n                categoriesDropDownData.push(category);\n            }\n            return categoriesDropDownData;\n        }\n\n        /**\n         * Returns cohort dropdown data\n         *@param {object} breakdowns\n         *@param {object} helpers\n         * @return {object}\n         */\n        static async getCohortDropdown(breakdowns, helpers) {\n            var cohortsIdLabelMap = {\n                \"sn_bm_company_similar\": \"Similar companies\",\n                \"sn_bm_common_industry\": \"Industry\",\n                \"sn_bm_common_size_bucket\": \"Number of users\",\n                \"sn_bm_client_region\": \"Region\",\n                \"sn_bm_client_msp\": \"MSP Cohort\"\n            };\n            var cohortsItems = [{\n                \"id\": \"all\",\n                \"label\": await helpers.translate(\"Compare with all\"),\n                \"cohort\": \"all\"\n            }];\n            for (var cohortId in cohortsIdLabelMap) {\n                if (cohortsIdLabelMap.hasOwnProperty(cohortId)) {\n                    var breakdown = breakdowns[cohortId];\n                    if (breakdown) {\n                        var breakdownIds = breakdown.idList;\n                        var cohortItem = {\n                            \"id\": cohortId,\n                            \"label\": cohortsIdLabelMap[cohortId],\n                            \"children\": []\n                        };\n                        for (var j = 0; j < breakdownIds.length; j++) {\n                            var cohortChildren = {\n                                \"id\": breakdownIds[j],\n                                \"label\": await helpers.translate(\"Compare with {0}\", breakdown.idMap[breakdownIds[j]].display),\n                                \"cohort\": cohortId\n                            };\n                            cohortItem.children.push(cohortChildren);\n                        }\n                        cohortsItems.push(cohortItem);\n                    }\n                }\n            }\n            return cohortsItems;\n        }\n\n        /**\n         * Returns current tabs\n         *@param {object} groupIds\n         *@param {object} groups\n         * @return {object}\n         */\n        static async getCurrentTabs(groups) {\n            var tabs = [{\n                \"id\": \"all\",\n                \"label\": \"All\"\n            }];\n            for (var groupID in groups) {\n                var tab = {\n                    \"id\": groupID,\n                    \"label\": groups[groupID]\n                };\n                tabs.push(tab);\n            }\n            return tabs;\n        }\n\n        /**\n         * Returns indicators data\n         *@param {string} category\n         *@param {string} group\n         *@param {object} cohort\n         *@param {object} inputData\n         * @return {object}\n         */\n        static async getCurrentFilteredData(group, inputData) {\n            var indicatorList = [];\n            if (group == \"all\") {\n                indicatorList = inputData.indicators.idList;\n            } else {\n                var indicatorsMap = inputData.indicators.idMap;\n                for (var key in indicatorsMap)\n                    if (indicatorsMap[key].group === group)\n                        indicatorList.push(key);\n            }\n            return this.getCurrentFilteredDataForIndicators(indicatorList, inputData);\n        }\n\n        static async getCurrentFilteredDataForIndicators(indicators, inputData) {\n            var data = {\n                \"month\": inputData ? inputData.currentMonth : \"\",\n                \"sizeBucket\": inputData ? inputData.sizeBucket : \"\",\n                \"region\": inputData ? inputData.region : \"\",\n                \"industry\": inputData ? inputData.activeIndustry : \"\",\n                \"indicatorData\": []\n            };\n            for (var i = 0; i < indicators.length; i++) {\n                var indicatorId = indicators[i];\n                var indicatorData = {\n                    \"id\": indicatorId\n                }\n                if (indicatorId in inputData.indicators.idMap) {\n                    var currentMonthScores = inputData.indicators.idMap[indicatorId].scores[inputData.currentMonth];\n                    indicatorData.name = inputData.indicators.idMap[indicatorId].display;\n                    indicatorData.minimize = inputData.indicators.idMap[indicatorId].minimize;\n                    indicatorData.unit = inputData.indicators.idMap[indicatorId].unit;\n                    indicatorData.localScore = currentMonthScores ? currentMonthScores.local : {};\n                    indicatorData.globalScore = currentMonthScores ? currentMonthScores.global : {};\n                    data.indicatorData.push(indicatorData);\n                }\n            }\n            return data;\n        }\n        static async timeDifferenceConvert(difference, unit) {\n            if (unit != 'd' && unit != 'h') {\n                return difference;\n            }\n            var time = difference;\n            if (unit == 'd') {\n                time = time * 24;\n            }\n            var days = Math.floor(time / 24);\n            var remainder = time % 24;\n            var hours = Math.floor(remainder);\n\n            if (days === '0') {\n                if (hours === '0') {\n                    return remainder + ' h';\n                } else {\n                    return hours + ' h';\n                }\n            } else {\n                if (hours === '0') {\n                    return days + ' d';\n                } else {\n                    return days + ' d ' + hours + ' h';\n                }\n            }\n        }\n\n        static updateLocalGlobal(score) {\n            var rt = {\n                \"local\": {},\n                \"global\": {}\n            }\n            for (let key in score)\n                rt[key] = score[key];\n            return rt;\n        }\n\n\n        /**\n         * Returns Line chart data and units\n         *@param {object} indicatorData\n         *@param {array} monthsIdList\n         *@param {string} selectedCohort\n         * @return {array}\n         */\n        static async getVisualizationDataForSelectedIndicator(indicatorData, helpers) {\n            var unit = {\n                \"precision\": \"\",\n                \"fieldType\": \"\",\n                \"label\": \"\",\n                \"format\": \"\"\n            };\n            var setUnitDetails = (precision, fieldType, label, format) => {\n                unit.precision = precision;\n                unit.fieldType = fieldType;\n                unit.label = label;\n                unit.format = format;\n            }\n            switch (indicatorData.unit) {\n                case \"\":\n                    setUnitDetails(0, \"number\", await helpers.translate(\"Count\"), indicatorData.unit);\n                    break;\n                case \"{0}%\":\n                    setUnitDetails(2, \"decimal\", await helpers.translate(\"Percentage\"), indicatorData.unit);\n                    break;\n                case \"{0} Hrs\":\n                    setUnitDetails(0, \"number\", await helpers.translate(\"Hours\"), indicatorData.unit);\n                    break;\n                case \"{0} days\":\n                    setUnitDetails(2, \"number\", await helpers.translate(\"Days\"), indicatorData.unit);\n                    break;\n            }\n            var data = {\n                benchmarkSeries: [],\n                instanceScoreSeries: [],\n                top10PerformersSeries: []\n            };\n            for (let key in indicatorData.scores) {\n                const month = key.split(' ')[0];\n                const year = key.split(' ')[1];\n                var monthlyScore = indicatorData.scores[key];\n                //build date and convert to timestamp\n\n                var monthMap = {\n                    'January': '01',\n                    'February': '02',\n                    'March': '03',\n                    'April': '04',\n                    'May': '05',\n                    'June': '06',\n                    'July': '07',\n                    'August': '08',\n                    'September': '09',\n                    'October': '10',\n                    'November': '11',\n                    'December': '12'\n                };\n                var currentDate = new Date(year + '-' + monthMap[month] + '-' + '02');\n                var date = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate());\n                const timestamp = date.getTime();\n\n                monthlyScore = this.updateLocalGlobal(monthlyScore);\n\n                //build series data for trend chart\n                data.benchmarkSeries.push({\n                    timestamp,\n                    value: monthlyScore.global.mean || null\n                });\n                data.top10PerformersSeries.push({\n                    timestamp,\n                    value: monthlyScore.global.top10score || null\n                });\n                data.instanceScoreSeries.push({\n                    timestamp,\n                    value: monthlyScore.local.value || null\n                });\n            }\n\n            const legend = [{\n                header: await helpers.translate(\"Benchmarks\"),\n                series: \"benchmarkSeries\"\n            },\n            {\n                header: await helpers.translate(\"Top Performers\"),\n                series: \"top10PerformersSeries\"\n            },\n            {\n                header: await helpers.translate(\"Instance Score\"),\n                series: \"instanceScoreSeries\"\n            }\n            ];\n\n            //combine chart data and metadata\n            var trendLineData = legend.map(scoreType => ({\n                data: data[scoreType.series],\n                metadata: {\n                    series: [{\n                        label: scoreType.header,\n                        id: \"value\",\n                        type: \"value\"\n                    }],\n                    aggregate: {\n                        fieldType: unit.fieldType\n                    },\n                    format: {\n                        unitFormat: \"{0}\",\n                        frequency: \"monthly\",\n                        precision: unit.precision\n                    },\n                    dataSourceLabel: scoreType.header,\n                    timeZone: 0\n                }\n            }));\n            return [trendLineData, unit];\n        }\n        static async setDataForList(api, overviewDataList, pageIndex) {\n            var pageSize = api.state.pageSizeListView;\n            var startingIndex = pageIndex * pageSize;\n            var rowLength = overviewDataList.rows.length;\n            var endingIndex = (pageIndex + 1) * pageSize;\n            if (rowLength < endingIndex) {\n                endingIndex = rowLength;\n            }\n            var prevState = api.state.overviewDataListIndexed;\n            var tempRows = overviewDataList.rows.slice(startingIndex, endingIndex);\n\n            var temp = {};\n            temp.rows = tempRows;\n\n            api.setState(\"overviewDataListIndexed\", temp);\n        }\n\n        static async sendData(result, categoryId, industry, breakdown, breakdowns, helpers) {\n            var indicators = result.indicators;\n            var months = result.months;\n            var categories = result.categories;\n            var translatedNA = await helpers.translate(\"N/A\");\n            const textSuccess = 'text-success';\n            const textDanger = 'text-danger';\n\n            async function getOurTrend(item, months, monthsMap, helpers) {\n                return {\n                    name: await helpers.translate('Your Instance & Percentile Rank'),\n                    data: months.map(function (m) {\n                        var theMonth = monthsMap[m];\n                        return [\n                            new Date(theMonth.year, theMonth.month - 1, 15).valueOf(),\n                            (m in item.scores) ? item.scores[m].local.value : null\n                        ];\n                    }),\n                    monthlyChange: months.map(function (m) {\n                        return (m in item.scores) ? item.scores[m].local.monthlyChange : null;\n                    })\n                };\n            }\n\n            async function getTheirScore(item, bd, month, months, monthsMap, breakdowns, helpers, breakdownVar) {\n                var translatedNA = await helpers.translate('N/A');\n                var score = {\n                    value: 0,\n                    display: translatedNA,\n                    percentile_rank: translatedNA,\n                    valid: false,\n                    top10scoreDisplay: translatedNA\n                };\n                var trend = {\n                    name: '',\n                    data: null\n                };\n                /* Check if a breakdown is selected */\n                if (bd.type && bd.value) {\n                    /* Set the trend name and data */\n                    trend.data = months.map(function (m) {\n                        var theMonth = monthsMap[m];\n                        var value = null;\n                        try {\n                            value = item.scores[m].breakdowns[bd.type].elements[bd.value].mean;\n                        } catch (err) { }\n                        return [new Date(theMonth.year, theMonth.month - 1, 15).valueOf(), value];\n                    });\n                    /* Try to set the score values */\n                    try {\n                        /* Set the trend name */\n                        trend.name = breakdownVar;\n                        /* Set the score values */\n                        var element = item.scores[month].breakdowns[bd.type].elements[bd.value];\n                        score.value = element.mean;\n                        score.display = element.display.toLowerCase();\n                        score.top10scoreDisplay = element.top10scoreDisplay;\n                        if (!!element.rank)\n                            score.percentile_rank = element.rank;\n                        score.valid = true;\n                    } catch (err) { }\n                } else {\n                    /* Trend values */\n                    trend.name = await helpers.translate('Global Benchmark');\n                    trend.data = months.map(function (m) {\n                        var theMonth = monthsMap[m];\n                        var value = null;\n                        try {\n                            value = item.scores[m].global.mean;\n                        } catch (err) { }\n                        return [new Date(theMonth.year, theMonth.month - 1, 15).valueOf(), value];\n                    });\n                    try {\n                        /* Set global score value */\n                        score.value = item.scores[month].global.mean;\n                        if (!!item.scores[month].global.rank)\n                            score.percentile_rank = item.scores[month].global.rank;\n                        /* Set global score display value */\n                        if (!!item.scores[month].global.display) {\n                            score.display = item.scores[month].global.display.toLowerCase();\n                            score.top10scoreDisplay = item.scores[month].global.top10scoreDisplay;\n                            score.valid = true;\n                        }\n                    } catch (err) { }\n                }\n                return {\n                    score: score,\n                    trend: trend\n                };\n            }\n            async function getOurScore(item, month, prevMonth) {\n                /* Function to check which direction the change is better */\n                var isBetter = function (minimizeDirection, a, b) {\n                    return (minimizeDirection) ? (a <= b) : (a >= b);\n                };\n                if (month in item.scores) {\n                    item.ourScore = {\n                        value: item.scores[month].local.value,\n                        display: (!item.scores[month].local.display ? '0' : item.scores[month].local.display.toLowerCase())\n                    };\n                } else {\n                    item.ourScore = {\n                        value: null,\n                        display: '0'\n                    };\n                }\n                var display = item.ourScore.display;\n                var replaceStr = '';\n                if (item.ourScore.display.indexOf('days') != -1) {\n                    replaceStr = 'days';\n                } else if (item.ourScore.display.indexOf('day') != -1) {\n                    replaceStr = 'day';\n                } else if (item.ourScore.display.indexOf('d') != -1) {\n                    replaceStr = 'd';\n                }\n                display = display.replace(replaceStr, '<span class=\"os-sm\">' + replaceStr + '</span>').replace('%', '<span class=\"os-sm\">%</span>');\n                if (item.ourScore.display.indexOf('hours') != -1) {\n                    replaceStr = 'hours';\n                } else if (item.ourScore.display.indexOf('hour') != -1) {\n                    replaceStr = 'hour';\n                } else if (item.ourScore.display.indexOf('h') != -1) {\n                    replaceStr = 'h';\n                }\n                item.ourScore.display = display.replace(replaceStr, '<span class=\"os-sm\">' + replaceStr + '</span>');\n\n                try {\n                    var lastMonthValue = item.scores[prevMonth].local.value;\n                    item.difference = parseInt(Math.abs((item.ourScore.value - lastMonthValue) / lastMonthValue).toFixed(2) * 100);\n                    item.color = isBetter(item.minimize, item.ourScore.value, lastMonthValue) ? 'success' : 'danger';\n                    item.direction = (item.ourScore.value < lastMonthValue) ? 'glyphicon-triangle-bottom' : 'glyphicon-triangle-top';\n                    if (isNaN(item.difference))\n                        throw TypeError;\n                } catch (err) {\n                    var lastMonthValue = 0;\n                    item.difference = 'NA';\n                    item.color = 'grey';\n                    item.direction = '';\n                }\n            }\n\n\n            function getTextColor(item) {\n                item.textColor = ((!item.minimize && item.ourScore.value >= item.theirScore.value) || (item.minimize && item.ourScore.value <= item.theirScore.value)) ? textSuccess : textDanger;\n            };\n            var category = categories.idMap[categoryId].display;\n            var currentMonth = months.current[categoryId];\n            indicators.idMap = indicators.idList.filter(function (id) {\n                return indicators.idMap[id].category == categoryId;\n            }).map(function (id) {\n                return indicators.idMap[id];\n            });\n            var month = months.idMap[currentMonth].display;\n            var breakdownVar = '';\n            if (breakdown && breakdown.type && breakdown.value && breakdowns) {\n                for (var i in breakdowns) {\n                    if (breakdowns[i].id == breakdown.type)\n                        for (var j in breakdowns[i].children) {\n                            if (breakdowns[i].children[j].id == breakdown.value)\n                                breakdownVar = breakdowns[i].children[j].label;\n                        }\n                }\n            }\n            var type = '';\n            if (breakdown.type) {\n                if (breakdown.type == 'sn_bm_common_industry')\n                    type = await helpers.translate('Industry') + ' (';\n                else if (breakdown.type == 'sn_bm_common_size_bucket')\n                    type = await helpers.translate('Number of users') + ' (';\n                else if (breakdown.type == 'sn_bm_client_region')\n                    type = await helpers.translate('Region') + ' (';\n            }\n            var heading = '';\n            var textbody = '';\n            if (category)\n                heading += category;\n            if (month)\n                textbody += await helpers.translate('Summary') + ': ' + month;\n            if (industry)\n                textbody += ' | ' + await helpers.translate('Your Industry') + ': ' + industry;\n            var bracket = (type) ? ')' : '';\n            if (breakdownVar)\n                textbody += ' | ' + await helpers.translate('Compared with') + ': ' + type + '' + breakdownVar + bracket;\n            var cells = [{\n                'text': (await helpers.translate('KPI Name')).toUpperCase()\n            },\n            {\n                'text': (await helpers.translate('Your Score')).toUpperCase()\n            },\n            {\n                'text': (await helpers.translate('Monthly Change')).toUpperCase()\n            },\n            {\n                'text': (await helpers.translate('Benchmark')).toUpperCase()\n            },\n            {\n                'text': (await helpers.translate('Top Performers')).toUpperCase()\n            },\n            {\n                'text': (await helpers.translate('Percentile Rank')).toUpperCase()\n            }\n            ];\n\n            months.idList = months.idList.reverse();\n            for (var id in indicators.idMap) {\n                var kpiMonths = {\n                    'idList': [],\n                    'idMap': {}\n                };\n                kpiMonths.idList = months.idList.filter(function (month) {\n                    return month in indicators.idMap[id].scores;\n                });\n                kpiMonths.idList.forEach(function (month) {\n                    kpiMonths.idMap[month] = months.idMap[month];\n                });\n                indicators.idMap[id].ourTrend = await getOurTrend(indicators.idMap[id], kpiMonths.idList, kpiMonths.idMap, helpers);\n                var result = await getTheirScore(indicators.idMap[id], breakdown, currentMonth, kpiMonths.idList, kpiMonths.idMap, breakdowns, helpers, breakdownVar);\n                indicators.idMap[id].theirTrend = result.trend;\n                indicators.idMap[id].theirScore = result.score;\n                getOurScore(indicators.idMap[id], currentMonth, months.idMap[currentMonth].previous);\n                getTextColor(indicators.idMap[id]);\n                cells.push({\n                    'text': (indicators && indicators.idMap[id] && indicators.idMap[id].display) ? indicators.idMap[id].display : ''\n                });\n                cells.push({\n                    'text': (indicators && indicators.idMap[id] && indicators.idMap[id].ourScore.display) ? indicators.idMap[id].ourScore.display.replace(/<span.*?>/g, '').replace(/<\\/span>/g, '') : '',\n                    'color': (indicators && indicators.idMap[id] && indicators.idMap[id].textColor) ? indicators.idMap[id].textColor : ''\n                });\n                var difference = indicators.idMap[id].difference;\n                difference = difference == 'NA' ? translatedNA : difference + '%';\n                cells.push({\n                    'text': difference,\n                    'color': indicators.idMap[id].color == 'danger' ? textDanger : textSuccess\n                });\n                cells.push({\n                    'text': (indicators && indicators.idMap[id] && indicators.idMap[id].theirScore && indicators.idMap[id].theirScore.display) ? indicators.idMap[id].theirScore.display.replace(/<span.*?>/g, '').replace(/<\\/span>/g, '') : ''\n                });\n                cells.push({\n                    'text': (indicators && indicators.idMap[id] && indicators.idMap[id].theirScore && indicators.idMap[id].theirScore.top10scoreDisplay) ? indicators.idMap[id].theirScore.top10scoreDisplay.replace(/<span.*?>/g, '').replace(/<\\/span>/g, '') : ''\n                });\n                cells.push({\n                    'text': result.score.percentile_rank\n                });\n            }\n            var pages = [{\n                'heading': heading,\n                'textbody': textbody,\n                'svg': '',\n                'table': {\n                    'cells': cells,\n                    'column_widths': [0.3, 0.14, 0.14, 0.14, 0.14, 0.14]\n                }\n            }];\n            for (var id in indicators.idMap) {\n                var item = indicators.idMap[id];\n                var kpiCells = [{\n                    'text': (await helpers.translate('Month')).toUpperCase()\n                },\n                {\n                    'text': item.theirTrend.name\n                },\n                {\n                    'text': await helpers.translate('Top Performers Benchmark')\n                },\n                {\n                    'text': await helpers.translate('Your Instance')\n                },\n                {\n                    'text': await helpers.translate('Percentile Rank')\n                }\n                ];\n                for (var m in months.idList) {\n                    var ourScore = {\n                        'value': 0,\n                        'display': translatedNA\n                    };\n                    var theirScore = {\n                        'value': 0,\n                        'display': translatedNA\n                    };\n                    var top10score = {\n                        'value': 0,\n                        'display': translatedNA\n                    };\n                    try {\n                        var selectedMonth = months.idList[m];\n                        var bdType = breakdown.type;\n                        var bdValue = breakdown.value;\n                        if (!(selectedMonth in item.scores))\n                            continue;\n                        kpiCells.push({\n                            'text': months.idList[m]\n                        });\n                        if (selectedMonth in item.scores &&\n                            item.scores[selectedMonth].local.display)\n                            ourScore = {\n                                'value': item.scores[selectedMonth].local.value,\n                                'display': item.scores[selectedMonth].local.display\n                            };\n                        if (breakdown && breakdown.value && breakdown.type) {\n                            var score = item.scores[selectedMonth].breakdowns[bdType].elements[bdValue];\n                            theirScore = {\n                                'value': score.mean,\n                                'display': score.display,\n                                'rank': score.rank\n                            };\n                            top10score = {\n                                'value': score.top10score,\n                                'display': score.top10scoreDisplay\n                            };\n                        } else {\n                            var globalScore = item.scores[selectedMonth].global;\n                            if (globalScore.display) {\n                                theirScore.value = globalScore.mean;\n                                theirScore.display = globalScore.display;\n                            }\n                            if (globalScore.top10scoreDisplay) {\n                                top10score.value = globalScore.top10score;\n                                top10score.display = globalScore.top10scoreDisplay;\n                            }\n                            theirScore.rank = globalScore.rank;\n                        }\n                    } catch (err) { }\n                    kpiCells.push({\n                        'text': theirScore.display\n                    });\n                    kpiCells.push({\n                        'text': top10score.display\n                    });\n                    var textClass = ((!item.minimize && ourScore.value >= theirScore.value) || (item.minimize && ourScore.value <= theirScore.value)) ? textSuccess : textDanger;\n                    kpiCells.push({\n                        'text': ourScore.display,\n                        'color': textClass\n                    });\n                    kpiCells.push({\n                        'text': theirScore.rank ?\n                            theirScore.rank : translatedNA\n                    });\n                }\n                var description = '';\n                if (item.description) {\n                    item.description.split(\"\\n\").forEach(function (line) {\n                        if (line && line != '' && line != '\\r')\n                            description += '' + line.replace(/</g, '&lt;') + '\\n';\n                    });\n                }\n                pages.push({\n                    'heading': '' + item.display,\n                    'textbody': '' + description,\n                    'svg': {\n                        'content': '<svg> </svg>',\n                        'position': 650\n                    },\n\n                    'table': {\n                        'cells': kpiCells,\n                        'column_widths': [0.2, 0.2, 0.2, 0.2, 0.2]\n                    }\n                });\n            }\n            var documentRecord = {\n                'name': 'Benchmark Report ' + month,\n                'date': {\n                    'month': months.idMap[currentMonth].month,\n                    'year': months.idMap[currentMonth].year\n                },\n                'breakdown': breakdown.type == 'all' ? '' : breakdown.type,\n                'element': breakdown.value == 'all' ? '' : breakdown.value,\n                //'element': '',\n                'category': categoryId\n            };\n            var url = '/api/sn_bm_client/benchmark_client_api/export_pdf';\n            var result = {\n                'file_name': 'Benchmark Report ' + month,\n                'pages': pages,\n                'record': documentRecord\n            };\n            return result;\n        }\n    }\n    return BenchmarksUtilsSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"8a60289053332110ec80ddeeff7b12b5","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3214b661c3eb211062ebf69f05013160","value":"3214b661c3eb211062ebf69f05013160"},"sys_update_name":"sys_ux_client_script_include_8a60289053332110ec80ddeeff7b12b5","sys_updated_by":"admin","api_name":"sn_benchmarks.BenchmarksUtilsSNC","sys_created_on":"2023-06-28 19:01:23","name":"BenchmarksUtilsSNC","sys_name":"BenchmarksUtilsSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3214b661c3eb211062ebf69f05013160","value":"3214b661c3eb211062ebf69f05013160"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"488","includes":"d7e0c22d772e5110960ced43ba5a99ed","sys_updated_on":"2024-10-09 19:49:25","sys_tags":"","script":"function include({ imports }) {\n    //unifiedMapUtilsMapSearchFilter client script include\n    \n    const { generateUniqueId, cloneDeep, DELIMITER, CATEGORY, SELECT_ALL, ALERT, buildUserPrefWithAppId } = imports['sn_cmdb_ws.unifiedMapUtils']();\n\n    const _PRESETS_USER_PREF_KEY = 'sn_cmdb_ws.unifiedmap.map_search_filter.presets';\n    const _SHOW_FILTERED_ITEMS_USER_PREF_KEY = 'sn_cmdb_ws.unifiedmap.map_search_filter.show_filtered_items';\n    const _SEARCH_IN_PROGRESS = 'SEARCH_IN_PROGRESS';\n    const _CANCELLING_PREVIOUS_SEARCH = 'CANCELLING_PREVIOUS_SEARCH';\n    const _RELOAD_MAP = 'RELOAD_MAP';\n    const _UNSELECTED_PRESET = {\n        ID: -1,\n        LABEL: 'Default view'\n    };\n    const _PRESETS_USER_PREF_INITIAL = {\n        list: [\n            {\n                id: _UNSELECTED_PRESET.ID,\n                label: _UNSELECTED_PRESET.LABEL,\n                unchecked: []\n            }\n        ]\n    };\n    const _SHOW_FILTERED_ITEMS_USER_PREF_INITIAL = true;\n    const _SYS_PROP = {\n        DEFAULT_LEVEL: 'unifiedmap.map_search_filter.default_levels',\n        MAX_LEVEL: 'unifiedmap.map_search_filter.max_levels'\n    };\n    const _EVENTS = {\n        EVENT_SYNC: 'SN_UNIFIED_MAP_CTRL#EVENT_SYNC',\n        BROKERS_COMPLETED: 'SN_UNIFIED_MAP_CTRL#BROKERS_COMPLETED',\n        MAP_DATA_FETCH_COMPLETED: 'SN_UNIFIED_MAP_CTRL#MAP_DATA_FETCH_COMPLETED',\n        TRANSLATIONS_COMPLETED: 'SN_UNIFIED_MAP_CTRL#TRANSLATIONS_COMPLETED',\n        LOOKUP_SYSTEM_PROPS_COMPLETED: 'SN_UNIFIED_MAP_CTRL#LOOKUP_SYSTEM_PROPS_COMPLETED',\n        GET_USER_PREFS_COMPLETED: 'SN_UNIFIED_MAP_CTRL#GET_USER_PREFS_COMPLETED',\n        STATE_INITIALIZED: 'SN_UNIFIED_MAP_CTRL#STATE_INITIALIZED',\n        USER_PREFS_INITIALIZED: 'SN_UNIFIED_MAP_CTRL#USER_PREFS_INITIALIZED',\n        LEVELS_INITIALIZED: 'SN_UNIFIED_MAP_CTRL#LEVELS_INITIALIZED',\n        FILTER_INITIALIZED: 'SN_UNIFIED_MAP_CTRL#FILTER_INITIALIZED',\n        APPLY_FILTERS: 'SN_UNIFIED_MAP_CTRL#APPLY_FILTERS',\n        UPDATE_PAGE_PROPS: 'SN_UNIFIED_MAP_CTRL#UPDATE_PAGE_PROPS'\n    };\n    const _FILTER_PANEL_CONTENT = {\n        MAIN: 'main',\n        SAVE: 'save',\n        UPDATE: 'update',\n        DELETE: 'delete'\n    };\n    const _PRESET_ACTIONS = {\n        PROMPT: 'prompt',\n        SAVE: _FILTER_PANEL_CONTENT.SAVE,\n        UPDATE: _FILTER_PANEL_CONTENT.UPDATE,\n        DELETE: _FILTER_PANEL_CONTENT.DELETE,\n        MAIN: _FILTER_PANEL_CONTENT.MAIN\n    };\n\n    const _PERF_METRICS = {\n        TOTAL_ROUNDTRIP_TIME: \"total_roundtrip_time\",\n        UXF_GETMAP_OUTBOUND_CALL_TIME: \"uxf_getmap_outbound_call_time\",\n        TOTAL_BACKEND_TIME: \"total_backend_time\",\n        SM_GETMAP_API_TIME: \"sm_getmap_api_time\",\n        CMDB_GETMAP_API_TIME: \"cmdb_getmap_api_time\",\n        UXF_GETMAP_INBOUND_RETURN_TIME: \"uxf_getmap_inbound_return_time\",\n        CMDB_FRONTEND_TIME: \"cmdb_frontend_time\",\n        NODEMAP_COMPONENT_RENDERING_TIME: \"nodemap_component_rendering_time\",\n        CMDB_MAP_ONLY: \"cmdb_map_only\",\n        BASE_STATE_TYPE: \"base_state_type\",\n        NUMBER_OF_NODES: \"number_of_nodes\",\n        NUMBER_OF_EDGES: \"number_of_edges\",\n        CI: \"ci\",\n        LEVELS: \"levels\",\n    };\n\n    const _MULTIPLE_BADGE_ICON = 'circle-flag-event-outline';\n\n    const _saveUserPref = (key, obj, api) => {\n        if (typeof obj === 'object' && obj !== null) {\n            obj = JSON.stringify(obj);\n        }\n\n        api.data.saveUserPrefs.execute({\n            name: key,\n            value: obj\n        });\n    };\n    \n    const _previousPresetHasThisAttr = (attrId, filterControls) => {\n        return filterControls.presets.list.find(p => p.id === filterControls.idOfPrevious)?.unchecked.some(u => u.id === attrId);\n    };\n\n    const _assembleUncheckedFromFilter = (filterControls, includeUnused) => {\n        var layer = filterControls.layer;\n        var attributes = filterControls.attributes;\n\n        //get all unchecked filter items\n        //unchecked layers\n        var unchecked = [...Object.values(layer).filter(o => !o.value && o.name !== SELECT_ALL).map(o => ({ id: o.id }))];\n        //unchecked attributes\n        attributes.forEach(a => {\n            //assemble list of attributes that are either\n            // 1) unchecked (exclude \"Select All\" since it's auto calculated and not stored as part of preset)\n            // 2) disabled and would normally be unchecked except this particular attribute only applied to root and is also a part of the preset so it's ignored\n            var attrVals = a.list.filter(o => o.name !== SELECT_ALL && (!o.value || (o.disabled && _previousPresetHasThisAttr(o.id, filterControls))))\n            .map(o => {\n                return {\n                    id: o.id,\n                    displayName: a.header.label + ': ' + o.displayName\n                };\n            });\n            unchecked.push(...attrVals);\n        });\n        \n        if (includeUnused) {\n            unchecked.push(...filterControls.unused);\n        }\n\n        return unchecked;\n    };\n\n    const _getPresetIdOfCurrent = (api) => {\n        return parseInt(api.context.props.presetId);\n    };\n\n    const _getPresetLabelOfCurrent = (api) => {\n        var id = _getPresetIdOfCurrent(api);\n        var label = api.state.filterControls.presets.list.find(p => p.id === id)?.label;\n        return label;\n    };\n    \n    const _savePreset = (args) => {\n        var { isUpdate, api, helpers } = args;\n        var filterControls = cloneDeep(api.state.filterControls);\n        var list = filterControls.presets.list;\n        var id = isUpdate ? _getPresetIdOfCurrent(api) : new Date().getTime();\n        var label = isUpdate ? _getPresetLabelOfCurrent(api) : api.state.savePresetText;\n\n        //convert current state of filter to a preset and either add a new preset or update current preset; also clear unused\n        var unchecked = _assembleUncheckedFromFilter(filterControls);\n        if (isUpdate) {\n            list.find(p => p.id === id).unchecked = unchecked;\n        } else {\n            list.push({\n                id: id,\n                label: label,\n                unchecked: unchecked\n            });\n            filterControls.idOfPrevious = id;\n            api.emit('SN_UNIFIED_MAP_CTRL#UPDATE_PAGE_PROPS', { \n                params: { \"presetId\": id }\n            });\n            api.setState('labelOfCurrentPreset', label);\n        }\n        //show the star icon outline (saves preset) for default view since we don't want them deleting the default (filled in star allow preset deletion)\n        //  everything else will show the filled in star icon after saving a regular preset\n        filterControls.matchesPreset = id !== _UNSELECTED_PRESET.ID;\n        \n        filterControls.unused = [];\n        api.setState('filterControls', filterControls);\n\n        var presets = { list: list };\n        var presetKey = buildUserPrefWithAppId([_PRESETS_USER_PREF_KEY], api.context.app.appId);\n        _saveUserPref(presetKey[_PRESETS_USER_PREF_KEY], presets, api);\n\n        (isUpdate ?  \n            helpers.translate('Filter preset \"{0}\" has been updated.', label):\n            helpers.translate('Filter preset \"{0}\" has been saved.', label))\n            .then((translatedText) => {\n                var alerts = [{\n                    id: new Date().getTime(),\n                    status: ALERT.STATUS.INFO,\n                    icon: ALERT.ICON.INFO_CIRCLE_OUTLINE,\n                    content: translatedText,\n                    action: { type: ALERT.TYPE.DISMISS }\n                }];\n                api.emit('SN_UNIFIED_MAP_CTRL#ADD_ALERTS', { alerts: alerts });\n\n                helpers.timing.setTimeout(() => {\n                    api.emit('SN_UNIFIED_MAP_CTRL#REMOVE_ALERTS', { alerts: alerts });\n                }, 4000);\n            });\n    };\n\n    const _deletePreset = (api, helpers) => {\n        var idOfCurrent = _getPresetIdOfCurrent(api);\n        var filterControls = cloneDeep(api.state.filterControls);\n        filterControls.presets.list = filterControls.presets.list.filter(o => o.id !== idOfCurrent);\n        filterControls.idOfPrevious = _UNSELECTED_PRESET.ID;\n        api.emit('SN_UNIFIED_MAP_CTRL#UPDATE_PAGE_PROPS', { \n            params: { \"presetId\": _UNSELECTED_PRESET.ID }\n        });\n        api.setState('labelOfCurrentPreset', _UNSELECTED_PRESET.LABEL);\n\n        //for the default view that's shown after a delete, it needs to show the star outline (for saving) since they can't be able to delete the default view\n        //  plus, this mixed filter state it's left in after a delete won't match any presets anyway so its accurate\n        filterControls.matchesPreset = false;\n        api.setState('filterControls', filterControls);\n        var presetKey = buildUserPrefWithAppId([_PRESETS_USER_PREF_KEY], api.context.app.appId);\n        _saveUserPref(presetKey[_PRESETS_USER_PREF_KEY], filterControls.presets, api);\n\n        helpers.timing.setTimeout(() => {\n            api.emit(_EVENTS.APPLY_FILTERS, { 'items': _getProfileFilters(api), 'resetAll': true, 'currentPresetId': _UNSELECTED_PRESET.ID });\n        }, 0);\n        \n        helpers.translate('Filter preset \"{0}\" has been deleted.', _getPresetLabelOfCurrent(api))\n        .then((translatedText) => {\n            var alerts = [{\n                id: new Date().getTime(),\n                status: ALERT.STATUS.INFO,\n                icon: ALERT.ICON.INFO_CIRCLE_OUTLINE,\n                content: translatedText,\n                action: { type: ALERT.TYPE.DISMISS }\n            }];\n            api.emit('SN_UNIFIED_MAP_CTRL#ADD_ALERTS', { alerts: alerts });\n            \n            helpers.timing.setTimeout(() => {\n                api.emit('SN_UNIFIED_MAP_CTRL#REMOVE_ALERTS', { alerts: alerts });\n            }, 4000);\n        });\n    };\n\n    const _applyPreset = (args) => {\n        var { id, preset, filterControls, api, helpers } = args;\n        var filterControls = filterControls || cloneDeep(api.state.filterControls); //clone filterControls before using it\n        var id = id || preset.id;\n        var preset = preset || filterControls.presets.list.find(o => o.id === id) || filterControls.presets.list.find(o => o.id === _UNSELECTED_PRESET.ID);\n\n        //the updates to idOfPrevious and idOfCurrent are based on current context\n        if (preset.id !== _UNSELECTED_PRESET.ID) {\n            //handles just a standard switch to another preset (that's not UNSELECTED_PRESET)\n            filterControls.idOfPrevious = preset.id;\n            filterControls.matchesPreset = api.state.disableReloadButton ? filterControls.matchesPreset : true;\n        } else { //move current to previous if not -1 and update current to incoming\n            var idOfCurrent = _getPresetIdOfCurrent(api);\n            if (idOfCurrent !== _UNSELECTED_PRESET.ID) {\n                filterControls.idOfPrevious = idOfCurrent;\n            }\n            filterControls.matchesPreset = false; //show the star outline (for saving) since they can't be able to delete the default view\n        }\n        api.emit('SN_UNIFIED_MAP_CTRL#UPDATE_PAGE_PROPS', { \n            params: { \"presetId\": preset.id }\n        });\n        api.setState('labelOfCurrentPreset', preset.label);\n        api.setState('filterControls', filterControls);\n\n        //save for next page load\n        var presetKey = buildUserPrefWithAppId([_PRESETS_USER_PREF_KEY], api.context.app.appId);\n        _saveUserPref(presetKey[_PRESETS_USER_PREF_KEY], filterControls.presets, api);\n\n        var unchecked;\n        //using the supplied preset id, update the filter control checkboxes by calling applyFilter api\n        if(id === _UNSELECTED_PRESET.ID) {\n            //Check profile when its the default view\n            unchecked = _getProfileFilters(api);\n        } else {\n            unchecked = preset.unchecked.reduce((acc, o) => {\n                var attr = { id: o.id, value: false };\n                //define and save displayName since an attribute value or relationship type filter may no exist on map and we'll need it for unsued attributes section\n                //Eg. \"Linux Server\" may not be on the map or \"Hosted on::Hosts\" relationship may not be on the map\n                if (attr.id !== CATEGORY.SHOW_FILTERED_ITEMS && attr.id.split(DELIMITER)[0] !== CATEGORY.LAYER) {\n                    attr.displayName = o.displayName;\n                }\n                acc.push(attr);\n                return acc;\n            }, []);\n        }\n\n        helpers.timing.setTimeout(() => {\n            api.emit(_EVENTS.APPLY_FILTERS, { 'items': unchecked, 'resetAll': true, 'currentPresetId': preset.id });\n        }, 0);\n    };\n\n    const _getProfileFilters = (api) => {    \n        var profileData = api.data.getMapDataController?.profileData;\n        var newProfileLayers = {};\n        if (profileData && Object.keys(profileData).length) {\n            newProfileLayers = Object.values(profileData).pop()?.layers;\n        }\n\n        //assemble list of items to filter\n        var layers = cloneDeep(api.state.filterControls.layer);\n        var items = Object.keys(newProfileLayers).reduce((acc, pl) => {\n            var layerObj = layers[Object.keys(layers).find(p => layers[p].name === pl)];\n            acc.push({\n                id: layerObj.id,\n                value: newProfileLayers[pl]\n            });\n            return acc;\n        }, []);\n\n        return items;\n    };\n\n    const _applyProfile = (api) => {\n        // apply profile; we only care about false values as everything is checked/true by default on map load\n        api.emit('SN_UNIFIED_MAP_CTRL#APPLY_FILTERS', { 'items': _getProfileFilters(api), 'resetAll': true });\n        \n        //set active nodes; loads with all nodes and later in the pipeline the filter may further filter this down afterwards\n        var filterOutput = cloneDeep(api.state.filterOutput);\n        filterOutput.activeNodes = Object.keys(api.data.getMapDataController.ciData);\n        api.setState('filterOutput', filterOutput);\n    };\n\n    const _applyProfileOrPreset = (args) => {\n        //a preset is the saved settings of the filter checkboxes saved in user prefs\n        //a profile is simply just a default preset that only applies to the layer part of the filter\n        //NOTE: a preset wins out if both exist; otherwise just use the profile (if exists)\n        var { filterControls, api, helpers } = args;\n        var idOfCurrent = _getPresetIdOfCurrent(api);\n\n        //add presetId to the URL and update the selected preset label so that preset controls show what's active\n        if (idOfCurrent === _UNSELECTED_PRESET.ID) {\n            api.emit('SN_UNIFIED_MAP_CTRL#UPDATE_PAGE_PROPS', { \n                params: { \"presetId\": idOfCurrent }\n            });\n            api.setState('labelOfCurrentPreset', _UNSELECTED_PRESET.LABEL);\n        }\n\n        if (idOfCurrent === _UNSELECTED_PRESET.ID) {\n            _applyProfile(api);\n        } else {\n            _applyPreset({ id: idOfCurrent, filterControls, api, helpers });\n        }\n    };\n\n    const _capturePerfMetrics = (args) => {\n        var nowInMs = Date.now();\n        var { perfMetrics, captures, persist, timestamp, api, helpers } = args;\n        perfMetrics = cloneDeep(perfMetrics);\n\n        //addTimestamps\n        captures.forEach(c => {\n            var metric = perfMetrics[c.metricToCapture];\n            metric[c.isStartTime ? 'start' : 'end'] = timestamp || nowInMs;\n            \n            if (!c.isStartTime) {\n                //calculate duration if end time\n                metric.duration = metric.end - metric.start; //subtracting ms\n            }\n        });\n\n        //calculate any missing durations (eg. from uxf_getmap_inbound_return_time)\n        Object.values(perfMetrics).filter(v => typeof v === 'object' && v !== null && v.start && v.end && !v.duration).forEach(o => {\n            o.duration = o.end - o.start;\n        });\n\n        _persistPerfMetrics(perfMetrics, persist, api, helpers);\n\n        api.setState('perfMetrics', perfMetrics); //NOTE: this setState will start off by setting state in getMapDataController, but will set a new copied stete in mapSearchFilterController after that\n\n    };\n\n    const _persistPerfMetrics = (perfMetrics, persist, api, helpers) => {\n        if (persist) {\n            if (api.state.metricsTimeoutId) {\n                helpers.timing.clearTimeout(api.state.metricsTimeoutId)\n            }\n\n            //get browser version; this may get blocked later since window object is in exlusion list and this is a hack workaround\n            var browser;\n            try {\n                browser = (() => {}).constructor('return this')()?.navigator?.userAgent || '';\n            } catch (err) {\n                browser = '';\n            }\n\n            const metricsTimeoutId = helpers.timing.setTimeout(() => {\n                const { getConnections, logToConsole } = imports[\"sn_cmdb_ws.unifiedMapUtils\"]();\n                //you are in common/shared persistPerfMetrics code (origin can be derive from looking at captures)\n                var metrics = {\n                    app_id: api.context.app.appId,\n                    browser: api.context.props.browser || browser || 'not provided',\n                    ci_name: api.data.getMapDataController?.ciData?.[api.state.rootNode]?.Name || \"\",\n                    ci_sysid: api.state.rootNode,\n                    cmdb_map_only: !api.state.secondaryControllers?.length || 0,\n                    base_state_type: perfMetrics.base_state_type,\n                    levels: api.context.props.levels,\n                    number_of_edges: api.data.getMapDataController?.ciData ? getConnections(api.data.getMapDataController.ciData).length : 0,\n                    number_of_nodes: api.data.getMapDataController?.ciData ? Object.keys(api.data.getMapDataController.ciData).length : 0,\n                    start_time: perfMetrics.total_roundtrip_time.start,\n                    uxf_getmap_outbound_call_time: perfMetrics.uxf_getmap_outbound_call_time.duration,\n                    cmdb_getmap_api_time: perfMetrics.cmdb_getmap_api_time, //backend calcultes and returns just the duration here\n                    sm_getmap_api_time: perfMetrics.sm_getmap_api_time, //backend calcultes and returns just the duration here\n                    total_backend_time: perfMetrics.total_backend_time.duration,\n                    uxf_getmap_inbound_return_time: perfMetrics.uxf_getmap_inbound_return_time.duration,\n                    cmdb_frontend_time: perfMetrics.cmdb_frontend_time.duration,\n                    nodemap_component_rendering_time: perfMetrics.nodemap_component_rendering_time.duration,\n                    total_roundtrip_time: perfMetrics.total_roundtrip_time.duration\n                };\n                try {\n                      api.data.capture_performance_metrics.execute({ metrics });\n                }\n                catch{\n                     logToConsole('Failed to store metrics');\n                }\n\n                logToConsole('capturing performance metrics... \\n' + JSON.stringify(metrics, null, 4));\n                api.setState('metricsTimeoutId', null);\n            }, 3000);\n\n            api.setState('metricsTimeoutId', metricsTimeoutId);\n        }\n    };\n\n    const _buildAlertObjList = (api, messages) => {\n        var alerts = messages.reduce((acc, msg, msgIdx) => {\n\t\t\tacc.push({\n\t\t\t\tid: msg.id || generateUniqueId(),\n\t\t\t\tstatus: msg?.uiMessage?.severity || msg.severity || ALERT.STATUS.CRITICAL,\n\t\t\t\ticon: msg?.uiMessage?.icon ?? msg?.icon ?? ALERT.ICON.TRIANGLE_EXCLAMATION_OUTLINE,\n\t\t\t\tcontent: msg?.uiMessage?.message || msg.message,\n\t\t\t\theader: msg?.uiMessage?.header || msg.header || '',\n\t\t\t\taction: { type: ALERT.TYPE.DISMISS },\n\t\t\t\tautoDismiss: msg.autoDismiss\n\t\t\t});\n            return acc;\n        }, []);\n\n        return alerts;\n    };\n\n    const _resetReloadButtonState = (api, helpers) => {\n        if(api.state.disableReloadButton){\n            api.emit('SN_UNIFIED_MAP_CTRL#REMOVE_ALERTS', {\n                alerts: api.state.alerts\n            });\n            //re-enable the reload button\n            api.setState(\"disableReloadButton\", false);\n        }\n    };\n    \n    const _setIsPageLoadFalse =  (api, helpers) => {\n        if (api.state.initialPageLoad) {\n            helpers.timing.setTimeout(() => {\n                api.setState('initialPageLoad', false);\n            }, 0);\n        }\n    };\n    \n    return {\n        SEARCH_IN_PROGRESS: _SEARCH_IN_PROGRESS,\n        CANCELLING_PREVIOUS_SEARCH: _CANCELLING_PREVIOUS_SEARCH,\n        RELOAD_MAP: _RELOAD_MAP,\n        SHOW_FILTERED_ITEMS_USER_PREF_KEY: _SHOW_FILTERED_ITEMS_USER_PREF_KEY,\n        SHOW_FILTERED_ITEMS_USER_PREF_INITIAL: _SHOW_FILTERED_ITEMS_USER_PREF_INITIAL,\n        PRESETS_USER_PREF_KEY: _PRESETS_USER_PREF_KEY,\n        UNSELECTED_PRESET: _UNSELECTED_PRESET,\n        PRESETS_USER_PREF_INITIAL: _PRESETS_USER_PREF_INITIAL,\n        PRESET: _PRESET,\n        SYS_PROP: _SYS_PROP,\n        EVENTS: _EVENTS,\n        FILTER_PANEL_CONTENT: _FILTER_PANEL_CONTENT,\n        PRESET_ACTIONS: _PRESET_ACTIONS,\n        PERF_METRICS: _PERF_METRICS,\n        MULTIPLE_BADGE_ICON: _MULTIPLE_BADGE_ICON,\n\n        applyPreset: _applyPreset,\n        deletePreset: _deletePreset,\n        savePreset: _savePreset,\n        saveUserPref: _saveUserPref,\n        assembleUncheckedFromFilter: _assembleUncheckedFromFilter,\n        applyProfile: _applyProfile,\n        applyProfileOrPreset: _applyProfileOrPreset,\n        getPresetIdOfCurrent: _getPresetIdOfCurrent,\n        capturePerfMetrics: _capturePerfMetrics,\n        buildAlertObjList: _buildAlertObjList,\n        resetReloadButtonState: _resetReloadButtonState,\n        setIsPageLoadFalse: _setIsPageLoadFalse\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"8cdc31917746e510960ced43ba5a990a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_8cdc31917746e510960ced43ba5a990a","sys_updated_by":"admin","api_name":"sn_cmdb_ws.unifiedMapUtilsMapSearchFilter","sys_created_on":"2023-04-06 04:39:35","name":"unifiedMapUtilsMapSearchFilter","sys_name":"unifiedMapUtilsMapSearchFilter","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"1","includes":"","sys_updated_on":"2024-02-14 09:59:07","sys_tags":"","script":"// Only meant to be used for GlideAjax proxy for Conversational catalog items.\nfunction include({imports}) { }","sys_class_name":"sys_ux_client_script_include","sys_id":"8d8b046a9fd00210a86b86e29a0a1c5a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/4c8e6ff304752210559073c06a02f7c4","value":"4c8e6ff304752210559073c06a02f7c4"},"sys_update_name":"sys_ux_client_script_include_8d8b046a9fd00210a86b86e29a0a1c5a","sys_updated_by":"admin","api_name":"global.GlideAjaxProxyUtil","sys_created_on":"2024-02-14 09:59:07","name":"GlideAjaxProxyUtil","sys_name":"GlideAjaxProxyUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"1","includes":"3e90dfd39321c210228bca32b38918fa","sys_updated_on":"2024-04-19 17:59:33","sys_tags":"","script":"function include({ imports }) {\n    let PwdResetUxfVerificationClientUtilSNC = imports[\"sn_uib_pwd_reset.PwdResetUxfVerificationClientUtilSNC\"]();\n    class PwdResetUxfVerificationClientUtil extends PwdResetUxfVerificationClientUtilSNC {\n    }\n    return PwdResetUxfVerificationClientUtil;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"8e0113179321c210228bca32b38918d5","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_update_name":"sys_ux_client_script_include_8e0113179321c210228bca32b38918d5","sys_updated_by":"admin","api_name":"sn_uib_pwd_reset.PwdResetUxfVerificationClientUtil","sys_created_on":"2024-04-19 11:36:07","name":"PwdResetUxfVerificationClientUtil","sys_name":"PwdResetUxfVerificationClientUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"2","includes":"","sys_updated_on":"2025-06-05 05:20:59","sys_tags":"","script":"\nfunction include({imports}) {\n\t/**\n * IMPORTANT: IF YOU ARE MAKING ANY CHANGES TO THE FUNCTIONS HERE,\n * BE AWARE THAT THIS CODE IS USED IN BOTH PLACES:\n * REPOSITORY:\n *  https://code.devsnc.com/dev/now-unified-filters/\n * AS SCRIPT INCLUDE HERE: \n *  /components/filter-connected/src/main/plugins/com.sn_component_filter/update/sys_ux_client_script_include_8f0ec3492c5f441781f1f44f36351242.xml\n * AS JS CODE:\n *  /components/filter-connected/src/filter-connected/helpers/mergePARFilters.js\n * \n * THIS SCRIPT IS SUPPOSED TO AUTOMATICALLY SYNC DURING BUILD WITH THE TOOL: copy-merge-par-filters-to-xml-in-target.js\n */\n\n/**\n * Check if a certain filter payload is valid\n * @param {FilterConfigurationItem} filterItem\n * @return {boolean}\n *//* export */ function isFilterConfigurationInvalid(filterItem) {\n\tconst domainFilter = filterItem.type === 'domain';\n\tconst dateFilter = filterItem.type === 'date';\n\tconst queryFilter = filterItem.type === 'query';\n\tconst valueFilter = !domainFilter && !dateFilter && !queryFilter;\n\n\treturn (domainFilter && !filterItem.sys_id) ||\n\t\t(dateFilter && !filterItem.start && !filterItem.end) ||\n\t\t(queryFilter && !filterItem.encoded_query) ||\n\t\t(valueFilter && !filterItem.values?.length);\n}\n\n/**\n * @param {FilterConfigurationItem} mergedFilter\n * @param {FilterConfigurationItem} currentFilter\n * @returns {boolean} \n */\nfunction hasSameApplyToArray(mergedFilter, currentFilter) {\n\tif (!Array.isArray(mergedFilter.apply_to) || !Array.isArray(currentFilter.apply_to)) {\n\t\treturn false;\n\t}\n\n\tif (mergedFilter.apply_to.length !== currentFilter.apply_to.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < mergedFilter.apply_to.length; i++) {\n\t\tif (JSON.stringify(mergedFilter.apply_to[i]) !== JSON.stringify(currentFilter.apply_to[i])) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n/**\n * Script used by filter components as an event handler in UIB.\n *\n * @param {FilterConfigurationItem[] | null | undefined} oldFilters Filters stored on UIB page typically in `parFilters` state variable.\n * @param {FilterConfigurationItem[] | null | undefined} newFilters Payload dispatched by a filter.\n * @returns {FilterConfigurationItem[]} New merged filters state.\n *//* export */ function mergePARFilters (oldFilters, newFilters) {\n\tconst mergedFilters = Array.isArray(oldFilters) ? [...oldFilters] : [];\n\n\t// DEF0235870: We sometimes get 'undefined' as newFilters and it breaks stuff\n\tif (!Array.isArray(newFilters)) {\n\t\treturn mergedFilters;\n\t}\n\n\tfor (const filterItem of newFilters) {\n\t\tif (filterItem) {\n\t\t\tconst domainFilter = filterItem.type === 'domain';\n\t\t\tlet index = 0;\n\n\t\t\tif (domainFilter) {\n\t\t\t\tindex = mergedFilters.findIndex((x) => x.type === 'domain');\n\t\t\t} else if (filterItem.filterId) {\n\t\t\t\tindex = mergedFilters.findIndex((x) => x.filterId === filterItem.filterId);\n\t\t\t} else if (Array.isArray(filterItem.apply_to)) {\n\t\t\t\t// Fallback case when filterId is not defined, search for filter with identical apply_to\n\t\t\t\tindex = mergedFilters.findIndex((x) => hasSameApplyToArray(x, filterItem));\n\t\t\t}\n\n\t\t\tif (index >= 0) {\n\t\t\t\tif (isFilterConfigurationInvalid(filterItem)) {\n\t\t\t\t\tmergedFilters.splice(index, 1);\n\t\t\t\t} else {\n\t\t\t\t\tmergedFilters[index] = filterItem;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t!isFilterConfigurationInvalid(filterItem) && mergedFilters.push(filterItem);\n\t\t\t}\n\t\t}\n\t}\n\n\tmergedFilters\n\t\t.forEach((x, i) => {\n\t\t\tx.order = i;\n\t\t});\n\n\treturn mergedFilters;\n}\n\n/**\n * @param {string | ApplyToItemV2 | undefined} applyTo\n * @returns {{table: string, fields: string[]} | undefined} \n */\nfunction getTableAndFields(applyTo) {\n\tif (!applyTo) {\n\t\treturn undefined;\n\t}\n\n\tif (typeof applyTo === 'string') {\n\t\tconst [table, ...fields] = applyTo.split('.');\n\t\treturn { table, fields };\n\t}\n\n\tif (applyTo.type !== 'table') {\n\t\treturn undefined;\n\t}\n\n\treturn getTableAndFields(applyTo.key);\n}\n\n/**\n * Helper function to generate encoded queries\n * @param {FilterConfigurationItem[] | undefined | null} parFilters\n * @return {Object<string, string>} key-value collection where key is the tableName and value is encodedQuery\n */\nfunction getEncodedQueries (parFilters) {\n\t/** @type {Object<string, string>} */\n\tconst result = {};\n\n\tif (!Array.isArray(parFilters)) {\n\t\treturn result;\n\t}\n\n\tfor (const filter of parFilters) {\n\t\tif (Array.isArray(filter.apply_to)) {\n\t\t\tfor (const applyTo of filter.apply_to) {\n\t\t\t\tconst tableAndFields = getTableAndFields(applyTo);\n\t\t\t\tif (!tableAndFields) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { table, fields } = tableAndFields;\n\t\t\t\tconst field = fields.join('.');\n\t\t\t\tconst existingQuery = result[table];\n\t\t\t\tlet newQuery = '';\n\n\t\t\t\tswitch (filter.type) {\n\t\t\t\tcase 'choice':\n\t\t\t\tcase 'reference':\n\t\t\t\tcase 'boolean':\n\t\t\t\tdefault:\n\t\t\t\t\t/**\n\t\t\t\t\t * And also need to handle EMPTY case\n\t\t\t\t\t * state=IN1,2^ORstateISEMPTY\n\t\t\t\t\t */\n\t\t\t\t\tif (Array.isArray(filter.values) && filter.values.length > 0) {\n\t\t\t\t\t\tconst nonEmptyValues = filter.values.filter((x) => Boolean(x));\n\t\t\t\t\t\tconst hasEmpty = filter.values.length > nonEmptyValues.length;\n\t\t\t\t\t\tconst parts = [];\n\t\t\t\t\t\tif (nonEmptyValues.length === 1) {\n\t\t\t\t\t\t\tparts.push(`${field}=${nonEmptyValues[0]}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (nonEmptyValues.length > 1) {\n\t\t\t\t\t\t\tparts.push(`${field}IN${nonEmptyValues.join(',')}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (hasEmpty) {\n\t\t\t\t\t\t\tparts.push(`${field}ISEMPTY`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewQuery = parts.join('^OR');\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\t/**\n\t\t\t\t\t * sys_created_onBETWEENjavascript:gs.dateGenerate('2022-01-11','00:00:00')@javascript:gs.dateGenerate('2022-01-12','23:59:59')\n\t\t\t\t\t */\n\t\t\t\t\tif (filter.start && filter.end) {\n\t\t\t\t\t\tlet startDate = filter.start;\n\t\t\t\t\t\tlet startTime = '00:00:00';\n\t\t\t\t\t\t// Check if we have full date with time in it\n\t\t\t\t\t\tif (startDate.length > 10 && startDate.indexOf('T') > 0) {\n\t\t\t\t\t\t\tconst [date, time] = startDate.split('T');\n\t\t\t\t\t\t\tstartDate = date;\n\t\t\t\t\t\t\tstartTime = time;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlet endDate = filter.end;\n\t\t\t\t\t\tlet endTime = '23:59:59';\n\t\t\t\t\t\t// Check if we have full date with time in it\n\t\t\t\t\t\tif (endDate.length > 10 && endDate.indexOf('T') > 0) {\n\t\t\t\t\t\t\tconst [date, time] = endDate.split('T');\n\t\t\t\t\t\t\tendDate = date;\n\t\t\t\t\t\t\tendTime = time;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewQuery = `${field}BETWEENjavascript:gs.dateGenerate('${startDate}','${startTime}')@javascript:gs.dateGenerate('${endDate}','${endTime}')`;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'query':\n\t\t\t\t\tif (filter.encoded_query) {\n\t\t\t\t\t\tnewQuery = filter.encoded_query;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (newQuery) {\n\t\t\t\t\tresult[table] = existingQuery ? `${existingQuery}^${newQuery}` : newQuery;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* {\n\t\tincident: 'assigned_toIN5137153cc611227c000bbd1bd8cd2005^stateIN1,2',\n\t\tproblem: 'categoryINdatabase,software',\n\t} */\n\treturn result;\n}\n\n/**\n * Merges existing filters with another set of Filters.\n * Also generates encoded queries per table.\n *\n * @param {FilterConfigurationItem[] | null | undefined} oldFilters Filters stored on UIB page typically in `parFilters` state variable.\n * @param {FilterConfigurationItem[] | null | undefined} newFilters Payload dispatched by a filter.\n * @returns New merged filters data object.\n *//* export */ function mergePARFiltersV2 (oldFilters, newFilters) {\n\tconst parFilters = mergePARFilters(oldFilters, newFilters);\n\tconst encodedQueries = getEncodedQueries(parFilters);\n\treturn {\n\t\tparFilters,\n\t\tencodedQueries,\n\t};\n}\n\n\n\t/**\n\t * IMPORTANT: WE SHIP THIS SCRIPT IN TWO VERSIONS. VERSIONING IS DONE IN THE NEXT 2 LINES.\n\t */\n\tmergePARFilters.v2 = mergePARFiltersV2;\n\treturn mergePARFilters;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"8f0ec3492c5f441781f1f44f36351242","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/87f745a49f471a5ac8f5832fd3af649a","value":"87f745a49f471a5ac8f5832fd3af649a"},"sys_update_name":"sys_ux_client_script_include_8f0ec3492c5f441781f1f44f36351242","sys_updated_by":"system","api_name":"global.mergePARFilters","sys_created_on":"2020-10-26 14:42:11","name":"mergePARFilters","sys_name":"mergePARFilters","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"just now\"\n    },\n    {\n        \"message\": \"almost now\"\n    },\n    {\n        \"message\": \"about a minute ago\"\n    },\n    {\n        \"message\": \"about a minute from now\"\n    },\n    {\n        \"message\": \"about an hour ago\"\n    },\n    {\n        \"message\": \"about an hour from now\"\n    },\n    {\n        \"message\": \"about a day ago\"\n    },\n    {\n        \"message\": \"about a day from now\"\n    },\n    {\n        \"message\": \"about a month ago\"\n    },\n    {\n        \"message\": \"about a month from now\"\n    },\n    {\n        \"message\": \"about a year ago\"\n    },\n    {\n        \"message\": \"about a year from now\"\n    },\n    {\n        \"message\": \"{0} minutes ago\"\n    },\n    {\n        \"message\": \"{0} minutes from now\"\n    },\n    {\n        \"message\": \"{0} hours ago\"\n    },\n    {\n        \"message\": \"{0} hours from now\"\n    },\n    {\n        \"message\": \"{0} days ago\"\n    },\n    {\n        \"message\": \"{0} days from now\"\n    },\n    {\n        \"message\": \"{0} months ago\"\n    },\n    {\n        \"message\": \"{0} months from now\"\n    },\n    {\n        \"message\": \"{0} years ago\"\n    },\n    {\n        \"message\": \"{0} years from now\"\n    },\n    {\n        \"message\": \"Unknown\"\n    },\n    {\n        \"message\": \"Sunday\"\n    },\n    {\n        \"message\": \"Monday\"\n    },\n    {\n        \"message\": \"Tuesday\"\n    },\n    {\n        \"message\": \"Wednesday\"\n    },\n    {\n        \"message\": \"Thursday\"\n    },\n    {\n        \"message\": \"Friday\"\n    },\n    {\n        \"message\": \"Saturday\"\n    },\n    {\n        \"message\": \"today\"\n    },\n    {\n        \"message\": \"yesterday\"\n    },\n    {\n        \"message\": \"tomorrow\"\n    },\n    {\n        \"message\": \"this {0}\"\n    },\n    {\n        \"message\": \"last {0}\"\n    },\n    {\n        \"message\": \"next {0}\"\n    },\n    {\n        \"message\": \"{0} at {1}\"\n    }\n]","access":"package_private","sys_mod_count":"2","includes":"","sys_updated_on":"2023-12-15 09:20:33","sys_tags":"","script":"/**\n  * Copy of sn_sow.SOWDateTimeHelper\n  */\nfunction include({ imports }) {\n\tconst { NowDateTime } = imports['sn_uxf.core_libraries']();\n\n\tconst DEFAULT_DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\tconst DEFAULT_SHORT_DATE_FORMAT = 'DD-MMM-YY';\n\tconst DEFAULT_TIME_FORMAT = 'HH:mm';\n\n\t/**\n\t * NowDateTime format tokens have some differences with those in the platform\n\t * so this function replaces the more commonly used ones\n\t * e.g. 'y' in a platform date/time format with 'Y' for NowDateTime\n\t */\n\tconst _parseFormat = function (format) {\n\t\tif (!format)\n\t\t\treturn DEFAULT_DATE_TIME_FORMAT;\n\n\t\tconst tokenReplacements = {\n\t\t\ty: 'Y',\n\t\t\td: 'D',\n\t\t\tS: 'SSS'\n\t\t};\n\t\tconst regEx = new RegExp(Object.keys(tokenReplacements).join('|'), 'g');\n\n\t\tformat = format.replace(regEx, token => {\n\t\t\treturn tokenReplacements[token];\n\t\t});\n\n\t\treturn format;\n\t};\n\n\t/**\n\t * Returns a NowDateTime object\n\t *\n\t * @param {String} [dateTime]           the date/time to return a NowDateTime object for\n\t * @param {String} [dateTimeFormat]     the format of the provided date/tine e.g. DD/MM/YY hh:mm a\n\t * @param {String} [sourceTimezone]     the timezone of the provided date/time e.g. US/Pacific\n\t * @param {String} [convertToTimezone]  the timezone to convert the returned NowDateTime object to e.g. Europe/London\n\t * \n\t * @return {Object} a NowDateTime object\n\t */\n\tconst getNowDateTime = function (\n\t\tdateTime,\n\t\tdateTimeFormat,\n\t\tsourceTimezone,\n\t\tconvertToTimezone\n\t) {\n\t\tif (!dateTime)\n\t\t\treturn NowDateTime();\n\n\t\tlet nowDateTime = dateTimeFormat\n\t\t\t? NowDateTime(dateTime, _parseFormat(dateTimeFormat))\n\t\t\t: NowDateTime(dateTime);\n\n\t\tif (sourceTimezone)\n\t\t\tnowDateTime = nowDateTime.tz(sourceTimezone, true);\n\n\t\treturn convertToTimezone ? nowDateTime.tz(convertToTimezone) : nowDateTime;\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative time format\n\t * e.g. about a minute ago, 3 days from now\n\t *\n\t * @param {Object} helpers  the helpers object that is made available to UIB client scripts\n\t * @param {Object} date     the NowDateTime object to be returned in relative time format\n\t * \n\t * @return {String} the relative time format of the supplied NowDateTime object\n\t */\n\tconst getRelativeTimeAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime()\n\t) {\n\t\tconst dateFromNow = date.fromNow();\n\t\tconst isPast = dateFromNow.endsWith('ago');\n\t\tconst timeRange = isPast\n\t\t\t? dateFromNow.replace(/ago$/, '').trim()\n\t\t\t: dateFromNow.replace(/^in/, '').trim();\n\n\t\tswitch (timeRange) {\n\t\t\tcase 'a few seconds':\n\t\t\t\t// range 0-44 seconds\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('just now')\n\t\t\t\t\t: await helpers.translate('almost now');\n\t\t\tcase 'a minute':\n\t\t\t\t// range 45-89 seconds\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a minute ago')\n\t\t\t\t\t: await helpers.translate('about a minute from now');\n\t\t\tcase 'an hour':\n\t\t\t\t// 45 to 89 minutes\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about an hour ago')\n\t\t\t\t\t: await helpers.translate('about an hour from now');\n\t\t\tcase 'a day':\n\t\t\t\t// 22 to 35 hours\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a day ago')\n\t\t\t\t\t: await helpers.translate('about a day from now');\n\t\t\tcase 'a month':\n\t\t\t\t// 26 to 45 days\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a month ago')\n\t\t\t\t\t: await helpers.translate('about a month from now');\n\t\t\tcase 'a year':\n\t\t\t\t// 11 months to 17 months\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a year ago')\n\t\t\t\t\t: await helpers.translate('about a year from now');\n\t\t\t// plural value returned below\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// in the past (eg. 2 hours ago, 5 days ago, 20 minutes ago, etc.)\n\t\t// in the future (eg. in 2 hours, in 5 days, in 20 minutes, etc.)\n\t\tconst splitTime = dateFromNow.split(' ');\n\t\tconst timeType = isPast ? splitTime[1] : splitTime[2];\n\t\tconst timeCount = isPast ? splitTime[0] : splitTime[1];\n\n\t\tswitch (timeType) {\n\t\t\tcase 'minutes':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} minutes ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} minutes from now', timeCount);\n\t\t\tcase 'hours':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} hours ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} hours from now', timeCount);\n\t\t\tcase 'days':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} days ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} days from now', timeCount);\n\t\t\tcase 'months':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} months ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} months from now', timeCount);\n\t\t\tcase 'years':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} years ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} years from now', timeCount);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t// should never get here\n\t\treturn await helpers.translate('Unknown');\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today, yesterday, this Friday\n\t *\n\t * @param {Object}  helpers                     the helpers object that is made available to UIB client scripts\n\t * @param {Object}  date                        the NowDateTime object to be returned in relative day format\n\t * @param {Integer} [relativeFormatDayLimit]    number indicating the number of relative days which then triggers\n\t *                                              this function to return a date string instead\n\t * @param {String}  [dateFormat]                the format of the date string to be returned if relativeFormatDayLimit is exceeded\n\t *                                              e.g. YYYY-MM-DD\n\t * \n\t * @return {String} the relative day format of the supplied NowDateTime object\n\t */\n\tconst getRelativeDayAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime(),\n\t\trelativeFormatDayLimit,\n\t\tdateFormat = DEFAULT_SHORT_DATE_FORMAT\n\t) {\n\t\trelativeFormatDayLimit = parseInt(relativeFormatDayLimit);\n\n\t\tconst now = getNowDateTime();\n\t\t/*\n\t\t  gets a new NowDateTime object for now but bases it on an existing NowDateTime\n\t\t  this is needed to maintain the correct timezone in the new object as you cannot\n\t\t  get the timezone out of a NowDateTime\n\t\t*/\n\t\tconst nowInTimezone = date.add(now.valueOf() - date.valueOf(), 'millisecond');\n\t\tconst startOfToday = nowInTimezone.startOf('day');\n\t\tconst startOfDate = date.startOf('day');\n\t\tconst dayDiff = Math.abs(startOfDate.diff(startOfToday, 'days'));\n\t\tconst weekDayOfDate = date.format('d');\n\t\tconst startOfWeekNow = nowInTimezone.startOf('week').add(1, 'day'); // adding 1 day to account for first day of week defaulting to Sunday\n\t\tconst endOfWeekNow = nowInTimezone.endOf('week').add(1, 'day'); // adding 1 day to account for first day of week defaulting to Sunday\n\n\t\t/*\n\t\t  if a 'relativeFormatDayLimit' has been passed in this number is used to check the difference in days \n\t\t  and if it exceeds this limit then just return a formatted date/time value instead\n\t\t*/\n\t\tif (!isNaN(relativeFormatDayLimit) && dayDiff > relativeFormatDayLimit)\n\t\t\treturn getFormattedDateText(date, null, dateFormat);\n\n\t\tconst isPast = date.isBefore(now);\n\t\tconst isThisWeek = date.valueOf() >= startOfWeekNow.valueOf() && date.valueOf() <= endOfWeekNow.valueOf();\n\t\tconst dayNames = [\n\t\t\tawait helpers.translate('Sunday'),\n\t\t\tawait helpers.translate('Monday'),\n\t\t\tawait helpers.translate('Tuesday'),\n\t\t\tawait helpers.translate('Wednesday'),\n\t\t\tawait helpers.translate('Thursday'),\n\t\t\tawait helpers.translate('Friday'),\n\t\t\tawait helpers.translate('Saturday')\n\t\t];\n\n\t\t// return text based on the number of days difference between the date passed in and now\n\t\tswitch (true) {\n\t\t\tcase dayDiff === 0:\n\t\t\t\treturn await helpers.translate('today');\n\t\t\tcase dayDiff === 1:\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('yesterday')\n\t\t\t\t\t: await helpers.translate('tomorrow');\n\t\t\tcase dayDiff < 8:\n\t\t\t\treturn isThisWeek ? await helpers.translate('this {0}', dayNames[weekDayOfDate]) :\n\t\t\t\t\t(isPast ? await helpers.translate('last {0}', dayNames[weekDayOfDate])\n\t\t\t\t\t\t: await helpers.translate('next {0}', dayNames[weekDayOfDate]));\n\t\t\tdefault:\n\t\t\t\treturn await getRelativeTimeAsync(helpers, date);\n\t\t}\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today at 5pm, next Friday at 17:21\n\t *\n\t * @param {Object}  helpers                     the helpers object that is made available to UIB client scripts\n\t * @param {Object}  date                        the NowDateTime object to be returned in relative day format\n\t * @param {String}  [timeFormat]                the format of the time string to be returned e.g. hh:mm a\n\t * @param {Integer} [relativeFormatDayLimit]    number indicating the number of relative days which then triggers\n\t *                                              this function to return a date string instead\n\t * @param {String}  [dateFormat]                the format of the date string to be returned if relativeFormatDayLimit is exceeded\n\t *                                              e.g. YYYY-MM-DD\n\t * \n\t * @return {String} the relative day format with time of the supplied NowDateTime object\n\t */\n\tconst getRelativeDayAndTimeAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime(),\n\t\ttimeFormat = DEFAULT_TIME_FORMAT,\n\t\trelativeFormatDayLimit,\n\t\tdateFormat\n\t) {\n\t\t// get a relative day based text for the date e.g. today, last Friday, 10 days from now\n\t\tlet dayText = await getRelativeDayAsync(\n\t\t\thelpers,\n\t\t\tdate,\n\t\t\trelativeFormatDayLimit,\n\t\t\tdateFormat\n\t\t);\n\n\t\t// get just the time portion of the NowDateTime object based on the format passed in\n\t\ttimeFormat = _parseFormat(timeFormat);\n\t\tlet timeText = date.format(timeFormat);\n\n\t\treturn await helpers.translate('{0} at {1}', dayText, timeText);\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today at 5pm, next Friday at 17:21\n\t *\n\t * @param {Object} date         the NowDateTime object to be returned as a string in the specified format\n\t * @param {String} [timeZone]   the timezone to return the date/time in e.g. US/Pacific\n\t * @param {String} [format]     the format to return the date/time in e.g. DD/MM/YY hh:mm a\n\t * \n\t * @return {String} the string format with appropriate timezone conversion of the supplied NowDateTime object\n\t */\n\tconst getFormattedDateText = function (\n\t\tdate = getNowDateTime(),\n\t\ttimeZone,\n\t\tdateTimeFormat\n\t) {\n\t\tdateTimeFormat = _parseFormat(dateTimeFormat);\n\n\t\treturn timeZone ? date.tz(timeZone).format(dateTimeFormat) : date.format(dateTimeFormat);\n\t};\n\n\treturn {\n\t\tgetRelativeTimeAsync,\n\t\tgetRelativeDayAsync,\n\t\tgetRelativeDayAndTimeAsync,\n\t\tgetFormattedDateText,\n\t\tgetNowDateTime\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"914b74a637c371108dfb9c7c24924b0f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_914b74a637c371108dfb9c7c24924b0f","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallDateTimeUtils","sys_created_on":"2023-12-14 10:10:13","name":"OnCallDateTimeUtils","sys_name":"OnCallDateTimeUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"3","includes":"c408debe430031102c5119405bb8f2b0","sys_updated_on":"2024-06-13 10:34:33","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\n\n    const { EvalStatus, isEmpty } = imports[\"sn_access_analyzer.UserComparisonUtil\"](api, helpers);\n\n    class AccessComparator {\n\n        constructor(baseUserRef, modelUserRef, params) {\n            this.params = Object.assign({\n                baseUserRef: baseUserRef,\n                modelUserRef: modelUserRef,\n                defaultStatus: EvalStatus.SKIPPED.value\n            }, params);\n        }\n\n        //------------------------------------------------------------//\n\n        /**\n         * attributes in requestMapper\n         * rowData(id,name), userData(script,status, etc.,)\n         */\n        requestRowMapper(rowData) {\n            return rowData;\n        }\n\n        //------------------------------------------------------------//\n\n        getComparisonResult(dataList) {\n            var map = {};\n            var index = 0;\n            dataList.forEach(row => {\n                var requestData = this.requestRowMapper(row, index);\n                if (requestData == null) return;\n                if (!map[requestData.rowData.id]) {\n                    map[requestData.rowData.id] = {\n                        index: index++,\n                        rowData: requestData.rowData,\n                        baseUser: null,\n                        modelUser: null\n                    }\n                }\n                map[requestData.rowData.id][this.params.baseUserRef == requestData.userData.id ? \"baseUser\" : \"modelUser\"] = requestData.userData;\n            });\n            return Object.keys(map).map(id => this.resultRowMapper(map[id]));\n        }\n\n        //------------------------------------------------------------//\n\n\n        resultRowMapper(row) {\n            var val = row.rowData || {};\n            val.baseUser = row.baseUser ? row.baseUser.value : null;\n            val.modelUser = row.modelUser ? row.modelUser.value : null;\n            return {\n                index: row.index,\n                name: {\n                    label: row.rowData.name,\n                    value: row.rowData.name,\n                    metadata: val\n                },\n                baseUser: this.getStatus(row.baseUser),\n                modelUser: this.getStatus(row.modelUser)\n            };\n        }\n\n        //------------------------------------------------------------//\n\n        getStatus(user) {\n            user = user || {};\n            var status = (isEmpty(user.status) ? this.params.defaultStatus : user.status).toUpperCase();\n            if ((status == \"PASSED\" || status == \"BLOCKED\") && !isEmpty(user.script)) {\n                return status + \"_MAYBE\";\n            }\n            return status;\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class GroupComparator extends AccessComparator {\n\n        constructor(baseUserId, modelUserId, params) {\n            super(baseUserId, modelUserId, params);\n            this.params.defaultStatus = EvalStatus.GROUP_NOT_GRANTED.value\n        }\n\n        requestRowMapper(row) {\n            return {\n                rowData: {\n                    id: row.group.value,\n                    name: row.group.displayValue\n                },\n                userData: {\n                    id: row.user.value,\n                    status: EvalStatus.HAS_GROUP.value\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class RoleComparator extends AccessComparator {\n\n        constructor(baseUserId, modelUserId, params) {\n            super(baseUserId, modelUserId, params);\n            this.params.defaultStatus = EvalStatus.ROLE_NOT_GRANTED.value\n        }\n\n\n        requestRowMapper(row) {\n            return {\n                rowData: {\n                    id: row.role.value,\n                    name: row.role.displayValue\n                },\n                userData: {\n                    id: row.user.value,\n                    status: EvalStatus.HAS_ROLE.value\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class UserComparator extends AccessComparator {\n\n        setFieldList(fieldList) {\n            this.fieldList = fieldList;\n        }\n\n        getComparisonResult(list) {\n            var fieldMap = new Map([\n                [\"user_name\", null],\n                [\"email\", null],\n                [\"active\", null],\n                [\"sys_created_on\", null],\n                [\"failed_attempts\", null],\n                [\"last_login\", null],\n                [\"internal_integration_user\", null],\n                [\"password_needs_reset\", null],\n                [\"sys_created_by\", null],\n                [\"sys_updated_by\", null]\n            ]);\n            \n            this.fieldList.forEach(field => fieldMap.set(field.element.value, field.column_label.displayValue));\n            var result = [];\n            list.forEach(user => {\n                fieldMap.forEach((fieldLabel, fieldName) => {\n                    if (fieldLabel == null) return;\n                    result.push({\n                        rowData: {\n                            id: fieldName,\n                            label: fieldLabel,\n                        },\n                        userData: {\n                            id: user._row_data.uniqueValue,\n                            value: user[fieldName] ? user[fieldName].displayValue : \"\"\n                        }\n                    });\n                });\n            });\n            return super.getComparisonResult(result);\n        }\n\n        resultRowMapper(row) {\n            return {\n                index: row.index,\n                name: {\n                    label: row.rowData.label,\n                    value: row.rowData.label\n                },\n                baseUser: row.baseUser ? row.baseUser.value : \"\",\n                modelUser: row.modelUser ? row.modelUser.value : \"\"\n            };\n        }\n\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class OperationComparator extends AccessComparator {\n\n        requestRowMapper(row) {\n            return {\n                rowData: {\n                    id: row.operation.value,\n                    name: row.operation.value,\n                },\n                userData: {\n                    id: row.access_analyzer_request.value,\n                    status: row.overall_access.value,\n                    script: row.script_execution.value,\n                    value: {\n                        resultId: row._row_data.uniqueValue\n                    }\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class DebugLogComparator extends AccessComparator {\n\n        sortLogs(result, prefOrder){\n            result.sort(function (a, b) {\n                if (a.log_sequence.value != b.log_sequence.value) {\n                    return a.log_sequence.value - b.log_sequence.value;\n                }\n                return prefOrder.indexOf(a.type.value) - prefOrder.indexOf(b.type.value);\n            });\n        }\n        getComparisonResult(result) {\n            var prefOrder = [\"Business Rule\", \"Access Handler\", \"Data Filtration\", \"ACL\"];\n            this.sortLogs(result, prefOrder);\n            return super.getComparisonResult(result);\n        }\n        requestRowMapper(row) {\n            var isAH = row.type.value == \"Access Handler\";\n            return {\n                rowData: {\n                    id: isAH ? row.applies_to.value : row.record_ref.value,\n                    name: isAH ? 'Access handler' : row.record_ref.displayValue,\n                    decisionType: row.decision_type.displayValue,\n                    appliesToCondition: row.applies_to_condition_result.displayValue,\n                    empty: row.empty.displayValue,\n                    appliesTo: row.applies_to.value,\n                    type: row.type.value\n                },\n                userData: {\n                    id: row.access_result.value,\n                    status: row.status.value,\n                    script: row.script_execution.value,\n                    value: {\n                        sysId: row._row_data.uniqueValue,\n                    }\n                }\n            };\n        }\n\n        resultRowMapper(row) {\n            var result = super.resultRowMapper(row);\n            result.decisionType = row.rowData.decisionType;\n            result.appliesToCondition = row.rowData.appliesToCondition;\n            result.empty = row.rowData.empty;\n            result.appliesTo = row.rowData.appliesTo;\n            result.index++;\n            if (row.rowData.type == \"Business Rule\") {\n                result.baseUser = \"\";\n                result.modelUser = \"\";\n            }\n            return result;\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class ACLDetailComparator extends AccessComparator {\n\n        getComparisonResult(result) { \n            return super.getComparisonResult(this.getModifiedResult(result));\n        }\n\n        getModifiedResult(result){\n            var list = [];\n            result.forEach(row => {\n                this.add(list, row, \"Roles\", \"roles_result\")\n                this.add(list, row, \"Security Attribute\", \"security_attribute\");\n                this.add(list, row, \"Condition\", \"condition_result\");\n                this.add(list, row, \"Script\", \"script_result\");\n            });\n            return list;\n        }\n\n        add(list, row, label, name) {\n            list.push({\n                rowData: {\n                    id: name,\n                    name: label,\n                },\n                userData: {\n                    id: row._row_data.uniqueValue,\n                    status: row[name] ? row[name].value : EvalStatus.SKIPPED.value,\n                    script: label == \"Script\" ? row.script_execution.value : null\n                }\n            });\n        }\n\n        resultRowMapper(row) {\n            var result = super.resultRowMapper(row);\n            result.name.value = row.rowData.name;\n            return result;\n        }\n\n    }\n\n\n    //--------------------------------------------------------------------------------//\n\n    class SimulatedResultsAllOperationComparator extends AccessComparator {\n\n        requestRowMapper(row) {\n            return {\n                rowData: {\n                    id: row.name, //read,write,..\n                    name: row.name,\n                },\n                userData: {\n                    id: row.category, //present_status or simualted_status\n                    status: row.status,\n                    script: row.containsScriptedACL ? 'ACL' : null\n                }\n            }\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class SimulatedResultsDebugLogComparator extends DebugLogComparator {\n\n        sortLogs(result, prefOrder) {\n            result.sort(function (a, b) {\n                if (a.log_sequence != b.log_sequence) {\n                    return a.log_sequence - b.log_sequence;\n                }\n                return prefOrder.indexOf(a.type) - prefOrder.indexOf(b.type);\n            });\n        }\n\n        requestRowMapper(row) {\n            var isAH = row.type == \"Access Handler\";\n            var isACL = row.type == \"ACL\";\n            return {\n                rowData: {\n                    id: isAH ? row.appliesTo : row.sysId,\n                    name: isAH ? 'Access handler' : row.name,\n                    decisionType: isACL ? row.aclDecisionType : '',\n                    appliesToCondition: isACL ? row.appliesToConditionResult : '',\n                    empty: isACL? row.empty : '',\n                    appliesTo: row.appliesTo,\n                    type: row.type\n                },\n                userData: {\n                    id: row.category, //present_status or simualted_status\n                    status: row.status,\n                    script: row.hasScript ? 'Script' : null,\n                    value: {\n                        acl: row,\n                    }\n                }\n            };\n        }\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    class SimulatedResultsACLDetailComparator extends ACLDetailComparator {\n        getModifiedResult(result) {\n            var list = [];\n            result.forEach(row => {\n                this.add(list, row, \"Roles\", \"rolesResult\")\n                this.add(list, row, \"Security Attribute\", \"securityAttributeResult\");\n                this.add(list, row, \"Condition\", \"conditionResult\");\n                this.add(list, row, \"Script\", \"scriptResult\");\n            });\n            return list;\n        }\n\n        add(list, row, label, name) {\n            list.push({\n                rowData: {\n                    id: name,\n                    name: label,\n                },\n                userData: {\n                    id: row.category,\n                    status: row[name] ? row[name] : EvalStatus.SKIPPED.value,\n                    script: label == \"Script\" && row.hasScript ? 'Script' : null\n                }\n            });\n        }\n\n    }\n\n    //--------------------------------------------------------------------------------//\n\n    return {\n        getComparator: function (type, baseUserRef, modelUserRef) {\n            switch (type) {\n                case \"user\":\n                    return new UserComparator(baseUserRef, modelUserRef)\n                case \"role\":\n                    return new RoleComparator(baseUserRef, modelUserRef);\n                case \"group\":\n                    return new GroupComparator(baseUserRef, modelUserRef);\n                case \"operation\":\n                    return new OperationComparator(baseUserRef, modelUserRef);\n                case \"debuglog\":\n                    return new DebugLogComparator(baseUserRef, modelUserRef);\n                case \"acl\":\n                    return new ACLDetailComparator(baseUserRef, modelUserRef);\n                case \"simulated_results_all_operation\":\n                    return new SimulatedResultsAllOperationComparator(baseUserRef, modelUserRef);\n                case \"simulated_results_debug_logs\":\n                    return new SimulatedResultsDebugLogComparator(baseUserRef, modelUserRef);\n                case \"simulated_results_acl_detail\":\n                    return new SimulatedResultsACLDetailComparator(baseUserRef, modelUserRef);\n            }\n        }\n    }\n\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"9598876f432131102c5119405bb8f2d7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_9598876f432131102c5119405bb8f2d7","sys_updated_by":"admin","api_name":"sn_access_analyzer.AccessComparator","sys_created_on":"2023-10-04 09:25:59","name":"AccessComparator","sys_name":"AccessComparator","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"30","includes":"","sys_updated_on":"2024-08-27 07:06:21","sys_tags":"","script":"function include({imports}) {\n\treturn {\n\t\tgetAnalyzeBySysId: _getAnalyzeBySysId,\n\t\tgetOperationsByRuleType: _getOperationsByRuleType,\n\t\tgetCompareAccessOperationsByRuleType: _getCompareAccessOperationsByRuleType,\n\t\tgetTargetNameByRuleType: _getTargetNameByRuleType,\n\t\tgetAnalyzedForDisplayVal: _getAnalyzedForDisplayVal,\n\t\tgetAlertObj: _getAlertObj,\n\t\tgetDateTimeObj: _getDateTimeObj\n\t};\n\n\t// Get User/Group/Role sys_id based on Analyze by set\n \tfunction _getAnalyzeBySysId(api) {\n\t\tswitch (api.state.selectedAnalyzeBy) {\n\t\t\tcase \"User\":\n\t\t\t\treturn api.state.selectedUser;\n\t\t\tcase \"Group\":\n\t\t\t\treturn api.state.selectedGroup;\n\t\t\tcase \"Role\":\n\t\t\t\treturn api.state.selectedRole;\n                        default:\n\t\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tfunction _getOperationsByRuleType(api) {\n\t\tswitch (api.state.selectedRuleType) {\n\t\t\tcase \"record\":\n\t\t\t\tvar operations = [\"read\",  \"write\",  \"create\",  \"report_view\",  \"report_on\",  \"list_edit\",  \"add_to_list\",\n\t\t\t\t\t\t\"save_as_template\",  \"personalize_choices\", \"query_match\", \"query_range\"];\n\t\t\t\tif (api.state.selectedField === null) {\n\t\t\t\t\toperations.push(\"delete\");\n\t\t\t\t}\n\t\t\t\treturn operations;\n\n\t\t\tcase \"ui_page\":\n\t\t\t\treturn [\"read\"];\n\n\t\t\tcase \"client_callable_script_include\":\n\t\t\tcase \"rest_endpoint\":\n\t\t\t\treturn [\"execute\"];\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t}\n\n\tfunction _getCompareAccessOperationsByRuleType(api) {\n\t\tconst ruleType = api.state.compareAccessTab.uacRuleType;\n\t\tswitch (ruleType) {\n\t\t\tcase \"record\":\n\t\t\t\tvar operations = [\"read\",  \"write\",  \"create\",  \"report_view\",  \"report_on\",  \"list_edit\",  \"add_to_list\",\n\t\t\t\t\t\t\"save_as_template\",  \"personalize_choices\", \"query_match\", \"query_range\"];\n\t\t\t\tconst isTableLevel = api.state.compareAccessTab.uacField.selectedId === null;\n\t\t\t\tif (isTableLevel) {\n\t\t\t\t\toperations.push(\"delete\");\n\t\t\t\t}\n\t\t\t\treturn operations;\n\n\t\t\tcase \"ui_page\":\n\t\t\t\treturn [\"read\"];\n\n\t\t\tcase \"client_callable_script_include\":\n\t\t\tcase \"rest_endpoint\":\n\t\t\t\treturn [\"execute\"];\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t}\n\n\tfunction _getTargetNameByRuleType(api) {\n\t\tswitch(api.state.selectedRuleType) {\n\t\t\tcase \"record\":\n\t\t\t\treturn api.state.selectedTable;\n\t\t\tcase \"client_callable_script_include\":\n\t\t\t\treturn api.state.selectedClientScript;\n\t\t\tcase \"rest_endpoint\":\n\t\t\t\treturn api.state.selectedRESTEndpoint;\n\t\t\tcase \"ui_page\":\n\t\t\t\treturn api.state.selectedUIPage;\n\t\t\tdefault:\n\t\t\t\treturn \"\";\n\t\t}\n\t}\n\n\tfunction _getAnalyzedForDisplayVal(request_resource_result) {\n\t\tvar analyzedForDisplayVal = \"\";\n\t\tswitch (request_resource_result.analyze_by.value) {\n\t\t\tcase \"User\":\n\t\t\t  analyzedForDisplayVal = request_resource_result.user.displayValue;\n\t\t\t  break;\n\n\t\t\tcase \"Group\":\n\t\t\t  analyzedForDisplayVal = request_resource_result.group.displayValue;\n\t\t\t  break;\n\n\t\t\tcase \"Role\":\n\t\t\t  analyzedForDisplayVal = request_resource_result.role.displayValue;\n\t\t\t  break;\n\t\t}\n\t\treturn analyzedForDisplayVal;\n\t}\n\n\tfunction _getDateTimeObj(dateTimeStr) {\n\t\tlet arr = dateTimeStr.split(/\\s+/);\n\t\treturn {\n\t\t\tdate: arr[0],\n\t\t\ttime: arr[1]\n\t\t}\n\t}\n\n    function _getAlertObj(id, content, textLinkProps) {\n        return {\n            id: id,\n            status: \"high\",\n            icon: \"diamond-exclamation-outline\",\n            content: content,\n            action: {\n                    type: \"dismiss\"\n            },\n            textLinkProps: textLinkProps\n        };\n    }\n\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"9731cf5177c22110eba8fe21fe5a9906","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_9731cf5177c22110eba8fe21fe5a9906","sys_updated_by":"admin","api_name":"sn_access_analyzer.AccessanalyzerUIUtil","sys_created_on":"2023-04-06 09:45:59","name":"AccessanalyzerUIUtil","sys_name":"AccessanalyzerUIUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2021-02-24 07:23:48","sys_tags":"","script":"function include({imports}) {\n   const cloneDeep = (data) => {\n        return JSON.parse(JSON.stringify(data));\n    }\n\n    /**\n     * Gets the value at path of object. If the resolved value is undefined,\n     * the defaultValue is returned in its place.\n     */\n    const get = function(object, path, defaultVal) {\n        let pathArray;\n        // If path is not defined or it has false value\n        if (!path) return undefined;\n        // Check if path is string or array. Regex : ensure that we do not have '.' and brackets\n        pathArray = Array.isArray(path) ?\n            path :\n            path.split(/[,[\\].]/g).filter(Boolean);\n        // Find value if exist return otherwise return undefined value;\n        return (\n            pathArray.reduce(function(prevObj, key) {\n                return prevObj && prevObj[key];\n            }, object) || defaultVal\n        );\n    };\n\nreturn {\n   cloneDeep,\n   get\n };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"98f9726c0f662010ad4437a98b767e0e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_98f9726c0f662010ad4437a98b767e0e","sys_updated_by":"admin","api_name":"sn_vtb.loadashUtil","sys_created_on":"2021-02-22 12:48:01","name":"loadashUtil","sys_name":"loadashUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"11","includes":"4c36c1e3b77c3010e69dbc16de11a9a1","sys_updated_on":"2021-06-23 11:50:08","sys_tags":"","script":"function include({imports}) { \n    let serviceDeskLandingPageUtilsSNC = imports['sn_sow_inc.SowIncidentLandingPageUtilsSNC']();\n    class ServiceDeskLandingPageUtils extends serviceDeskLandingPageUtilsSNC {\n        /*\n        static getLabelMaps() {\n            return \"\";\n        }*/\n    }\n    return ServiceDeskLandingPageUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"a1dcc9e7b77c3010e69dbc16de11a93b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_a1dcc9e7b77c3010e69dbc16de11a93b","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentLandingPageUtils","sys_created_on":"2021-06-23 08:54:47","name":"SowIncidentLandingPageUtils","sys_name":"SowIncidentLandingPageUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"81","includes":"2bb5c53d0fa61010ad4437a98b767e7f,17c0853d0fa61010ad4437a98b767e13,881d20a10fe21010ad4437a98b767e2a,d67f1bbeb7e21010ad44ea56ee11a9d3,e6a9d997b7b61010ad44ea56ee11a911","sys_updated_on":"2021-09-27 09:49:28","sys_tags":"","script":"function include({imports}) {\n    const {\n        'sn_vtb.constants': constantsInclude,\n        'sn_vtb.utils': utilsInclude,\n        'sn_vtb.cardManagerMethods': cardManagerMethodsInclude,\n        'sn_vtb.stateUpdates': stateUpdatesInclude,\n        'sn_vtb.notificationHandler': notificationHandlerInclude\n    } = imports;\n    const {\n        DATA_BROKER_OP: {\n            CARD_MOVE,\n            ADD_CARD,\n            CARD_ARCHIVED\n        },\n        ELEMENTS_IDS: {\n            MUTATION_DATA_BROKER_ELEMENT_ID\n        },\n        DATA_BROKERS_IDS: {\n            MUTATION_DATA_BROKER_ID\n        },\n        ICONS: {\n            CIRCLE_CHECK_OUTLINE,\n            CIRCLE_CLOSE_OUTLINE\n        },\n        STATUS: {\n            CRITICAL\n        },\n        ATTACHMENT_UPLOAD_SUCCESS_MESSAGE,\n        ATTACHMENT_UPLOAD_FAILURE_MESSAGE\n    } = constantsInclude();\n    const {\n        get,\n        cloneDeep,\n        replaceItemInArray,\n        setFocusableElementOnBoard\n    } = utilsInclude();\n    const {\n        moveCard,\n        transformCardData,\n        addCardProperties,\n        constructVtbCardFormData\n    } = cardManagerMethodsInclude();\n    const {showAlertAndInitiateDismiss} = notificationHandlerInclude();\n\n    const moveCardOptimisticHandler = (boardState, boardDirtyState, payload) => {\n        return {\n            newBoardState: moveCardHandler(boardState, payload).newBoardState,\n            newBoardDirtyState: moveCardDirtyState(boardDirtyState, payload),\n            dbPayload: moveCardDbOperationPayload(boardState, payload)\n        }\n    };\n\n    const moveCardFailureHandler = (boardState, payload) => {\n        const {\n            id,\n            fromLane: toLane,\n            fromSwimlane: toSwimlane,\n            fromPosition: toPosition\n        } = payload;\n        return moveCardHandler(boardState, {\n            id,\n            toLane,\n            toSwimlane,\n            toPosition\n        });\n    };\n\n    const moveCardHandler = (boardState, payload) => {\n        const {\n            id: cardId,\n            toLane,\n            toPosition,\n            toSwimlane\n        } = payload;\n\n        // Optimistic update\n        const allCards = cloneDeep(boardState.cards);\n        moveCard({allCards, cardId, toLane, toSwimlane, toPosition});\n\n      // For guided board we have to construct the form for vtb card.         \n          payload.card = boardState.cards.find((card) =>card.sys_id ===cardId);\n          let cardFormData = constructVtbCardFormData(boardState, payload, false);\n         const newBoardState = { ...boardState, cards: allCards };\n        return {\n           newBoardState,\n            cardFormData\n        }\n    };\n\n    const moveCardDirtyState = (boardDirtyState, payload) => {\n        return {\n            ...boardDirtyState,\n            [CARD_MOVE]: {\n                ...payload\n            }\n        }\n    };\n\n    const moveCardDbOperationPayload = (boardState, payload) => {\n        const {\n            id: cardId,\n            toLane,\n            toPosition,\n            toSwimlane\n        } = payload;\n\n        let fields = null;\n        const card = boardState.cards.find(card => card.sys_id === cardId);\n        const recordClassName = card.record.sys_class_name;\n        if (recordClassName && \n                boardState.recordTypeToEvamTemplate[recordClassName]) {\n            fields = boardState.recordTypeToEvamTemplate[recordClassName].fields;\n        }\n\n        return {\n            operationName: CARD_MOVE,\n            operationPayload: {\n                cardId: cardId,\n                laneId: toLane,\n                order: toPosition,\n                swimlaneId: toSwimlane,\n                fields\n            }\n        }\n    };\n\n    const moveCardSuccessHandler = (boardState, payload, operationFailPayload) => {\n        const {\n            data: {\n                output: {\n                    data: {\n                        GlideVisualBoard_Mutation: {\n                            updateCard\n                        }\n                    }\n                }\n            }\n        } = payload;\n\n        let newCard = transformCardData(updateCard);\n        addCardProperties(newCard, boardState);\n        const updatedCards = replaceItemInArray(boardState.cards, newCard);\n\n        const {\n            toLane,\n            toSwimlane\n        } = operationFailPayload;\n\n        const {\n            lane_id,\n            swim_lane_id\n        } = newCard;\n\n        let warningPayload = null;\n        if (toLane !== lane_id || (toSwimlane !== \"\" && toSwimlane !== swim_lane_id)){\n            const messagePrefix = get(newCard, \"record.number.display_value\", \"The record\");\n            warningPayload = {\n                content: `${messagePrefix} was modified before update,the new lane may not reflect your changes.`\n            }\n        }\n\n        return {\n            newBoardState: {\n                ...boardState,\n                cards: updatedCards\n            },\n            warningPayload\n        }\n    };\n    const archiveCardSuccessHandler = (boardState, boardFocusState, payload) => {\n        const archiveCardId = payload.data.output.data.GlideVisualBoard_Mutation.archiveCard;\n    \n        const {\n            cards\n        } = boardState;\n\n        const index = cards.findIndex((card) => card.sys_id === archiveCardId);\n        if (index === -1) return;\n\n        const operation = {};\n        operation.dataBrokerId = \"f547801a0f121010461d37a98b767e8d\";\n        operation.parentResourceId = \"visualBoardMutationCompositeDataBroker\";\n        operation.dataElementId = operation.parentResourceId;\n\n        const newPayload = {};\n        newPayload.operation = operation;\n        operation.operationName = \"FETCH_ARCHIVE_CARD\";\n        newPayload.operationPayload = {\n            cardId: archiveCardId\n        };\n   \n        const archiveCard = cards.find((card) => card.sys_id === archiveCardId);\n        const updatedBoard = setFocusableElementOnBoard({\n            operation : CARD_ARCHIVED,\n            boardFocusState,\n            element: archiveCard,\n            boardState,\n            elementType: \"card\"\n        });\n        console.log(\"board focus state\", updatedBoard.boardFocusState);\n        console.log(\"board state\", updatedBoard.boardState);\n        return {\n            newBoardDirtyState: updatedBoard.boardState,\n            newBoardFocusState: updatedBoard.boardFocusState,\n        dbPayload: newPayload\n        };\n};\n    const fetchArchiveCardSuccessHandler = (boardState, payload, emit) => {\n        const card = payload.data.output.data.GlideVisualBoard_Query.getCard;\n\n        if (!card) return;\n        const {\n            cards\n        } = boardState;\n\n        // Card data need to be transformed after getting response from graphql.\n        let transformCard = transformCardData(card);\n        addCardProperties(transformCard, boardState);\n\n        let updatedCards = [...cards];\n\n        updatedCards = replaceItemInArray(updatedCards, transformCard);\n        return {\n            ...boardState,\n            cards: updatedCards\n        };\n    };\n\n    const fetchArchiveCardsSuccessHandler = (board, payload) => {\n        const cards = payload.data.output.data.GlideVisualBoard_Query.getArchivedCards;\n        // We need to transform card data obtained from graphQl response.\n        let archivedCards = cards.map((card) => {\n            let transformCard = transformCardData(card);\n            addCardProperties(transformCard, board);\n            return transformCard;\n        });\n\n        // As we are maintaing single array for cards and archived cards , it is possible that archived card\n        // from response may contains card with removed= true in cards array.\n        // Check if card is there in cards array.\n        let updatedCards = cloneDeep(board.cards);\n        archivedCards.forEach((card) => {\n            const index = updatedCards.findIndex((c) => c.sys_id === card.sys_id);\n            if (index === -1) updatedCards.push(card);\n\n            if (index !== -1 && updatedCards[index].removed !== card.removed)\n                updatedCards[index].removed = card.removed;\n        });\n\n        return {\n            ...board,\n            cards: updatedCards\n        };\n    };\n\n    const restoreCardSuccessHandler = (board, payload) => {\n        const restoreCard = payload.data.output.data.GlideVisualBoard_Mutation.restoreCard;\n        const {\n            cards\n        } = board;\n        const index = cards.findIndex((card) => card.sys_id === restoreCard.sys_id);\n        if (index === -1) return;\n        let transformRestoreCard = transformCardData(restoreCard);\n        addCardProperties(transformRestoreCard, board);\n\n        // replace the restore card with older card in cards array on board.\n        let updatedCards = [...cards];\n        updatedCards = replaceItemInArray(updatedCards, transformRestoreCard);\n        return {\n            ...board,\n            cards: updatedCards\n        };\n    };\n\n    const fetchVTBCardSuccessHandler = function(board, payload) {\n        const card = payload.data.output.data.GlideVisualBoard_Query.getCard;\n        if (!card) return;\n\n        const {\n            cards\n        } = board;\n        let updatedCards = [...cards];\n\n        // Card data need to be transformed after getting response from graphql.\n        let transformCard = transformCardData(card);\n        addCardProperties(transformCard, board);\n\n        // Update cards array in following cases.\n        // 1. card can be added from table and is not existing in cards array.\n        // 2. card can be added by restoring card and is existing in cards array.\n\n        const existingCard = cards.find((c) => c.sys_id === card.sys_id);\n        if (!existingCard) {\n            updatedCards.push(transformCard);\n        } else {\n            updatedCards = replaceItemInArray(updatedCards, transformCard);\n        }\n        return {\n            ...board,\n            cards: updatedCards\n        };\n    };\n\n    const addPlaceHolderCardhandler = (boardState, payload) => {\n        const {\n            position,\n            lane_id,\n            swim_lane_id\n        } = payload.card;\n\n        const order = position === 'top' ? -1 : getLastCardOrder(boardState.cards, lane_id);\n\n        const newCard = {\n            id: 'placeholderCard',\n            title: 'New card',\n            isPlaceholder: true,\n            order: order,\n            lane_id: lane_id,\n            swim_lane_id: swim_lane_id,\n            board_id: boardState.sys_id,\n            removed: false\n        };\n\n        return {\n            ...boardState,\n            cards: [...boardState.cards, newCard]\n        };\n    };\n\n    const removePlaceHolderCardHandler = (boardState, payload) => {\n        const updatedCards = boardState.cards.filter((card) => !card.isPlaceholder);\n\n        // Remove placeholder card\n        const placeholderCard = updatedCards.find((card) => card.isPlaceholder);\n        if (placeholderCard)\n            updatedCards.splice(updatedCards.indexOf(placeholderCard), 1);\n\n        return {\n            ...boardState,\n            cards: updatedCards\n        };\n    };\n\n    const addDataDrivenOptimisticCardHandler = (boardState, boardDirtyState, payload) => {\n        const {\n            position,\n            laneId,\n            swimlaneId,\n            boardId,\n            taskId\n        } = payload;\n        const order = position === 'top' ? 0 : getLastCardOrder(boardState.cards, laneId, swimlaneId);\n        return {\n            dbPayload: {\n                operationName: ADD_CARD,\n                operationPayload: {\n                    boardId: boardId,\n                    laneId: laneId,\n                    swimlaneId: swimlaneId,\n                    order: order,\n                    taskId: taskId\n                }\n            }\n        };\n    };\n\n    const addCardSuccessHandler = (boardState, boardFocusState, payload) => {\n        const {\n            data: {\n                output: {\n                    data: {\n                        GlideVisualBoard_Mutation: {\n                            createCard\n                        }\n                    }\n                }\n            }\n        } = payload;\n\n        const card = transformCardData(createCard);\n        if (card.order === 0) {\n            // The correct order will be updated by Amb in 'reorder_cards' event\n            card.order = -1;\n        }\n\n\n        const updatedBoard = setFocusableElementOnBoard({\n            operation: ADD_CARD,\n            boardState,\n            boardFocusState,\n            element: card,\n            elementType: \"card\"\n        });\n\n        return {\n            newBoardDirtyState: sortAllCards(updatedBoard.boardState),\n            newBoardFocusState: updatedBoard.boardFocusState\n        };\n    }\n\n    const sortAllCards = (boardState) => {\n        let newCards = [];\n        boardState.lanes.forEach((lane) => {\n            newCards = newCards.concat(\n                boardState.cards\n                .filter((card) => card.lane_id === lane.sys_id)\n                .sort((a, b) => a.order - b.order)\n                .map((card, cardIndex) => {\n                    card.order = cardIndex;\n                    return card;\n                })\n            );\n        });\n\n        // As we are maintaining one card array and not deleting cards after lane deleted because\n        // It card can be restored later. So there will be a case where we have deleted lane and card\n        // belong to that lane will be present in cards array and should be shown in archive card\n        // panel. Since we are dispatching this action on card move we need to handle this case\n        // separately.\n        const laneIds = boardState.lanes.map((lane) => {\n            return lane.sys_id;\n        });\n\n        let cardsInDeletedLane = [];\n        boardState.cards.forEach((card) => {\n            if (!laneIds.includes(card.lane_id)) cardsInDeletedLane.push(card);\n        });\n\n        const updatedCards = newCards.concat(cardsInDeletedLane);\n        return {\n            ...boardState,\n            cards: updatedCards\n        };\n    };\n\n    const getLastCardOrder = (cards, laneId, swimlaneId) =>\n        cards.filter((card) => {\n            if (swimlaneId) return card.lane_id === laneId && card.swim_lane_id === swimlaneId;\n\n            return card.lane_id === laneId;\n        }).length;\n\n    const uploadAttachmentHandler = (api, snHttp, payload, helpers) => {\n        const {\n            action,\n            data,\n            loadAttachmentRecord,\n            sysId,\n            type,\n            table\n        } = payload;\n        const fileName = data.getAll('file')[0]['name'];\n        const url = `/angular.do?action=${action}&load_attachment_record=${loadAttachmentRecord}&sys_id=${sysId}&sysparm_type=${type}&table=${table}`;\n        snHttp(url, {\n            method: \"POST\",\n            body: data\n        })\n        .then((response) => {\n            showAlertAndInitiateDismiss(api, {content: `\"${fileName}\" ${ATTACHMENT_UPLOAD_SUCCESS_MESSAGE}`, icon: CIRCLE_CHECK_OUTLINE}, helpers);\n        })\n        .catch((error) => {\n            showAlertAndInitiateDismiss(api, {status: CRITICAL, content: `\"${fileName}\" ${ATTACHMENT_UPLOAD_FAILURE_MESSAGE}`, icon: CIRCLE_CLOSE_OUTLINE}, helpers);\n        });\n    };\n\n    return {\n        moveCardHandler,\n        moveCardSuccessHandler,\n        moveCardFailureHandler,\n        moveCardOptimisticHandler,\n        archiveCardSuccessHandler,\n        fetchArchiveCardSuccessHandler,\n        fetchArchiveCardsSuccessHandler,\n        restoreCardSuccessHandler,\n        fetchVTBCardSuccessHandler,\n        addPlaceHolderCardhandler,\n        removePlaceHolderCardHandler,\n        addDataDrivenOptimisticCardHandler,\n        addCardSuccessHandler,\n        uploadAttachmentHandler\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"a68702f6b7621010ad44ea56ee11a90e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_a68702f6b7621010ad44ea56ee11a90e","sys_updated_by":"admin","api_name":"sn_vtb.cardHandlers","sys_created_on":"2020-08-14 12:42:20","name":"cardHandlers","sys_name":"cardHandlers","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"24","includes":"","sys_updated_on":"2024-03-29 09:49:37","sys_tags":"","script":"function include({ imports }, indicators) {\n\n  function getDetail(indicator) {\n    indicator.name = {\n      \"value\": indicator.name,\n      \"displayValue\": indicator.name\n    };\n    indicator.active = {\n      \"value\": indicator.hasOwnProperty('active') ? (indicator.active).toString() : \"NA\",\n      \"displayValue\": indicator.hasOwnProperty('active') ? (indicator.active ? \"Opted in\" : \"Opted out\") : \"NA\"\n    };\n    indicator.description = {\n      \"value\": indicator.hasOwnProperty('description') ? indicator.description : \"\",\n      \"displayValue\": indicator.hasOwnProperty('description') ? indicator.description : \"\"\n    };\n    indicator.formula = {\n      \"value\": indicator.hasOwnProperty('formula') ? indicator.formula : \"NA\",\n      \"displayValue\": indicator.hasOwnProperty('formula') ? indicator.formula : \"NA\"\n    };\n    indicator.conditions = {\n      \"value\": indicator.hasOwnProperty('conditions') ? indicator.conditions.value : \"NA\",\n      \"displayValue\": indicator.hasOwnProperty('conditions') ? (indicator.conditions.value  == \"\"? \"-\" : indicator.conditions.display): \"NA\"\n    };\n    return indicator;\n  }\n\n  var allIndicators = [];\n  for (var i = 0; i < indicators.length; i++) {\n         indicators[i].id = indicators[i].sys_id;\n         indicators[i].top_lvl =  true;\n         if (indicators[i].hasOwnProperty('child_kpis') && indicators[i].child_kpis.length > 0) {\n                 indicators[i].hasChild = true;\n                 allIndicators.push(getDetail(indicators[i]));\n                 for (var j = 0; j < indicators[i].child_kpis.length; j++) {\n                       if(indicators[i].child_kpis[j]!=null){\n                            (indicators[i].child_kpis)[j].top_lvl = false;\n                           (indicators[i].child_kpis)[j].id  = (indicators[i].child_kpis)[j].sys_id + '_'+  indicators[i].sys_id;\n                           (indicators[i].child_kpis)[j].hasChild = false;\n                           (indicators[i].child_kpis)[j].parent = indicators[i].sys_id;\n                           (indicators[i].child_kpis)[j].group = indicators[i].group;\n                           (indicators[i].child_kpis)[j].category = indicators[i].category;\n                           (indicators[i].child_kpis)[j]._metadata= (indicators[i].child_kpis)[j]._metadata || {} ;\n                           (indicators[i].child_kpis)[j]._metadata.disableRowContextMenu = true;\n                           allIndicators.push(getDetail((indicators[i].child_kpis)[j]));\n                      }\n                }\n             } else {\n                         indicators[i].hasChild = false;\n                        allIndicators.push(getDetail(indicators[i]));\n                    }\n             }\n  return allIndicators;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"a6abfe44775c021017dea86eaf5a997b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_update_name":"sys_ux_client_script_include_a6abfe44775c021017dea86eaf5a997b","sys_updated_by":"admin","api_name":"sn_sd.formatIndicators","sys_created_on":"2024-02-07 04:28:57","name":"formatIndicators","sys_name":"formatIndicators","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Error - {0}\"\n    },\n    {\n        \"message\": \"{0} records excluded\"\n    },\n    {\n        \"message\": \"{0} record excluded\"\n    },\n    {\n        \"message\": \"Unable to exclude {0} CIs\"\n    }\n]","access":"package_private","sys_mod_count":"50","includes":"396c663153a5b110fdadddeeff7b12ae","sys_updated_on":"2023-11-03 17:24:35","sys_tags":"","script":"function include({\n    imports\n}) {\n    const {\n        ERROR_NOTIFICATION_PROPS,\n        SUCCESS_NOTIFICATION_PROPS\n    } = imports[\"sn_cmdb_ws.CMDBWsNotificationUtil\"]();\n\n    const LIFECYCLE_TASK_ACTION = {\n        DM_EXCLUDE_RECORDS: 'DM_EXCLUDE_RECORDS'\n    };\n\n    const TASK_PAGE_PARAMS = {\n        MY_WORK: {\n            REFRESH_LIST: 'refreshList',\n            SHOW_NOTIFICATION: 'showNotification'\n        }\n    };\n\n    const TASK_FILTERS = {\n        IS_OVERDUE: \"due_date<javascript:gs.beginningOfToday()\",\n        IS_NOT_CLOSED: \"stateNOT IN3,4,7,8\",\n        ASSIGNED_TO_IS_EMPTY: \"assigned_toISEMPTY\",\n        ASSIGNMENT_GROUP_IS_EMPTY: \"assignment_groupISEMPTY\",\n        IS_ASSIGNED_TO_ME: \"assigned_toDYNAMIC90d1921e5f510100a9ad2572f2b477fe\",\n        IS_ASSIGNED_TO_MY_GROUP: \"assignment_groupDYNAMICd6435e965f510100a9ad2572f2b47744\"\n    };\n\n    var _validateTaskRecord = function (taskRecord, api) {\n        if (taskRecord) {\n            const isAdminUser = taskRecord.userIsAdminOrMaint || taskRecord.userIsDataManagerAdmin;\n            const recordNotFound = taskRecord.invalidTask || !isAdminUser && (taskRecord.userNotAssigned && taskRecord.userNotWithinGroup);\n            api.setState('recordNotFound', recordNotFound);\n        } else {\n            api.setState('recordNotFound', true);\n        }\n    }\n\n    var _handleRemoveNotifications = function (emit, notificationId, helpers) {\n        const timeoutId = helpers.timing.setTimeout(() => {\n            emit('NOW_UXF_PAGE#REMOVE_NOTIFICATIONS', {\n                items: [{\n                    id: notificationId\n                }]\n            });\n        }, 5000);\n    }\n\n    var _handleLifecycleTaskNotification = async function (response, api, event, helpers) {\n        const {\n            error,\n            action,\n            successCount,\n            failureCount\n        } = response.result;\n\n        const notifications = [];\n\n        if (error && error.message) {\n            notifications.push({\n                ...ERROR_NOTIFICATION_PROPS,\n                \"content\": await helpers.translate(\"Error - {0}\", error.message)\n            });\n        }\n        if (successCount > 0) {\n            let messageContent = '';\n            let txtLinkProp = {};\n            if (action === LIFECYCLE_TASK_ACTION.DM_EXCLUDE_RECORDS) {\n                messageContent = successCount > 1 ?\n                    await helpers.translate(\"{0} records excluded\", successCount) :\n                    await helpers.translate(\"{0} record excluded\", successCount);\n            }\n            const notificationId = 'successId' + new Date().valueOf();\n            notifications.push({\n                ...SUCCESS_NOTIFICATION_PROPS,\n                \"content\": messageContent,\n                \"textLinkProps\": txtLinkProp,\n                \"id\": notificationId\n            });\n        }\n        if (failureCount > 0) {\n            notifications.push({\n                ...ERROR_NOTIFICATION_PROPS,\n                \"content\": await helpers.translate(\"Unable to exclude {0} CIs\", failureCount)\n            });\n        };\n        if (notifications.length > 0) {\n            api.emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n                items: notifications\n            });\n        }\n\n        if (notifications.length > 0) {\n            notifications.forEach(item => {\n                _handleRemoveNotifications(api.emit, item.id, helpers);\n            });\n        }\n    }\n\n    return {\n        LIFECYCLE_TASK_ACTION,\n        TASK_PAGE_PARAMS,\n        TASK_FILTERS,\n        validateTaskRecord: _validateTaskRecord,\n        handleRemoveNotifications: _handleRemoveNotifications,\n        handleLifecycleTaskNotification: _handleLifecycleTaskNotification\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"ab4eb7a0ef513110c445bba98d97d7cc","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_ab4eb7a0ef513110c445bba98d97d7cc","sys_updated_by":"admin","api_name":"sn_cmdb_ws.CMDBWsDMTaskUtil","sys_created_on":"2023-09-12 19:26:01","name":"CMDBWsDMTaskUtil","sys_name":"CMDBWsDMTaskUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Today at {0}\"\n    },\n    {\n        \"message\": \"Tomorrow at {0}\"\n    },\n    {\n        \"message\": \"Yesterday at {0}\"\n    },\n    {\n        \"message\": \"January\"\n    },\n    {\n        \"message\": \"February\"\n    },\n    {\n        \"message\": \"March\"\n    },\n    {\n        \"message\": \"April\"\n    },\n    {\n        \"message\": \"May\"\n    },\n    {\n        \"message\": \"June\"\n    },\n    {\n        \"message\": \"July\"\n    },\n    {\n        \"message\": \"August\"\n    },\n    {\n        \"message\": \"September\"\n    },\n    {\n        \"message\": \"October\"\n    },\n    {\n        \"message\": \"November\"\n    },\n    {\n        \"message\": \"December\"\n    },\n    {\n        \"message\": \"{0} at {1}\"\n    }\n]","access":"package_private","sys_mod_count":"4","includes":"c91346fb53b211107319ddeeff7b128c","sys_updated_on":"2024-02-06 16:47:57","sys_tags":"","script":"function include({imports}) {\n\tconst {getRelativeDateTime, getTimeTillDateChangeInMillis} = imports['sn_sow_on_call.SOWOnCallRelativeDateTime']();\n\n\tconst translateDateTime = async function(relDT, helpers) {\n\t\tif (!relDT) return;\n\t\tlet relDay = relDT[0];\n\t\tlet relTime = relDT[1];\n\t\tif (relDay.indexOf('today') !== -1) {\n\t\t\treturn await helpers.translate('Today at {0}', relTime);\n\t\t} else if (relDay.indexOf('tomorrow') !== -1) {\n\t\t\treturn await helpers.translate('Tomorrow at {0}', relTime);\n\t\t} else if (relDay.indexOf('yesterday') !== -1) {\n\t\t\treturn await helpers.translate('Yesterday at {0}', relTime);\n\t\t} else {\n\t\t\tconst month = relDay.split('-')[1];\n\t\t\tlet translatedMonth = '';\n\t\t\tswitch(month) {\n\t\t\t\tcase 'Jan':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('January');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Feb':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('February');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Mar':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('March');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Apr':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('April');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'May':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('May');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Jun':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('June');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Jul':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('July');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Aug':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('August');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Sep':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('September');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Oct':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('October');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Nov':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('November');\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'Dec':\n\t\t\t\t\ttranslatedMonth = await helpers.translate('December');\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (translatedMonth) relDay = relDay.replace(month, translatedMonth);\n\t\t}\n\t\treturn await helpers.translate('{0} at {1}', relDay, relTime);\n    };\n\n\tconst formatDateTime = async function(obj, tgtTZ, helpers, time_fmt) {\n\t\tif (!obj) return;\n\t\tconst keys = Object.keys(obj);\n\t\tfor(let i = 0; i < keys.length; i++) {\n\t\t\tlet el = keys[i];\n\t\t\tif( typeof obj[el] === 'object' && obj[el]) {\n\t\t\t\tawait formatDateTime(obj[el], tgtTZ, helpers, time_fmt);\n\t\t\t}\n\n\t\t\tif (el === 'display_value_relative' && obj['display_value_internal']) {\n\t\t\t\tobj['display_value_relative'] = {\n\t\t\t\t\tdateTime: await translateDateTime(getRelativeDateTime(obj['display_value_internal'], false, tgtTZ, time_fmt), helpers),\n\t\t\t\t\ttime: getRelativeDateTime(obj['display_value_internal'], true, tgtTZ, time_fmt)\n\t\t\t\t};\n\t\t\t} \n\t\t}\n\t};\n\n\treturn {\n\t\tformatDateTime,\n\t\tgetTimeTillDateChangeInMillis\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"af4b144d48531110f87798560445a45f","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7e3c2481539260100c54ddeeff7b127b","value":"7e3c2481539260100c54ddeeff7b127b"},"sys_update_name":"sys_ux_client_script_include_af4b144d48531110f87798560445a45f","sys_updated_by":"admin","api_name":"sn_sow_on_call.SOWOnCallFormatEscalationData","sys_created_on":"2022-11-19 09:56:01","name":"SOWOnCallFormatEscalationData","sys_name":"SOWOnCallFormatEscalationData","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7e3c2481539260100c54ddeeff7b127b","value":"7e3c2481539260100c54ddeeff7b127b"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"4","includes":"","sys_updated_on":"2024-02-07 10:02:37","sys_tags":"","script":"async function include({imports},helpers,allIndicators,sysId,optInStatus) {\n\nvar bodyObj = {};\n\nfor(var i=0; i< allIndicators.length; i++){\n       if( allIndicators[i].sys_id ==  sysId )  bodyObj[allIndicators[i].sys_id] = (optInStatus == 'optIn' ? true: false);\n      else bodyObj[allIndicators[i].sys_id]  =  (allIndicators[i].active.value =='true' ? true : false);\n}\n\nbodyObj = JSON.stringify(bodyObj);\n\nvar response = await helpers.snHttp('api/sn_bm_client/benchmark_client_api/activateIndicators',{\nmethod: 'POST',\nbody: {\n\"indicators\" :  bodyObj\n}\n});\n\nreturn response;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"af6b53007750021017dea86eaf5a993b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_update_name":"sys_ux_client_script_include_af6b53007750021017dea86eaf5a993b","sys_updated_by":"admin","api_name":"sn_sd.activateIndicators","sys_created_on":"2024-02-07 06:52:16","name":"activateIndicators","sys_name":"activateIndicators","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"14","includes":"","sys_updated_on":"2022-03-16 13:51:06","sys_tags":"","script":"function include({\n    imports\n}) {\n    return {\n        navigateTo: _navigateTo,\n        getBreadcrumbNavPayload: _getBreadcrumbNavPayload,\n        navigateFromBreadcrumb: _navigateFromBreadcrumb\n    };\n\n    function _navigateTo(api, navPayload, isInAppRouting = false) {\n        //helpers.navigate.to(route, {}, {});\n        api.emit(\"NAV_ITEM_SELECTED\", {\n            ...navPayload,\n            reload: !isInAppRouting,\n        });\n    }\n\n    function _navigateFromBreadcrumb(api, event, isInAppRouting = false) {\n        const breadcrumbNavPayload = _getBreadcrumbNavPayload(api, event);\n        _navigateTo(api, breadcrumbNavPayload, isInAppRouting);\n    }\n\n    function _getBreadcrumbNavPayload(api, event) {\n        const bcItemPayload = event.payload.item;\n        if (!bcItemPayload || !bcItemPayload.page) {\n            return {\n                route: \"home\"\n            };\n        }\n\n        let _route = bcItemPayload.page;\n        let _fields = {};\n\n        if (_route.startsWith(\"-custom-\")) {\n            const splittedRoute = _route.split(\"#\");\n            _route = splittedRoute[1]; //route\n            if (splittedRoute[2])\n                _fields.table = splittedRoute[2]; //table\n            if (splittedRoute[3])\n                _fields.sysId = splittedRoute[3]; //sysId\n        } else {\n            switch (_route) {\n                case \"list\":\n                    if (api.context.props.table)\n                        _fields.table = api.context.props.table;\n                    break;\n\n                case \"record\":\n                    if (api.context.props.table)\n                        _fields.table = api.context.props.table;\n                    if (api.context.props.sysId)\n                        _fields.sysId = api.context.props.sysId;\n                    break;\n\n                default:\n                    bcItemPayload.fields = bcItemPayload.fields || {};\n                    _fields = {\n                           ...bcItemPayload.fields\n                     };\n            }\n        }\n\n        bcItemPayload.params = bcItemPayload.params || {};\n        let _params = {\n            ...bcItemPayload.params,\n            t: Date.now()\n        };\n\n        if (bcItemPayload.view) _params.view = bcItemPayload.view;\n        if (bcItemPayload.filter) _params.filter = bcItemPayload.filter;\n\n        return {\n            route: _route,\n            fields: _fields,\n            params: _params,\n        };\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"b10de808eb9e0110da1861c59c5228cf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_update_name":"sys_ux_client_script_include_b10de808eb9e0110da1861c59c5228cf","sys_updated_by":"admin","api_name":"sn_oe_sfs.CiNavigationUtils","sys_created_on":"2022-03-12 19:23:07","name":"CiNavigationUtils","sys_name":"CiNavigationUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"77","includes":"","sys_updated_on":"2022-08-01 22:01:26","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    const analyticsChartPayload = (payload) => {\n        const route = payload.ctype.route;\n        const {\n            chart_title,\n            table,\n            metric_label,\n            metric_aggregation_function: aggregate_function,\n            metric_aggregate_field: aggregate_field,\n            metric_time_aggregation: time_aggregation,\n            trendby_aggregation_period: trendby_frequency,\n            trendby_date_field: trendby_field,\n            sort_by,\n            sort_order,\n            data_source,\n            indicator,\n            show_sparkline,\n            sparkline_style,\n            show_change,\n            show_target,\n            show_gap_percentage,\n            show_change_percentage,\n            show_score_date,\n            groupby_field,\n            show_others,\n            show_header = true,\n            show_border = true,\n            bare_border = false,\n            show_legend,\n            show_legend_value,\n            show_legend_percentage,\n            show_metric_label,\n            show_total_value,\n            follow_filters = true,\n            show_filter_icon = true,\n            enable_drilldown = true,\n            period_start = null,\n            period_end = null,\n            period = 'M',\n            wrap_title = false,\n            filter_query,\n            custom_format = false,\n            decimal_precision = 0,\n            rounding = \"HALF_UP\",\n            thousand_separator_enabled = true,\n            abbreviation_enabled = false,\n            number_in_tooltips_enabled = false,\n            chart_variation\n        } = payload.props_details;\n\n        const chartPayload = {};\n        chartPayload.chartTitle = chart_title;\n        chartPayload.extensionType = route;\n        chartPayload.chartVariation = \"stacked\";\n        chartPayload.sortBy = sort_by;\n        chartPayload.sortOrder = sort_order;\n        chartPayload.showSparkline = show_sparkline === \"true\";\n        chartPayload.sparklineStyle = sparkline_style;\n        chartPayload.showChangePercentage = show_change_percentage === \"true\";\n        chartPayload.showChange = show_change === \"true\";\n        chartPayload.showTarget = show_target === \"true\";\n        chartPayload.showGapPercentage = show_gap_percentage === \"true\";\n        chartPayload.showScoreDate = show_score_date === \"true\";\n        chartPayload.showHeader = show_header;\n        chartPayload.showBorder = show_border;\n        chartPayload.bareBorder = bare_border;\n        chartPayload.showLegend = show_legend === \"true\";\n        chartPayload.showLegendValue = show_legend_value === \"true\";\n        chartPayload.showLegendPercentage = show_legend_percentage === \"true\";\n        chartPayload.showMetricLabel = metric_label != \"\";\n        chartPayload.showTotalValue = show_total_value === \"true\";\n        chartPayload.followFilters = follow_filters;\n        chartPayload.showFilterIcon = show_filter_icon;\n        chartPayload.enableDrilldown = enable_drilldown;\n        chartPayload.periodStart = period_start;\n        chartPayload.periodEnd = period_end;\n        chartPayload.period = period;\n        chartPayload.wrapTitle = wrap_title;\n        chartPayload.customFormat = custom_format;\n        chartPayload.decimalPrecision = decimal_precision;\n        chartPayload.rounding = rounding;\n        chartPayload.thousandSeparatorEnabled = thousand_separator_enabled;\n        chartPayload.abbreviationEnabled = abbreviation_enabled;\n        chartPayload.numberInTooltipsEnabled = number_in_tooltips_enabled;\n        chartPayload.chartVariation = chart_variation;\n\n\n        switch (data_source) {\n            case 'table':\n                {\n                    const dataSourcePayload_table = [{\n                        \"isDatabaseView\": false,\n                        \"allowRealTime\": true,\n                        \"label\": chart_title,\n                        \"sourceType\": \"table\",\n                        \"tableOrViewName\": table,\n                        \"filterQuery\": filter_query,\n                        \"reportSourceSysId\": null,\n                        \"id\": \"dGFibGVpbmNpZGVudDE2NTIyNjIyNDM1Njg=\",\n                        \"dataCategories\": [\n                            \"trend\",\n                            \"group\",\n                            \"simple\"\n                        ]\n                    }];\n                    const numberFormat = (custom_format) ? {\n                        \"customFormat\": true,\n                        \"rounding\": rounding,\n                        \"decimalPrecision\": decimal_precision,\n                        \"abbreviationEnabled\": abbreviation_enabled,\n                        \"numberInTooltipsEnabled\": number_in_tooltips_enabled,\n                        \"thousandSeparatorEnabled\": thousand_separator_enabled\n                    } : {\n                        \"customFormat\": false\n                    };\n                    const metricPayload_table = [{\n                        \"dataSource\": \"dGFibGVpbmNpZGVudDE2NTIyNjIyNDM1Njg=\",\n                        \"id\": \"ZEdGaWJHVnBibU5wWkdWdWRERTJOVEl5TmpJeU5ETTFOamc9MTY1MjI2MjI0NDgzOQ==\",\n                        \"aggregateFunction\": aggregate_function.toUpperCase(),\n                        \"numberFormat\": numberFormat,\n                        \"axisId\": \"primary\",\n                        \"label\": metric_label,\n                        \"aggregateField\": aggregate_field\n                    }];\n                    const groupByPayload = [{\n                        \"groupBy\": [{\n                            \"dataSource\": \"dGFibGVpbmNpZGVudDE2NTIyNjIyNDM1Njg=\",\n                            \"groupByField\": groupby_field,\n                            \"isRange\": false,\n                            \"isChoice\": false,\n                            \"isPaBucket\": false\n                        }],\n                        \"maxNumberOfGroups\": 10,\n                        \"numberOfGroupsBasedOn\": \"NO_OF_GROUP_BASED_ON_PER_METRIC\",\n                        \"showOthers\": show_others\n                    }];\n                    const trendByPayload = {\n                        \"trendByFrequency\": trendby_frequency,\n                        \"trendByMinuteInterval\": null,\n                        \"trendByFields\": [{\n                            \"field\": trendby_field,\n                            \"metric\": \"ZEdGaWJHVnBibU5wWkdWdWRERTJOVEl5TmpJeU5ETTFOamc9MTY1MjI2MjI0NDgzOQ==\"\n                        }]\n                    };\n                    chartPayload.dataSource = dataSourcePayload_table;\n                    chartPayload.metric = metricPayload_table;\n                    chartPayload.groupBy = groupByPayload;\n                    chartPayload.trendBy = trendByPayload;\n\n                    break;\n                }\n            case 'indicator':\n                {\n                    const dataSourcePayload_indicator = [{\n                        \"allowRealTime\": true,\n                        \"allowTotalValue\": true,\n                        \"indicatorType\": \"1\",\n                        \"isScriptedIndicator\": false,\n                        \"label\": chart_title,\n                        \"sourceType\": \"indicator\",\n                        \"uuid\": {\n                            \"indicator\": indicator,\n                            \"breakdowns\": []\n                        },\n                        \"id\": \"dGFibGVpbmNpZGVudDE2NDIwODUxMzgyMjI=\"\n                    }];\n\n\n                    const metricPayload_indicator = [{\n                        \"dataSource\": \"dGFibGVpbmNpZGVudDE2NDIwODUxMzgyMjI=\",\n                        \"id\": \"ZEdGaWJHVnBibU5wWkdWdWRERTJOREl3T0RVeE16Z3lNakk9MTY0MjA4NTE0MDc3OQ==\",\n                        \"aggregateIndicator\": time_aggregation || \"\",\n                        \"frequency\": 10,\n                        \"numberFormat\": {\n                            \"customFormat\": false\n                        },\n                        \"axisId\": \"primary\"\n                    }];\n                    const trendByPayload_indicator = {\n                        \"trendByFrequency\": \"date\",\n                        \"trendByMinuteInterval\": null,\n                        \"trendByFields\": [{\n                            \"field\": \"anything\",\n                            \"metric\": \"ZEdGaWJHVnBibU5wWkdWdWRERTJOREl3T0RVeE16Z3lNakk9MTY0MjA4NTE0MDc3OQ==\"\n                        }]\n                    };\n                    chartPayload.dataSource = dataSourcePayload_indicator;\n                    chartPayload.metric = metricPayload_indicator;\n                    chartPayload.trendBy = trendByPayload_indicator;\n                    break;\n                }\n        }\n\n        return chartPayload;\n    };\n    return {\n        analyticsChartPayload\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"b3cd0511538681102958ddeeff7b123a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_b3cd0511538681102958ddeeff7b123a","sys_updated_by":"maint","api_name":"sn_ace.FormatAnalyticsPayload","sys_created_on":"2022-03-04 08:41:16","name":"FormatAnalyticsPayload","sys_name":"FormatAnalyticsPayload","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"0","includes":"465e734d53490210abd8ddeeff7b1235","sys_updated_on":"2024-03-19 08:44:53","sys_tags":"","script":"function include({ imports }) {\n    let PwdResetUxfClientUtilSNC = imports[\"sn_uib_pwd_reset.PwdResetUxfClientUtilSNC\"]();\n    class PwdResetUxfClientUtil extends PwdResetUxfClientUtilSNC {\n    }\n    return PwdResetUxfClientUtil;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"b46e734d53490210abd8ddeeff7b12d0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_update_name":"sys_ux_client_script_include_b46e734d53490210abd8ddeeff7b12d0","sys_updated_by":"admin","api_name":"sn_uib_pwd_reset.PwdResetUxfClientUtil","sys_created_on":"2024-03-18 18:35:57","name":"PwdResetUxfClientUtil","sys_name":"PwdResetUxfClientUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/75a67dbd9350021077d0ca32b38918b3","value":"75a67dbd9350021077d0ca32b38918b3"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"98f9726c0f662010ad4437a98b767e0e","sys_updated_on":"2021-02-24 07:24:33","sys_tags":"","script":"/**\n * This method is used to remove a card from it's original position and put back at a new position based on the new\n * laneId, swimlaneId and the order that are passed as function parameters.\n */\nfunction include({\n    imports\n}, {\n    allCards,\n    cardId,\n    laneId,\n    swimlaneId = '',\n    order\n}) {\n    const {\n         'sn_vtb.loadashUtil': loadashUtil\n    } = imports;\n     const {\n        cloneDeep\n     } = loadashUtil();\n\n    const cards = cloneDeep(allCards);\n    const cardData = cards.find((c) => c.sys_id === cardId);\n    if (cardData) {\n        cardData.lane_id = laneId;\n        cardData.swim_lane_id = swimlaneId;\n        const destinationLaneCards = cards\n            .filter((card) => card.lane_id === laneId && card.swim_lane_id === swimlaneId)\n            .sort((a, b) => a.order - b.order);\n\n        cardData.order = order;\n        destinationLaneCards.forEach((card, idx) => {\n            if (card.sys_id !== cardData.sys_id) {\n                if (idx < order) card.order = idx;\n                else if (idx > order) card.order = idx + 1;\n                else card.order = order - 1 >= 0 ? order - 1 : order + 1;\n            }\n        });\n    }\n\n    return cards;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"b52a726c0f662010ad4437a98b767e13","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_b52a726c0f662010ad4437a98b767e13","sys_updated_by":"admin","api_name":"sn_vtb.moveCard","sys_created_on":"2021-02-22 12:49:18","name":"moveCard","sys_name":"moveCard","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"0","includes":"","sys_updated_on":"2024-09-24 10:22:45","sys_tags":"","script":"function include({imports}) {\n      const ERROR_NOTIFICATION_PROPS = {\n            \"status\": \"critical\",\n            \"icon\": \"circle-close-outline\",\n            \"action\": {\n                \"type\": \"dismiss\"\n           }\n    };\n\n   const SUCCESS_NOTIFICATION_PROPS = {\n            \"status\": \"positive\",\n            \"icon\": \"circle-info-outline\",\n            \"action\": {\n                \"type\": \"dismiss\"\n            }\n       };\n\n    var _handleRemoveNotifications = function(emit, notificationId, helpers) {\n         const timeoutId = helpers.timing.setTimeout(() => {\n         emit('NOW_UXF_PAGE#REMOVE_NOTIFICATIONS', {\n          items: [{id: notificationId}]\n          }); }, 5000);\n    }\n\n     var _emitErrorNotification = async function(notificationId, errorMessage, emit, helpers) {\n         const notifications = [];\n \n         if(!errorMessage) {\n              errorMessage = \"invalid error\";\n         }\n         notifications.push({\n             ...ERROR_NOTIFICATION_PROPS,\n              \"content\": await helpers.translate(\"{0}\", errorMessage),\n              \"id\": notificationId \n        });\n        emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notifications\n        });\n       _handleRemoveNotifications(emit,notificationId,helpers);\n   }\n\n   var _emitSuccessNotification = async function(notificationId, successMessage, emit, helpers) {\n         const notifications = [];\n \n         notifications.push({\n             ...SUCCESS_NOTIFICATION_PROPS,\n              \"content\": await helpers.translate(\"{0}\", successMessage),\n              \"id\": notificationId \n        });\n        emit(\"NOW_UXF_PAGE#ADD_NOTIFICATIONS\", {\n            items: notifications\n        });\n       _handleRemoveNotifications(emit,notificationId,helpers);\n   }\n\n    return {\n        ERROR_NOTIFICATION_PROPS,\n        SUCCESS_NOTIFICATION_PROPS,\n        emitErrorNotification : _emitErrorNotification,\n        emitSuccessNotification : _emitSuccessNotification,\n        handleRemoveNotifications: _handleRemoveNotifications\n   };\n }","sys_class_name":"sys_ux_client_script_include","sys_id":"b57dc8daff381210f6ddffffffffff9d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_update_name":"sys_ux_client_script_include_b57dc8daff381210f6ddffffffffff9d","sys_updated_by":"admin","api_name":"sn_sd.SDNotificationHandler","sys_created_on":"2024-09-24 08:11:27","name":"SDNotificationHandler","sys_name":"SDNotificationHandler","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3cc85c0107303010c7d559bf1ad30022","value":"3cc85c0107303010c7d559bf1ad30022"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"11","includes":"","sys_updated_on":"2021-09-29 12:01:36","sys_tags":"","script":"function include({ imports }) {\n    return {\n        navigateTo: (api, navPayload, isInAppRouting = false) => {\n            //helpers.navigate.to(route, {}, {});\n            api.emit(\"NAV_ITEM_SELECTED\", {\n                ...navPayload,\n                reload: !isInAppRouting,\n            });\n        },\n\n        getBreadcrumbNavPayload: (api, event) => {\n            const bcItemPayload = event.payload.item;\n            if (!bcItemPayload || !bcItemPayload.page) {\n                return { route: \"home\" };\n            }\n\n            let _route = bcItemPayload.page;\n            let _fields = {};\n            if (_route.startsWith(\"-custom-\")) {\n                const splittedRoute = _route.split(\"#\");\n                _route = splittedRoute[1]; //route\n                if(splittedRoute[2])\n                    _fields.table = splittedRoute[2]; //table\n                if (splittedRoute[3])\n                    _fields.sysId = splittedRoute[3]; //sysId\n            } else {\n                switch (_route) {\n                    case \"ci-list\":\n                        if (api.context.props.table)\n                            _fields.table = api.context.props.table;\n                        break;\n\n                    case \"ci-record\":\n                        if (api.context.props.table)\n                            _fields.table = api.context.props.table;\n                        if (api.context.props.sysId)\n                            _fields.sysId = api.context.props.sysId;\n                        break;\n\n                    default:\n                        _fields = null;\n                }\n            }\n\n            let _params = { t: Date.now() };\n            if (bcItemPayload.view) _params.view = bcItemPayload.view;\n            if (bcItemPayload.filter) _params.filter = bcItemPayload.filter;\n\n            return {\n                route: _route,\n                fields: _fields,\n                params: _params,\n            };\n        }\n    };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"b8c433745332701033cdddeeff7b1243","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c2a7835187123010a4a2c077f6cb0bc0","value":"c2a7835187123010a4a2c077f6cb0bc0"},"sys_update_name":"sys_ux_client_script_include_b8c433745332701033cdddeeff7b1243","sys_updated_by":"admin","api_name":"global.CiRoutingUtils","sys_created_on":"2021-09-22 18:09:44","name":"CiRoutingUtils","sys_name":"CiRoutingUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c2a7835187123010a4a2c077f6cb0bc0","value":"c2a7835187123010a4a2c077f6cb0bc0"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"User group field is required\"\n    },\n    {\n        \"message\": \"Specific user field is required\"\n    },\n    {\n        \"message\": \"Specific user group field is required\"\n    },\n    {\n        \"message\": \"User field is required\"\n    },\n    {\n        \"message\": \"Assignment type selection is required\"\n    },\n    {\n        \"message\": \"Policy Type is required\"\n    },\n    {\n        \"message\": \"Policy name is required\"\n    },\n    {\n        \"message\": \"Subflow is required\"\n    },\n    {\n        \"message\": \"Days to complete is required. Enter a valid number.\"\n    }\n]","access":"package_private","sys_mod_count":"178","includes":"47dd621a53041110573addeeff7b129d","sys_updated_on":"2024-09-16 22:57:14","sys_tags":"","script":"function include({imports}) {\n\n    const { DM_POLICY_TYPE_IDS } = imports[\"sn_cmdb_ws.cmdbWSCommonUtil\"]();\n    /**\n     * \n     * @param validatorModel\n     * @param selectedTabId\n     * @param policyData\n     * @returns Whether all fields are valid\n     */\n    const _validatePolicyForm = async (validatorModel, selectedTabId, policyData, helpers) => {\n        // don't validate the review page\n        if (selectedTabId === \"review\")\n            return true;\n\n        // Validate that all fields are valid\n        let allFieldsValid = true;\n        let assignmentType = '';\n        const policyTypeId = policyData.general_info.cmdb_policy_type;\n        let validatorFields = validatorModel[selectedTabId];\n        if (selectedTabId === \"options\") {\n            validatorFields = validatorModel[selectedTabId][policyTypeId];\n\n            // Additional validation for archive for days and retention time\n            let checkRetentionTime = false;\n            let checkDueInDays = false;\n            if (policyTypeId === DM_POLICY_TYPE_IDS.LIFECYCLE.ARCHIVE) {\n                checkRetentionTime = true;\n            }\n            else if (policyTypeId === DM_POLICY_TYPE_IDS.NON_LIFECYCLE.ATTESTATION || policyTypeId === DM_POLICY_TYPE_IDS.NON_LIFECYCLE.CERTIFICATION) {\n                checkDueInDays = true;\n            }\n\n            if (checkRetentionTime) {\n                // Check to make sure the value does not contain a decimal or negative\n                if (_hasDecimalOrNegative(policyData.options.retention_time))\n                    allFieldsValid = false;\n\n                // Validate that the max number is not higher than is allowed\n                let retentionTime = parseInt(policyData[selectedTabId].retention_time);\n                let timeframeSelection = policyData[selectedTabId].retention_timeframe_selection;\n\n                if (timeframeSelection === \"days\") {\n                    if (retentionTime > 3650)\n                        allFieldsValid = false;\n                }\n                else if (timeframeSelection === \"months\") {\n                    if (retentionTime > 120)\n                        allFieldsValid = false;\n                }\n                else if (timeframeSelection === \"years\") {\n                    if (retentionTime > 10)\n                        allFieldsValid = false;\n                }\n            }\n            if (checkDueInDays) {\n                // Check to make sure the value does not contain a decimal or negative\n                if (_hasDecimalOrNegative(policyData.options.task_due_in_days))\n                    allFieldsValid = false;\n\n                // Validate that the max number is not higher than is allowed\n                if (parseInt(policyData.options.task_due_in_days) > 397)\n                    allFieldsValid = false;\n\n                // For attestation, only task_due_in_days is required, and the below validation causes the validator model to say invalid false\n                // So do our own setting of invalid\n                if (!allFieldsValid) {\n                    validatorModel[selectedTabId][\"task_due_in_days\"] = {\n                        \"invalid\": true,\n                        \"alertMessage\": await _getAlertContent(\"task_due_in_days\", helpers)\n                    }\n                    // Set the actual field to be invalid\n                    validatorModel[selectedTabId][policyTypeId][\"task_due_in_days\"] = {\n                        \"invalid\": true,\n                        \"alertMessage\": await _getAlertContent(\"task_due_in_days\", helpers)\n                    }\n                    return false;\n                }\n            }\n        }\n        else if (selectedTabId === \"assignment\") {\n            assignmentType = policyData.assignment.task_assignment_type;\n            if (!assignmentType) {\n                validatorModel[selectedTabId]['task_assignment_type'] = {\n                    \"invalid\": true,\n                    \"alertMessage\": await _getAlertContent('task_assignment_type', helpers)\n                };\n                return false;\n            } else {\n                 validatorModel[selectedTabId]['task_assignment_type'] = {\n                    \"invalid\": false,\n                    \"alertMessage\": []\n                };\n            }\n            validatorFields = validatorModel[selectedTabId][assignmentType];\n        } else if (selectedTabId === \"schedule\") {\n            // don't validate lifecycle policies, they don't have a schedule\n            if (!Object.values(DM_POLICY_TYPE_IDS.NON_LIFECYCLE).includes(policyTypeId))\n                return true;\n            // convert into an object for the validator iterator\n            validatorFields = _getScheduleItemsByType(policyData.schedule.run_type || \"\")\n                .reduce((acc, value) => ({ ...acc, [value]: {\"invalid\": false}}), {});\n        }\n        const dataFields = policyData[selectedTabId];\n        let validatorFieldsArr = Object.keys(validatorFields);\n        for (var i = 0; i < validatorFieldsArr.length; i++) {\n            var validatorField = validatorFieldsArr[i];\n            // Reset the validation for the field. Need to do this for the trickery needed for the options validation.\n            validatorModel[selectedTabId][validatorField] = {\n                \"invalid\": false\n            }\n            const currentVal = dataFields[validatorField]?.replace(/([​])+/g, \"\");\n\n            if (!currentVal) {\n                if (selectedTabId === \"assignment\") {\n                    validatorModel[selectedTabId][assignmentType][validatorField] = {\n                        \"invalid\": true,\n                        \"alertMessage\" : await _getAlertContent(assignmentType, helpers)\n                    };\n                } else if (selectedTabId === \"options\") {\n                    // Set the field we can bind to for options validation\n                    validatorModel[selectedTabId][validatorField] = {\n                        \"invalid\": true,\n                        \"alertMessage\" : await _getAlertContent(validatorField, helpers)\n                    }\n                    // Set the actual field to be invalid\n                    validatorModel[selectedTabId][policyTypeId][validatorField] = {\n                        \"invalid\": true,\n                         \"alertMessage\" : await _getAlertContent(validatorField, helpers)\n                    }\n                }\n                else {\n                    validatorModel[selectedTabId][validatorField] = {\n                        \"invalid\": true,\n                        \"alertMessage\" : await _getAlertContent(validatorField, helpers)\n                    }\n                }\n                allFieldsValid = false;\n            } else { //reset the alert messages\n                if (selectedTabId === \"assignment\") {\n                    validatorModel[selectedTabId][assignmentType][validatorField] = {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                } else {\n                    validatorModel[selectedTabId][validatorField] = {\n                        \"invalid\": false,\n                        \"alertMessage\" : []\n                    }\n                }\n            }\n         \n        };\n\n        return allFieldsValid;\n    };\n\n    const _getAlertContent = async (validatorField, helpers) => {\n        var content = \"\";\n        switch(validatorField) {\n            case \"user_group_field\": \n                return [{\"content\" : await helpers.translate(\"User group field is required\"), \"status\":\"critical\" }];\n            case \"specific_user\": \n                return [{\"content\" : await helpers.translate(\"Specific user field is required\"), \"status\":\"critical\" }];\n            case \"specific_user_group\":\n                return [{\"content\" : await helpers.translate(\"Specific user group field is required\"), \"status\":\"critical\" }];\n            case \"user_field\":\n                return [{\"content\" : await helpers.translate(\"User field is required\"), \"status\":\"critical\" }];\n            case \"task_assignment_type\": \n                return [{\"content\":  await helpers.translate(\"Assignment type selection is required\"), \"status\":\"critical\"}];\n            case \"cmdb_policy_type\": \n                return [{\"content\":  await helpers.translate(\"Policy Type is required\"), \"status\":\"critical\"}];\n            case \"policy_name\": \n                return [{\"content\":  await helpers.translate(\"Policy name is required\"), \"status\":\"critical\"}];\n             case \"subflow\": \n                return [{\"content\":  await helpers.translate(\"Subflow is required\"), \"status\":\"critical\"}];\n             case \"task_due_in_days\":\n                return [{\"content\":  await helpers.translate(\"Days to complete is required. Enter a valid number.\"), \"status\":\"critical\"}];\n        }\n    };\n\n    const _getScheduleItemsByType = (runType) => {\n        switch (runType) {\n            case \"daily\":\n                return [\"run_type\", \"run_time\"];\n            case \"weekly\":\n                return [\"run_type\", \"run_time\", \"run_dayofweek\"];\n            case \"monthly\":\n                return [\"run_type\", \"run_time\", \"run_dayofmonth\"];\n            case \"periodically\":\n                return [\"run_type\", \"run_period\", \"run_start\"];\n            case \"once\":\n                return [\"run_type\", \"run_start\"];\n            default:\n                return [\"run_type\"];\n        }\n    };\n\n    const _hasDecimalOrNegative = (checkValue) => {\n        return checkValue.indexOf(\".\") > -1 || checkValue.indexOf(\"-\") > -1;\n    };\n\n    return {\n        validatePolicyForm: _validatePolicyForm\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"baa5015ca3b43110d49f9bd2361e613d","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_baa5015ca3b43110d49f9bd2361e613d","sys_updated_by":"admin","api_name":"sn_cmdb_ws.DataManagerPolicyFormUtil","sys_created_on":"2023-08-17 14:46:42","name":"DataManagerFormValidator","sys_name":"DataManagerFormValidator","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"36","includes":"","sys_updated_on":"2023-04-04 23:05:56","sys_tags":"","script":"function include({\n    imports\n}) {\n    const dateFormatMap = {\n        \"DAY\": {\n            \"MM-dd-yyyy\": \"dddd, MMMM D YYYY\",\n            \"dd/MM/yyyy\": \"dddd, D MMMM YYYY\",\n            \"dd-MM-yyyy\": \"dddd, D MMMM YYYY\",\n            \"dd.MM.yyyy\": \"dddd, D MMMM YYYY\",\n            \"yyyy-MM-dd\": \"dddd, YYYY MMMM D\"\n        },\n        \"WEEK\": {\n            \"MM-dd-yyyy\": \"MMMM D YYYY\",\n            \"dd/MM/yyyy\": \"D MMMM YYYY\",\n            \"dd-MM-yyyy\": \"D MMMM YYYY\",\n            \"dd.MM.yyyy\": \"D MMMM YYYY\",\n            \"yyyy-MM-dd\": \"YYYY MMMM D\"\n        },\n        \"MONTH\": {\n            \"MM-dd-yyyy\": \"MMMM YYYY\",\n            \"dd/MM/yyyy\": \"MMMM YYYY\",\n            \"dd-MM-yyyy\": \"MMMM YYYY\",\n            \"dd.MM.yyyy\": \"MMMM YYYY\",\n            \"yyyy-MM-dd\": \"YYYY MMMM\"\n        }\n    };\n    const getColorMap = () => {\n        const colorMap = new Map();\n        colorMap.set('nonAllDay_bordercolor', 'rgb(var(--now-color_alert--info-2, 14, 120, 196))');\n        colorMap.set('nonAllDay_bgcolor', 'rgb(var(--now-color_alert--info-0, 195, 221, 240))');\n        colorMap.set('allDay_bordercolor', 'rgb(var(--now-color_alert--info-3, 11, 96, 157))');\n        colorMap.set('allDay_bgcolor', 'rgb(var(--now-color_alert--info-1, 104, 171, 218))');\n        colorMap.set('exclude_bordercolor', 'rgb(var(--now-color_border--primary, var(--now-color--neutral-7, 135, 147, 148)))');\n        colorMap.set('exclude_bgcolor', 'rgb(var(--now-color_background--tertiary, var(--now-color--neutral-2, 228, 230, 231)))');\n        return colorMap;\n    };\n    const getDatePickerTemplates = (api) => {\n        const userDateFormat = api.context.session.user.dateFormat;\n        const datePickerTemplates = {\n            \"TIMELINE_DAY\": `startMoment ? startMoment.format(\\'${dateFormatMap['DAY'][userDateFormat]}\\') : ''`,\n            \"TIMELINE_WEEK\": `startMoment && endMoment ? startMoment.format(\\'${dateFormatMap['WEEK'][userDateFormat]}\\') + ' - ' + endMoment.format('${dateFormatMap['WEEK'][userDateFormat]}') : ''`,\n            \"TIMELINE_MONTH\": `startMoment ? startMoment.add(14,'days').format(\\'${dateFormatMap['MONTH'][userDateFormat]}\\') : ''`,\n            \"DAY\": `startMoment ? startMoment.format(\\'${dateFormatMap['DAY'][userDateFormat]}\\') : ''`,\n            \"WEEK\": `startMoment && endMoment ? startMoment.format(\\'${dateFormatMap['WEEK'][userDateFormat]}\\') + ' - ' + endMoment.format('${dateFormatMap['WEEK'][userDateFormat]}'): ''`,\n            \"MONTH\": `startMoment ? startMoment.add(14,'days').format(\\'${dateFormatMap['MONTH'][userDateFormat]}\\') : ''`,\n        };\n        return datePickerTemplates;\n    };\n\n    const hasWriteAccessOnSchedules = (api) => {\n        const roles = api.context.session.user.roles;\n        if (roles.includes('admin') || roles.includes('maint') || roles.includes('itil_admin') || roles.includes('schedule_admin')) {\n             return true;\n        }\n        return false;\n    };\n\n    return {\n        getColorMap: getColorMap,\n        getDatePickerTemplates: getDatePickerTemplates,\n        dateFormatMap: dateFormatMap,\n        hasWriteAccessOnSchedules: hasWriteAccessOnSchedules\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"bfb0833a5330211029d7ddeeff7b1247","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/15672bfb04b12210559073c06a02f7e3","value":"15672bfb04b12210559073c06a02f7e3"},"sys_update_name":"sys_ux_client_script_include_bfb0833a5330211029d7ddeeff7b1247","sys_updated_by":"maint","api_name":"global.ScheduleCalendarUtils","sys_created_on":"2023-02-07 21:58:38","name":"ScheduleCalendarUtils","sys_name":"ScheduleCalendarUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"0","includes":"7fd420bf43010210717d19405bb8f2a8","sys_updated_on":"2024-06-03 10:19:09","sys_tags":"","script":"function include({ imports }, typeaheadConf, api, helpers) {\n\n    const typeaheads = typeaheadConf.typeaheads;\n    const config = typeaheadConf.config;\n    const JSONQuery = imports[\"sn_access_analyzer.JSONQuery\"]();\n    let eventHandlers = {};\n\n    const TypeaheadEvent = {\n        ON_VALUE_SET: \"NOW_TYPEAHEAD#VALUE_SET\",\n        ON_SELECTED_ITEM_SET: \"NOW_TYPEAHEAD#SELECTED_ITEM_SET\",\n        ON_DATA_FETCH_SUCCEEDED: \"DATA_FETCH_SUCCEEDED\",\n        ON_DATA_FETCH_FAILED: \"DATA_FETCH_FAILED\",\n        ON_DATA_OP_FAILED: \"DATA_OP_FAILED\",\n        ON_ENTER_KEY_DOWN: \"NOW_TYPEAHEAD#ENTER_KEYDOWN\"\n    }\n\n    function init() {\n        clear();\n        config.thDSIndexMap = {};\n        for (let typeaheadID in typeaheads) {\n            let thConf = getConf(typeaheadID);\n            thConf.searchKeyword = \"\";\n            config.thDSIndexMap[thConf.dataSource] = typeaheadID;\n            if (thConf.loadData == true)\n                loadData(typeaheadID);\n        }\n    }\n\n    function addEventHandler(eventName, handler) {\n        eventHandlers[eventName] = handler;\n    }\n\n    function getConf(typeaheadID, key = null) {\n        let conf = typeaheads[typeaheadID];\n        return key != null ? conf[key] : conf;\n    }\n\n    function getProps(typeaheadID) {\n        return api.state[typeaheadID];\n    }\n\n    function updateConf(typeaheadID, key, value) {\n        let data = typeof key === \"string\" ? { [key]: value } : key;\n        let thConf = getConf(typeaheadID);\n        for (let id in data)\n            thConf[id] = data[id];\n    }\n\n    function updateProps(typeaheadID, key, value) {\n        let data = (typeof key == \"string\") ? { [key]: value } : key;\n        let thProps = getProps(typeaheadID);\n        if (!thProps)\n            return;\n        api.setState(typeaheadID, ctx => ({ \n        \t...ctx.currentValue, \n        \t...data \n        }));\n    }\n\n    function update(typeaheadID, data) {\n        if (!data)\n            return;\n        updateProps(typeaheadID, {\n            loading: false,\n            listItems: [data],\n            selectedItemId: data.id,\n            selectedItemValue: data.label\n        });\n    }\n\n    function clear(...typeaheadIDs) {\n        _clear.apply(null, (typeaheadIDs != null && typeaheadIDs.length > 0) ? typeaheadIDs : Object.keys(typeaheads));\n    }\n\n    function _clear(...typeaheadIDs) {\n        typeaheadIDs.forEach(typeaheadID => {\n            updateProps(typeaheadID, {\n                loading: false,\n                listItems: [],\n                selectedItemId: null,\n                selectedItemValue: null\n            });\n        });\n    }\n\n    function loadData(typeaheadID, table = null) {\n        updateProps(typeaheadID, \"loading\", true);\n        let thConf = getConf(typeaheadID);\n        if (table != null)\n            thConf.table = table;\n        thConf.condition = null;\n        api.data[thConf.dataSource].refresh();\n    }\n\n\n    function _dataFetchHandler(event) {\n        if(event.name == TypeaheadEvent.ON_DATA_FETCH_FAILED || event.name == TypeaheadEvent.ON_DATA_OP_FAILED) {\n            emit(event.name);\n            return;\n        }\n\n        let dataSourceID = event.elementId;\n        let typeaheadID = config.thDSIndexMap[dataSourceID];\n        if (!typeaheadID)\n            return;\n        api.state[typeaheadID].loading = false;\n        emit(TypeaheadEvent.ON_DATA_FETCH_SUCCEEDED, dataSourceID, typeaheadID, api.data[dataSourceID], event);\n\n        updateProps(typeaheadID, {\n            loading: false,\n            listItems: _getResult(dataSourceID),\n            selectedItemId: null\n        });\n    }\n\n    function _serializeData(result, serilizeMapper) {\n        if (!result)\n            return [];\n        let serMap = serilizeMapper || {\n            id: \"_row_data.uniqueValue\",\n            label: \"_row_data.displayValue\",\n        }\n        return result.map(row => {\n            let rowObj = {};\n            for (let id in serMap)\n                rowObj[id] = JSONQuery.find(row, serMap[id]);\n            return rowObj;\n        });\n    }\n\n\n    function _valueSetHandler(event) {\n        if (event.payload.actionSource == \"select\")\n            return;\n        let typeaheadID = event.elementId;\n        let thConf = getConf(typeaheadID);\n        if (thConf.searchKeyword != \"\" && event.payload.value == thConf.searchKeyword)\n            return;\n\n        if (event.payload.value != \"\") {\n            thConf.searchKeyword = event.payload.value;\n            thConf.condition = thConf.encodedSearchQuery.replaceAll(\"%s\", event.payload.value);\n        } else {\n            thConf.condition = null;\n        }\n        api.data[thConf.dataSource].refresh();\n    }\n\n    function _getResult(dataSource) {\n        let typeaheadID = config.thDSIndexMap[dataSource];\n        let conf = getConf(typeaheadID);\n        let result = JSONQuery.find(api.data[dataSource], conf.dataSourceResultKey || \"results\");\n        return _serializeData(result, conf.dataRowSerilizeMapper);\n    }\n\n    function _selectedItemSetHandler(event) {\n        let thProps = getProps(event.elementId);\n        let item = event.payload.item;\n        if (thProps.selectedItemId == item.id)\n            return;\n        let typeaheadID = event.elementId;\n        let selectedItemId = item.id;\n        let prevItemId = thProps.selectedItemId || thProps.previousSelectedItemId;\n        let thConf = getConf(typeaheadID);\n        let hasError = selectedItemId == null && thConf.required == true;\n        let props =  {\n            selectedItemId: selectedItemId,\n            selectedItemValue: selectedItemId == null ? \"\" : item.label,\n            listItems: thProps.listItems.filter(item => item.id == selectedItemId),\n            error: null,\n            hasUpdated: false\n        };\n\n        if(item.id) {\n        \tprops.previousSelectedItemId = prevItemId == undefined ?  selectedItemId : prevItemId\n            props.hasUpdated = selectedItemId != prevItemId;\n        \tif(props.hasUpdated)\n        \t\tprops.previousSelectedItemId = selectedItemId;\n        }\n        \n        updateProps(typeaheadID, props);\n        \n        if(hasError) {\n        \tlet err = _validate(typeaheadID);\n        \tshowError(typeaheadID, err.error);\n        }\n\n        emit(TypeaheadEvent.ON_SELECTED_ITEM_SET, typeaheadID, item);\n    }\n\n    function _enterKeyDownHandler(event) {\n        let text = event.payload.value;\n        if (text.trim() == \"\")\n            return;\n        let typeaheadID = event.elementId;\n        let thProps = getProps(typeaheadID);\n        let list = thProps.listItems.filter(item => item.label.includes(text) || item.sublabel.includes(text));\n        updateProps(typeaheadID, {\n            selectedItemId: list.length == 0 ? null : list[0].id,\n            selectedItemValue: list.length == 0 ? text : list[0].label\n        });\n        if (list.length > 0)\n            emit(TypeaheadEvent.ON_SELECTED_ITEM_SET, typeaheadID, list[0]);\n    }\n\n    function getSelectedItems() {\n        let res = {};\n        for (let typeaheadID in typeaheads)\n            res[typeaheadID] = getSelectedItem(typeaheadID);\n        return res;\n    }\n\n    function getSelectedItem(typeaheadID) {\n        let thProps = getProps(typeaheadID);\n        let sid = thProps.selectedItemId;\n        return thProps.listItems.find(item => item.id == sid) || {};\n    }\n\n    function hasUpdated() {\n    \tlet res = false;\n    \tfor (let typeaheadID in typeaheads)\n    \t\tres = res || getProps(typeaheadID).hasUpdated;\n    \treturn res;\n    }\n    \n    function clearUpdateState() {\n    \tfor (let typeaheadID in typeaheads) {\n    \t\tlet t = getProps(typeaheadID);\n    \t\tupdateProps(typeaheadID, {\n    \t\t\tpreviousSelectedItemId: t.selectedItemId,\n    \t\t\thasUpdated: false\n    \t\t});\n    \t}\n    }\n    \n    function hasError(typeaheadID) {\n    \treturn _validate(typeaheadID).hasError;\n    }\n    \n    function isEmpty(typeaheadID) {\n    \treturn emptyString(getProps(typeaheadID).selectedItemId);\n    }\n    \n    function validate(typeaheadID) {\n        if (typeaheadID)\n            return _validate(typeaheadID);\n        let answer = {\n            typeaheads: {},\n            hasError: false\n        }\n        for (let typeaheadID in typeaheads) {\n            let vr = _validate(typeaheadID);\n            answer.hasError = vr.hasError || answer.hasError;\n            answer.typeaheads[typeaheadID] = vr;\n        }\n        return answer;\n    }\n\n    function _validate(typeaheadID) {\n        let thConf = getConf(typeaheadID);\n        let item = getSelectedItem(typeaheadID);\n        let thProps = getProps(typeaheadID);\n        let hasError;\n        let error = \"\";\n        if ((thConf.required && emptyString(item.id)) || (!thConf.required && emptyString(item.id) && !emptyString(thProps.selectedItemValue))) {\n            error = thConf.errors[\"default\"];\n            showError(typeaheadID, error);\n            hasError = true;\n        } else {\n            hasError = false;\n            clearError(typeaheadID);\n        }\n        return Object.assign({ hasError: hasError, error: error }, item);\n    }\n\n    function showError(typeaheadID, message = null) {\n        let thConf = getConf(typeaheadID);\n        let thProps = getProps(typeaheadID);\n        let err = { ...config.errorTemplate };\n        err.content = message || thConf.errors[\"default\"];\n        thProps.error = [err];\n        updateProps(typeaheadID, thProps);\n    }\n\n    function clearError(typeaheadID) {\n        let thProps = getProps(typeaheadID);\n        thProps.error = null;\n        updateProps(typeaheadID, thProps);\n    }\n\n    function emit(eventName, ...args) {\n        return eventHandlers[eventName] ? eventHandlers[eventName].apply(this, args) : null;\n    }\n\n    function handle(event) {\n        switch (event.name) {\n            case TypeaheadEvent.ON_VALUE_SET:\n                return _valueSetHandler(event);\n            case TypeaheadEvent.ON_SELECTED_ITEM_SET:\n                return _selectedItemSetHandler(event);\n            case TypeaheadEvent.ON_DATA_FETCH_SUCCEEDED:\n            case TypeaheadEvent.ON_DATA_FETCH_FAILED:\n            case TypeaheadEvent.ON_DATA_OP_FAILED:\n                return _dataFetchHandler(event);\n            case TypeaheadEvent.ON_ENTER_KEY_DOWN:\n                return _enterKeyDownHandler(event);\n        }\n    }\n\n    const emptyString = (val) => val == null || val.trim().length == 0;\n\n    return {\n        TypeaheadEvent,\n        init,\n        addEventHandler,\n        getConf,\n        getProps,\n        updateConf,\n        updateProps,\n        loadData,\n        showError,\n        clearError,\n        clear,\n        update,\n        getSelectedItems,\n        getSelectedItem,\n        validate,\n        handle,\n        hasUpdated,\n        clearUpdateState,\n        hasError,\n        isEmpty\n    }\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"c05a1adc43300210717d19405bb8f23a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_c05a1adc43300210717d19405bb8f23a","sys_updated_by":"maint","api_name":"sn_access_analyzer.TypeaheadController","sys_created_on":"2024-03-03 17:07:45","name":"TypeaheadController","sys_name":"TypeaheadController","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"69","includes":"","sys_updated_on":"2024-09-25 21:12:25","sys_tags":"","script":"function include({imports}) {\n\n\treturn {\n\t\tgetDateObj: _getDateObj,\n\t\tformatDate: _formatDate,\n\t\tuserToDefaultFormat: _userToDefaultFormat\n\t};\n\n\t/**\n\t * \n\t * Converts a date string in the user's format to a date string in the default format of yyyy-MM-dd\n\t * Returns null if given invalid input\n\t * \n\t * @param {string} userDate\t\tThe string date in the user's format\n\t * @param {string} userFormat\tThe string representation of the user's format EX: yyyy/MM/dd\n\t * @returns {string}\t\t\tThe string date in the default format 'yyyy-MM-dd'\n\t */\n\tfunction _userToDefaultFormat(userDate, userFormat) {\n\t\tif (!userDate || !userFormat) {\n\t\t\treturn;\n\t\t}\n\t\tlet dateVals = _parseUserDate(userDate, userFormat);\n\t\tlet defaultDateStr = dateVals.year + '-' + dateVals.monthDisplay.toString().padStart(2, '0') + '-' + dateVals.day.toString().padStart(2, '0');\n\t\treturn defaultDateStr;\n\t}\n\n\t/**\n\t * \n\t * Returns an object with fields 'year', 'month' (Jan is 0), 'monthDisplay' (Jan is 1), 'day'\n\t * \n\t * @param userDate\t\t\tThe string version of the user's date EX: 2024/09/20\n\t * @param userFormat\t\tThe string version of the user's date format EX: yyyy/MM/dd\n\t * @returns {{month: number, year, monthDisplay, day}}\n\t * @private\n\t */\n\tfunction _parseUserDate(userDate, userFormat) {\n\t\tconst delimiterReg = /[^0-9]/;\n\t\tconst delimiterFormatReg = /[^yMd]/;\n\n\t\tconst formatParts = userFormat.split(delimiterFormatReg);\n\t\tconst dtParts = userDate.split(delimiterReg);\n\n\t\tlet day, month, year;\n\n\t\tformatParts.forEach((part, index) => {\n\t\t\tif (part === 'dd') {\n\t\t\t\tday = parseInt(dtParts[index], 10);\n\t\t\t} else if (part === 'MM') {\n\t\t\t\tmonth = parseInt(dtParts[index], 10);\n\t\t\t} else if (part === 'yyyy') {\n\t\t\t\tyear = parseInt(dtParts[index], 10);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\t'year': year,\n\t\t\t'month': month - 1,\n\t\t\t'monthDisplay': month,\n\t\t\t'day': day\n\t\t}\n\t}\n\n\t/**\n\t * \n\t * Gets a Date object for the given user date string and user format string.\n\t * Make sure to use UTC methods when getting the date from the returned Date object\n\t * Returns null if given invalid input\n\t *\n\t * @param userDate\t\t\tThe string version of the user's date EX: 2024/09/20\n\t * @param userFormat\t\tThe string version of the user's date format EX: yyyy/MM/dd\n\t * @returns {Date}\t\t\tA Date object with UTC date of the given date, at UTC 00:00:00\n\t */\n\tfunction _getDateObj(userDate, userFormat) {\n\t\tif (!userDate || !userFormat) {\n\t\t\treturn;\n\t\t}\n\t\tlet dateVals = _parseUserDate(userDate, userFormat);\n\t\treturn new Date(Date.UTC(dateVals.year, dateVals.month, dateVals.day, 0, 0, 0));\n\t}\n\n\t/**\n\t * Gets a String date from a Date object in the given format\n\t *\n\t * @param {Date}\tdate\t\tDate object to get the date from\n\t * @param {String}\tformat\t\tString date format (EX: 'yyyy-MM-dd')\n\t */\n\tfunction _formatDate(date, format) {\n\t\tconst map = {\n\t\t\t'yyyy': date.getFullYear(),\n\t\t\t'MM': String(date.getUTCMonth() + 1).padStart(2, '0'),\n\t\t\t'dd': String(date.getUTCDate()).padStart(2, '0')\n\t\t};\n\t\treturn format.replace(/yyyy|MM|dd/g, function(matched) {\n\t\t\treturn map[matched];\n\t\t});\n\t}\n\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c133aa8d5330121075a2ddeeff7b12cf","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_update_name":"sys_ux_client_script_include_c133aa8d5330121075a2ddeeff7b12cf","sys_updated_by":"maint","api_name":"sn_vsc.SCDateUtils","sys_created_on":"2024-09-20 22:06:55","name":"SCDateUtils","sys_name":"SCDateUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/a51d46e3f2014110366b10017c5ba675","value":"a51d46e3f2014110366b10017c5ba675"},"sys_created_by":"maint","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Passed\"\n    },\n    {\n        \"message\": \"Blocked\"\n    },\n    {\n        \"message\": \"Skipped\"\n    },\n    {\n        \"message\": \"Undefined\"\n    },\n    {\n        \"message\": \"Has role\"\n    },\n    {\n        \"message\": \"Has group\"\n    },\n    {\n        \"message\": \"Role not granted\"\n    },\n    {\n        \"message\": \"Group not granted\"\n    },\n    {\n        \"message\": \"User 1\"\n    },\n    {\n        \"message\": \"User 2\"\n    },\n    {\n        \"message\": \"Table\"\n    },\n    {\n        \"message\": \"Record\"\n    },\n    {\n        \"message\": \"Field\"\n    },\n    {\n        \"message\": \"Operation\"\n    },\n    {\n        \"message\": \"{0}\"\n    },\n    {\n        \"message\": \"ACL name\"\n    },\n    {\n        \"message\": \"Decision type\"\n    },\n    {\n        \"message\": \"Applies to condition\"\n    },\n    {\n        \"message\": \"Empty\"\n    },\n    {\n        \"message\": \"Required role(s)\"\n    },\n    {\n        \"message\": \"View\"\n    },\n    {\n        \"message\": \"Date executed\"\n    },\n    {\n        \"message\": \"Showing role hierarchy\"\n    },\n    {\n        \"message\": \"{0} operation\"\n    },\n    {\n        \"message\": \"Comparing {0} to {1}: access controls\"\n    },\n    {\n        \"message\": \"Overview\"\n    },\n    {\n        \"message\": \"You can refresh the page and try again\"\n    },\n    {\n        \"message\": \"The server encountered an internal error and couldn't process your request\"\n    },\n    {\n        \"message\": \"You can refresh the page and try again\"\n    }\n]","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2024-05-15 12:35:48","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\n    const PASS_ICON = 'circle_check_outline';\n    const FAIL_ICON = 'ban_fill';\n    const WARNING_ICON = 'diamond_exclamation_outline';\n\n    const URL_HOME = '/now/access-analyzer/home';\n    const URL_ALL_OPERATION = '/now/access-analyzer/compare-user/';\n    const URL_DEBUG_LOGS = '/now/access-analyzer/compare-user-debug-logs/';\n    const URL_ACL_DETAILS = '/now/access-analyzer/compare-user-acl-details/';\n\n    const pageParams = api ? api.context.props : null;\n    var props = api ? api.state.props || {} : null;\n\n    // -------------------------------------------------------------------------------- //\n\n    const EvalStatus = Object.freeze({\n\n        PASSED: {\n            label: 'Passed', icon: PASS_ICON, color: 'positive', value: 'PASSED'\n        },\n        PASSED_MAYBE: {\n            label: 'Passed', icon: WARNING_ICON, color: 'high', value: 'PASSED_MAYBE'\n        },\n        BLOCKED: {\n            label: 'Blocked', icon: FAIL_ICON, color: 'critical', value: 'BLOCKED'\n        },\n        BLOCKED_MAYBE: {\n            label: 'Blocked', icon: WARNING_ICON, color: 'high', value: 'BLOCKED_MAYBE'\n        },\n        SKIPPED: {\n            label: 'Skipped', icon: '', color: 'green-yellow', value: 'SKIPPED'\n        },\n        UNDEFINED: {\n            label: 'Undefined', icon: '', color: '', value: 'UNDEFINED'\n        },\n        NONE: {\n            label: '', icon: '', color: '', value: 'NONE'\n        },\n        HAS_ROLE: {\n            label: 'Has role', icon: PASS_ICON, color: 'positive', value: 'HAS_ROLE'\n        },\n        HAS_GROUP: {\n            label: 'Has group', icon: PASS_ICON, color: 'positive', value: 'HAS_GROUP'\n        },\n        ROLE_NOT_GRANTED: {\n            label: 'Role not granted', icon: FAIL_ICON, color: 'critical', value: 'ROLE_NOT_GRANTED'\n        },\n        GROUP_NOT_GRANTED: {\n            label: 'Group not granted', icon: FAIL_ICON, color: 'critical', value: 'GROUP_NOT_GRANTED'\n        },\n        get: (value) => {\n            if(isEmpty(value)) {\n                return EvalStatus.NONE;\n            }\n            value = value.toUpperCase();\n            return EvalStatus.hasOwnProperty(value) ? EvalStatus[value] : EvalStatus.NONE;\n        },\n        translate: () => {\n            var tms = api.state.translatedMessages;\n            helpers.translate(\"Passed\").then(v => {\n                tms.PASSED = v;\n                tms.PASSED_MAYBE = v;\n            });\n            helpers.translate(\"Blocked\").then(v => {\n                tms.BLOCKED = v;\n                tms.BLOCKED_MAYBE = v;\n            });\n            helpers.translate(\"Skipped\").then(v => tms.SKIPPED = v);\n            helpers.translate(\"Undefined\").then(v => tms.UNDEFINED = v);\n            helpers.translate(\"Has role\").then(v => tms.HAS_ROLE = v);\n            helpers.translate(\"Has group\").then(v => tms.HAS_GROUP = v);\n            helpers.translate(\"Role not granted\").then(v => tms.ROLE_NOT_GRANTED = v);\n            helpers.translate(\"Group not granted\").then(v => tms.GROUP_NOT_GRANTED = v);\n        },\n        getTranslatedText: (status) => {\n            return api.state.translatedMessages[status.value];\n        }\n    });\n    \n    // -------------------------------------------------------------------------------- //\n    function setRequestInfo(request) {\n        Promise.all([\n            helpers.translate(\"User 1\"),\n            helpers.translate(\"User 2\"),\n            helpers.translate(\"Table\"),\n            helpers.translate(\"Record\"),\n            helpers.translate(\"Field\"),\n            helpers.translate(\"Operation\"),\n            helpers.translate(\"{0}\", request.operation),\n            helpers.translate(\"ACL name\"),\n            helpers.translate(\"Decision type\"),\n            helpers.translate(\"{0}\", request.decisionType),\n            helpers.translate(\"Applies to condition\"),\n            helpers.translate(\"{0}\", request.appliesToCondition),\n            helpers.translate(\"Empty\"),\n            helpers.translate(\"{0}\", request.empty),\n            helpers.translate(\"Required role(s)\"),\n            helpers.translate(\"View\"),\n            helpers.translate(\"Date executed\")\n        ]).then(labels => {\n            _setRequestInfo(request, {\n                user1: labels[0],\n                user2: labels[1],\n                table: labels[2],\n                record: labels[3],\n                field: labels[4],\n                operationLabel: labels[5],\n                operationValue: labels[6],\n                aclName: labels[7],\n                decisionTypeLabel: labels[8],\n                decisionTypeValue: labels[9],\n                appliesToConditionLabel: labels[10],\n                appliesToConditionValue: labels[11],\n                emptyLabel: labels[12],\n                emptyValue: labels[13],\n                requiredRoles: labels[14],\n                view: labels[15],\n                dateExecuted: labels[16],\n            })\n        })\n    }\n    \n    // -------------------------------------------------------------------------------- //\n\n    const _setRequestInfo = (request, label) => {\n\n        var req = [];\n\n        addRequestInfo(req, label.user1, request.baseUser.name, navTo(\"sys_user\", request.baseUser.id));\n        addRequestInfo(req, label.user2, request.modelUser.name, navTo(\"sys_user\", request.modelUser.id));\n\n        if (request.resourceType) {\n            addRequestInfo(req, label.table, request.targetTableLabel + ' [' + request.targetTableName + ']');\n            addRequestInfo(req, label.record, request.targetRecordLabel);\n            addRequestInfo(req, label.field, request.targetFieldLabel);\n        }\n\n        if (request.operation) {\n            addRequestInfo(req, label.operationLabel, label.operationValue);\n        }\n\n        if (request.aclId) {\n            addRequestInfo(req, label.aclName, request.aclName, navTo(\"sys_security_acl\", request.aclId));\n        }\n\n        if(request.decisionType) {\n             addRequestInfo(req, label.decisionTypeLabel, label.decisionTypeValue);\n        }\n\n        if(request.appliesToCondition) {\n             addRequestInfo(req, label.appliesToConditionLabel, label.appliesToConditionValue);\n        }\n\n        if(request.empty) {\n             addRequestInfo(req, label.emptyLabel, label.emptyValue);\n        }\n\n        if (request.hasOwnProperty(\"requiredRoles\")) {\n            addRequestInfo(req, label.requiredRoles, label.view, \"javascript:void(0);\", false, \"viewRoles\", false);\n        }\n\n        addRequestInfo(req, label.dateExecuted, request.lastRun);\n\n        req[0].userId = request.baseUser.id;\n        req[1].userId = request.modelUser.id\n\n        api.setState('request', req);\n    }\n\n\n    function navTo(uri, sysId) {\n        return \"nav_to.do?uri=\" + uri + \".do?sys_id=\" + sysId;\n    }\n\n    function navToList(table, params) {\n        return \"nav_to.do?uri=\" + table + \"_list.do?\".concat(encodeURIComponent(params));\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    function addRequestInfo(req, label, value, href, openNewWindow = true, action=\"\", showIcon = true) {\n        if (isEmpty(value)) {\n            return;\n        }\n\n        if (href == null) {\n            req.push({\n                label: label,\n                value: {\n                    type: \"string\",\n                    value: value\n                }\n            });\n        } else {\n            req.push({\n                label: label,\n                value: {\n                    href: href,\n                    iconEnd: showIcon ? \"open-link-right-outline\" : \"\",\n                    opensWindow: openNewWindow,\n                    showIcon: showIcon,\n                    type: \"text-link\",\n                    underlined: false,\n                    label: value,\n                    action: action,\n                    variant: \"primary\"\n                }\n            });\n        }\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    const updateBreadcrumb = (request, labels) => {\n        var hrefs = [\n            URL_HOME,\n            URL_ALL_OPERATION + request.baseUser.requestId + \"/\" + request.modelUser.requestId,\n            URL_DEBUG_LOGS + pageParams.baseUserResultId + \"/\" + pageParams.modelUserResultId,\n            URL_ACL_DETAILS + pageParams.baseUserResultId + \"/\" + pageParams.modelUserResultId + '/' +  //\n            (pageParams.baseUserDebugLogId || 0) + '/' + (pageParams.modelUserDebugLogId || 0),\n            null\n        ]\n        api.setState('breadcrumbItems', labels.map((v, i) => ({ label: v, href: hrefs[i] })));\n    }\n\n\n    // -------------------------------------------------------------------------------- //\n    const _mapRequest = (request) => {\n        const isResultTable = request.baseUser.access_analyzer_request;\n\n        var req = isResultTable ? request.baseUser.access_analyzer_request._reference : request.baseUser;\n        var obj = {\n            resourceType: req.resource_type.displayValue,\n            targetTableName: req.target_table.value,\n            targetTableLabel: req.target_table.displayValue,\n            targetRecordId: req.target_record.value,\n            targetRecordLabel: _getTargetRecordLabel(req.target_record.displayValue),\n            targetFieldName: req.target_field.value,\n            targetFieldLabel: req.target_field.displayValue,\n            lastRun: req.last_run.displayValue,\n            baseUser: {\n                id: req.user.value,\n                name: req.user.displayValue,\n                requestId: req.sys_id.value\n            }\n        };\n        req = isResultTable ? request.modelUser.access_analyzer_request._reference : request.modelUser;\n        obj.modelUser = {\n            id: req.user.value,\n            name: req.user.displayValue,\n            requestId: req.sys_id.value\n        }\n        return obj;\n    }\n\n    function _getTargetRecordLabel(label) {\n        // targetRecord is a document id field and is of format Incident: INC0000004, Extract only the record value for display\n        return isEmpty(label) ? \"\" : label.replace(/(.*):\\s*/, \"\");\n    }\n    // -------------------------------------------------------------------------------- //\n\n    function _mapRequestInfo({ request, result, debugLog }) {\n\n        let req = getUserObject(request, row => row._row_data.uniqueValue == api.context.props.baseUserRequestId ? \"baseUser\" : \"modelUser\");\n        let res = getUserObject(result, row => row._row_data.uniqueValue == api.context.props.baseUserResultId ? \"baseUser\" : \"modelUser\");\n        let log = getUserObject(debugLog, row => row._row_data.uniqueValue == api.context.props.baseUserDebugLogId ? \"baseUser\" : \"modelUser\");\n\n        var reqMap = _mapRequest(request != undefined ? req : res);\n\n        if (result != undefined) {\n            reqMap.operation = res.baseUser.operation.displayValue;\n        }\n\n        if (debugLog != undefined) {\n            log = log.baseUser || log.modelUser;\n            reqMap.aclId = log.record_ref.value;\n            reqMap.aclName = log.record_ref.displayValue;\n            reqMap.decisionType = log.decision_type.displayValue;\n            reqMap.appliesToCondition = log.applies_to_condition_result.displayValue;\n            reqMap.empty = log.empty.displayValue;\n            reqMap.requiredRoles = log.roles ? log.roles.value : \"\";\n        }\n\n        return reqMap;\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    const setHeader = ({ request, result, debugLog, screenIndex }) => {\n        if (isEmpty(request) && isEmpty(result) && isEmpty(debugLog)) {\n            return;\n        }\n        var reqInfo = _mapRequestInfo({ request, result, debugLog });\n        props.requestInfo = reqInfo;\n        setRequestInfo(reqInfo);\n        _translateTitle(reqInfo, screenIndex).then(labels => {\n            updateBreadcrumb(reqInfo, labels);\n            _setTitle(labels[labels.length - 1]);\n        });\n        return reqInfo;\n    }\n\n    // -------------------------------------------------------------------------------- //\n    function _setTitle(title) {\n        props.title = title;\n        api.setState(\"props\", { ...props });\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    function _translateTitle(request, screen) {\n        let promises = [];\n        switch (screen) {\n            case 4:\n                promises.unshift(helpers.translate(\"Showing role hierarchy\"));\n            case 3:\n                promises.unshift(request.aclName);\n            case 2:\n                promises.unshift(helpers.translate(\"{0} operation\", request.operation.charAt(0).toUpperCase() + request.operation.slice(1)));\n            case 1:\n                promises.unshift(helpers.translate(\"Comparing {0} to {1}: access controls\", request.baseUser.name, request.modelUser.name));\n        }\n        promises.unshift(helpers.translate(\"Overview\"));\n        return Promise.all(promises);\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    const isEmpty = (obj) => obj == undefined || obj == null || obj == '';\n\n    // -------------------------------------------------------------------------------- //\n    const getUserObject = (array, callback) => {\n        var obj = { baseUser: null, modelUser: null };\n        if (isEmpty(array)) {\n            return obj;\n        }\n        array.forEach(row => obj[callback(row)] = row);\n        return obj;\n    }\n\n    // -------------------------------------------------------------------------------- //\n    const EmptyState = {\n\n        show: ({ heading, content = \"\", illustration = \"no-data\", actions }, name = \"emptyState\") => {\n            var stat = {...api.state[name]};\n            var emptyState = stat.emptyState ? stat.emptyState : stat;\n            emptyState.show = true;\n            emptyState.heading.label = heading;\n            emptyState.content = content;\n            emptyState.illustration = illustration;\n            if (actions != undefined) {\n                emptyState.actions = actions;\n            }\n            api.setState(name, ({currentValue}) => {\n                if(stat.emptyState){\n                    return {...currentValue, emptyState}\n                }\n                return {...currentValue, ...emptyState}\n            });\n        },\n\n        // -------------------------------------------------------------------------------- //\n        hide: (name = \"emptyState\") => {\n            var stat = {...api.state[name]};\n            var emptyState = stat.emptyState ? stat.emptyState : stat;\n            emptyState.show = false;\n            api.setState(name, stat)\n        },\n\n        // -------------------------------------------------------------------------------- //\n        showNoDataMessage: (name = \"emptyState\") => {\n            _loadAndFill(api.state[name].messages.noData, [\n                helpers.translate(\"Sorry, we couldn't find any results\"),\n                helpers.translate(\"You can refresh the page and try again\")\n            ])\n                .then(obj => EmptyState.show(obj, name));\n        },\n\n        // -------------------------------------------------------------------------------- //\n        showServerErrorMessage: (name = \"emptyState\") => {\n            _loadAndFill(api.state[name].messages.serverError, [\n                helpers.translate(\"The server encountered an internal error and couldn't process your request\"),\n                helpers.translate(\"You can refresh the page and try again\")\n            ])\n                .then(obj => EmptyState.show(obj, name));\n        }\n\n    }\n\n\n    // -------------------------------------------------------------------------------- //\n    function _loadAndFill(obj, arr) {\n        return new Promise(res => {\n            if (!isEmpty(obj.heading)) {\n                res(obj);\n                return;\n            }\n            Promise.all(arr).then(values => {\n                obj.heading = values[0];\n                obj.content = values[1];\n                res(obj);\n            })\n        });\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    function navigate({ route, fields, params, redirect = false, passiveNavigation, targetRoute, external, title }) {\n        external = external ? { url: external } : null;\n        helpers.navigate.to(route, fields, params, redirect, passiveNavigation, targetRoute, external, title);\n    }\n\n    // -------------------------------------------------------------------------------- //\n\n    function showServerError() {\n        props.loadingState = false;\n        EmptyState.showServerErrorMessage();\n    }\n\n    return {\n        EvalStatus,\n        props,\n        setHeader,\n        pageParams,\n        isEmpty,\n        getUserObject,\n        navTo,\n        navToList,\n        setRequestInfo,\n        EmptyState,\n        navigate,\n        showServerError,\n        addRequestInfo\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c408debe430031102c5119405bb8f2b0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_c408debe430031102c5119405bb8f2b0","sys_updated_by":"admin","api_name":"sn_access_analyzer.UserComparisonUtil","sys_created_on":"2023-07-19 08:24:15","name":"UserComparisonUtil","sys_name":"UserComparisonUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"just now\"\n    },\n    {\n        \"message\": \"almost now\"\n    },\n    {\n        \"message\": \"about a minute ago\"\n    },\n    {\n        \"message\": \"about a minute from now\"\n    },\n    {\n        \"message\": \"about an hour ago\"\n    },\n    {\n        \"message\": \"about an hour from now\"\n    },\n    {\n        \"message\": \"about a day ago\"\n    },\n    {\n        \"message\": \"about a day from now\"\n    },\n    {\n        \"message\": \"about a month ago\"\n    },\n    {\n        \"message\": \"about a month from now\"\n    },\n    {\n        \"message\": \"about a year ago\"\n    },\n    {\n        \"message\": \"about a year from now\"\n    },\n    {\n        \"message\": \"{0} minutes ago\"\n    },\n    {\n        \"message\": \"{0} minutes from now\"\n    },\n    {\n        \"message\": \"{0} hours ago\"\n    },\n    {\n        \"message\": \"{0} hours from now\"\n    },\n    {\n        \"message\": \"{0} days ago\"\n    },\n    {\n        \"message\": \"{0} days from now\"\n    },\n    {\n        \"message\": \"{0} months ago\"\n    },\n    {\n        \"message\": \"{0} months from now\"\n    },\n    {\n        \"message\": \"{0} years ago\"\n    },\n    {\n        \"message\": \"{0} years from now\"\n    },\n    {\n        \"message\": \"Unknown\"\n    },\n    {\n        \"message\": \"Sunday\"\n    },\n    {\n        \"message\": \"Monday\"\n    },\n    {\n        \"message\": \"Tuesday\"\n    },\n    {\n        \"message\": \"Wednesday\"\n    },\n    {\n        \"message\": \"Thursday\"\n    },\n    {\n        \"message\": \"Friday\"\n    },\n    {\n        \"message\": \"Saturday\"\n    },\n    {\n        \"message\": \"today\"\n    },\n    {\n        \"message\": \"yesterday\"\n    },\n    {\n        \"message\": \"tomorrow\"\n    },\n    {\n        \"message\": \"this {0}\"\n    },\n    {\n        \"message\": \"last {0}\"\n    },\n    {\n        \"message\": \"next {0}\"\n    },\n    {\n        \"message\": \"{0} at {1}\"\n    }\n]","access":"public","sys_mod_count":"56","includes":"","sys_updated_on":"2023-08-07 10:33:09","sys_tags":"","script":"function include({ imports }) {\n\tconst { NowDateTime } = imports['sn_uxf.core_libraries']();\n\n\tconst DEFAULT_DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\tconst DEFAULT_SHORT_DATE_FORMAT = 'DD-MMM-YY';\n\tconst DEFAULT_TIME_FORMAT = 'HH:mm';\n\n\t/**\n\t * NowDateTime format tokens have some differences with those in the platform\n\t * so this function replaces the more commonly used ones\n\t * e.g. 'y' in a platform date/time format with 'Y' for NowDateTime\n\t */\n\tconst _parseFormat = function (format) {\n\t\tif (!format)\n\t\t\treturn DEFAULT_DATE_TIME_FORMAT;\n\n\t\tconst tokenReplacements = {\n\t\t\ty: 'Y',\n\t\t\td: 'D',\n\t\t\tS: 'SSS'\n\t\t};\n\t\tconst regEx = new RegExp(Object.keys(tokenReplacements).join('|'), 'g');\n\n\t\tformat = format.replace(regEx, token => {\n\t\t\treturn tokenReplacements[token];\n\t\t});\n\n\t\treturn format;\n\t};\n\n\t/**\n\t * Returns a NowDateTime object\n\t *\n\t * @param {String} [dateTime]           the date/time to return a NowDateTime object for\n\t * @param {String} [dateTimeFormat]     the format of the provided date/tine e.g. DD/MM/YY hh:mm a\n\t * @param {String} [sourceTimezone]     the timezone of the provided date/time e.g. US/Pacific\n\t * @param {String} [convertToTimezone]  the timezone to convert the returned NowDateTime object to e.g. Europe/London\n\t * \n\t * @return {Object} a NowDateTime object\n\t */\n\tconst getNowDateTime = function (\n\t\tdateTime,\n\t\tdateTimeFormat,\n\t\tsourceTimezone,\n\t\tconvertToTimezone\n\t) {\n\t\tif (!dateTime)\n\t\t\treturn NowDateTime();\n\n\t\tlet nowDateTime = dateTimeFormat\n\t\t\t? NowDateTime(dateTime, _parseFormat(dateTimeFormat))\n\t\t\t: NowDateTime(dateTime);\n\n\t\tif (sourceTimezone)\n\t\t\tnowDateTime = nowDateTime.tz(sourceTimezone, true);\n\n\t\treturn convertToTimezone ? nowDateTime.tz(convertToTimezone) : nowDateTime;\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative time format\n\t * e.g. about a minute ago, 3 days from now\n\t *\n\t * @param {Object} helpers  the helpers object that is made available to UIB client scripts\n\t * @param {Object} date     the NowDateTime object to be returned in relative time format\n\t * \n\t * @return {String} the relative time format of the supplied NowDateTime object\n\t */\n\tconst getRelativeTimeAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime()\n\t) {\n\t\tconst dateFromNow = date.fromNow();\n\t\tconst isPast = dateFromNow.endsWith('ago');\n\t\tconst timeRange = isPast\n\t\t\t? dateFromNow.replace(/ago$/, '').trim()\n\t\t\t: dateFromNow.replace(/^in/, '').trim();\n\n\t\tswitch (timeRange) {\n\t\t\tcase 'a few seconds':\n\t\t\t\t// range 0-44 seconds\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('just now')\n\t\t\t\t\t: await helpers.translate('almost now');\n\t\t\tcase 'a minute':\n\t\t\t\t// range 45-89 seconds\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a minute ago')\n\t\t\t\t\t: await helpers.translate('about a minute from now');\n\t\t\tcase 'an hour':\n\t\t\t\t// 45 to 89 minutes\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about an hour ago')\n\t\t\t\t\t: await helpers.translate('about an hour from now');\n\t\t\tcase 'a day':\n\t\t\t\t// 22 to 35 hours\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a day ago')\n\t\t\t\t\t: await helpers.translate('about a day from now');\n\t\t\tcase 'a month':\n\t\t\t\t// 26 to 45 days\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a month ago')\n\t\t\t\t\t: await helpers.translate('about a month from now');\n\t\t\tcase 'a year':\n\t\t\t\t// 11 months to 17 months\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('about a year ago')\n\t\t\t\t\t: await helpers.translate('about a year from now');\n\t\t\t// plural value returned below\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// in the past (eg. 2 hours ago, 5 days ago, 20 minutes ago, etc.)\n\t\t// in the future (eg. in 2 hours, in 5 days, in 20 minutes, etc.)\n\t\tconst splitTime = dateFromNow.split(' ');\n\t\tconst timeType = isPast ? splitTime[1] : splitTime[2];\n\t\tconst timeCount = isPast ? splitTime[0] : splitTime[1];\n\n\t\tswitch (timeType) {\n\t\t\tcase 'minutes':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} minutes ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} minutes from now', timeCount);\n\t\t\tcase 'hours':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} hours ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} hours from now', timeCount);\n\t\t\tcase 'days':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} days ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} days from now', timeCount);\n\t\t\tcase 'months':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} months ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} months from now', timeCount);\n\t\t\tcase 'years':\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('{0} years ago', timeCount)\n\t\t\t\t\t: await helpers.translate('{0} years from now', timeCount);\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t\t// should never get here\n\t\treturn await helpers.translate('Unknown');\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today, yesterday, this Friday\n\t *\n\t * @param {Object}  helpers                     the helpers object that is made available to UIB client scripts\n\t * @param {Object}  date                        the NowDateTime object to be returned in relative day format\n\t * @param {Integer} [relativeFormatDayLimit]    number indicating the number of relative days which then triggers\n\t *                                              this function to return a date string instead\n\t * @param {String}  [dateFormat]                the format of the date string to be returned if relativeFormatDayLimit is exceeded\n\t *                                              e.g. YYYY-MM-DD\n\t * \n\t * @return {String} the relative day format of the supplied NowDateTime object\n\t */\n\tconst getRelativeDayAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime(),\n\t\trelativeFormatDayLimit,\n\t\tdateFormat = DEFAULT_SHORT_DATE_FORMAT\n\t) {\n\t\trelativeFormatDayLimit = parseInt(relativeFormatDayLimit);\n\n\t\tconst now = getNowDateTime();\n\t\t/*\n\t\t  gets a new NowDateTime object for now but bases it on an existing NowDateTime\n\t\t  this is needed to maintain the correct timezone in the new object as you cannot\n\t\t  get the timezone out of a NowDateTime\n\t\t*/\n\t\tconst nowInTimezone = date.add(now.valueOf() - date.valueOf(), 'millisecond');\n\t\tconst startOfToday = nowInTimezone.startOf('day');\n\t\tconst startOfDate = date.startOf('day');\n\t\tconst dayDiff = Math.abs(startOfDate.diff(startOfToday, 'days'));\n\t\tconst weekDayOfDate = date.format('d');\n\t\tconst startOfWeekNow = nowInTimezone.startOf('week').add(1, 'day'); // adding 1 day to account for first day of week defaulting to Sunday\n\t\tconst endOfWeekNow = nowInTimezone.endOf('week').add(1, 'day'); // adding 1 day to account for first day of week defaulting to Sunday\n\n\t\t/*\n\t\t  if a 'relativeFormatDayLimit' has been passed in this number is used to check the difference in days \n\t\t  and if it exceeds this limit then just return a formatted date/time value instead\n\t\t*/\n\t\tif (!isNaN(relativeFormatDayLimit) && dayDiff > relativeFormatDayLimit)\n\t\t\treturn getFormattedDateText(date, null, dateFormat);\n\n\t\tconst isPast = date.isBefore(now);\n\t\tconst isThisWeek = date.valueOf() >= startOfWeekNow.valueOf() && date.valueOf() <= endOfWeekNow.valueOf();\n\t\tconst dayNames = [\n\t\t\tawait helpers.translate('Sunday'),\n\t\t\tawait helpers.translate('Monday'),\n\t\t\tawait helpers.translate('Tuesday'),\n\t\t\tawait helpers.translate('Wednesday'),\n\t\t\tawait helpers.translate('Thursday'),\n\t\t\tawait helpers.translate('Friday'),\n\t\t\tawait helpers.translate('Saturday')\n\t\t];\n\n\t\t// return text based on the number of days difference between the date passed in and now\n\t\tswitch (true) {\n\t\t\tcase dayDiff === 0:\n\t\t\t\treturn await helpers.translate('today');\n\t\t\tcase dayDiff === 1:\n\t\t\t\treturn isPast\n\t\t\t\t\t? await helpers.translate('yesterday')\n\t\t\t\t\t: await helpers.translate('tomorrow');\n\t\t\tcase dayDiff < 8:\n\t\t\t\treturn isThisWeek ? await helpers.translate('this {0}', dayNames[weekDayOfDate]) :\n\t\t\t\t\t(isPast ? await helpers.translate('last {0}', dayNames[weekDayOfDate])\n\t\t\t\t\t\t: await helpers.translate('next {0}', dayNames[weekDayOfDate]));\n\t\t\tdefault:\n\t\t\t\treturn await getRelativeTimeAsync(helpers, date);\n\t\t}\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today at 5pm, next Friday at 17:21\n\t *\n\t * @param {Object}  helpers                     the helpers object that is made available to UIB client scripts\n\t * @param {Object}  date                        the NowDateTime object to be returned in relative day format\n\t * @param {String}  [timeFormat]                the format of the time string to be returned e.g. hh:mm a\n\t * @param {Integer} [relativeFormatDayLimit]    number indicating the number of relative days which then triggers\n\t *                                              this function to return a date string instead\n\t * @param {String}  [dateFormat]                the format of the date string to be returned if relativeFormatDayLimit is exceeded\n\t *                                              e.g. YYYY-MM-DD\n\t * \n\t * @return {String} the relative day format with time of the supplied NowDateTime object\n\t */\n\tconst getRelativeDayAndTimeAsync = async function (\n\t\thelpers,\n\t\tdate = getNowDateTime(),\n\t\ttimeFormat = DEFAULT_TIME_FORMAT,\n\t\trelativeFormatDayLimit,\n\t\tdateFormat\n\t) {\n\t\t// get a relative day based text for the date e.g. today, last Friday, 10 days from now\n\t\tlet dayText = await getRelativeDayAsync(\n\t\t\thelpers,\n\t\t\tdate,\n\t\t\trelativeFormatDayLimit,\n\t\t\tdateFormat\n\t\t);\n\n\t\t// get just the time portion of the NowDateTime object based on the format passed in\n\t\ttimeFormat = _parseFormat(timeFormat);\n\t\tlet timeText = date.format(timeFormat);\n\n\t\treturn await helpers.translate('{0} at {1}', dayText, timeText);\n\t};\n\n\t/**\n\t * Returns a string representation of the supplied NowDateTime object in relative day format\n\t * e.g. today at 5pm, next Friday at 17:21\n\t *\n\t * @param {Object} date         the NowDateTime object to be returned as a string in the specified format\n\t * @param {String} [timeZone]   the timezone to return the date/time in e.g. US/Pacific\n\t * @param {String} [format]     the format to return the date/time in e.g. DD/MM/YY hh:mm a\n\t * \n\t * @return {String} the string format with appropriate timezone conversion of the supplied NowDateTime object\n\t */\n\tconst getFormattedDateText = function (\n\t\tdate = getNowDateTime(),\n\t\ttimeZone,\n\t\tdateTimeFormat\n\t) {\n\t\tdateTimeFormat = _parseFormat(dateTimeFormat);\n\n\t\treturn timeZone ? date.tz(timeZone).format(dateTimeFormat) : date.format(dateTimeFormat);\n\t};\n\n\treturn {\n\t\tgetRelativeTimeAsync,\n\t\tgetRelativeDayAsync,\n\t\tgetRelativeDayAndTimeAsync,\n\t\tgetFormattedDateText,\n\t\tgetNowDateTime\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c6a4ead553361110c85addeeff7b1231","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_c6a4ead553361110c85addeeff7b1231","sys_updated_by":"admin","api_name":"sn_sow.SOWDateTimeHelper","sys_created_on":"2022-10-26 18:00:01","name":"SOWDateTimeHelper","sys_name":"SOWDateTimeHelper","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Task approved successfully.\"\n    },\n    {\n        \"message\": \"Task cancelled successfully.\"\n    },\n    {\n        \"message\": \"Task submitted successfully.\"\n    },\n    {\n        \"message\": \"Policy published successfully.\"\n    },\n    {\n        \"message\": \"Exclusion list saved successfully.\"\n    },\n    {\n        \"message\": \"Updating the exclusion list will take some time. The list can be reviewed after a few minutes.\"\n    },\n    {\n        \"message\": \"Policy saved successfully.\"\n    },\n    {\n        \"message\": \"Settings saved successfully.\"\n    },\n    {\n        \"message\": \"Settings reset to default successfully.\"\n    },\n    {\n        \"message\": \"Published policies cannot be edited. Deactivate the policy to edit it.\"\n    },\n    {\n        \"message\": \"Retirement definition successfully created.\"\n    },\n    {\n        \"message\": \"Retirement definition successfully updated.\"\n    },\n    {\n        \"message\": \"Draft policies were deleted successfully.\"\n    },\n    {\n        \"message\": \"The draft policies you selected have been marked for deletion. These will be deleted in the background and take some time to complete.\"\n    },\n    {\n        \"message\": \"De-activated policies were deleted successfully.\"\n    },\n    {\n        \"message\": \"The de-activated policies you selected have been marked for deletion. These will be deleted in the background and take some time to complete.\"\n    }\n]","access":"package_private","sys_mod_count":"29","includes":"","sys_updated_on":"2024-06-14 21:35:18","sys_tags":"","script":"function include({\n    imports\n}) {\n    const POLICY_NOTIFICATION_MSG_CODES = {\n        POLICY_PUBLISH_SUCCESS: 'POLICY_PUBLISH_SUCCESS',\n        POLICY_SAVE_SUCCESS: 'POLICY_SAVE_SUCCESS',\n        PUBLISH_POLICY_READ_ONLY: 'PUBLISH_POLICY_READ_ONLY',\n        DELETE_DRAFT_POLICIES_SUCCESS: 'DELETE_DRAFT_POLICIES_SUCCESS',\n        DELETE_DRAFT_POLICIES_ACTION_SCHEDULED: 'DELETE_DRAFT_POLICIES_ACTION_SCHEDULED',\n        DELETE_DEACTIVATED_POLICIES_SUCCESS: 'DELETE_DEACTIVATED_POLICIES_SUCCESS',\n        DELETE_DEACTIVATED_POLICIES_ACTION_SCHEDULED: 'DELETE_DEACTIVATED_POLICIES_ACTION_SCHEDULED'\n    };\n    const TASK_NOTIFICATION_MSG_CODES = {\n        TASK_APPR_SUCCESS: 'TASK_APPR_SUCCESS',\n        TASK_CANCEL_SUCCESS: 'TASK_CANCEL_SUCCESS',\n        TASK_SUBMIT_SUCCESS: 'TASK_SUBMIT_SUCCESS'\n    };\n    const EXCLUSION_NOTIFICATION_MSG_CODES = {\n        SAVE_EXCLUSION_LIST_SUCCESS: 'SAVE_EXCLUSION_LIST_SUCCESS',\n        SAVE_EXCLUSION_LIST_QUEUED: 'SAVE_EXCLUSION_LIST_QUEUED'\n    };\n    const SETTINGS_MSG_CODES = {\n        SAVE_SETTINGS_SUCCESS: 'SAVE_SETTINGS_SUCCESS',\n        RESET_TO_DEFAULT_SETTINGS_SUCCESS: 'RESET_TO_DEFAULT_SETTINGS_SUCCESS'\n    };\n    const RETIREMENT_DEF_MSG_CODES = {\n        CREATE_DEF_SUCCESS: 'CREATE_DEF_SUCCESS',\n        UPDATE_DEF_SUCCESS: 'UPDATE_DEF_SUCCESS'\n    };\n\n    const _getNotificationMsg = async (helpers, code) => {\n        switch (code) {\n            case TASK_NOTIFICATION_MSG_CODES.TASK_APPR_SUCCESS:\n                return await helpers.translate(\"Task approved successfully.\");\n            case TASK_NOTIFICATION_MSG_CODES.TASK_CANCEL_SUCCESS:\n               return await helpers.translate(\"Task cancelled successfully.\");\n            case TASK_NOTIFICATION_MSG_CODES.TASK_SUBMIT_SUCCESS:\n               return await helpers.translate(\"Task submitted successfully.\");\n           case POLICY_NOTIFICATION_MSG_CODES.POLICY_PUBLISH_SUCCESS:\n               return await helpers.translate(\"Policy published successfully.\");\n           case EXCLUSION_NOTIFICATION_MSG_CODES.SAVE_EXCLUSION_LIST_SUCCESS:\n               return await helpers.translate(\"Exclusion list saved successfully.\");\n            case EXCLUSION_NOTIFICATION_MSG_CODES.SAVE_EXCLUSION_LIST_QUEUED:\n                return await helpers.translate(\"Updating the exclusion list will take some time. The list can be reviewed after a few minutes.\")\n            case POLICY_NOTIFICATION_MSG_CODES.POLICY_SAVE_SUCCESS:\n               return await helpers.translate(\"Policy saved successfully.\");\n           case SETTINGS_MSG_CODES.SAVE_SETTINGS_SUCCESS:\n               return await helpers.translate(\"Settings saved successfully.\");\n           case SETTINGS_MSG_CODES.RESET_TO_DEFAULT_SETTINGS_SUCCESS:\n               return await helpers.translate(\"Settings reset to default successfully.\");\n           case POLICY_NOTIFICATION_MSG_CODES.PUBLISH_POLICY_READ_ONLY:\n                return await helpers.translate(\"Published policies cannot be edited. Deactivate the policy to edit it.\");\n           case RETIREMENT_DEF_MSG_CODES.CREATE_DEF_SUCCESS:\n               return await helpers.translate(\"Retirement definition successfully created.\");\n           case RETIREMENT_DEF_MSG_CODES.UPDATE_DEF_SUCCESS:\n               return await helpers.translate(\"Retirement definition successfully updated.\");\n           case POLICY_NOTIFICATION_MSG_CODES.DELETE_DRAFT_POLICIES_SUCCESS:\n                return await helpers.translate(\"Draft policies were deleted successfully.\");\n           case POLICY_NOTIFICATION_MSG_CODES.DELETE_DRAFT_POLICIES_ACTION_SCHEDULED:\n                return await helpers.translate(\"The draft policies you selected have been marked for deletion. These will be deleted in the background and take some time to complete.\");\n           case POLICY_NOTIFICATION_MSG_CODES.DELETE_DEACTIVATED_POLICIES_SUCCESS:\n                return await helpers.translate(\"De-activated policies were deleted successfully.\");\n           case POLICY_NOTIFICATION_MSG_CODES.DELETE_DEACTIVATED_POLICIES_ACTION_SCHEDULED:\n                return await helpers.translate(\"The de-activated policies you selected have been marked for deletion. These will be deleted in the background and take some time to complete.\");\n        }\n    };\n\n    return {\n        POLICY_NOTIFICATION_MSG_CODES,\n        TASK_NOTIFICATION_MSG_CODES,\n        EXCLUSION_NOTIFICATION_MSG_CODES,\n        SETTINGS_MSG_CODES,\n        RETIREMENT_DEF_MSG_CODES,\n        getNotificationMsg: _getNotificationMsg\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c73f66b553a5b110fdadddeeff7b123a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_c73f66b553a5b110fdadddeeff7b123a","sys_updated_by":"admin","api_name":"sn_cmdb_ws.DataManagerNotificationUtil","sys_created_on":"2023-09-28 21:05:52","name":"DataManagerNotificationUtil","sys_name":"DataManagerNotificationUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"1","includes":"3fd8e21e533631108f2bddeeff7b1200","sys_updated_on":"2023-12-01 13:13:32","sys_tags":"","script":"function include({\n    imports\n}) {\n    let onCallShiftCreationUtilsSNC = imports['sn_uib_on_call.OnCallShiftCreationUtilsSNC']();\n    class OnCallShiftCreationUtils extends onCallShiftCreationUtilsSNC {\n    }\n    return OnCallShiftCreationUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c7786eda533631108f2bddeeff7b12ce","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_c7786eda533631108f2bddeeff7b12ce","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallShiftCreationUtils","sys_created_on":"2023-12-01 13:13:12","name":"OnCallShiftCreationUtils","sys_name":"OnCallShiftCreationUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on weekends.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on weekends.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0} and {1}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1} and {2}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0}, {1}, and {2}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1}, {2}, and {3}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0}, {1}, {2}, and {3}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1}, {2}, {3}, and {4}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on weekdays.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on weekdays.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0}, {1}, {2}, {3}, and {4}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1}, {2}, {3}, {4}, and {5}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every week on {0}, {1}, {2}, {3}, {4}, and {5}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on {1}, {2}, {3}, {4}, {5}, and {6}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every day.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} weeks on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every month on the {0} day.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} months on the {1} day.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every month on the last day of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} months on the last day of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every month on the last {0} of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} months on the last {1} of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every month on the {0} {1} of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} months on the {1} {2} of the month.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every year on {0} {1}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} years on {1} {2}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every year on the {0} {1} in {2}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} years on the {1} {2} in {3}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Error: No repeat type specified.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Error: \\\"Repeat every\\\" must be specified and between 1 and {0}.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats every {0} days.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats weekly on weekdays.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats weekly on weekends.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats weekly on Monday, Wednesday, and Friday.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Repeats weekly on Tuesday and Thursday.\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"first\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"second\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"third\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"fourth\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"fifth\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Sunday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Monday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Tuesday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Wednesday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Thursday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Friday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Saturday\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"January\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"February\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"March\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"April\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"May\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"June\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"July\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"August\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"September\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"October\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"November\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"December\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"1st\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"2nd\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"3rd\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"4th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"5th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"6th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"7th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"8th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"9th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"10th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"11th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"12th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"13th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"14th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"15th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"16th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"17th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"18th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"19th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"20th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"21st\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"22nd\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"23rd\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"24th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"25th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"26th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"27th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"28th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"29th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"30th\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"31st\",\n    \"comment\": \"\"\n  }\n]","access":"public","sys_mod_count":"36","includes":"","sys_updated_on":"2023-04-19 23:49:42","sys_tags":"","script":"function include({ imports }) {\n\t/**\n\t * Generates a readable description of the repeat type.\n\t *\n\t * @param  {Object} input - The repeat information object.\n\t * @param  {string} input.repeatType - The repeat type ID.\n\t * @param  {number} input.repeatCount - Number of repeats, where applicable.\n\t * @param  {string} input.startDate - Start datetime of the repeat in string format.\n\t * @param  {Object} input.daysOfWeek - State object keeping track of selected\n\t * \t\t\t\t\t\t\t\t\t   days of the week for weekly repeat.\n\t * @param  {string} input.monthlyType - Monthly repeat type ID.\n\t * @param  {string} input.yearlyType - Yearly repeat type ID.\n\t * @param  {string} input.month - Month for yearly floating repeat.\n\t * \t\t\t\t\t\t\t\t  (\"1\" = Jan, \"12\" = Dec)\n\t * @param  {string} input.floatWeek - Floating week for yearly repeat.\n\t * \t\t\t\t\t\t\t\t\t  (\"1\" = 1st, \"4\" = 4th, \"last\" = last)\n\t * @param  {string} input.floatDay - Floating day for yearly repeat.\n\t * \t\t\t\t\t\t\t\t\t (\"1\" = Sun, \"7\" = Sat)\n\t * @param  {Object} translationConstants - A predefined set of constants needed\n\t *                                         for repeat summary generation.\n\t * @param  {Object} helpers - The object containing the necessary \"translate\" method.\n\t * @returns {string} The repeat summary text.\n\t */\n\tasync function getRepeatSummary({\n\t\trepeatType,\n\t\trepeatCount,\n\t\tstartDate,\n\t\tdaysOfWeek,\n\t\tmonthlyType,\n\t\tyearlyType,\n\t\tmonth,\n\t\tfloatWeek,\n\t\tfloatDay,\n\t\ttranslationConstants,\n\t\thelpers,\n\t}) {\n\t\tconst { NowDateTime } = imports[\"sn_uxf.core_libraries\"]();\n\n\t\tconst {\n\t\t\tPOSITIONALS,\n\t\t\tDAYS_OF_WEEK,\n\t\t\tMONTHS,\n\t\t\tORDINALS,\n\t\t\tEVERY_WEEKDAY,\n\t\t\tEVERY_WEEKEND,\n\t\t\tEVERY_MWF,\n\t\t\tEVERY_TT,\n\t\t} = translationConstants;\n\n\t\t// choice IDs\n\t\tconst REPEAT_TYPE_DAILY = \"daily\";\n\t\tconst REPEAT_TYPE_WEEKLY = \"weekly\";\n\t\tconst REPEAT_TYPE_WEEKDAYS = \"weekdays\";\n\t\tconst REPEAT_TYPE_WEEKENDS = \"weekends\";\n\t\tconst REPEAT_TYPE_WEEKMWF = \"weekMWF\";\n\t\tconst REPEAT_TYPE_WEEKTT = \"weekTT\";\n\t\tconst REPEAT_TYPE_MONTHLY = \"monthly\";\n\t\tconst REPEAT_TYPE_YEARLY = \"yearly\";\n\n\t\tconst MONTHLY_REPEAT_DOM = \"dom\";\n\t\tconst MONTHLY_REPEAT_NTH = \"nth\";\n\t\tconst MONTHLY_REPEAT_LDOM = \"ldom\";\n\t\tconst MONTHLY_REPEAT_LWDOM = \"lwdom\";\n\n\t\tconst YEARLY_REPEAT_DOY = \"doy\";\n\t\tconst YEARLY_REPEAT_FLOAT = \"float\";\n\n\t\t// used for iterating through the daysOfWeek object parameter\n\t\tconst DAYS_OF_WEEK_KEYS = [\n\t\t\t[\"mon_box\", DAYS_OF_WEEK[1]],\n\t\t\t[\"tue_box\", DAYS_OF_WEEK[2]],\n\t\t\t[\"wed_box\", DAYS_OF_WEEK[3]],\n\t\t\t[\"thu_box\", DAYS_OF_WEEK[4]],\n\t\t\t[\"fri_box\", DAYS_OF_WEEK[5]],\n\t\t\t[\"sat_box\", DAYS_OF_WEEK[6]],\n\t\t\t[\"sun_box\", DAYS_OF_WEEK[0]],\n\t\t];\n\n\t\tconst MAX_DAYS = 2147483647;\n\t\tconst HIDE_SUMMARY_COUNT = 1000;\n\n\t\tasync function getWeeklyRepeatSummary(daysOfWeek, repeatCount) {\n\t\t\tconst selectedDays = [];\n\n\t\t\tDAYS_OF_WEEK_KEYS.forEach(([key, val]) => {\n\t\t\t\tif (daysOfWeek[key]) selectedDays.push(val);\n\t\t\t});\n\n\t\t\tif (selectedDays.length === 0) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\"Repeats every week on\");\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on\",\n\t\t\t\t\trepeatCount\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 1) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0}.\",\n\t\t\t\t\t\tselectedDays[0]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on {1}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tselectedDays[0]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Repeats every [n] week(s) on weekends.\n\t\t\tif (\n\t\t\t\tselectedDays.length === 2 &&\n\t\t\t\tdaysOfWeek[\"sat_box\"] &&\n\t\t\t\tdaysOfWeek[\"sun_box\"]\n\t\t\t) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on weekends.\",\n\t\t\t\t\t\trepeatCount\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on weekends.\",\n\t\t\t\t\trepeatCount\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 2) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0} and {1}.\",\n\t\t\t\t\t\tselectedDays[0],\n\t\t\t\t\t\tselectedDays[1]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on {1} and {2}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tselectedDays[0],\n\t\t\t\t\tselectedDays[1]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 3) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0}, {1}, and {2}.\",\n\t\t\t\t\t\tselectedDays[0],\n\t\t\t\t\t\tselectedDays[1],\n\t\t\t\t\t\tselectedDays[2]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on {1}, {2}, and {3}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tselectedDays[0],\n\t\t\t\t\tselectedDays[1],\n\t\t\t\t\tselectedDays[2]\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 4) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0}, {1}, {2}, and {3}.\",\n\t\t\t\t\t\tselectedDays[0],\n\t\t\t\t\t\tselectedDays[1],\n\t\t\t\t\t\tselectedDays[2],\n\t\t\t\t\t\tselectedDays[3]\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every {0} weeks on {1}, {2}, {3}, and {4}.\",\n\t\t\t\t\t\trepeatCount,\n\t\t\t\t\t\tselectedDays[0],\n\t\t\t\t\t\tselectedDays[1],\n\t\t\t\t\t\tselectedDays[2],\n\t\t\t\t\t\tselectedDays[3]\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Repeats every [n] week(s) on weekdays.\n\t\t\tif (\n\t\t\t\tselectedDays.length === 5 &&\n\t\t\t\t!daysOfWeek[\"sun_box\"] &&\n\t\t\t\t!daysOfWeek[\"sat_box\"]\n\t\t\t) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on weekdays.\",\n\t\t\t\t\t\t...selectedDays\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every {0} weeks on weekdays.\",\n\t\t\t\t\t\trepeatCount,\n\t\t\t\t\t\t...selectedDays\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 5) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0}, {1}, {2}, {3}, and {4}.\",\n\t\t\t\t\t\t...selectedDays\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every {0} weeks on {1}, {2}, {3}, {4}, and {5}.\",\n\t\t\t\t\t\trepeatCount,\n\t\t\t\t\t\t...selectedDays\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 6) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every week on {0}, {1}, {2}, {3}, {4}, and {5}.\",\n\t\t\t\t\t\t...selectedDays\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on {1}, {2}, {3}, {4}, {5}, and {6}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\t...selectedDays\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (selectedDays.length === 7) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\"Repeats every day.\");\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} weeks on Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, and Sunday.\",\n\t\t\t\t\trepeatCount\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync function getMonthlyRepeatSummary(\n\t\t\tmonthlyType,\n\t\t\trepeatCount,\n\t\t\tconvertedStartDate\n\t\t) {\n\t\t\tif (monthlyType === MONTHLY_REPEAT_DOM) {\n\t\t\t\tconst ordDate = ORDINALS[convertedStartDate.date()];\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every month on the {0} day.\",\n\t\t\t\t\t\tordDate\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} months on the {1} day.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tordDate\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (monthlyType === MONTHLY_REPEAT_LDOM) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every month on the last day of the month.\"\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} months on the last day of the month.\",\n\t\t\t\t\trepeatCount\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Monday, Tuesday, etc...\n\t\t\tconst dayOfWeek = DAYS_OF_WEEK[convertedStartDate.day()];\n\n\t\t\tif (monthlyType === MONTHLY_REPEAT_LWDOM) {\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every month on the last {0} of the month.\",\n\t\t\t\t\t\tdayOfWeek\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} months on the last {1} of the month.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tdayOfWeek\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (monthlyType === MONTHLY_REPEAT_NTH) {\n\t\t\t\t// helps us determine if Sun, Mon, etc.. is the first, second, third, etc\n\t\t\t\tconst pos = Math.floor((convertedStartDate.date() - 1) / 7);\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every month on the {0} {1} of the month.\",\n\t\t\t\t\t\tPOSITIONALS[pos],\n\t\t\t\t\t\tdayOfWeek\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} months on the {1} {2} of the month.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tPOSITIONALS[pos],\n\t\t\t\t\tdayOfWeek\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tasync function getYearlyRepeatSummary(\n\t\t\tyearlyType,\n\t\t\trepeatCount,\n\t\t\tconvertedStartDate,\n\t\t\tfloatWeek,\n\t\t\tfloatDay,\n\t\t\tmonth\n\t\t) {\n\t\t\tif (yearlyType === YEARLY_REPEAT_DOY) {\n\t\t\t\tconst retMonth = MONTHS[convertedStartDate.month()];\n\t\t\t\tconst ordDate = ORDINALS[convertedStartDate.date()];\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every year on {0} {1}.\",\n\t\t\t\t\t\tretMonth,\n\t\t\t\t\t\tordDate\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} years on {1} {2}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tretMonth,\n\t\t\t\t\tordDate\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (yearlyType === YEARLY_REPEAT_FLOAT) {\n\t\t\t\tconst weekPos =\n\t\t\t\t\tfloatWeek === \"last\"\n\t\t\t\t\t\t? \"last\"\n\t\t\t\t\t\t: POSITIONALS[parseInt(floatWeek) - 1];\n\t\t\t\tconst dayOfWeek = DAYS_OF_WEEK[parseInt(floatDay) - 1];\n\t\t\t\tconst retMonth = MONTHS[parseInt(month) - 1];\n\n\t\t\t\tif (repeatCount === 1) {\n\t\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\t\"Repeats every year on the {0} {1} in {2}.\",\n\t\t\t\t\t\tweekPos,\n\t\t\t\t\t\tdayOfWeek,\n\t\t\t\t\t\tretMonth\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\treturn await helpers.translate(\n\t\t\t\t\t\"Repeats every {0} years on the {1} {2} in {3}.\",\n\t\t\t\t\trepeatCount,\n\t\t\t\t\tweekPos,\n\t\t\t\t\tdayOfWeek,\n\t\t\t\t\tretMonth\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (!repeatType)\n\t\t\treturn \"\";\n\n\t\t// These simple cases don't require any other variables to be defined\n\t\tif (REPEAT_TYPE_WEEKDAYS === repeatType) return EVERY_WEEKDAY;\n\n\t\tif (REPEAT_TYPE_WEEKENDS === repeatType) return EVERY_WEEKEND;\n\n\t\tif (REPEAT_TYPE_WEEKMWF === repeatType) return EVERY_MWF;\n\n\t\tif (REPEAT_TYPE_WEEKTT === repeatType) return EVERY_TT;\n\n\t\t// All cases from here require repeatCount to be defined and positive\n\t\tif (!repeatCount || repeatCount < 1 || repeatCount > MAX_DAYS)\n\t\t\treturn await helpers.translate(\n\t\t\t\t'Error: \"Repeat every\" must be specified and between 1 and {0}.',\n\t\t\t\tMAX_DAYS\n\t\t\t);\n\n\t\tif (repeatCount >= HIDE_SUMMARY_COUNT)\n\t\t\treturn '';\n\n\t\tif (REPEAT_TYPE_DAILY === repeatType) {\n\t\t\t// Every [n] days[s]\n\t\t\tif (repeatCount === 1)\n\t\t\t\treturn await helpers.translate(\"Repeats every day.\");\n\n\t\t\treturn await helpers.translate(\"Repeats every {0} days.\", [\n\t\t\t\trepeatCount,\n\t\t\t]);\n\t\t}\n\n\t\tconst convertedStartDate = new NowDateTime(startDate);\n\n\t\tif (REPEAT_TYPE_WEEKLY === repeatType) {\n\t\t\t// Every [n] week[s] on [days of week]\n\t\t\treturn await getWeeklyRepeatSummary(daysOfWeek, repeatCount);\n\t\t}\n\n\t\tif (REPEAT_TYPE_MONTHLY === repeatType) {\n\t\t\t// Every [n] month[s] on [day of month | nth dow]\n\t\t\treturn await getMonthlyRepeatSummary(\n\t\t\t\tmonthlyType,\n\t\t\t\trepeatCount,\n\t\t\t\tconvertedStartDate\n\t\t\t);\n\t\t}\n\n\t\tif (REPEAT_TYPE_YEARLY === repeatType) {\n\t\t\t// Every [n] year[s] on [mon] [day]\n\t\t\treturn await getYearlyRepeatSummary(\n\t\t\t\tyearlyType,\n\t\t\t\trepeatCount,\n\t\t\t\tconvertedStartDate,\n\t\t\t\tfloatWeek,\n\t\t\t\tfloatDay,\n\t\t\t\tmonth\n\t\t\t);\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Translates the necessary constants for getRepeatSummary.\n\t *\n\t * @param  {Object} helpers - The object containing the necessary \"translate\" method.\n\t * @returns {Object} The object containing translations.\n\t */\n\tasync function getTranslationConstants(helpers) {\n\t\tconst weekly = [\n\t\t\thelpers.translate(\"Repeats weekly on weekdays.\"),\n\t\t\thelpers.translate(\"Repeats weekly on weekends.\"),\n\t\t\thelpers.translate(\n\t\t\t\t\"Repeats weekly on Monday, Wednesday, and Friday.\"\n\t\t\t),\n\t\t\thelpers.translate(\"Repeats weekly on Tuesday and Thursday.\"),\n\t\t];\n\n\t\tconst positionals = [\n\t\t\thelpers.translate(\"first\"),\n\t\t\thelpers.translate(\"second\"),\n\t\t\thelpers.translate(\"third\"),\n\t\t\thelpers.translate(\"fourth\"),\n\t\t\thelpers.translate(\"fifth\"),\n\t\t];\n\n\t\tconst daysOfWeekText = [\n\t\t\thelpers.translate(\"Sunday\"),\n\t\t\thelpers.translate(\"Monday\"),\n\t\t\thelpers.translate(\"Tuesday\"),\n\t\t\thelpers.translate(\"Wednesday\"),\n\t\t\thelpers.translate(\"Thursday\"),\n\t\t\thelpers.translate(\"Friday\"),\n\t\t\thelpers.translate(\"Saturday\"),\n\t\t];\n\n\t\tconst months = [\n\t\t\thelpers.translate(\"January\"),\n\t\t\thelpers.translate(\"February\"),\n\t\t\thelpers.translate(\"March\"),\n\t\t\thelpers.translate(\"April\"),\n\t\t\thelpers.translate(\"May\"),\n\t\t\thelpers.translate(\"June\"),\n\t\t\thelpers.translate(\"July\"),\n\t\t\thelpers.translate(\"August\"),\n\t\t\thelpers.translate(\"September\"),\n\t\t\thelpers.translate(\"October\"),\n\t\t\thelpers.translate(\"November\"),\n\t\t\thelpers.translate(\"December\"),\n\t\t];\n\n\t\tconst ordinals = [\n\t\t\thelpers.translate(\"1st\"),\n\t\t\thelpers.translate(\"2nd\"),\n\t\t\thelpers.translate(\"3rd\"),\n\t\t\thelpers.translate(\"4th\"),\n\t\t\thelpers.translate(\"5th\"),\n\t\t\thelpers.translate(\"6th\"),\n\t\t\thelpers.translate(\"7th\"),\n\t\t\thelpers.translate(\"8th\"),\n\t\t\thelpers.translate(\"9th\"),\n\t\t\thelpers.translate(\"10th\"),\n\t\t\thelpers.translate(\"11th\"),\n\t\t\thelpers.translate(\"12th\"),\n\t\t\thelpers.translate(\"13th\"),\n\t\t\thelpers.translate(\"14th\"),\n\t\t\thelpers.translate(\"15th\"),\n\t\t\thelpers.translate(\"16th\"),\n\t\t\thelpers.translate(\"17th\"),\n\t\t\thelpers.translate(\"18th\"),\n\t\t\thelpers.translate(\"19th\"),\n\t\t\thelpers.translate(\"20th\"),\n\t\t\thelpers.translate(\"21st\"),\n\t\t\thelpers.translate(\"22nd\"),\n\t\t\thelpers.translate(\"23rd\"),\n\t\t\thelpers.translate(\"24th\"),\n\t\t\thelpers.translate(\"25th\"),\n\t\t\thelpers.translate(\"26th\"),\n\t\t\thelpers.translate(\"27th\"),\n\t\t\thelpers.translate(\"28th\"),\n\t\t\thelpers.translate(\"29th\"),\n\t\t\thelpers.translate(\"30th\"),\n\t\t\thelpers.translate(\"31st\"),\n\t\t];\n\n\t\tconst [EVERY_WEEKDAY, EVERY_WEEKEND, EVERY_MWF, EVERY_TT, ...result] =\n\t\t\tawait Promise.all([\n\t\t\t\t...weekly,\n\t\t\t\t...positionals,\n\t\t\t\t...daysOfWeekText,\n\t\t\t\t...months,\n\t\t\t\t...ordinals,\n\t\t\t]);\n\n\t\tlet l = 0,\n\t\t\tr = positionals.length;\n\t\tconst POSITIONALS = result.slice(l, r);\n\n\t\tl = r;\n\t\tr += daysOfWeekText.length;\n\t\tconst DAYS_OF_WEEK = result.slice(l, r);\n\n\t\tl = r;\n\t\tr += months.length;\n\t\tconst MONTHS = result.slice(l, r);\n\n\t\tl = r;\n\t\tr += ordinals.length;\n\t\tconst ORDINALS = result.slice(l - 1, r);\n\t\tORDINALS[0] = null;\n\n\t\treturn {\n\t\t\tPOSITIONALS,\n\t\t\tDAYS_OF_WEEK,\n\t\t\tMONTHS,\n\t\t\tORDINALS,\n\t\t\tEVERY_WEEKDAY,\n\t\t\tEVERY_WEEKEND,\n\t\t\tEVERY_MWF,\n\t\t\tEVERY_TT,\n\t\t};\n\t}\n\n\treturn { getRepeatSummary, getTranslationConstants };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"c8a5366c432121104c68c9a4dbb8f2a7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/15672bfb04b12210559073c06a02f7e3","value":"15672bfb04b12210559073c06a02f7e3"},"sys_update_name":"sys_ux_client_script_include_c8a5366c432121104c68c9a4dbb8f2a7","sys_updated_by":"admin","api_name":"global.GetRepeatSummary","sys_created_on":"2023-03-10 04:12:18","name":"GetRepeatSummary","sys_name":"GetRepeatSummary","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"8","includes":"","sys_updated_on":"2024-02-06 16:44:02","sys_tags":"","script":"function include({imports}) { \n\tconst {NowDateTime} = imports['sn_uxf.core_libraries']();\n\n\tconst DEFAULT_DATE_TIME_FORMAT = 'YYYY-MM-DD HH:mm:ss';\n\tconst DEFAULT_RELATIVE_DATE_FORMAT = 'DD-MMMM-YYYY';\n\tconst DEFAULT_RELATIVE_TIME_FORMAT = 'HH:mm';\n\n\tconst getCurrentDateTime = function(tgtTZ) {\n\t\tlet ndt = new NowDateTime();\n\t\tif (!tgtTZ) return ndt;\n\t\treturn ndt.tz(tgtTZ);\n\t};\n\n\tconst getTimeTillDateChangeInMillis = function(tgtTZ) {\n\t\tif (!tgtTZ) return;\t\t\n\t\tlet now = getCurrentDateTime(tgtTZ);\n\t\treturn now.startOf('day').add(1, 'days').diff(now);\n\t};\n\n\tconst getFormattedDateText = function(date, timeZone, format) {\n\t\tif(!date) return;\n\t\tif(!format) format = DEFAULT_DATE_TIME_FORMAT;\n\t\tif(!timeZone) return date.format(format);\n\t\treturn date.tz(timeZone).format(format);\n\t};\n\n\n\tconst getRelativeDay = function(date, tgtTZ) {\n\t\tif (!date) return;\n\n\t\tlet now = getCurrentDateTime(tgtTZ);\n\t\tnow = date.add(now.$d.valueOf() - date.valueOf(), 'millisecond');\n\t\tconst dayDiff = Math.abs(date.startOf('day').diff(now.startOf('day'), 'days'));\n\t\tconst isPast = date.isBefore(now);\n\n\t\tif (dayDiff === 0)\n\t\t\treturn ('today');\n\t\telse if (dayDiff === 1)\n\t\t\treturn isPast ?  'yesterday' :  'tomorrow';\n\n\t\telse return getFormattedDateText(date, null, DEFAULT_RELATIVE_DATE_FORMAT);\n\t};\n\n\tconst getRelativeDayAndTime = function(date, timeFormat, tgtTZ) {\n\t\tif(!date) return;\n\t\tif (!timeFormat) timeFormat = DEFAULT_RELATIVE_TIME_FORMAT;\n\n\t\tlet dayText = getRelativeDay(date, tgtTZ);\n\t\tlet timeText = date.format(timeFormat);\n\n\t\treturn [dayText , timeText];\n\t};\n\n\tconst getRelativeDateTime = function(dateTimeStr, timeOnly, tgtTZ, time_fmt) {\n\t\tif (!dateTimeStr) return;\n\n\t\tvar dateTime = new NowDateTime(dateTimeStr);\n\n\t\tif (timeOnly) \n\t\t\treturn getFormattedDateText(dateTime, null, time_fmt || DEFAULT_RELATIVE_TIME_FORMAT);\n\t\t\n\t\treturn getRelativeDayAndTime(dateTime, time_fmt || DEFAULT_RELATIVE_TIME_FORMAT, tgtTZ);\n\t};\n\n\treturn {\n\t\tgetRelativeDateTime,\n\t\tgetTimeTillDateChangeInMillis\n\t};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"c91346fb53b211107319ddeeff7b128c","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7e3c2481539260100c54ddeeff7b127b","value":"7e3c2481539260100c54ddeeff7b127b"},"sys_update_name":"sys_ux_client_script_include_c91346fb53b211107319ddeeff7b128c","sys_updated_by":"admin","api_name":"sn_sow_on_call.SOWOnCallRelativeDateTime","sys_created_on":"2022-11-03 09:58:01","name":"SOWOnCallRelativeDateTime","sys_name":"SOWOnCallRelativeDateTime","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7e3c2481539260100c54ddeeff7b127b","value":"7e3c2481539260100c54ddeeff7b127b"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2023-07-28 16:45:23","sys_tags":"","script":"function include({ imports }) {\n    // clones a json object or array by walking the tree and recursively building a new object\n    const _cloneDeep = (entity, cache = new WeakMap) => {\n        //this clones array items too\n        const referenceTypes = ['Array', 'Object', 'Map', 'Set', 'Date'];\n        const entityType = Object.prototype.toString.call(entity);\n        if (\n            !new RegExp(referenceTypes.join('|')).test(entityType) ||\n            entity instanceof WeakMap ||\n            entity instanceof WeakSet\n        ) return entity;\n        if (cache.has(entity)) {\n            return cache.get(entity);\n        }\n        const c = new entity.constructor;\n\n        if (entity instanceof Map) {\n            entity.forEach((value, key) => c.set(_cloneDeep(key), _cloneDeep(value)));\n        }\n        if (entity instanceof Set) {\n            entity.forEach((value) => c.add(_cloneDeep(value)));\n        }\n        if (entity instanceof Date) {\n            return new Date(entity);\n        }\n        cache.set(entity, c);\n        return Object.assign(c, ...Object.keys(entity).map((prop) => ({\n            [prop]: _cloneDeep(entity[prop], cache)\n        })));\n    };\n\n    return {\n        cloneDeep: _cloneDeep\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"cea0e2794310b11017b739603ab8f22a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_cea0e2794310b11017b739603ab8f22a","sys_updated_by":"admin","api_name":"sn_cmdb_ws.CmdbWsCloneUtil","sys_created_on":"2023-07-28 16:45:23","name":"CmdbWsCloneUtil","sys_name":"CmdbWsCloneUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Something went wrong. Please try again later.\"\n    },\n    {\n        \"message\": \"Something went wrong. Please try again later.\"\n    },\n    {\n        \"message\": \"Error\"\n    }\n]","access":"package_private","sys_mod_count":"40","includes":"","sys_updated_on":"2023-09-11 21:09:07","sys_tags":"","script":"function include({\n    imports\n}) {\n    const parseErrorString = async (errStr, eventContext) => {\n        const {\n            helpers\n        } = eventContext;\n        const erroObjRegEx = /{(?:[^{}]|{[^{}]*})*}/;\n        const errObj = errStr.match(erroObjRegEx)?.[0];\n        if (errObj) {\n            try {\n                return JSON.parse(errObj);\n            } catch (e) {\n                return {\n                    CODE: 'JSON_PARSE_EXCEPTION',\n                    MSG: await helpers.translate(\"Something went wrong. Please try again later.\"),\n                    DETAIL: e.message\n                }\n            }\n        } else {\n                return {\n                    CODE: 'UNKNOWN_EXCEPTION',\n                    MSG: await helpers.translate(\"Something went wrong. Please try again later.\"),\n                    DETAIL: errStr\n                }\n       }\n    }\n\n    const parseErrorFromEvent = (eventContext) => {\n        const {\n            event\n        } = eventContext;\n        const errorStr = event.payload.errors?.[0] || \"\";\n        return parseErrorString(errorStr, eventContext);\n    }\n\n    const dispatchAndLogError = async (errorStr, context) => {\n        const {\n            helpers, \n            api\n        } = context;\n        api.emit('NOW_UXF_PAGE#ADD_NOTIFICATIONS', {\n            items: [{\n                status: 'critical',\n                icon: 'triangle-exclamation-outline',\n                header: await helpers.translate('Error'),\n                content: errorStr.MSG,\n                action: {\n                    type: 'dismiss'\n                }\n            }]\n        });\n        console.error(\"Code: \" + errorStr.CODE + \" Source if defined: \" + errorStr.SOURCE + \" Details: \" + errorStr.DETAILS);\n    }\n\n    return {\n        parseErrorString,\n        parseErrorFromEvent,\n        dispatchAndLogError\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"d321081feb9071100c0bb5d5d852285b","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_d321081feb9071100c0bb5d5d852285b","sys_updated_by":"admin","api_name":"sn_cmdb_ws.CMDBWsDMErrorUtil","sys_created_on":"2023-08-01 21:01:32","name":"CMDBWsDMErrorUtil","sys_name":"CMDBWsDMErrorUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"maint","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n  {\n    \"code\": null,\n    \"message\": \"Incidents assigned to you\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Incidents assigned to your team\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Incident SLAs\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Unassigned incidents\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Catalog tasks assigned to you\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Catalog tasks assigned to your team\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Your work\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Your team's work\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Incident SLA time remaining - {0}\",\n    \"comment\": \"\"\n  },\n  {\n    \"code\": null,\n    \"message\": \"Tasks delegated to you\",\n    \"comment\": \"\"\n  }\n]","access":"package_private","sys_mod_count":"10","includes":"","sys_updated_on":"2023-02-23 16:02:05","sys_tags":"","script":"function include({\n    imports\n}) {\n\n    class SowRemediateServerPlaybookConfigSNC {\n        static getFieldConfig(table, view) {\n            if (!table || !view)\n                return;\n            const fieldConfig = {\n                \"change_request\": {\n                    \"create\": {\n                        \"cmdb_ci\": {\n                            readonly: true,\n                            mandatory: true,\n                            visible: true\n                        },\n                        \"assignment_group\": {\n                            readonly: false,\n                            mandatory: true,\n                            visible: true\n                        },\n                        \"assigned_to\": {\n                            readonly: false,\n                            mandatory: true,\n                            visible: true\n                        },\n                        \"short_description\": {\n                            readonly: false,\n                            mandatory: true,\n                            visible: true\n                        },\n                    },\n                    \"schedule\": {\n                        \"start_date\": {\n                            readonly: false,\n                            mandatory: true,\n                            visible: true\n                        },\n                        \"end_date\": {\n                            readonly: false,\n                            mandatory: true,\n                            visible: true\n                        },\n                    }\n                }\n            };\n            return fieldConfig[table][view];\n        }\n        static getTargetRecordFields(table) {\n            const targetFields = {\n                \"change_request\": \"number,cmdb_ci,assignment_group,assigned_to,short_description\"\n            }\n            return targetFields[table];\n        }\n        static getConflictCheckTimeout() {\n            return 3000;\n        }\n        static getFormFields(table, view, fields) {\n            var fieldConfig = this.getFieldConfig(table, view);\n            var fieldValueMap = fields;\n            for (var field in fieldValueMap) {\n                if (fieldConfig[field]) {\n                    for (var config in fieldConfig[field]) {\n                        fieldValueMap[field][config] = fieldConfig[field][config];\n                    }\n                } else {\n                    fieldValueMap[field].visible = false;\n                }\n            }\n            return fieldValueMap;\n        }\n    }\n    return SowRemediateServerPlaybookConfigSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"d618d457430d2110cd5b8beeaab8f240","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_d618d457430d2110cd5b8beeaab8f240","sys_updated_by":"admin","api_name":"sn_sow_inc.SowRemediateServerPlaybookConfigSNC","sys_created_on":"2023-02-21 09:13:43","name":"SowRemediateServerPlaybookConfigSNC","sys_name":"SowRemediateServerPlaybookConfigSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"","required_translations":"","access":"package_private","sys_mod_count":"5","includes":"881d20a10fe21010ad4437a98b767e2a,05552db60fe210104c39df6d58767e65","sys_updated_on":"2020-09-01 10:04:40","sys_tags":"","script":"function include({imports}) {\n   const {\n        'sn_vtb.constants': constantsInclude,\n        'sn_vtb.boardManagerMethods': boardManagerMethods,\n    } = imports;\n    const {\n        STATE_PROPS_NAMES: {\n            BOARD_STATE,\n            BOARD_DIRTY_STATE,\n            BOARD_FILTERED_STATE,\n            BOARD_FOCUS_STATE,\n            INITIALISE_AMB,\n            TRANSLATED_MESSAGE,\n        }\n    } = constantsInclude();\n    const { transformBoardData } = boardManagerMethods();\n\nconst setBoardState = (api, value, focusValue) => {\n      api.setState(BOARD_STATE, value);\n      api.setState(BOARD_FILTERED_STATE, transformBoardData(value, focusValue));\n};\n\nconst setBoardDirtyState = (api, value) => {\n   api.setState(BOARD_DIRTY_STATE, value);\n};\n\nconst setBoardFocusState = (api, value) => {\n   api.setState(BOARD_FOCUS_STATE, value);\n};\n\nconst setAMBState = (api, value) => {\n   api.setState(INITIALISE_AMB, value);\n};\n\nconst setTranslatedMessages = (api, value) => {\n   api.setState(TRANSLATED_MESSAGE, value);\n};\n\nreturn {\nsetBoardState,\nsetBoardDirtyState,\nsetAMBState,\nsetBoardFocusState,\nsetTranslatedMessages,\n}\n }","sys_class_name":"sys_ux_client_script_include","sys_id":"d67f1bbeb7e21010ad44ea56ee11a9d3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_d67f1bbeb7e21010ad44ea56ee11a9d3","sys_updated_by":"admin","api_name":"sn_vtb.stateUpdates","sys_created_on":"2020-08-14 19:06:35","name":"stateUpdates","sys_name":"stateUpdates","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"297","includes":"","sys_updated_on":"2024-10-09 20:22:14","sys_tags":"","script":"function include({ imports }) {\n    //unifiedMapUtils client script include\n    const _rightPanelSelectedTabIndexPrefName = \"cmdb_ws.unifiedmap.rightPanelSelectedTabIndex\";\n    const _rightPanelNonCollapsedPositionPrefName = \"cmdb_ws.unifiedmap.rightPanelNonCollapsedPosition\";\n    const _rightPanelIsCollapsedPrefName = \"cmdb_ws.unifiedmap.rightPanelIsCollapsed\";\n    const _rightPanelCurrentPositionPrefName = \"cmdb_ws.unifiedmap.rightPanelCurrentPosition\";\n    const _rightPanelMinWidthPositionPrefName = \"cmdb_ws.unifiedmap.rightPanelMinWidthPosition\";\n    const _relatedItemsExcludedCategoriesPrefName = \"sn.cmdb.ws.node.map.user.excluded.rel.items\";\n    const _relatedItemsSortOrderPrefName = \"sn.cmdb.ws.node.map.user.sort.order.rel.items\";\n\n    const _rightPanelCollapsedPosition = '100';\n    const _rightPanelMinWidthPositionMinPixels = '48';\n    const _rightPanelMinWidthPositionMinRatioCollapsed = '0';\n    const _rightPanelMinWidthPositionMinRatioNonCollapsed = '15';\n\n    //first time defaults\n    const _rightPanelSelectedTabIndexDefault = 0;\n    const _rightPanelIsCollapsedDefault = true;\n    const _rightPanelNonCollapsedPositionDefault = '80';\n    const _rightPanelCurrentPositionDefault = '100';\n    const _rightPanelMinWidthPositionDefault = JSON.stringify({\n        minRatio: 0,\n        minPixels: 48\n    });\n\n    const _emptySysIdKey = 'emptysysid';\n    const _ALERT = {\n        TYPE: {\n            DISMISS: 'dismiss',\n            ACKNOWLEDGE: 'acknowledge',\n            OPEN: 'open'\n        },\n        STATUS: {\n            INFO: 'info',\n            CRITICAL: 'critical',\n            WARNING: 'warning',\n        },\n        ICON: {\n            INFO_CIRCLE_OUTLINE: 'Info Circle Outline',\n            TRIANGLE_EXCLAMATION_OUTLINE: 'Triangle Exclamation Outline'\n        }\n    };\n\n    //filter (and levels) stuff\n    const _defaultLevels = 3;\n    const _DELIMITER = '|-|';\n    const _CATEGORY = {\n        SHOW_FILTERED_ITEMS: 'showFilteredItems',\n        LAYER: 'layer',\n        RELATIONSHIP: 'relationship',\n        REFERENCE: 'reference',\n        ATTRIBUTE: 'attribute'\n    };\n    const _ATTRIBUTE = {\n        CLASS: 'Class',\n        DISCOVERY_SOURCE: 'Discovery source',\n        LOCATION: 'Location',\n        OWNED_BY: 'Owned by'\n    };\n\n    const _SELECT_ALL = 'Select All'; //this is the actual key, and not to be confused with the translated value for 'Select All' in api.state.translations.SELECT_ALL\n    const _BUSINESS = 'Business';\n    const _APPLICATION_SERVICE = 'Application Service';\n    const _APPLICATION = 'Application';\n    const _INFRASTRUCTURE = 'Infrastructure';\n    const _LAYER = {\n        SELECT_ALL: {\n            NAME: _SELECT_ALL,\n            ID: _CATEGORY.LAYER + _DELIMITER + _SELECT_ALL\n        },\n        BUSINESS: {\n            NAME: _BUSINESS,\n            ID: _CATEGORY.LAYER + _DELIMITER + _BUSINESS\n        },\n        APPLICATION_SERVICE: {\n            NAME: _APPLICATION_SERVICE,\n            ID: _CATEGORY.LAYER + _DELIMITER + _APPLICATION_SERVICE\n        },\n        APPLICATION: {\n            NAME: _APPLICATION,\n            ID: _CATEGORY.LAYER + _DELIMITER + _APPLICATION\n        },\n        INFRASTRUCTURE: {\n            NAME: _INFRASTRUCTURE,\n            ID: _CATEGORY.LAYER + _DELIMITER + _INFRASTRUCTURE\n        }\n    };\n\n    const _DEFAULT_ICON = 'configuration-item-outline';\n\n    const _generateUniqueId = () => {\n        const timestamp = Date.now().toString(36); // Convert timestamp to base 36\n        const random = Math.random().toString(36).substr(2, 9); // Generate random string in base 36\n\n        return timestamp + random;\n    }\n\n    const _getHash = (sysids, seed = 0) => {\n        if (!Array.isArray(sysids) || sysids.length === 0) {\n            return _emptySysIdKey;\n        } else if (sysids.length === 1) {\n            // this is a single sys_id which is unique so return it\n            return sysids[0];\n        }\n        const str = sysids.join();\n        let h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\n        for (let i = 0, ch; i < str.length; i++) {\n            ch = str.charCodeAt(i);\n            h1 = Math.imul(h1 ^ ch, 2654435761);\n            h2 = Math.imul(h2 ^ ch, 1597334677);\n        }\n        h1 = Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^ Math.imul(h2 ^ (h2 >>> 13), 3266489909);\n        h2 = Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^ Math.imul(h1 ^ (h1 >>> 13), 3266489909);\n        return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString();\n    };\n\n    const _getConnections = (ciData) => {\n        return Object.keys(ciData).map(sysid => ciData[sysid].connections).flat(1);\n    };\n\n    const _logErrorToConsole = (msgs) => {\n        if (!Array.isArray(msgs)) {\n            msgs = [msgs];\n        }\n        console.error('Unified Map: ', ...msgs);\n    };\n\n    const _logToConsole = (msgs) => {\n        if (!Array.isArray(msgs)) {\n            msgs = [msgs];\n        }\n        console.log('Unified Map: ', ...msgs);\n    };\n\n    const _cloneDeep = (entity, cache = new WeakMap) => {\n        //this clones array items too\n        const referenceTypes = ['Array', 'Object', 'Map', 'Set', 'Date'];\n        const entityType = Object.prototype.toString.call(entity);\n        if (\n            !new RegExp(referenceTypes.join('|')).test(entityType) ||\n            entity instanceof WeakMap ||\n            entity instanceof WeakSet\n        ) return entity;\n        if (cache.has(entity)) {\n            return cache.get(entity);\n        }\n        const c = new entity.constructor;\n\n        if (entity instanceof Map) {\n            entity.forEach((value, key) => c.set(_cloneDeep(key), _cloneDeep(value)));\n        }\n        if (entity instanceof Set) {\n            entity.forEach((value) => c.add(_cloneDeep(value)));\n        }\n        if (entity instanceof Date) {\n            return new Date(entity);\n        }\n        cache.set(entity, c);\n        return Object.assign(c, ...Object.keys(entity).map((prop) => ({\n            [prop]: _cloneDeep(entity[prop], cache)\n        })));\n    };\n\n    const _mergeDeep = (target, source) => {\n        let output = Object.assign({}, target);\n        if (_isObject(target) && _isObject(source)) {\n            Object.keys(source).forEach(key => {\n                if (_isObject(source[key])) {\n                    if (!(key in target))\n                        Object.assign(output, { [key]: source[key] });\n                    else\n                        output[key] = _mergeDeep(target[key], source[key]);\n                } else {\n                    Object.assign(output, { [key]: source[key] });\n                }\n            });\n        }\n        return output;\n    };\n\n    const _isObject = (item) => {\n        return (item && typeof item === 'object' && !Array.isArray(item));\n    }\n\n    const _isEqual = (a, b) => {\n        if (a == b) {\n            return true;\n        }\n        if (a && !b || !a && b) {\n            return false;\n        }\n        if (!(a instanceof Object) || !(b instanceof Object)) {\n            return false;\n        }\n        const aKeys = Object.keys(a);\n        const bKeys = Object.keys(b);\n        if (aKeys.length !== bKeys.length) {\n            return false;\n        }\n        if (aKeys.length === 0 && bKeys.length === 0) {\n            return true;\n        } // two empty objects are equal\n        for (let i = 0; i < aKeys.length; i++) {\n            if (!_isEqual(a[aKeys[i]], b[aKeys[i]])) {\n                return false;\n            }\n        }\n        return true;\n    };\n\n    const _addAlerts = (alerts, api, helpers) => {\n        /* example format to supply (id is generated if not supplied):\n            [{\n                status: ALERT.STATUS.INFO,\n                icon: ALERT.ICON.INFO_CIRCLE_OUTLINE,\n                content: translatedMsg,\n                action: { type: ALERT.TYPE.DISMISS },\n                autoDismiss: false\n            }]\n        */\n        alerts.forEach(n => n.id = (n.id || _generateUniqueId()));\n        api.emit('SN_UNIFIED_MAP_CTRL#ADD_ALERTS', { alerts: alerts });\n        api.setState('alerts', alerts.concat(api.state.alerts));\n\n        //auto dismiss any after 5 seconds that have flag set\n        var autoDismiss = alerts.filter(o => o.autoDismiss);\n        if (autoDismiss.length) {\n            helpers.timing.setTimeout(() => {\n                _removeAlerts(autoDismiss , api);\n            }, 5000);\n        }\n    };\n\n    const _removeAlerts = (alerts, api) => {\n        api.emit('SN_UNIFIED_MAP_CTRL#REMOVE_ALERTS', { alerts: alerts });\n        var remainingAlerts = api.state.alerts.filter(({ id: id1 }) => !alerts.some(({ id: id2 }) => id2 === id1));\n        api.setState('alerts', remainingAlerts);\n    };\n\n    const _buildToolTipText = (label, value, prevValue) => {\n        const currentLabelValue = label + \": \" + value;\n        if (prevValue) {\n            if (!prevValue.includes(currentLabelValue)) {\n              prevValue += \"<br/>\" + currentLabelValue;\n            }\n            return prevValue;\n          }\n        return currentLabelValue;\n    };\n\n    const _buildUserPrefWithAppId = function(preferenceKeys, appId) {\n        if (!preferenceKeys?.length) return {};\n        return preferenceKeys.reduce((acc, baseKey) => {\n            acc[baseKey] = `${baseKey}_${appId}`;\n            return acc;\n        }, {});\n    }\n\n\n    return {\n        generateUniqueId: _generateUniqueId,\n        getHash: _getHash,\n        getConnections: _getConnections,\n        logErrorToConsole: _logErrorToConsole,\n        logToConsole: _logToConsole,\n        cloneDeep: _cloneDeep,\n        mergeDeep: _mergeDeep,\n        isEqual: _isEqual,\n        addAlerts: _addAlerts,\n        removeAlerts: _removeAlerts,\n        buildToolTipText: _buildToolTipText,\n        buildUserPrefWithAppId: _buildUserPrefWithAppId,\n\n        rightPanelCollapsedPosition: _rightPanelCollapsedPosition,\n        rightPanelMinWidthPositionMinPixels: _rightPanelMinWidthPositionMinPixels,\n        rightPanelMinWidthPositionMinRatioCollapsed: _rightPanelMinWidthPositionMinRatioCollapsed,\n        rightPanelMinWidthPositionMinRatioNonCollapsed: _rightPanelMinWidthPositionMinRatioNonCollapsed,\n\n        rightPanelNonCollapsedPositionPrefName: _rightPanelNonCollapsedPositionPrefName,\n        rightPanelIsCollapsedPrefName: _rightPanelIsCollapsedPrefName,\n        rightPanelCurrentPositionPrefName: _rightPanelCurrentPositionPrefName,\n        rightPanelSelectedTabIndexPrefName: _rightPanelSelectedTabIndexPrefName,\n        rightPanelMinWidthPositionPrefName: _rightPanelMinWidthPositionPrefName,\n        relatedItemsExcludedCategoriesPrefName: _relatedItemsExcludedCategoriesPrefName,\n        relatedItemsSortOrderPrefName: _relatedItemsSortOrderPrefName,\n\n        rightPanelSelectedTabIndexDefault: _rightPanelSelectedTabIndexDefault,\n        rightPanelIsCollapsedDefault: _rightPanelIsCollapsedDefault,\n        rightPanelNonCollapsedPositionDefault: _rightPanelNonCollapsedPositionDefault,\n        rightPanelCurrentPositionDefault: _rightPanelCurrentPositionDefault,\n        rightPanelMinWidthPositionDefault: _rightPanelMinWidthPositionDefault,\n      \n        emptySysIdKey: _emptySysIdKey,\n        //filter (and levels) stuff\n        defaultLevels: _defaultLevels,\n        DELIMITER: _DELIMITER,\n        SELECT_ALL: _SELECT_ALL,\n        ATTRIBUTE: _ATTRIBUTE,\n        LAYER: _LAYER,\n        CATEGORY: _CATEGORY,\n        DEFAULT_ICON: _DEFAULT_ICON,\n        ALERT: _ALERT,\n        CMDBUM_ERROR_CODES: _CMDBUM_ERROR_CODES,\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"d7e0c22d772e5110960ced43ba5a99ed","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_d7e0c22d772e5110960ced43ba5a99ed","sys_updated_by":"admin","api_name":"sn_cmdb_ws.unifiedMapUtils","sys_created_on":"2022-10-14 23:46:02","name":"unifiedMapUtils","sys_name":"unifiedMapUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"33","includes":"","sys_updated_on":"2022-06-02 21:24:02","sys_tags":"","script":"function include({ imports }) {\n  function getApplicationInstallationHighlightedValue(installationStatus) {\n\n    const installationStatusValueToDisplayValueMap = {\n      true: 'Installed',\n      false: 'Not installed',\n      'update': 'Needs update',\n      'updated': 'updated_uppercase'\n    };\n    const installationStatusValueToColorValueMap = {\n      true: 'positive',\n      false: 'critical',\n      'update': 'high',\n      'updated': 'positive'\n    };\n    const defaultInstallationStatusValue = false;\n\n    return {\n      label: installationStatusValueToDisplayValueMap[installationStatus] || installationStatusValueToDisplayValueMap[defaultInstallationStatusValue],\n      color: installationStatusValueToColorValueMap[installationStatus] || installationStatusValueToColorValueMap[defaultInstallationStatusValue]\n    };\n  }\n\n  function getApplicationLicensingHighlightedValue(licensingStatus) {\n    const licensingStatusValueToDisplayValueMap = {\n      'yes': 'Included in subscription',\n      'no': 'Not included in subscription',\n      'not_applicable': 'Check subscription'\n    };\n    const licensingStatusValueToColorValueMap = {\n      'yes': 'positive',\n      'no': 'critical',\n      'not_applicable': 'low'\n    };\n    const defaultLicensingStatusValue = 'not_applicable';\n\n    return {\n      label: licensingStatusValueToDisplayValueMap[licensingStatus] || licensingStatusValueToDisplayValueMap[defaultLicensingStatusValue],\n      color: licensingStatusValueToColorValueMap[licensingStatus] || licensingStatusValueToColorValueMap[defaultLicensingStatusValue]\n    };\n  }\n\n  return { getApplicationInstallationHighlightedValue, getApplicationLicensingHighlightedValue };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"d80f4fd4b7f201109cfe23508e11a935","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1163fa730f102010e8c940c1df767e8c","value":"1163fa730f102010e8c940c1df767e8c"},"sys_update_name":"sys_ux_client_script_include_d80f4fd4b7f201109cfe23508e11a935","sys_updated_by":"maint","api_name":"sn_admin_center.AdminCenterCommonUtils","sys_created_on":"2022-04-07 22:23:11","name":"AdminCenterCommonUtils","sys_name":"AdminCenterCommonUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/1163fa730f102010e8c940c1df767e8c","value":"1163fa730f102010e8c940c1df767e8c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"17","includes":"","sys_updated_on":"2023-02-21 06:02:24","sys_tags":"","script":"function include({imports}) {\n    function navigateToList(api, table, params) {\n        const payload = getNavPayload({\n            route: 'list',\n            fields: {\n                'table': table\n            },\n            params: params || {}\n        });\n        api.emit('NAV_ITEM_SELECTED', payload);\n    }\n\n    function navigateToPage(api, page, fields={}, params={}) {\n        const payload = getNavPayload({\n            route: page,\n            fields: fields,\n            params: params\n        });\n        api.emit('NAV_ITEM_SELECTED', payload);\n    }\n\n    function getNavPayload({\n        route,\n        fields,\n        params\n    }) {\n        if (!params) {\n            params = {};\n        }\n        return {\n            route: route,\n            fields: fields,\n            params: params,\n            redirect: null,\n            passiveNavigation: null,\n            title: null,\n            multiInstField: null,\n            targetRoute: null,\n            external: null\n        };\n    }\n    \n    return {navigateToList, navigateToPage};\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"de084b0543a0211061d09a549cb8f230","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/31774a2953839110a6f8ddeeff7b12cb","value":"31774a2953839110a6f8ddeeff7b12cb"},"sys_update_name":"sys_ux_client_script_include_de084b0543a0211061d09a549cb8f230","sys_updated_by":"admin","api_name":"sn_instance_clone.InstanceCloneUtils","sys_created_on":"2023-01-21 01:45:10","name":"InstanceCloneUtils","sys_name":"InstanceCloneUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/31774a2953839110a6f8ddeeff7b12cb","value":"31774a2953839110a6f8ddeeff7b12cb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"6","includes":"8a60289053332110ec80ddeeff7b12b5","sys_updated_on":"2023-07-03 07:46:11","sys_tags":"","script":"function include({imports}) { \n    let benchmarksUtilsSNC = imports['sn_benchmarks.BenchmarksUtilsSNC']();\n    class BenchmarksUtils extends benchmarksUtilsSNC {\n    }\n    return BenchmarksUtils;\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"df80289053332110ec80ddeeff7b12be","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/3214b661c3eb211062ebf69f05013160","value":"3214b661c3eb211062ebf69f05013160"},"sys_update_name":"sys_ux_client_script_include_df80289053332110ec80ddeeff7b12be","sys_updated_by":"admin","api_name":"sn_benchmarks.BenchmarksUtils","sys_created_on":"2023-06-28 19:02:15","name":"BenchmarksUtils","sys_name":"BenchmarksUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/3214b661c3eb211062ebf69f05013160","value":"3214b661c3eb211062ebf69f05013160"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n  {\n    \"message\": \"Expand container\"\n  },\n  {\n    \"message\": \"Collapse container\"\n  }\n]","access":"public","sys_mod_count":"70","includes":"","sys_updated_on":"2024-09-18 09:19:20","sys_tags":"","script":"function include({imports}) {\n\tconst OVERVIEW_ICONS = {\n\t\texpand: 'chevron-up-outline',\n\t\tcollapse: 'chevron-down-outline'\n\t};\n\tclass SOWControllerSNC {\n\t\tconstructor (props) {\n\t\t\tthis.props = props;\n\t\t}\n\n\t\tgetValidFields (requiredFields) {\n\t\t\trequiredFields = requiredFields ? requiredFields : this.props.requiredFields;\n\t\t\tlet fields = requiredFields.map(fieldName => {\n\t\t\t\tlet propsField = this.props.fields[fieldName];\n\t\t\t\tlet fieldValue = {};\n\t\t\t\tif (propsField) {\n\t\t\t\t\tfieldValue.label = `${propsField.label}${propsField.mandatory ? ' *' : ''}`;\n\t\t\t\t\tfieldValue.value = {\n\t\t\t\t\t\t\"type\": (propsField.type === \"html\") ? \"html\" : \"string\",\n\t\t\t\t\t\t\"value\": propsField.displayValue ? propsField.displayValue : '--'\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treturn fieldValue;\n\t\t\t});\n\n\t\t\tlet validFields = fields.filter(function(field) {\n\t\t\t\treturn JSON.stringify(field) !== \"{}\";\n\t\t\t});\n\t\t\treturn validFields;\n\t\t}\n\n\t\tgetSectionValues (fieldNames) {\n\t\t\tlet hideButton = fieldNames ? this.shouldHideCTA(null, fieldNames) || (this.props.isReadOnly) : true;\n\t\t\tlet expand = this.props.expandSection;\n\t\t\tif (expand && !hideButton)\n\t\t\t\texpand = false;\n\t\t\n\t\t\treturn {\n\t\t\t\thideButton,\n\t\t\t\texpand,\n\t\t\t\ticon: expand ? OVERVIEW_ICONS.expand : OVERVIEW_ICONS.collapse\n\t\t\t};\n\t\t}\n\n\t\tshouldHideCTA(fields, fieldNames) {\n\t\t\tfields = !fields ? this.props.fields : fields;\n\t\t\tconst arrFieldNames = fieldNames.split(',');\n\t\t\tlet hasValue = false;\n\t\t\tfor (const fieldName of arrFieldNames) {\n\t\t\t\tconst value = fields[fieldName] ? fields[fieldName].value + '' : null;\n\t\t\t\thasValue = value !== null && value !== '';\n\t\t\t\tif (hasValue)\n\t\t\t\t\tbreak;\n\t\t\t};\n\t\t\treturn hasValue;\n\t\t}\t\t\n\n\t\tasync toggleSection({ event, sectionState, helpers }) {\n\t\t\tconst {elementId} = event;\n\t\t\tconst expandSection = sectionState.expanded;\n\t\t\tconst editable = elementId === 'add_button' ? true : sectionState.isEdit;\n\t\t\tconst icon = expandSection ? OVERVIEW_ICONS.collapse : OVERVIEW_ICONS.expand;\n\t\t\tconst iconLabel = expandSection ? await helpers.translate(\"Expand container\") : await helpers.translate(\"Collapse container\");\n\t\t\treturn {\n\t\t\t\t...sectionState,\n\t\t\t\ticon: icon,\n\t\t\t\tisEdit: editable,\n\t\t\t\tlabel: iconLabel,\n\t\t\t\texpanded: !expandSection\n\t\t\t};\n\t\t}\n\t}\n\treturn SOWControllerSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"e09dcd960b105210ced5480b383749ca","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_update_name":"sys_ux_client_script_include_e09dcd960b105210ced5480b383749ca","sys_updated_by":"admin","api_name":"sn_sow.SOWControllerSNC","sys_created_on":"2024-08-30 16:19:59","name":"SOWControllerSNC","sys_name":"SOWControllerSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5ca1bcb3733320103e366238edf6a706","value":"5ca1bcb3733320103e366238edf6a706"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"0","includes":"c408debe430031102c5119405bb8f2b0","sys_updated_on":"2023-11-14 06:58:22","sys_tags":"","script":"function include({ imports }, api, helpers) {\n\n    const { EvalStatus, EmptyState } = imports[\"sn_access_analyzer.UserComparisonUtil\"](api, helpers);\n\n    class PresentationListController {\n\n        //--------------------------------------------------------------------------------//\n\n        constructor(tableStateName) {\n            this.tableStateName = tableStateName;\n            this.conf = {...api.state[tableStateName]};\n            this.conf.filterIndexList = this.conf.filterIndexList || [];\n            if(this.hasPagination()) {\n            \tthis.conf.pagination.paginationTriggeredBy = this.conf.pagination.paginationTriggeredBy || \"own\";\n            }\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        getSourceData() {\n            return this.conf.sourceData;\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        setSourceData(data) {\n            this.conf.sourceData = data || [];\n            this.conf.pagination.totalRows = data.length;\n            return this;\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        update(data) {\n            if (data) {\n                this.conf.sourceData = data;\n            }\n            if (this.conf.showDifferences == true) {\n                this.showDifference();\n            } else {\n                this._update(this.conf.sourceData);\n            }\n\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        _update(data, handleErrorMsg = true) {\n            this.hideLoader();\n            if (data == null || data.length == 0) {\n                if (handleErrorMsg) {\n                    EmptyState.showNoDataMessage(this.conf.name);\n                }\n                return;\n            }\n\n            this.conf.overlayDef = null;\n            this.conf.pagination.totalRows = this.conf.filterIndexList.length == 0 ? data.length : this.conf.filterIndexList.length;\n            \n            var result = this.hasPagination() ? this._getPageData(this.conf.pagination.page, this.conf.pagination.pageSize) : data;\n            if (result.length < this._getRenderedRowCount()) {\n                this.conf.pagination.paginationTriggeredBy = \"other\"\n            }\n\n            this._updateRowDef(result);\n            this.updateState();\n        }\n\n        //--------------------------------------------------------------------------------//\n        \n        _getRenderedRowCount() {\n        \t return this.conf.rowDef.rows ? this.conf.rowDef.rows.length : 0 ;\n        }\n        \n        //--------------------------------------------------------------------------------//\n\n        showDifference(callback) {\n            callback = callback || (row => row.baseUser != row.modelUser);\n            var result = this.filter(callback);\n            if (result.length == 0) {\n            \tvar msg = this.conf.messages ? this.conf.messages.noDifference : api.state[this.conf.name].messages.noDifference;\n            \tEmptyState.show(msg, this.conf.name);\n            }\n            this.updateState();\n            return this;\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        getFilteredData() {\n            var source = this.conf.sourceData;\n            return this.conf.filterIndexList.map(index => source[index]);\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        reset() {\n            this.conf.filterIndexList = [];\n            this._update(this.conf.sourceData);\n        }\n\n        //--------------------------------------------------------------------------------//\n        gotoPage(page, pageSize = null) {\n            pageSize = pageSize || this.conf.pagination.pageSize;\n            var data = this._getPageData(page, pageSize);\n            this._updateRowDef(data);\n            this.conf.pagination.page = page;\n            this.updateState();\n        }\n\n        //--------------------------------------------------------------------------------//\n        changePageSize(pageSize) {\n            this.conf.pagination.page = 0;\n            this.conf.pagination.pageSize = pageSize;\n            this.updateState();\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        filter(predicate) {\n            if (this.conf.sourceData == null || this.conf.sourceData.length == 0) {\n                return [];\n            }\n            var fi = [];\n            var rowData = this.conf.sourceData.filter((row, index) => {\n            \tvar res = predicate(row, index);\n                if (res) {\n                    fi.push(index);\n                }\n                row.selected = res;\n                return res;\n            });\n            this.conf.filterIndexList = fi;\n            this.conf.pagination.page = 0;\n            this._update(rowData, false);\n            return rowData;\n        }\n\n\n        //--------------------------------------------------------------------------------//\n\n        showMessage(obj) {\n            this.hideLoader();\n            EmptyState.show(obj, this.conf.name)\n        }\n\n        //--------------------------------------------------------------------------------//\n        showServerErrorMessage() {\n            this.hideLoader();\n            EmptyState.showServerErrorMessage(this.conf.name);\n        }\n\n        //--------------------------------------------------------------------------------//\n        updateHeader(header) {\n        \tthis.conf.colDef.columns.forEach(col => {\n                if (header[col.key] != undefined) {\n                    col.label = header[col.key];\n                }\n            });\n            this.updateState();\n        }\n\n        // -------------------------------------------------------------------------------- //\n\n        _getPageData(page = 0, pageSize = 10) {\n            var source = this.conf.sourceData;\n            if (this.conf.filterIndexList.length == 0) {\n                return source.slice(pageSize * page, Math.min(source.length, (page + 1) * pageSize));\n            }\n            var fi = this.conf.filterIndexList.slice(pageSize * page, Math.min(this.conf.filterIndexList.length, (page + 1) * pageSize));\n            return fi.map(index => source[index]);\n        }\n\n        //--------------------------------------------------------------------------------//\n        _mapRowData(rowData) {\n            var row = {};\n            var colDef = this.conf.colDef.columns;\n            rowData = this.conf.useRowMapper == false ? rowData : this.rowMapper(rowData);\n            colDef.forEach(col => {\n                var key = col.key;\n                var colData = rowData[key];\n                if (col.type == \"custom\") {\n                    row[key] = {\n                        componentProps: {\n                            label: col.translate == true ? EvalStatus.getTranslatedText(colData): colData.label,\n                            icon: colData.icon,\n                            variant: 'tertiary',\n                            showIcon: colData.icon != '',\n                            color: colData.color\n                        }\n                    };\n                } else {\n                    if (typeof (colData) == \"object\") {\n                        row[key] = colData;\n                    } else {\n                        row[key] = {\n                            value: colData\n                        }\n                    }\n                }\n            });\n            return row;\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        hideLoader() {\n            this.conf.loadingState = false;\n            this.updateState();\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        handlePagination(event) {\n            if (this.conf.pagination.paginationTriggeredBy == \"other\") {\n                this.conf.pagination.paginationTriggeredBy = \"own\";\n                return;\n            }\n            if (event.name == 'NOW_PAGINATION_CONTROL#SELECTED_PAGE_SET') {\n                this.gotoPage(event.payload.value);\n            } else {\n                this.changePageSize(event.payload.value);\n            }\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        _updateRowDef(list) {\n        \tEmptyState.hide(this.conf.name);\n        \tvar rows = list.map((rowData, index) => {\n        \t\trowData.selected = true;\n        \t\treturn {\n                    key: index,\n                    cells: this._mapRowData(rowData)\n                };\n        \t})\n        \t\n            this.conf.rowDef = {rows: rows};\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        updateState() {\n            api.setState(this.tableStateName, this.conf);\n        }\n\n        //--------------------------------------------------------------------------------//\n\n        rowMapper(input) {\n            var obj = { ...input };\n            obj.baseUser = EvalStatus.get(input.baseUser);\n            obj.modelUser = EvalStatus.get(input.modelUser);\n            return obj;\n        }\n\n        //--------------------------------------------------------------------------------//\n        \n        hasPagination() {\n        \treturn this.conf.pagination != undefined\n        }\n    }\n\n    return {\n        getController: (tableStateName) => {\n            return new PresentationListController(tableStateName);\n        }\n    }\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"e3a5416d439131102c5119405bb8f286","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_update_name":"sys_ux_client_script_include_e3a5416d439131102c5119405bb8f286","sys_updated_by":"admin","api_name":"sn_access_analyzer.PresentationListController","sys_created_on":"2023-09-15 08:30:42","name":"PresentationListController","sys_name":"PresentationListController","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/21d5e77677171110638cfe21fe5a993c","value":"21d5e77677171110638cfe21fe5a993c"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"1.0.0","required_translations":"","access":"package_private","sys_mod_count":"46","includes":"881d20a10fe21010ad4437a98b767e2a,17c0853d0fa61010ad4437a98b767e13,80fa766c0f662010ad4437a98b767e8d","sys_updated_on":"2021-02-23 13:24:47","sys_tags":"","script":"function include({\n    imports\n}) {\n    const {\n        'sn_vtb.constants': constantsInclude,\n        'sn_vtb.utils': utilsInclude,\n        'sn_vtb.moveLane': moveLane\n    } = imports;\n    const {\n        cloneDeep,\n        get,\n        replaceItemInArray,\n        deleteItemInArray,\n        execGraphQLEndPoint,\n        setFocusableElementOnBoard,\n        resetFocusableItemOnBoard\n    } = utilsInclude();\n    const {\n        DATA_BROKER_OP: {\n            LANE_MOVE,\n            SWIMLANE_MOVE,\n            SET_USER_PREFERENCE,\n            LANE_HEADER_UPDATED\n        }\n    } = constantsInclude();\n\n    const moveSwimlaneOptimisticHandler = (boardState, boardFocusState, payload) => {\n        const {\n            boardState: newBoardState,\n            laneIdList\n        } = moveSwimlaneHandler(boardState, payload);\n        let boardStateWithoutFocus = resetFocusableItemOnBoard(newBoardState, boardFocusState);\n        let {swimlanes: updatedSwimlanes} = boardStateWithoutFocus;\n        const {id: swimlaneId} = payload;\n        let swimlaneWithFocus = updatedSwimlanes.find(sl => sl.sys_id === swimlaneId);\n        swimlaneWithFocus.isFocus = true;\n        updatedSwimlanes = replaceItemInArray(updatedSwimlanes, swimlaneWithFocus);\n        const newBoardStateWithFocussedSwimlane = {\n            ...boardStateWithoutFocus,\n            swimlanes: updatedSwimlanes\n        }\n        const newBoardFocusState = {\n            operation: 'MOVE_SWIMLANE',\n            id: swimlaneWithFocus.sys_id,\n            elementType: 'swimlane'\n        }\n\n        const dbPayload = moveLaneDbOperationPayload({\n            laneIdList,\n            isSwimLane: true\n        });\n\n        return {\n            newBoardState: newBoardStateWithFocussedSwimlane,\n            newBoardFocusState,\n            dbPayload\n        }\n    };\n\n    const moveLaneOptimisticHandler = (boardState, boardFocusState, payload) => {\n        const {\n            boardState: newBoardState,\n            laneIdList\n        } = moveLaneHandler(boardState, payload);\n        let boardStateWithoutFocus = resetFocusableItemOnBoard(newBoardState, boardFocusState);\n        let {lanes: updatedLanes} = boardStateWithoutFocus;\n        const {id: laneId} = payload;\n        let laneWithFocus = updatedLanes.find(l => l.sys_id === laneId);\n        laneWithFocus.isFocus = true;\n        updatedLanes = replaceItemInArray(updatedLanes, laneWithFocus);\n        const newBoardStateWithFocussedLane = {\n            ...boardStateWithoutFocus,\n            lanes: updatedLanes\n        }\n        const newBoardFocusState = {\n            operation: 'MOVE_LANE',\n            id: laneWithFocus.sys_id,\n            elementType: 'lane'\n        }\n\n        const dbPayload = moveLaneDbOperationPayload({\n            laneIdList\n        });\n\n        return {\n            newBoardState: newBoardStateWithFocussedLane,\n            newBoardFocusState,\n            dbPayload\n        }\n    };\n\n    const moveLaneHandler = (boardState, payload) => {\n        const {\n            id,\n            fromPosition,\n            toPosition\n        } = payload;\n        const {\n            lanes,\n            hidden_lanes: hiddenLanes\n        } = boardState;\n        const modifiedLanes = moveLane({\n            fromPosition,\n            id,\n            toPosition,\n            lanes,\n            hiddenLanes\n        });\n        const laneIdList = modifiedLanes.map(lane => lane.sys_id);\n        return {\n            laneIdList,\n            boardState: {\n                ...boardState,\n                lanes: modifiedLanes\n            }\n        }\n    };\n\n    const moveSwimlaneHandler = (boardState, payload) => {\n        const {\n            fromPosition,\n            toPosition,\n            id\n        } = payload;\n        const {\n            swimlanes: lanes,\n            hidden_lanes: hiddenLanes\n        } = boardState;\n\n        const modifiedLanes = moveLane({\n            fromPosition,\n            id,\n            toPosition,\n            lanes,\n            hiddenLanes\n        });\n        const laneIdList = modifiedLanes.map(lane => lane.sys_id);\n\n        return {\n            laneIdList,\n            boardState: {\n                ...boardState,\n                swimlanes: modifiedLanes\n            }\n        }\n    };\n\n    const reorderLanes = (boardState, payload) => {\n        const {\n            lanes,\n            swimlanes = []\n        } = boardState;\n\n        let {\n            laneIdList: reorderedIds\n        } = payload;\n\n        const storeLaneObjs = {};\n        lanes.forEach((lane) => (storeLaneObjs[lane.sys_id] = lane));\n        let reorderedLanes,\n            reorderedSwimlanes,\n            slReorderedIds = [];\n\n        // Reordered lane id's may contain lanes that do not yet exist in the board, filter them out\n        const lReorderedIds = reorderedIds.filter((id) => storeLaneObjs[id]);\n        if (lReorderedIds.length > 0) {\n            reorderedLanes = lReorderedIds.map((laneId, index) => {\n                const lane = cloneDeep(storeLaneObjs[laneId]);\n                lane.order = reorderedIds.indexOf(laneId);\n                return lane;\n            });\n        }\n\n        // 1.message.data is either a list of lane ids or swimlane ids for lane move\n        // 2.message.data is both lane and swimlane ids (as order in vtb_lane.list) for\n        // lane add and lane delete\n        // TODO: Try if we can get lanetype from AMB response.\n        if (swimlanes.length > 0) {\n            const storeSlaneObjs = {};\n            swimlanes.forEach((lane) => (storeSlaneObjs[lane.sys_id] = lane));\n            slReorderedIds = reorderedIds.filter((id) => storeSlaneObjs[id]);\n            if (slReorderedIds.length > 0) {\n                reorderedSwimlanes = slReorderedIds.map((laneId, index) => {\n                    const sLane = cloneDeep(storeSlaneObjs[laneId]);\n                    sLane.order = reorderedIds.indexOf(laneId);\n                    return sLane;\n                });\n            }\n        }\n        return {\n            ...boardState,\n            lanes: lReorderedIds.length > 0 ? reorderedLanes : lanes,\n            swimlanes: slReorderedIds.length > 0 ? reorderedSwimlanes : swimlanes\n        }\n    };\n\n    const moveLaneDbOperationPayload = (payload) => {\n        const {\n            laneIdList,\n            isSwimLane\n        } = payload;\n\n        return {\n            operationName: isSwimLane ? SWIMLANE_MOVE : LANE_MOVE,\n            operationPayload: {\n                laneIdList\n            }\n        }\n    };\n\n    const fetchArchiveCards = (boardState, payload, emit) => {\n        console.log('fetch archive cards');\n        execGraphQLEndPoint('FETCH_ARCHIVE_CARDS', {\n            boardId: boardState.sys_id\n        }, emit);\n    }\n    const archiveCardsByLaneSuccessHandler = (boardState, payload, emit) => {\n        const updatedLane = payload.data.output.data.GlideVisualBoard_Mutation.archiveAllCardsByLane;\n\n        const {\n            sys_id,\n            lanes,\n            swimlanes\n        } = boardState;\n        if (updatedLane) {\n\n            let existingLane;\n            if (updatedLane.is_swim_lane) {\n                existingLane = swimlanes.find((sl) => sl.sys_id === updatedLane.sys_id);\n            } else {\n                existingLane = lanes.find((lane) => lane.sys_id === updatedLane.sys_id);\n            }\n            if (!existingLane) return;\n            fetchArchiveCards(boardState, payload, emit);\n\n        }\n    };\n\n    const createLaneRequestSuccessHandler = (boardState, boardFocusState, payload) => {\n        const updatedLane = payload.data.output.data.GlideVisualBoard_Mutation.createLane;\n\n        if (updatedLane) {\n\n            if (boardState.boardType !== 'GUIDED') {\n                updatedLane.editing = true;\n            }\n            if (updatedLane.is_swim_lane) {\n                const lanes = [...boardState.swimlanes, updatedLane];\n                const boardStateWithNewSwimlane = {\n                    ...boardState,\n                    swimlanes: lanes\n                }\n                //const updatedBoard = setFocusableElementOnBoard('CREATE_LANE_REQUEST', boardFocusState, null, boardStateWithNewSwimlane);\n                const updatedBoardState = resetFocusableItemOnBoard(boardStateWithNewSwimlane , boardFocusState);\n                const updatedBoardFocusState = {\n                    operation: 'CREATE_LANE_REQUEST',\n                    id: 'addNewSwimlane_sysId',\n                    elementType: 'swimlane'\n                }\n\n                return {\n                    newBoardDirtyState: updatedBoardState,\n                    newBoardFocusState: updatedBoardFocusState,\n                }\n\n            } else {\n                const lanes = [...boardState.lanes, updatedLane];\n                const boardStateWithNewLane = {\n                   ...boardState,\n                   lanes\n                }\n                const boardStateWithoutFocus = resetFocusableItemOnBoard(boardStateWithNewLane , boardFocusState);\n                return {\n                     newBoardDirtyState : boardStateWithoutFocus\n                }\n            }\n        }\n    };\n\n    const setUserPreferenceSuccessHandler = (board, payload) => {\n        const pref = payload.data.output.data.GlideDomain_Mutation.user.setPreference;\n\n        if (pref) {\n            const {\n                name,\n                value\n            } = pref;\n            if (name === 'vtb.board.' + board.sys_id + '.hiddenLanes') {\n                const updatedHiddenLanes = value.split('-');\n                return {\n                    ...board,\n                    hidden_lanes: updatedHiddenLanes\n                };\n            }\n        }\n    };\n\n    const updateLaneHeaderSuccessHandler = (board, payload) => {\n        const updatedLane = payload.data.output.data.GlideVisualBoard_Mutation.updateLane;\n\n        const {\n            lanes,\n            swimlanes\n        } = board;\n        const {\n            sys_id: laneId,\n            name: name\n        } = updatedLane;\n        let changedLane, existingLane;\n\n        if (updatedLane.is_swim_lane) {\n            existingLane = swimlanes.find((sl) => sl.sys_id === laneId);\n        } else {\n            existingLane = lanes.find((l) => l.sys_id === laneId);\n        }\n        changedLane = cloneDeep(existingLane);\n        changedLane.name = name;\n        changedLane.editing = false;\n        changedLane.title = name;\n\n        if (changedLane.is_swim_lane) {\n            const updatedSwimlanes = replaceItemInArray(swimlanes, changedLane);\n            return {\n                ...board,\n                swimlanes: updatedSwimlanes\n            };\n        } else {\n            const updatedLanes = replaceItemInArray(lanes, changedLane);\n            return {\n                ...board,\n                lanes: updatedLanes\n            };\n        }\n    };\n\n\tconst archiveCard = (card, laneId) => {\n\t\tif (card.lane_id === laneId || card.swim_lane_id === laneId) {\n\t\t\tconst clonedCard = cloneDeep(card);\n\t\t\tclonedCard.removed = true;\n\t\t\treturn clonedCard;\n\t\t}\n\t\treturn card;\n\t}\n\n\tconst archiveCardsByLaneId = (laneId, board) => {\n\t\treturn board.cards.map((card) => archiveCard(card, laneId))\n\t}\n\n    const deleteLaneAndArchiveItsCards = (laneId, board) => {\n\tif (laneId) {\n\t\tconst {\n\t\t\tlanes,\n\t\t\tswimlanes\n\t\t\t} = board;\n\t\t\tconst swimlane = swimlanes.find((swimlane) => swimlane.sys_id === laneId);\n\t\t\tif (swimlane) {\n\t\t\t\tconst updatedSwimlanes = deleteItemInArray(swimlanes, swimlane);\n\t\t\t\treturn {\n\t\t\t\t\t...board,\n\t\t\t\t\tcards: archiveCardsByLaneId(laneId, board),\n\t\t\t\t\tswimlanes: updatedSwimlanes\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst lane = lanes.find((lane) => lane.sys_id === laneId);\n\t\t\t\tif (lane) {\n\t\t\t\t\tconst updatedLanes = deleteItemInArray(lanes, lane);\n\t\t\t\t\treturn {\n\t\t\t\t\t\t...board,\n\t\t\t\t\t\tcards: archiveCardsByLaneId(laneId, board),\n\t\t\t\t\t\tlanes: updatedLanes\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst deleteLaneHeaderSuccessHandler = (boardState, boardFocusState, payload)  => {\n\t\tconst laneId = payload.data.output.data.GlideVisualBoard_Mutation.deleteLane;\n\t\tconst {\n\t\t\tlanes,\n\t\t\tswimlanes\n\t\t} = boardState;\n\t\tlet laneType;\n\t\tlet deletedLane;\n\t\tdeletedLane = lanes.find((lane) => lane.sys_id === laneId);\n\t\tif(deletedLane) {\n            laneType = \"lane\";\n        }else {\n            deletedLane = swimlanes.find((sl) => sl.sys_id === laneId);\n            laneType = \"swimlane\";\n        }\n\t\tconst updatedBoard = setFocusableElementOnBoard({\n            operation: 'DELETE_LANE',\n            boardFocusState,\n            boardState,\n            element: deletedLane,\n            elementType: laneType\n\t\t});\n\t\tconst boardStateAfterDelete = deleteLaneAndArchiveItsCards(laneId, updatedBoard.boardState);\n\t\t return {\n            newBoardDirtyState: boardStateAfterDelete,\n            newBoardFocusState: updatedBoard.boardFocusState\n         }\n\t};\n\n    const fetchVTBUsersSuccessHandler = function(board, payload) {\n        const assignees = payload.data.output.data.GlideVisualBoard_Query.getUsers;\n        const newUsers = assignees.map((user) => ({\n            ...user,\n            isMember: false\n        }));\n        return {\n            ...board,\n            users: [...board.users, ...newUsers]\n        }\n    };\n\n    const swimlaneActionHandler = (boardState, payload) => {\n        const {\n            type\n        } = payload;\n        const swimlanes = cloneDeep(boardState.swimlanes);\n\n        switch (type) {\n            case 'VTB#COLLAPSE_ALL_SWIMLANES':\n                swimlanes.forEach((lane) => (lane.collapsed = true));\n                break;\n            case 'VTB#EXPAND_ALL_SWIMLANES':\n                swimlanes.forEach((lane) => (lane.collapsed = false));\n                break;\n            case 'VTB#TOGGLE_SWIMLANE_BODY':\n                const {\n                    payload: {\n                        id,\n                        collapsed\n                    }\n                } = payload;\n                const swimlane = swimlanes.find((sl) => sl.sys_id === id);\n                if (!swimlane) return;\n                swimlane.collapsed = collapsed;\n                break;\n        }\n\n        return {\n            ...boardState,\n            swimlanes\n        };\n    };\n\n    const hideLaneOptimisticHandler = (boardState, boardFocusState, payload) => {\n        const {\n            laneId\n        } = payload;\n        if (!laneId) return;\n        let returnVal = {};\n\n        const {\n            hidden_lanes,\n            sys_id: boardId,\n            swimlanes,\n            lanes\n        } = boardState;\n        let laneType;\n        let hiddenLane = lanes.find(l => l.sys_id === laneId);\n        if(hiddenLane)\n            laneType = \"lane\";\n        else {\n            hiddenLane = swimlanes.find(sl => sl.sys_id === laneId);\n            laneType = \"swimlane\";\n        }\n        if(hiddenLane) {\n            const updatedBoard = setFocusableElementOnBoard({operation: 'HIDE_LANE',\n             boardFocusState,\n             boardState,\n             element: hiddenLane,\n             elementType: laneType\n             });\n            returnVal.newBoardState = updatedBoard.boardState;\n            returnVal.newBoardFocusState = updatedBoard.boardFocusState;\n        }\n        const updatedHiddenLanes = [...hidden_lanes, laneId];\n        returnVal.dbPayload = {\n            operationName: SET_USER_PREFERENCE,\n            operationPayload: {\n                name: 'vtb.board.' + boardId + '.hiddenLanes',\n                value: updatedHiddenLanes.join('-')\n            }\n        }\n\n        return returnVal;\n    };\n\n    const getQuery = (lane) => {\n        if (!lane) return '';\n        const {\n            table,\n            lane_field,\n            swimlane_field\n        } = lane.options;\n        const field = lane.is_swim_lane ? swimlane_field : lane_field;\n        if (field === '__KANBAN__') return '';\n        if (lane.is_choice_lane) {\n            const value = getChoiceValue(lane.value, table);\n            return `${field}=${value}`;\n        }\n        return `${field}=${lane.value}`;\n    };\n\n    const getChoiceValue = (value, table) => {\n        return value\n            .split(',')\n            .find((item) => item.indexOf(table > -1))\n            .split(':')[1];\n    };\n\n  const laneHeaderOptimisticUpdateHandler = (boardState, boardDirtyState, payload) => {\n    const { laneId, name: newName } = payload;\n    const { lanes, swimlanes } = boardState;\n    let isSwimlane = false;\n    let currentLane = lanes.find((lane) => lane.sys_id === laneId);\n    if(!currentLane){\n        isSwimlane = true;\n        currentLane = swimlanes.find((slane) => slane.sys_id === laneId);\n    }\n\n    const dirtyState = {\n      ...boardDirtyState,\n      [LANE_HEADER_UPDATED]: {\n        ...payload,\n        name: currentLane.name,\n      },\n    };\n\n    const changedLane = {\n      ...currentLane,\n      name: newName,\n    };\n\n    const updatedLanes =\n        isSwimlane ? replaceItemInArray(swimlanes, changedLane) : replaceItemInArray(lanes, changedLane);\n\n    const newBoardState = {\n        ...boardState,\n        lanes: isSwimlane ? lanes : updatedLanes,\n        swimlanes: isSwimlane ? updatedLanes : swimlanes\n    };\n\n    const dbPayload = {\n      operationName: LANE_HEADER_UPDATED,\n      operationPayload: {\n        laneId: laneId,\n        name: newName,\n      },\n    };\n\n    return {\n      newBoardState: newBoardState,\n      dbPayload: dbPayload,\n      boardDirtyState: dirtyState,\n    };\n  };\n\n  const laneHeaderUpdateFailureHandler = (boardState, payload) => {\n      const {laneId, name} = payload;\n      const { lanes, swimlanes } = boardState;\n      let isSwimlane = false;\n      let currentLane = lanes.find((lane) => lane.sys_id === laneId);\n      if(!currentLane){\n          isSwimlane = true;\n          currentLane = swimlanes.find((slane) => slane.sys_id === laneId);\n      }\n      const changedLane = { ...currentLane, name: name};\n      const updatedLanes =\n          isSwimlane ? replaceItemInArray(swimlanes, changedLane) : replaceItemInArray(lanes, changedLane);\n\n      return {\n          ...boardState,\n          lanes: isSwimlane ? lanes : updatedLanes,\n          swimlanes: isSwimlane ? updatedLanes : swimlanes\n      }\n  }\n\n    return {\n\t    deleteLaneAndArchiveItsCards,\n        moveLaneOptimisticHandler,\n        moveSwimlaneOptimisticHandler,\n        reorderLanes,\n        archiveCardsByLaneSuccessHandler,\n        createLaneRequestSuccessHandler,\n        setUserPreferenceSuccessHandler,\n        updateLaneHeaderSuccessHandler,\n        deleteLaneHeaderSuccessHandler,\n        fetchArchiveCards,\n        fetchVTBUsersSuccessHandler,\n        swimlaneActionHandler,\n        hideLaneOptimisticHandler,\n        laneHeaderOptimisticUpdateHandler,\n        laneHeaderUpdateFailureHandler,\n        getQuery\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"e3e0d376b7e21010ad44ea56ee11a924","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_e3e0d376b7e21010ad44ea56ee11a924","sys_updated_by":"admin","api_name":"sn_vtb.laneHandlers","sys_created_on":"2020-08-14 18:02:42","name":"laneHandlers","sys_name":"laneHandlers","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"Task Sys Id (taskSysId), Task Table (taskTable) are mandatory Inputs\"\n    },\n    {\n        \"message\": \"communicationPlanIds, planFilters, dataFilters should be in Array Format\"\n    },\n    {\n        \"message\": \"ICT Data has been successfully processed\"\n    },\n    {\n        \"message\": \"Direct chat data has been fetched successfully\"\n    },\n    {\n        \"message\": \"Direct call data has been fetched successfully\"\n    },\n    {\n        \"message\": \"ICT data processing has failed. No results were found for the requested Task Sys ID\"\n    },\n    {\n        \"message\": \"Task communication management plugin is not installed\"\n    },\n    {\n        \"message\": \"In Session\"\n    },\n    {\n        \"message\": \"Completed\"\n    },\n    {\n        \"message\": \"Completed ({0}x)\"\n    },\n    {\n        \"message\": \"Not started\"\n    },\n    {\n        \"message\": \"Not started\"\n    },\n    {\n        \"message\": \"Started\"\n    },\n    {\n        \"message\": \"Sent\"\n    },\n    {\n        \"message\": \"Sent ({0}x)\"\n    },\n    {\n        \"message\": \"Not sent\"\n    }\n]","access":"package_private","sys_mod_count":"100","includes":"","sys_updated_on":"2024-04-12 06:22:41","sys_tags":"","script":"function include({ imports }) { \n    class CommunicationDetailsTaskFilterUtilSNC {\n        static CONSTANTS = {\n            FILTERS: {\n                PLAN_FILTERS: {\n                    COMMUNICATIONTASKS: \"COMMUNICATIONTASKS\",\n                    COLLABORATIONTASKS: \"COLLABORATIONTASKS\",\n                    COLLABORATIONTASKSCHAT: \"COLLABORATIONTASKSCHAT\",\n                    COLLABORATIONTASKSCALL: \"COLLABORATIONTASKSCALL\",\n                    ADHOCTASKS: \"ADHOCTASKS\",\n                    ADHOCCOMMUNICATIONTASKS: \"ADHOCCOMMUNICATIONTASKS\",\n                    ADHOCCOLLABORATIONTASKS: \"ADHOCCOLLABORATIONTASKS\",\n                    ADHOCCOLLABORATIONTASKSCHAT: \"ADHOCCOLLABORATIONTASKSCHAT\",\n                    ADHOCCOLLABORATIONTASKSCALL: \"ADHOCCOLLABORATIONTASKSCALL\",\n                },\n                DATA_FILETRS: {\n                    DIRECTCHAT: \"DIRECTCHAT\",\n                    DIRECTCALL: \"DIRECTCALL\",\n                    SUPRESSCOMMPLANS: \"SUPRESSCOMMPLANS\",\n                },\n            },\n            ICT_TASK_TYPE: \"ICT_DATA\",\n            DIRECT_CHAT_DATA_TYPE: \"DIRECT_CHAT\",\n            DIRECT_CALL_DATA_TYPE: \"DIRECT_CALL\",\n            TASK_TYPE_COMMUNICATION: \"communication\",\n            TASK_TYPE_COLLABORATION: \"collaboration\",\n            COLLABTYPE_CALL: \"call\",\n            COLLABTYPE_CHAT: \"chat\",\n            RECORD_WATCHER_MESSAGE: \"CONTROLLER_RECORD_WATCHER#MESSAGE_RECEIVED\",\n            TABLE: {\n                COMM_CHANNEL_CONFERENCE: {\n                    FIELDS: {\n                        STATE: {\n                            VALUE: {\n                                STARTED: \"started\"\n                            }\n                        }\n                    }\n                },\n                COMM_TASK: {\n                    FIELDS: {\n                        COMMUNICATION_FREQUENCY: {\n                            VALUE: {\n                                ONE_TIME: \"one_time\"\n                            }\n                        },\n                        STATE: {\n                            VALUE: {\n                                OPEN: \"1\",\n                                PENDING: \"-5\",\n                                SKIPPED: \"7\"\n                            }\n                        }\n                    }\n                }\n            }\n        };\n\n        static getOutputTemplate() {\n            return {\n                status: false,\n                type: \"\",\n                error_messages: [],\n                success_messages: [],\n                ICT_DATA: {},\n            };\n        }\n        static async getTranslatedMessages(helpers) {\n            const translatedMessages = {\n                INVALID_INPUT_ERROR_MESSAGE: await helpers.translate(\"Task Sys Id (taskSysId), Task Table (taskTable) are mandatory Inputs\"),\n                INVALID_FILTERS_ERROR_MESSAGE: await helpers.translate( \"communicationPlanIds, planFilters, dataFilters should be in Array Format\"),\n                ICT_DATA_PROCESSED_SUCCESS_MESSAGE: await helpers.translate( \"ICT Data has been successfully processed\"),\n                DIRECT_CHAT_DATA_SUCCESS_MESSAGE: await helpers.translate( \"Direct chat data has been fetched successfully\" ),\n                DIRECT_CALL_DATA_SUCCESS_MESSAGE: await helpers.translate( \"Direct call data has been fetched successfully\" ),\n                ICT_DATA_PROCESSED_FAILURE_MESSAGE: await helpers.translate( \"ICT data processing has failed. No results were found for the requested Task Sys ID\" ),\n                TCM_PLUGIN_NOT_INSTALLED: await helpers.translate( \"Task communication management plugin is not installed\" )\n            };\n            return translatedMessages;\n        }\n\n        static filteredDataOutput(api, outputObj) {\n            api.emit(\"COMMUNICATION_DETAILS_DATA_FILTER_CONTROLLER_OUTPUT\", {\n                controllerOutput: outputObj,\n            });\n        }\n\n        static evaluateFilterConditions(planFilters, inputFilters) {\n            inputFilters = inputFilters.map(function (filter) {\n                return filter.toUpperCase();\n            });\n            let filterConditions = {};\n            planFilters.map(function (filter) {\n                if (inputFilters.indexOf(filter) > -1) filterConditions[filter] = true;\n                else filterConditions[filter] = false;\n            });\n            return filterConditions;\n        }\n\n        static async getFormattedStatus(commTask, helpers) {\n            const commCount = Number(commTask.comm_count.value);\n            switch (commTask.collabType) {\n                case this.CONSTANTS.COLLABTYPE_CALL:\n                    if (commTask.channels[0].state.value === this.CONSTANTS.TABLE.COMM_CHANNEL_CONFERENCE.FIELDS.STATE.VALUE.STARTED)\n                        return await helpers.translate(\"In Session\");\n                    if (commCount > 0) {\n                        if (commTask.communication_frequency.value === this.CONSTANTS.TABLE.COMM_TASK.FIELDS.COMMUNICATION_FREQUENCY.VALUE.ONE_TIME)\n                            return await helpers.translate(\"Completed\");\n                        return await helpers.translate(\"Completed ({0}x)\", commCount);\n                    }\n                    return await helpers.translate(\"Not started\");\n                case this.CONSTANTS.COLLABTYPE_CHAT:\n                    if (commTask.active.value === \"true\")\n                        return commTask.state.display_value;\n                    if (commTask.state.value === this.CONSTANTS.TABLE.COMM_TASK.FIELDS.STATE.VALUE.OPEN || commTask.state.value === this.CONSTANTS.TABLE.COMM_TASK.FIELDS.STATE.VALUE.PENDING)\n                        return await helpers.translate(\"Not started\");\n                    return await helpers.translate(\"Started\");\n                default:\n                    if (commTask.state.value === this.CONSTANTS.TABLE.COMM_TASK.FIELDS.STATE.VALUE.SKIPPED)\n                        return commTask.state.display_value;\n                    if (commCount > 0) {\n                        if (commTask.communication_frequency.value === this.CONSTANTS.TABLE.COMM_TASK.FIELDS.COMMUNICATION_FREQUENCY.VALUE.ONE_TIME)\n                            return await helpers.translate(\"Sent\");\n                        return await helpers.translate(\"Sent ({0}x)\", commCount);\n                    }\n                    return await helpers.translate(\"Not sent\");\n            }\n        }\n\n        /**\n         * Build Filtered Data\n         * @param commPlans \n         * @param plan filters \n         * Iterate over commplans and for each task in commPlan , if Task is communication will add taskType = \"communication\" in task object \n         * If Task is collab , taskType = \"collaboration\" is added to Task object along with it collabType =\"call\" / \"chat\" is added\n         */\n        static async buildFilteredDataForCommAndCollab(commPlans,filterConditions,inputPlanFilters, extraParamsNeeded, helpers) {\n            let hasCollabChat = false, hasCollabCalls = false, filteredPlans = [];\n            let canAddAdhocFilter = false;\n            for (const plan of commPlans) {\n                let filteredTasks = [];\n                let isAdhoc = (plan.comm_plan_definition && !plan.comm_plan_definition.value);\n                for (const task of plan.comm_tasks) {\n                    if (task.comm_task_definition && !task.comm_task_definition.value)\n                        task.adhoc = true;\n                    if (task.channels.length > 0 && task.channels[0].channelType.value === 'conference') {\n                        task.taskType = this.CONSTANTS.TASK_TYPE_COLLABORATION;\n                        task.collabType = this.CONSTANTS.COLLABTYPE_CALL;\n                        task.formattedStatus = await this.getFormattedStatus(task, helpers);\n                        if (filterConditions && ((filterConditions.COLLABORATIONTASKS) || (filterConditions.COLLABORATIONTASKSCALL) || ((filterConditions.ADHOCTASKS || filterConditions.ADHOCCOLLABORATIONTASKS || filterConditions.ADHOCCOLLABORATIONTASKSCALL) && task.adhoc))) {\n                            hasCollabCalls = true;\n                            filteredTasks.push(task);\n                        } \n                    } else if (task.channels.length > 0 && task.channels[0].is_collaboration_chat) {\n                        task.taskType = this.CONSTANTS.TASK_TYPE_COLLABORATION;\n                        task.collabType = this.CONSTANTS.COLLABTYPE_CHAT;\n                        task.formattedStatus = await this.getFormattedStatus(task, helpers);\n                        if (filterConditions && (filterConditions.COLLABORATIONTASKS || filterConditions.COLLABORATIONTASKSCHAT || ((filterConditions.ADHOCTASKS || filterConditions.ADHOCCOLLABORATIONTASKS || filterConditions.ADHOCCOLLABORATIONTASKSCHAT) && task.adhoc))\n                        ) {\n                            hasCollabChat = true;\n                            filteredTasks.push(task);\n                        } \n                    } else {\n                        task.taskType = this.CONSTANTS.TASK_TYPE_COMMUNICATION;\n                        task.formattedStatus = await this.getFormattedStatus(task, helpers);\n                        if (filterConditions && (filterConditions.COMMUNICATIONTASKS)) {\n                            filteredTasks.push(task);\n                        } else if (filterConditions && ((filterConditions.ADHOCTASKS) || (filterConditions.ADHOCCOMMUNICATIONTASKS)) && task.adhoc) {\n                            filteredTasks.push(task);\n                        }\n                    }\n                }\n                if (inputPlanFilters.length > 0) {\n                    plan.comm_tasks = filteredTasks;\n                    canAddAdhocFilter = (filteredTasks.length && extraParamsNeeded && isAdhoc) || canAddAdhocFilter;\n                    if (filteredTasks.length && extraParamsNeeded && !isAdhoc) {\n                        filteredPlans.push({\n                            id: plan.sys_id.value,\n                            label: plan.short_description.display_value\n                        });\n                    }\n                }\n            }\n            if (canAddAdhocFilter) {\n                filteredPlans.push({\n                  id: \"ad_hoc_communications\",\n                  label: await helpers.translate(\"Ad-hoc communications\"),\n                });\n            }\n            return {\n                hasCollabChat: hasCollabChat,\n                hasCollabCalls: hasCollabCalls,\n                filteredPlans: filteredPlans,\n                commPlans: commPlans\n            };\n        };\n\n        /**\n         * Filter input plan data\n         * @param commPlans \n         * @param plan filters \n         * Iterate over each plan and filter out if does not match input commPlan id, in case of no input commPlan Ids, all plans are retained\n         * Passes the data over to another filter function to apply filter conditions, and returns output data along with errors\n         */\n        static async filterPlanData(commPlans, commPlanIds, needsErrorMsg, extraParamsNeeded, filterConditions, inputPlanFilters, helpers) {\n            let errorMessage = \"\";\n            if (commPlanIds && commPlanIds.length) {\n                let plans = [];\n                let planIdsFound = [];\n                commPlans.forEach((plan) => {\n                    let commPlanSysId = plan.sys_id && plan.sys_id.value ? plan.sys_id.value : plan.commPlanSysId;\n                    if (commPlanIds.indexOf(commPlanSysId) > -1) {\n                        plans.push(plan);\n                        if (needsErrorMsg) planIdsFound.push(commPlanSysId);\n                    }\n                });\n                if (needsErrorMsg) {\n                    let planIdsNotFound = commPlanIds.filter(\n                        (x) => !(planIdsFound.indexOf(x) > -1)\n                    );\n                    if (planIdsNotFound.length > 0) {\n                        let errorMessage = planIdsNotFound.join(\",\") + \" plan id/ids not found\";\n                    }\n                }\n                return {\n                    errorMessage: errorMessage,\n                    commPlanData: await this.buildFilteredDataForCommAndCollab(plans, filterConditions, inputPlanFilters, extraParamsNeeded, helpers)\n                };\n            } else return {\n                    errorMessage: errorMessage,\n                    commPlanData: await this.buildFilteredDataForCommAndCollab(commPlans, filterConditions, inputPlanFilters, extraParamsNeeded, helpers)\n            }\n        };\n\n         /**\n         * Filter input plan data\n         * @param commTasksByStatus\n         * @param plan filters \n         * Iterate over each plan and filter out if does not match input commPlan id, in case of no input commPlan Ids, all plans are retained\n         * Passes the data over to another filter function to apply filter conditions, and returns output data\n         */\n        static async filterStatusData(statusGroups, commPlanIds, extraParamsNeeded, filterConditions, inputPlanFilters, helpers) {\n            if (commPlanIds && commPlanIds.length) {\n                statusGroups.forEach((statusGroup) => {\n                    let i = statusGroup.comm_tasks.length;\n                    while (i--) {\n                        let commTask = statusGroup.comm_tasks[i];\n                        if (commPlanIds.indexOf(commTask.commPlanSysId) < 0) statusGroup.comm_tasks.splice(i, 1);\n                    }\n                });\n            }\n            return await this.buildFilteredDataForCommAndCollab(statusGroups, filterConditions, inputPlanFilters, extraParamsNeeded, helpers);\n        };\n\n        static getOutputType(dataResourceId) {\n            switch (dataResourceId) {\n                case 'get_task_communication_details':\n                    return this.CONSTANTS.ICT_TASK_TYPE;\n                case 'fetch_all_direct_collaboration_chats':\n                    return this.CONSTANTS.DIRECT_CHAT_DATA_TYPE;\n                case 'fetch_notify_conference_calls':\n                    return this.CONSTANTS.DIRECT_CALL_DATA_TYPE;\n            }\n        }\n\n        static emitRecordWatcherMessage(api, event, type, formatter){\n            const payload = event.payload;\n            const elementId = event.elementId;\n            let formattedOutput = null;\n            if (formatter && typeof formatter == \"function\"){\n                formattedOutput =  formatter(payload);\n            }\n            api.emit(this.CONSTANTS.RECORD_WATCHER_MESSAGE, {\n                id: elementId,\n                type: type,\n                raw: payload,\n                formattedOutput: formattedOutput\n            });\n        }\n    }\n    return CommunicationDetailsTaskFilterUtilSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"e5a3facea36131108d561e3f26fcda11","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/0d2383dd53687510b256ddeeff7b12b8","value":"0d2383dd53687510b256ddeeff7b12b8"},"sys_update_name":"sys_ux_client_script_include_e5a3facea36131108d561e3f26fcda11","sys_updated_by":"admin","api_name":"sn_uib_tcm.CommunicationDetailsTaskFilterUtilSNC","sys_created_on":"2023-09-29 16:03:48","name":"CommunicationDetailsTaskFilterUtilSNC","sys_name":"CommunicationDetailsTaskFilterUtilSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/0d2383dd53687510b256ddeeff7b12b8","value":"0d2383dd53687510b256ddeeff7b12b8"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"","required_translations":"","access":"package_private","sys_mod_count":"27","includes":"881d20a10fe21010ad4437a98b767e2a","sys_updated_on":"2021-09-27 12:10:09","sys_tags":"","script":"function include({imports}) {\n      const {\n        'sn_vtb.constants': constantsInclude\n    } = imports;\n    const {\n        ACTIONS: {\n            NOW_UXF_PAGE_SET_LOADING_STATE,\n            NOW_UXF_PAGE_ADD_NOTIFICATIONS,\n            NOW_UXF_PAGE_REMOVE_NOTIFICATIONS\n        },\n        STATUS: {\n            INFO\n        },\n        ICONS: {\n            CIRCLE_INFO_OUTLINE\n        },\n        LOADING_LABEL,\n        LOADING_ID\n    } = constantsInclude();\n\n    const showAlert = ({\n        emit: dispatch\n    }, payload) => {\n        const {\n            idPrefix = \"alert\",\n                action = {\n                    \"type\": \"dismiss\"\n                },\n                content,\n                expanded = false,\n                header = \"\",\n                icon = CIRCLE_INFO_OUTLINE,\n                manageExpanded = false,\n                status = INFO,\n                textLinkProps\n        } = payload;\n\n        const id = idPrefix + Math.random();\n        dispatch(NOW_UXF_PAGE_ADD_NOTIFICATIONS, {\n            items: [{\n                id,\n                status,\n                icon,\n                header,\n                content,\n                textLinkProps,\n                expanded,\n                action\n            }]\n        });\n\n        return id;\n    };\n\n    const dismissAlert = ({\n        emit: dispatch\n    }, id) => {\n        dispatch(NOW_UXF_PAGE_REMOVE_NOTIFICATIONS, {\n            items: [{\n                id\n            }]\n        });\n    };\n\n    const showAlertAndInitiateDismiss = (api, payload, helpers) => {\n        const {\n            duration = 8000\n        } = payload;\n        const id = showAlert(api, payload);\n        helpers.timing.setTimeout(() => {\n            dismissAlert(api, id);\n        }, duration);\n    };\n\n    const showLoader = ({\n        emit: dispatch\n    }) => {\n        dispatch(NOW_UXF_PAGE_SET_LOADING_STATE, {\n            id: LOADING_ID,\n            loading: true,\n            label: LOADING_LABEL\n        });\n    };\n\n    const dismissLoader = ({\n        emit: dispatch\n    }) => {\n        dispatch(NOW_UXF_PAGE_SET_LOADING_STATE, {\n            id: LOADING_ID,\n            loading: false\n        });\n    };\n\n    return {\n        showLoader,\n        dismissLoader,\n        showAlert,\n        dismissAlert,\n        showAlertAndInitiateDismiss\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"e6a9d997b7b61010ad44ea56ee11a911","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_update_name":"sys_ux_client_script_include_e6a9d997b7b61010ad44ea56ee11a911","sys_updated_by":"admin","api_name":"sn_vtb.notificationHandler","sys_created_on":"2020-08-28 08:54:23","name":"notificationHandler","sys_name":"notificationHandler","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/706afb822bf7975884b8ae878de7baeb","value":"706afb822bf7975884b8ae878de7baeb"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"2","includes":"","sys_updated_on":"2021-10-15 20:09:05","sys_tags":"","script":"/**\n * userPreferenceUtils\n * @param args\n * @return {{getUserPreference: (function(*): boolean)}}\n */\nfunction include(...args) {\n  const userPrefs = args[1];\n\n  /**\n   * getUserPreference method returns user preference value.\n   *\n   * @param preference\n   * @return {boolean}\n   */\n  const getUserPreference = (preference) => {\n    if (userPrefs[preference] != undefined)\n      return userPrefs[preference] === 'true' || userPrefs[preference] === true;\n\n    return false;\n  };\n\n  return {\n    getUserPreference: getUserPreference,\n  };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"e75113c0c3302010de10a0f89d40dd0e","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_update_name":"sys_ux_client_script_include_e75113c0c3302010de10a0f89d40dd0e","sys_updated_by":"admin","api_name":"sn_uib_base_aw.userPreferenceUtils","sys_created_on":"2020-11-26 01:23:12","name":"userPreferenceUtils","sys_name":"userPreferenceUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2022-04-26 11:29:37","sys_tags":"","script":"function include({ imports }) {\n    const buildDefaultRoutePayload = (route, defaultTargetRoute, event, domainId = undefined) => {\n        const { table, sysId, params, multiInstField, title, passiveNavigation, redirect, targetRoute, external } = _getPayloadParams(event, domainId);\n\n        return {\n            \"route\": route,\n            \"targetRoute\": (targetRoute || targetRoute === '') ? targetRoute : defaultTargetRoute, \n            \"fields\": { \"table\": table, \"sysId\": sysId },\n            \"params\": params,\n            \"redirect\": redirect,\n            \"passiveNavigation\": passiveNavigation,\n            \"title\": title,\n            \"multiInstField\": multiInstField,\n            \"external\": external\n        };\n    };\n\n    const routeMapping = (routeMap, defaultRoutePayload, event, domainId = undefined) => {\n        const { elementId, sourceActionId, table, sysId, params, multiInstField, title } = _getPayloadParams(event, domainId);\n        const { payload } = event;\n        var tableRoute;\n        if (routeMap)\n            tableRoute = routeMap[table];\n\n        var param_payload = defaultRoutePayload;\n        if (tableRoute && elementId) {\n            Object.keys(tableRoute).map((key) => {\n                if (elementId.includes(key) || (sourceActionId && sourceActionId.includes(key))) {\n                    param_payload = tableRoute[key].payload;\n                    var pattern = /\\{\\{([^}]+)\\}\\}/ig;\n                    var matches = param_payload.match(pattern);\n                    matches.forEach(\n                        function(token) {\n                            var paramKey = token.substr(2, token.length - 4);\n                            var newToken = \"\";\n                            if (payload.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.sysId\n                                newToken = payload[paramKey];\n                            } else if (payload.fields && payload.fields.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.fields.sysId\n                                newToken = payload.fields[paramKey];\n                            } else if (payload.params && payload.params.hasOwnProperty(paramKey)) { //Handle case: e.x. payload.params.sysId\n                                newToken = payload.params[paramKey];\n                            }\n                            param_payload = param_payload.replace(token, newToken);\n                        }\n                    );\n                    param_payload = JSON.parse(param_payload);\n                    param_payload.fields.sysId = sysId;\n                    param_payload.params = params;\n                    param_payload.multiInstField = multiInstField;\n                    param_payload.title = title;\n                }\n            });\n        }\n        return param_payload;\n    };\n\n    const _getPayloadParams = (event, domainId) => {\n        const { elementId, payload } = event;\n        const { fields, params, query, row, nativeEvent, redirect = false, targetRoute, external } = payload;\n        const sourceAction = payload.__sourceAction || {};\n        var table = payload.table || fields.table;\n        var sysId = payload.sysId || payload.sys_id || fields.sysId || fields.sys_id;\n        var title = \"\";\n\n        const metaKeyPressed = nativeEvent && (nativeEvent.metaKey || nativeEvent.ctrlKey);\n\n        if (row) {\n            sysId = sysId || row.sys_id.value;\n            title = row.displayValue.value;\n        }\n\n        var multiInstField = sysId === '-1' ? \"sysId\" : \"\";\n\n        var outputPayloadParams = {};\n        if (params) {\n            outputPayloadParams = JSON.parse(JSON.stringify(params));\n            outputPayloadParams.extraParams = Object.keys(params).map((x) => { return `${x}/${params[x]}` }).join(\"/\");\n        }\n\n        if (query) {\n            outputPayloadParams.query = query;\n        }\n\n        // create or update `query` with domainId when state has domainId \n        if (domainId) {\n            if (!outputPayloadParams.query)\n                outputPayloadParams.query = '';\n\n            outputPayloadParams.query += (outputPayloadParams.query ? '^' : '') + 'sys_domain=' + domainId;            \n        }\n\n        var res = {};\n        res.elementId = elementId || payload.elementId;\n        res.sourceActionId = sourceAction.id;\n        res.table = table;\n        res.sysId = sysId;\n        res.params = outputPayloadParams;\n        res.title = title;\n        res.multiInstField = multiInstField;\n        res.external = external || \"\";\n\n        if (targetRoute || targetRoute === '') {\n            res.targetRoute = targetRoute;   \n        }\n\n        res.passiveNavigation = metaKeyPressed;\n        res.redirect = redirect;\n\n        return res;\n    };\n\n    return ({ routeMapping, buildDefaultRoutePayload });\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"e99fa612ebc30110da1861c59c5228f3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_update_name":"sys_ux_client_script_include_e99fa612ebc30110da1861c59c5228f3","sys_updated_by":"admin","api_name":"sn_oe_sfs.CIRecordRoutesMapping","sys_created_on":"2022-04-26 11:26:04","name":"CIRecordRoutesMapping","sys_name":"CIRecordRoutesMapping","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2023-04-04 08:17:58","sys_tags":"","script":"function include({ imports }) {\n    return {\n        navigateTo: (api, navPayload, isInAppRouting = false) => {\n            //helpers.navigate.to(route, {}, {});\n            api.emit(\"NAV_ITEM_SELECTED\", {\n                ...navPayload,\n                reload: !isInAppRouting,\n            });\n        },\n\n        getBreadcrumbNavPayload: (api, event) => {\n            const bcItemPayload = event.payload.item;\n            if (!bcItemPayload || !bcItemPayload.page) {\n                return { route: \"home\" };\n            }\n\n            let _route = bcItemPayload.page;\n            let _fields = {};\n            if (_route.startsWith(\"-custom-\")) {\n                const splittedRoute = _route.split(\"#\");\n                _route = splittedRoute[1]; //route\n                if(splittedRoute[2])\n                    _fields.table = splittedRoute[2]; //table\n                if (splittedRoute[3])\n                    _fields.sysId = splittedRoute[3]; //sysId\n            } else {\n                switch (_route) {\n                    case \"ci-list\":\n                        if (api.context.props.table)\n                            _fields.table = api.context.props.table;\n                        break;\n\n                    case \"ci-record\":\n                        if (api.context.props.table)\n                            _fields.table = api.context.props.table;\n                        if (api.context.props.sysId)\n                            _fields.sysId = api.context.props.sysId;\n                        break;\n\n                    default:\n                        _fields = null;\n                }\n            }\n\n            let _params = { t: Date.now() };\n            if (bcItemPayload.view) _params.view = bcItemPayload.view;\n            if (bcItemPayload.filter) _params.filter = bcItemPayload.filter;\n\n            return {\n                route: _route,\n                fields: _fields,\n                params: _params,\n            };\n        }\n    };\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"ec0e1038c38e651044104fb9c840dde6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_update_name":"sys_ux_client_script_include_ec0e1038c38e651044104fb9c840dde6","sys_updated_by":"admin","api_name":"sn_ace.ACERoutingUtils","sys_created_on":"2023-04-04 08:17:58","name":"ACERoutingUtils","sys_name":"ACERoutingUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/5df6db91ebe4011090fa99602a52289e","value":"5df6db91ebe4011090fa99602a52289e"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"public","sys_mod_count":"0","includes":"","sys_updated_on":"2024-06-12 10:27:36","sys_tags":"","script":"function include({ imports }) {\n\n    const setStateByInitialRule = async function(initialRule, api) {\n        if (!initialRule) return;\n        for (let key in initialRule) {\n          if (initialRule.hasOwnProperty(key)) {\n            let value = initialRule[key];\n            if (value && value.constructor === Array)\n              api.setState(key, [...initialRule[key]]);\n            else if (value && value.constructor === Object)\n              api.setState(key, { ...initialRule[key] });\n            else api.setState(key, initialRule[key]);\n          }\n        }\n    }\n\n    return {\n      setStateByInitialRule: setStateByInitialRule\n    };\n\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"ec760d704336021033871e0e85b8f223","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_ec760d704336021033871e0e85b8f223","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallNotificationPreferencesUtility","sys_created_on":"2024-06-12 10:27:36","name":"OnCallNotificationPreferencesUtility","sys_name":"OnCallNotificationPreferencesUtility","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"2","includes":"f66664b177b80110e35c06e57b5a9903","sys_updated_on":"2022-01-02 16:52:20","sys_tags":"","script":"function include({\n    imports\n}) {\n    let sowIncidentOverviewSNC = imports['sn_sow_inc.SowIncidentOverviewSNC']();\n    class SowIncidentOverview extends sowIncidentOverviewSNC {\n\n    }\n    return SowIncidentOverview;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"ef56e0b177b80110e35c06e57b5a9905","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_ef56e0b177b80110e35c06e57b5a9905","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentOverview","sys_created_on":"2022-01-02 15:47:17","name":"SowIncidentOverview","sys_name":"SowIncidentOverview","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"123","includes":"e75113c0c3302010de10a0f89d40dd0e","sys_updated_on":"2024-07-29 17:51:04","sys_tags":"","script":"// @ts-check\n/**\n * @param {params} params\n * @param {*} proxyArg \n * @param {{api: params[\"api\"], event: params[\"event\"], helpers: params[\"helpers\"], imports: params[\"imports\"]}} params \n * @returns \n */\n function pageControllerUtils(proxyArg, params) {\n\tconst { api, event, helpers, imports } = params;\n\tconst gform = getNewGform(api);\n\tfunction getNewGform(api) {\n\t\tvar form = api.data?.glide_form_1?.nowRecordFormBlob || {};\n\t\tvar activityStream = api.data?.glide_form_1?.nowActivityStreamConnected || {};\n\t\tvar recordForm = {};\n\t\tif (form) {\n\t\t\trecordForm = {\n\t\t\t\ttable: form.table,\n\t\t\t\tsysId: form.sysId,\n\t\t\t\tisValid: form.isValidRecord,\n\t\t\t\tisNew: form.isNewRecord,\n\t\t\t\tisAudited: form.isAudited,\n\t\t\t\trelated: {\n\t\t\t\t\tlists: form.visibleRelatedLists\n\t\t\t\t},\n\t\t\t\tacl: {\n\t\t\t\t\tcanRead: form.canReadRecord\n\t\t\t\t},\n\t\t\t\tform: {\n\t\t\t\t\theader: {\n\t\t\t\t\t\ttransformedSecondaryItems: api.data?.glide_form_1?.nowRecordCommonHeader?.transformedSecondaryItems\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tactivityStream: {\n\t\t\t\t\ttimestamp: activityStream?.timestamp\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn recordForm;\n\t}\n\tconst PREFIX = \"workspace.layout.sidebar_ratio.\";\n\tconst table = api.context.props.inputTable || 'global';\n\tconst FORM_RATIO_PREF_NAME = `workspace.layout.form_ratio.${table}`;\n\tconst sidebarRatioPreference = PREFIX + table;\n\tconst FORM_LAYOUT_TYPE = `workspace.layout.type.${table}`;\n\tconst COMPACT_PREF_NAME = \"glide.ui.compact\";\n\t// fetch the user's show sidebar preference value\n\tconst {\n\t\tgetUserPreference\n\t} = imports[\"sn_uib_base_aw.userPreferenceUtils\"](api.context.props.userPrefs || {});\n\n\tconst isCompact = getUserPreference(COMPACT_PREF_NAME);\n\t\t// preference name\n\tconst SHOW_SIDEBAR_PREF_NAME = \"workspace.showAgentAssist\";\n\t// Sidebar specific constants\n\tconst DEFAULT_POSITION_CLOSED = isCompact ? \"-40px\" : \"-48px\";\n\tconst SIDEBAR_CLOSED_CONSTRAINT = { \"minPixels\": isCompact ? 40 : 48 };\n\tconst SIDEBAR_OPEN_CONSTRAINT = { \"minRatio\": 20, \"minPixels\": 370 };\n\tconst SIDEBAR_HIDDEN_CONSTRAINT = { \"minPixels\": 0 };\n\tconst DEFAULT_POSITION_HIDDEN = \"100\";\n\tfunction setRibbonCollapsedState() {\n\t\tconst showRibbon = getUserPreference(\"workspace.showRibbon\");\n\t\tapi.setState('isRibbonCollapsed', !showRibbon);\n\t}\n\n\tfunction checkUserPrefOnPropChange() {\n\t\tconst lookupPref = [sidebarRatioPreference, FORM_RATIO_PREF_NAME, FORM_LAYOUT_TYPE].join(',');\n\t\tapi.setState('lookupPreferenceNames', lookupPref, false);\n\t}\n\n\t/**\n\t * \n\t * @param {boolean} isHidden \n\t */\n\tfunction toggleSidebar(isHidden) {\n\t\tif (isHidden) {\n\t\t\t// If the savedSidebarRatio has not been initialized before hiding the element\n\t\t\t// then save it before collapsing the sidebar.\n\t\t\tif (!api.state.sidebarRatioSaved)\n\t\t\t\tapi.setState('sidebarRatioSaved', api.state.sidebarDividerPosition);\n\n\t\t\t// close the sidebar\n\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_CLOSED_CONSTRAINT);\n\t\t\tapi.setState(\"sidebarDividerPosition\", DEFAULT_POSITION_CLOSED);\n\t\t} else {\n\t\t\t// open the sidebar\n\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_OPEN_CONSTRAINT);\n\t\t\tapi.setState(\"sidebarDividerPosition\", api.state.sidebarRatioSaved);\n\t\t}\n\t\tapi.setState(\"sidebarDisabled\", isHidden);\n\t};\n\n\treturn {\n\t\tgetResizePrefNames() {\n\t\t\treturn {\n\t\t\t\tsidebarRatioPreference: sidebarRatioPreference,\n\t\t\t\tformRatioUserPreference: FORM_RATIO_PREF_NAME\n\t\t\t};\n\t\t},\n\t\tisDataControllerInitialized() {\t\n\t\t\treturn typeof gform.table === 'string' && gform.table.length > 0;\n\t\t},\n\t\tvalidateRecord() {\n\t\t\tif (typeof gform.isNew !== 'boolean' || typeof gform.isValid !== 'boolean')\n\t\t\t\treturn;\n\t\t\tconst hideRecordNotFound = gform.isNew || gform.isValid;\n\t\t\tlet hideSecurityConstraints = true;\n\t\t\tif (gform.acl && typeof gform.acl.canRead === 'boolean') {\n\t\t\t\tif (gform.isValid && !gform.acl.canRead)\n\t\t\t\t\thideSecurityConstraints = false;\n\t\t\t}\n\t\t\tapi.setState('hideRecordNotFound', hideRecordNotFound);\n\t\t\tapi.setState('hideSecurityConstraints', hideSecurityConstraints);\n\t\t},\n\n\t\t/**\n\t\t * \n\t\t * @param {Map<string, string>=} lookUpMap \n\t\t * @returns \n\t\t */\n\t\tsetSideBarPosition(lookUpMap) {\t\t\n\n\t\t\t// --- use user pref on first call, and api state thereafter\n\t\t\tconst sidebarOn = api.state.isSideBarSet ? !api.state.sidebarDisabled : getUserPreference(SHOW_SIDEBAR_PREF_NAME);\n\t\t\t// --- remember that we've been here before\n\t\t\tapi.setState(\"isSideBarSet\", true);\n\n\t\t\tconst sidebarDisabled = !sidebarOn;\n\t\t\tconst sidebarRatioSavedValue = lookUpMap?.get(sidebarRatioPreference);\n\t\t\tconst sidebarRatioSaved = typeof sidebarRatioSavedValue === 'string' ? sidebarRatioSavedValue: null;\n\t\t\tconst formRatioSavedValue = lookUpMap?.get(FORM_RATIO_PREF_NAME);\n\t\t\tconst formRatioSaved = typeof formRatioSavedValue === 'string' ? formRatioSavedValue: null;\n\t\t\tconst position = sidebarOn ? sidebarRatioSaved : DEFAULT_POSITION_CLOSED;\n\n\t\t\tif (sidebarDisabled)\n\t\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_CLOSED_CONSTRAINT);\n\t\t\tif (sidebarRatioSaved)\n\t\t\t\tapi.setState('sidebarRatioSaved', sidebarRatioSaved);\n\t\t\tif (formRatioSaved)\n\t\t\t\tapi.setState('formRatioSaved', formRatioSaved);\n\n\t\t\tapi.setState('sidebarDisabled', sidebarDisabled);\n\t\t\tif (position)\n\t\t\t\tapi.setState('sidebarDividerPosition', position);\n\t\t\tapi.setState('lookupUserPrefs', Object.fromEntries(lookUpMap), false);\n\t\t},\n\n\t\t/**\n\t\t * \n\t\t * @param {Map<string, string>=} lookupUserPrefs \n\t\t * @returns \n\t\t */\n\t\tsetFormLayoutConfig(lookupUserPrefs) {\n\t\t\t\n\t\t\tif (gform.activityStream && gform.activityStream.timestamp === 0 || gform.isNew)\n\t\t\t\tapi.setState('formLayoutConfig', {actionBar: false, defaultDisplayedPane: 'left'});\n\t\t\telse {\n\t\t\t\t/**\n\t\t\t\t * @type {\"both\" | \"left\" | \"right\"}\n\t\t\t\t */\n\t\t\t\tlet defaultDisplayedPane = 'both';\n\t\t\t\tconst formLayoutType = `workspace.layout.type.${gform.table}`;\n\t\t\t\tlookupUserPrefs = lookupUserPrefs || new Map (Object.entries(api.state.lookupUserPrefs));\n\t\t\t\tif (!(lookupUserPrefs instanceof Map))\n\t\t\t\t\tlookupUserPrefs = new Map();\n\t\t\t\tswitch(lookupUserPrefs.get(formLayoutType)) {\n\t\t\t\t\tcase '0':\n\t\t\t\t\t\tdefaultDisplayedPane = 'left';\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase '2':\n\t\t\t\t\t\tdefaultDisplayedPane = 'right';\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tapi.setState('formLayoutConfig', {actionBar: true, defaultDisplayedPane});\n\t\t\t}\n\t\t},\n\n        onDataFetchStatusCompleted() {\n\t\t\tconst formBlob = api.data?.glide_form_1?.nowRecordFormBlob;\n\t\t\tconst formLayoutConfig = formBlob?.currentUser?.formLayoutConfig;\n\t\t\tconst personalizeForm = formBlob?.config?.personalizeForm;\n\t\t\tconst lookUpMap = new Map();\n\t\t\tif(personalizeForm) \n\t\t\t\tlookUpMap.set('personalizeForm', personalizeForm);\n\t\t\tif (formLayoutConfig) {\n\t\t\t\tlookUpMap.set(sidebarRatioPreference, formLayoutConfig.sideBarSizeRatio);\n\t\t\t\tlookUpMap.set(FORM_RATIO_PREF_NAME, formLayoutConfig.formSizeRatio);\n\t\t\t\tlookUpMap.set(FORM_LAYOUT_TYPE, formLayoutConfig.formLayoutType?.toString());\n\t\t\t\tthis.setSideBarPosition(lookUpMap);\n\t\t\t}\t\n            this.setRelatedList();\n            this.setFormLayoutConfig(lookUpMap);\n            this.validateRecord();\n            this.getSecondaryItems();\n        },\n        setRelatedList() {\n            function handleRelatedListChange(current) {\n\t\t\t\tconst currentList = Array.isArray(current)? current: [];\n\t\t\t\tapi.setState('relatedLists', currentList, true);\n\t\t\t}\n            handleRelatedListChange(gform.related.lists);\n        },\n\t\tonMacroponentReady() {\n\t\t\tsetRibbonCollapsedState();\n\t\t},\n\t\tonUserPrefsPropertyChange() {\n\t\t\tif (event.payload.name === 'userPrefs') {\n\t\t\t\tsetRibbonCollapsedState();\n\t\t\t\tcheckUserPrefOnPropChange();\n\t\t\t\tconst {\n\t\t\t\t\tgetUserPreference\n\t\t\t\t} = imports[\"sn_uib_base_aw.userPreferenceUtils\"](api.context.props.userPrefs || {});\n\t\t\t\tconst pref = !!getUserPreference(\"workspace.showAgentAssist\");\n\t\t\t\ttoggleSidebar(!pref);\n\t\t\t}\n\t\t},\n\t\tonSidebarTabCollapsed() {\n\t\t\t/**\n\t\t\t * @type {{collapsed: boolean}}\n\t\t\t */\n\t\t\t const { collapsed } = event.payload;\n\t\t\t toggleSidebar(collapsed);\n\t\t},\n\t\tonSidebarTabItemsChanged(newTabs) {\n\t\t\tconst hasTabs = newTabs && newTabs.filter(tab => tab.conditional !== true).length > 0;\n\t\t\tif (!hasTabs) {\n\t\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_HIDDEN_CONSTRAINT);\n\t\t\t\tapi.setState('sidebarDividerPosition', DEFAULT_POSITION_HIDDEN);\n\t\t\t} else {\n\t\t\t\tif (api.state.sidebarDividerPosition === DEFAULT_POSITION_HIDDEN) {\n\t\t\t\t\ttoggleSidebar(api.state.sidebarDisabled);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonTabSelected() {\n\t\t\tlet { selectedTabIndex, id, isInitialPageLoad = false, selectedTab, selectedTabLabel } = event.payload;\n\t\t\tif (typeof selectedTabIndex === 'string')\n\t\t\t\tselectedTabIndex = parseInt(selectedTabIndex);\n\t\t\tif (id === 'relatedList') {\n\t\t\t\t/**\n\t\t\t\t * Adding trigger conditions for generating record history data as below to avoid unnecessary call:\n\t\t\t\t *\t- Only invoke when record is not new;\n\t\t\t\t *\t- Only invoke when record is audited;\n\t\t\t\t *\t- Only invoke when page is not initial loaded or page is not on default tab (selectedTabIndex != 0).\n\t\t\t\t */\n\t\t\t\tif (!gform.isNew && gform.isAudited && (!isInitialPageLoad || selectedTabIndex != 0)) {\n\t\t\t\t\tapi.data.generate_record_history_data.execute({\n\t\t\t\t\t\t'table': gform.table,\n\t\t\t\t\t\t'sysId': gform.sysId\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (!isInitialPageLoad) {\n\t\t\t\t\tapi.emit('CONTENT_UPDATED', {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tselectedTabIndex: selectedTabIndex,\n\t\t\t\t\t\t\tselectedTab: selectedTab,\n\t\t\t\t\t\t\tselectedTabLabel: selectedTabLabel,\n\t\t\t\t\t\t\tquery: api.context.props.inputQuery,\n\t\t\t\t\t\t\tviews: api.context.props.forcedViewName,\n\t\t\t\t\t\t\textraParams: api.context.props.inputExtraParams\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// sidebar\n\t\t\t\tconst { sidebarTabIndex, sidebarDisabled } = api.state;\n\t\t\t\tconst isHidden = isInitialPageLoad? sidebarDisabled: (selectedTabIndex == sidebarTabIndex && !sidebarDisabled);\n\t\t\t\ttoggleSidebar(isHidden);\n\t\t\t\tapi.setState('sidebarTabIndex', selectedTabIndex, false);\n\t\t\t}\n\t\t},\n        getSecondaryItems() {\n\t\t\tvar transformedSecondaryItems = gform?.form?.header?.transformedSecondaryItems;\n\t\t\tif (Array.isArray(transformedSecondaryItems) &&  transformedSecondaryItems.length > 0)\n\t\t\t{ \n\t\t\t\tapi.setState('secondaryItems',  transformedSecondaryItems, false);\n\t\t\t} else {\n\t\t\t\tapi.setState('secondaryItems', null, false);\n\t\t\t}\n\t\t},\n\t\tonUserPreferenceDRSuccess() {\n\t\t\t/**\n\t\t\t * @type {Array<{name: string, value: string}>}\n\t\t\t */\n\t\t\tconst userPrefs = api.data.getSidebarRatioPreference.result.preferences\n\n\t\t\t// Startup determination of sidebar status, driven first by menu toggle, then by possibly save pref value\n\t\t\t/**\n\t\t\t * @type {Map<string, string>}\n\t\t\t */\n\t\t\tlet lookUpMap = new Map();\n\t\t\tuserPrefs.forEach(item => {\n\t\t\t\tlookUpMap.set(item.name, item.value);\n\t\t\t});\n\t\t\tthis.setSideBarPosition(lookUpMap)\n\t\t\tthis.setFormLayoutConfig(lookUpMap);\n\t\t}\n\t}\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"f0b0d173c3b60110ff85a5a1d840dd24","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_update_name":"sys_ux_client_script_include_f0b0d173c3b60110ff85a5a1d840dd24","sys_updated_by":"admin","api_name":"sn_record_page.recordPageControllerUtils","sys_created_on":"2024-05-01 10:06:19","name":"recordPageControllerUtils","sys_name":"recordPageControllerUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/b6278788c342111082c603db7940dd4f","value":"b6278788c342111082c603db7940dd4f"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"1","includes":"","sys_updated_on":"2025-05-12 21:29:30","sys_tags":"","script":"function include() {\n  return {\n    /** Ensures filter prop values are passed as strings to the state and returns true if the state was updated */\n    formatFilterProps: function (api) {\n      if (\n        !api.data.check_if_global_search_is_aisearch ||\n        !api.data.check_if_global_search_is_aisearch.properties.booleanValue\n      ) {\n        // If the global search is not aisearch, we don't need to format the filter props\n        return false;\n      }\n\n      var facetProp = api.context.props.facetFilters;\n      if (facetProp && typeof facetProp != \"string\")\n        facetProp = JSON.stringify(facetProp);\n\n      var filterProp = api.context.props.searchFilters;\n      if (filterProp && typeof filterProp != \"string\")\n        filterProp = JSON.stringify(filterProp);\n\n      var stateUpdated = false;\n      if (facetProp != api.state.facetProp) {\n        stateUpdated = true;\n        api.setState(\"searchFacet\", facetProp);\n      }\n\n      if (filterProp != api.state.searchFilter) {\n        stateUpdated = true;\n        api.setState(\"searchFilter\", filterProp);\n      }\n\n      return stateUpdated;\n    },\n  };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"f0c46522ffc12210c0f1ffffffffff52","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/e18ceb1bcdc180cc80692776046f4b29","value":"e18ceb1bcdc180cc80692776046f4b29"},"sys_update_name":"sys_ux_client_script_include_f0c46522ffc12210c0f1ffffffffff52","sys_updated_by":"admin","api_name":"sn_search_result_w.AISearchResultWrapperUtil","sys_created_on":"2025-04-24 15:39:13","name":"AISearchResultWrapperUtil","sys_name":"AISearchResultWrapperUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/e18ceb1bcdc180cc80692776046f4b29","value":"e18ceb1bcdc180cc80692776046f4b29"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    {\n        \"message\": \"{0} is marked as a duplicate of {1}\"\n    }\n]","access":"public","sys_mod_count":"101","includes":"","sys_updated_on":"2024-05-15 06:38:35","sys_tags":"","script":"function include({\n    imports\n}) {\n    class SowIncidentOverviewSNC {\n\n        static setValue(api, fields, fieldName, value, displayValue) {\n            if (fields[fieldName]) {\n                api.emit(\"GFORM#SET_VALUE\", { fieldName: fieldName, value: value });\n            }\n        }\n        static setVisible(fields, fieldName, value) {\n            if (fields[fieldName]) {\n                fields[fieldName] = {\n                    ...fields[fieldName],\n                    'visible': value\n                }\n            }\n        }\n        static setReadOnly(fields, fieldName,value){\n            if (fields[fieldName]) {\n                fields[fieldName] = {\n                    ...fields[fieldName],\n                    'readonly': value\n                }\n            }\n        }\n        static processFields(fields, section) {\n           \n            if (section == \"resolution\") {\n                if (fields.close_code && fields.close_code.value == \"Duplicate\") {\n                    this.setVisible(fields, \"parent_incident\", true);\n                } else {\n                    this.setVisible(fields, \"parent_incident\", false);\n                }\n            }if (section == \"summary\") {\n                if (fields.major_incident_state && fields.major_incident_state.value) {\n                    this.setVisible(fields, \"major_incident_state\", true);\n                } else {\n                    this.setVisible(fields, \"major_incident_state\", false);\n                }\n            }\n            this.setReadOnly(fields,'number',true);\n            this.setReadOnly(fields,'opened_at',true);\n        }\n\n        static async onFieldChange(api, helpers, fields, fieldName, value, displayValue) {\n            if (value && fieldName == \"parent_incident\" && (fields.close_notes && (fields.close_notes.value == \"\" || fields.close_notes.value == api.state.generatedResolutionNotes))) {\n                var message = await helpers.translate(\"{0} is marked as a duplicate of {1}\", [fields.number.value, displayValue]);\n                this.setValue(api, fields, \"close_notes\", message);\n                api.setState('generatedResolutionNotes', message);\n            } else if (fieldName == \"close_code\"\n                && value != 'Duplicate'\n                && (fields.close_notes && fields.close_notes.value == api.state.generatedResolutionNotes)) {\n                this.setValue(api, fields, \"close_notes\", \"\");\n                api.setState('generatedResolutionNotes', '');\n            } else if (fieldName == \"close_code\"\n                && value == 'Duplicate'\n                && fields.parent_incident.value != \"\"\n                && (fields.close_notes && fields.close_notes.value == \"\")) {\n                message = await helpers.translate(\"{0} is marked as a duplicate of {1}\", [fields.number.value, fields.parent_incident.displayValue]);\n                this.setValue(api, fields, \"close_notes\", message);\n                api.setState('generatedResolutionNotes', message);\n            }\n        }\n\n        static buildSection(api, sectionLayout, formSections, fields) {\n            sectionLayout.forEach(section => {\n                let sectionName = section.caption;\n                if (!formSections.includes(sectionName) || !api.state[sectionName])\n                    return;\n                let requiredFields = [];\n                let isSectionReadOnly = true;\n                section.rows.forEach((rows) => {\n                    rows.forEach((row) => {\n                        row.fields.forEach((field) => {\n                            if (!field.includes('.'))\n                                requiredFields.push(field);\n                                // Check if any field in the section is not readonly\n                                if (isSectionReadOnly && fields[field] && !fields[field].readonly) {\n                                    isSectionReadOnly = false;\n                                } \n                        });\n                    });\n                });\n\n                let fieldValues = [];\n                requiredFields.forEach(fieldName => {\n                    const propsField = fields[fieldName];\n                    if (!propsField || !propsField.visible)\n                        return;\n\n                    let hideEmptyFields = api.state[sectionName].hideEmptyFields;\n                    if (!propsField.displayValue && hideEmptyFields && hideEmptyFields.includes(fieldName))\n                        return;\n\n                    let fieldValue = {};\n                    fieldValue.name = propsField.name\n                    fieldValue.label = propsField.label;\n                    fieldValue.table = propsField.reference;\n                    fieldValue.sysId = propsField.referenceSysId;\n\n                    if (propsField.type == 'html') {\n                        fieldValue.value = {\n                            'type': 'html',\n                            'value': propsField.displayValue || '--'\n                        };\n                    } else if (propsField.type == 'reference') {\n                        fieldValue.value = {\n                            \"type\": \"text-link\",\n                            \"label\": propsField.displayValue || '--',\n                            \"href\": \"javascript:void(0)\",\n                            \"value\": propsField.sysId,\n                            \"data\": propsField\n                        };\n                    } else {\n                        fieldValue.value = {\n                            'type': 'string',\n                            'value': propsField.displayValue || '--'\n                        };\n                    }\n                    fieldValues.push(fieldValue);\n                });\n\n                let sectionObj = {\n                    ...api.state[sectionName],\n                    fields: requiredFields,\n                    fieldValues: fieldValues,\n                    isSectionReadOnly : isSectionReadOnly,\n                    formSections: [{\n                        rows: section.rows,\n                        id: 0\n                    }]\n                };\n                api.setState(sectionName, sectionObj);\n            });\n        }\n\n    static getOverviewFormSections(){\n        var cards = this.getOverviewCards();\n        var formSections = new Set();\n        for(var card in cards){\n            for(var i=0; i < cards[card].length; i++){\n                formSections.add(cards[card][i]);\n            }\n        }\n        return Array.from(formSections);\n    }\n\n    static getOverviewCards(){\n        return {\n                \"summary\" : [\"summary\"],\n                \"impact\" : [\"impact\", \"business_impact\"],\n                \"cause\" : [\"cause\"],\n                \"resolution\" : [\"resolution\"]\n        }\n   }\n}\n    return SowIncidentOverviewSNC;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"f66664b177b80110e35c06e57b5a9903","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_update_name":"sys_ux_client_script_include_f66664b177b80110e35c06e57b5a9903","sys_updated_by":"admin","api_name":"sn_sow_inc.SowIncidentOverviewSNC","sys_created_on":"2022-01-02 15:49:17","name":"SowIncidentOverviewSNC","sys_name":"SowIncidentOverviewSNC","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/49aff4bb733320103e366238edf6a70f","value":"49aff4bb733320103e366238edf6a70f"},"sys_created_by":"admin","sys_policy":"read"},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"public","sys_mod_count":"2","includes":"68e79c7d433ab910b8cf8beeaab8f284","sys_updated_on":"2023-11-29 13:33:56","sys_tags":"","script":"function include({\n    imports\n}) {\n    let onCallEscalationPolicyClientUtilsSNC = imports['sn_uib_on_call.OnCallEscalationPolicyClientUtilsSNC']();\n    class OnCallEscalationPolicyClientUtils extends onCallEscalationPolicyClientUtilsSNC {\n\n    }\n    return OnCallEscalationPolicyClientUtils;\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"f8f95831437ab910b8cf8beeaab8f22a","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_update_name":"sys_ux_client_script_include_f8f95831437ab910b8cf8beeaab8f22a","sys_updated_by":"admin","api_name":"sn_uib_on_call.OnCallEscalationPolicyClientUtils","sys_created_on":"2023-11-29 13:32:15","name":"OnCallEscalationPolicyClientUtils","sys_name":"OnCallEscalationPolicyClientUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/7d5488e85342211039ddddeeff7b1229","value":"7d5488e85342211039ddddeeff7b1229"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[\n    \n]","access":"package_private","sys_mod_count":"83","includes":"","sys_updated_on":"2024-03-04 21:49:51","sys_tags":"","script":"function resizablePanelUtils(proxyArg, params) {\n    const { api, event, helpers, imports } = params;\n\n    const SIDEBAR_CLOSED_DEFAULT_POSITION = \"-48px\";\n    const SIDEBAR_CLOSED_CONSTRAINT = { \"minPixels\": 48 };\n    const SIDEBAR_OPEN_CONSTRAINT = { \"minRatio\": 20, \"minPixels\": 370 };\n    const SIDEBAR_OPEN_DEFAULT_POSITION = \"75\";\n\n    const pageId = (api.context.props.pageId || \"\").replace(\" \", \"_\");\n    const SIDEBAR_RATIO_PREF_NAME = `cmdbws.${pageId}.sidebar-ratio`;\n    const SHOW_SIDEBAR_PREF_NAME = `cmdbws.${pageId}.show-sidebar`;\n\n    const onMacroponentReady = () => {\n        api.setState('lookupPreferenceNames', [SHOW_SIDEBAR_PREF_NAME, SIDEBAR_RATIO_PREF_NAME].join(\",\"));\n    }\n\n    const getUserPreferenceMap = () => {\n        const userPrefs = api.data?.lookupSidebarUserPref?.result?.preferences;\n        const userPrefMap = new Map();\n        userPrefs.forEach(item => {\n            if (item.value != undefined || item.value != null) {\n                userPrefMap.set(item.name, item.value);\n            }\n        });\n        return userPrefMap;\n    };\n\n    const getUserPreference = (preference, defaultValue) => {\n        const userPrefMap = getUserPreferenceMap();\n        if (userPrefMap.has(preference)){\n            if (userPrefMap.get(preference) === 'true' || userPrefMap.get(preference) === true)\n                return true;\n            if (userPrefMap.get(preference) === 'false' || userPrefMap.get(preference) === false)\n                return false;\n            return userPrefMap.get(preference);\n        } else {\n            return defaultValue;\n        }\n    };\n\n    function toggleSidebar(isHidden) {\n\t\tif (isHidden) {\n\t\t\t// If the savedSidebarRatio has not been initialized before hiding the element\n\t\t\t// then save it before collapsing the sidebar.\n\t\t\tif (!api.state.sidebarRatioSaved)\n\t\t\t\tapi.setState('sidebarRatioSaved', api.state.sidebarDividerPosition);\n\n\t\t\t// close the sidebar\n\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_CLOSED_CONSTRAINT);\n\t\t\tapi.setState(\"sidebarDividerPosition\", SIDEBAR_CLOSED_DEFAULT_POSITION);\n\t\t} else {\n\t\t\t// open the sidebar\n\t\t\tapi.setState(\"sidebarPaneContraints\", SIDEBAR_OPEN_CONSTRAINT);\n\t\t\tapi.setState(\"sidebarDividerPosition\", api.state.sidebarRatioSaved);\n\t\t}\n\t\tapi.setState(\"sidebarDisabled\", isHidden);\n    \tapi.data.setUserPref.execute({\n\t\t\tname: SHOW_SIDEBAR_PREF_NAME,\n\t\t\tvalue: !isHidden\n\t\t});\n\t};\n\n    function initializeSidebarPosition () {\n        const userPrefMap = getUserPreferenceMap(); \n        const sidebarOn = getUserPreference(SHOW_SIDEBAR_PREF_NAME, true);\n        const sidebarDisabled = !sidebarOn;\n        const sidebarRatioSavedValue = getUserPreference(SIDEBAR_RATIO_PREF_NAME, SIDEBAR_OPEN_DEFAULT_POSITION);\n        const sidebarRatioSaved = typeof sidebarRatioSavedValue === 'string' ? sidebarRatioSavedValue : null;\n        const position = sidebarOn ? sidebarRatioSaved : SIDEBAR_CLOSED_DEFAULT_POSITION;\n        if (sidebarDisabled)\n            api.setState(\"sidebarPaneContraints\", SIDEBAR_CLOSED_CONSTRAINT);\n        else\n            api.setState(\"sidebarPaneContraints\", SIDEBAR_OPEN_CONSTRAINT);\n        if (sidebarRatioSaved)\n            api.setState('sidebarRatioSaved', sidebarRatioSaved);\n\n        api.setState('sidebarDisabled', sidebarDisabled);\n        if (position)\n            api.setState('sidebarDividerPosition', position);\n    };\n\n    function resizePane(dividerPosition) {\n        api.setState('sidebarRatioSaved', dividerPosition);\n        api.data.setUserPref.execute({\n            name: SIDEBAR_RATIO_PREF_NAME,\n            value: dividerPosition\n        });\n    }\n\n    return {\n        onMacroponentReady,\n        toggleSidebar,\n        initializeSidebarPosition,\n        getUserPreference,\n        resizePane\n    };\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"fa2bd47beb604210d912b5d5d8522849","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_update_name":"sys_ux_client_script_include_fa2bd47beb604210d912b5d5d8522849","sys_updated_by":"admin","api_name":"sn_cmdb_ws.CMDBWsResizablePaneUtils","sys_created_on":"2024-03-01 18:35:17","name":"CMDBWsResizablePaneUtils","sys_name":"CMDBWsResizablePaneUtils","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/c8ab76825371201032b7ddeeff7b1280","value":"c8ab76825371201032b7ddeeff7b1280"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"[]","access":"package_private","sys_mod_count":"28","includes":"","sys_updated_on":"2024-10-30 14:01:47","sys_tags":"","script":"function include() {\n\n\t// Constructs payload for UI navigation to CoreUI list view\n\tfunction getCoreUIListNavigationPayload(coreUIParam, title) {\n\t\treturn {\n\t\t\tcontext: {\n\t\t\t\tpath: 'now/nav/ui'\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\ttarget: coreUIParam,\n\t\t\t},\n\t\t\troute: 'classic',\n\t\t\ttitle: title,\n\t\t\tnavigationOptions: {},\n\t\t}\n\t}\n\n\t// Constructs payload for UI navigation to CoreUI form view\n\tfunction getCoreUIFormNavigationPayload(coreUIParam, title) {\n\t\treturn {\n\t\t\tcontext: {\n\t\t\t\tpath: 'now/nav/ui'\n\t\t\t},\n\t\t\tparams: {\n\t\t\t\ttarget: coreUIParam,\n\t\t\t},\n\t\t\troute: 'classic',\n\t\t\ttitle: title || 'Form Record',\n\t\t\tnavigationOptions: {},\n\t\t};\n\t}\n\n\t// Constructs payload for UI navigation to Seismic list view\n\tfunction getSeismicListNavigationPayload(table, query, title, drilldownListView) {\n\t\treturn  {\n\t\t\troute: 'simplelist',\n\t\t\tfields: {table: table || ''},\n\t\t\tparams: {\n\t\t\t\tquery: query || '',\n\t\t\t\tlistTitle: title || table,\n\t\t\t\tlistView: drilldownListView || '-1',\n\t\t\t},\n\t\t\ttitle: title,\n\t\t\tnavigationOptions: {},\n\t\t};\n\t}\n\n\t// Constructs payload for UI navigation to Seismic form view\n\tfunction getSeismicFormNavigationPayload(table, sysId, title){\n\t\treturn{\n\t\t\troute: 'record',\n\t\t\tfields: {\n\t\t\t\ttable: table || '',\n\t\t\t\tsysId: sysId || '',\n\t\t\t},\n\t\t\ttitle: title || 'Form Record',\n\t\t\tnavigationOptions: {},\n\t\t};\n\t}\n\n        const navigateToCoreUI = (url, globalWindow) => {\n                 if (!globalWindow) return;\n\t         const urlPrefix = '/nav_to.do?uri=/';\n\t         globalWindow.open(urlPrefix + encodeURIComponent(url), '_self');\n        };\n\n\treturn {\n\t\tgetPayload (event,  isPolarisDisabled, globalThis) {\n\t\t\tconst {eventOrigin, componentProps, widgetProps, drilldownToCoreUI} = event.payload;\n\t\t\tconst drilldownListView = widgetProps?.drilldownListView;\n                        const globalWindow = globalThis?.window;\n\t\t\tlet payload;\n\n\t\t\tif (eventOrigin === 'NOW_VIS_WRAPPER#CLICKED') {\n\t\t\t\tconst {\n\t\t\t\t\tparams: {\n\t\t\t\t\t\ttable,\n\t\t\t\t\t\tquery,\n\t\t\t\t\t\tindicatorSysid,\n\t\t\t\t\t\tkpiSysId,\n\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\taggregate,\n\t\t\t\t\t\tdomain,\n\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\tdataSourceType,\n\t\t\t\t\t},\n\t\t\t\t\ttitle,\n\t\t\t\t} = event.payload;\n\n\t\t\t\tif (dataSourceType === 'metricBase') {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tdateRange: {\n\t\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tciSysId,\n\t\t\t\t\t\t\tciType,\n\t\t\t\t\t\t},\n\t\t\t\t\t} = event.payload;\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\troute: 'metric-explorer', \n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tciSysId,\n\t\t\t\t\t\t\tciType,\n\t\t\t\t\t\t\tstartTime,\n\t\t\t\t\t\t\tendTime,\n\t\t\t\t\t\t\tchartIndex: -1,\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttitle: 'Metric Explorer',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'hlaElasticSearchComponents') {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\troute: 'log-viewer',\n\t\t\t\t\t\tparams: {},\n\t\t\t\t\t\ttitle: 'Log viewer',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'table') {\n\t\t\t\t\tconst coreUIParam = `${table}_list.do?sysparm_query=${query}&sysparm_view=${drilldownListView}`;\n                                        if (drilldownToCoreUI && isPolarisDisabled) {\n                                                    navigateToCoreUI(coreUIParam, globalWindow)\n                                                    return;\n                                        }\n\t\t\t\t\tpayload = drilldownToCoreUI ? getCoreUIListNavigationPayload(coreUIParam, title) : getSeismicListNavigationPayload(table, query, title || table, drilldownListView);\n\t\t\t\t} else if (kpiSysId) {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdataSourceId: kpiSysId,\n\t\t\t\t\t\t\tdataSource: 'analyticalmodel',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\t\taggregate,\n\t\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t\tlistView: drilldownListView || '-1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\troute: 'kpi-details',\n\t\t\t\t\t\ttitle: title || 'KPI Details',\n\t\t\t\t\t};\n\t\t\t\t} else if (dataSourceType === 'indicator') {\n\t\t\t\t\tpayload = {\n\t\t\t\t\t\tfields: {\n\t\t\t\t\t\t\tdataSourceId: indicatorSysid,\n\t\t\t\t\t\t\tdataSource: 'kpid',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tparams: {\n\t\t\t\t\t\t\tbreakdowns,\n\t\t\t\t\t\t\taggregate,\n\t\t\t\t\t\t\tscoreDate,\n\t\t\t\t\t\t\tdomain,\n\t\t\t\t\t\t\tlistView: drilldownListView || '-1',\n\t\t\t\t\t\t},\n\t\t\t\t\t\troute: 'kpi-details',\n\t\t\t\t\t\ttitle: title || 'KPI Details',\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'NOW_RECORD_LIST_CONNECTED#ROW_CLICKED') {\n\t\t\t\tconst {table, row, title} = event.payload;\n\t\t\t\tconst sysId = row?.sys_id?.value;\n\t\t\t\tconst coreUIParam = `${table}.do?sys_id=${sysId || '-1'}&sysparm_view=${drilldownListView}`;\n                                 if (drilldownToCoreUI && isPolarisDisabled) {\n                                                    navigateToCoreUI(coreUIParam, globalWindow)\n                                                    return;\n                                }\n\t\t\t\tpayload = drilldownToCoreUI ? getCoreUIFormNavigationPayload(coreUIParam, title) : getSeismicFormNavigationPayload(table, sysId, title);\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'SN_PAR_CALENDAR_CONNECTED#EVENT_CLICKED') {\n\t\t\t\tconst {table, title, sysId} = event.payload.event;\n\n\t\t\t\tconst coreUIParam = `${table}.do?sys_id=${sysId || '-1'}&sysparm_view=${drilldownListView}`;\n                                 if (drilldownToCoreUI && isPolarisDisabled) {\n                                                    navigateToCoreUI(coreUIParam, globalWindow)\n                                                    return;\n                                 }\n                                 payload = drilldownToCoreUI ? getCoreUIFormNavigationPayload(coreUIParam, title) : getSeismicFormNavigationPayload(table, sysId, title);\n\t\t\t}\n\n\t\t\tif (eventOrigin === 'NOW_RECORD_LIST_CONNECTED#VIEW_ALL_CLICKED') {\n\t\t\t\tconst {table, query, listTitle, currentTabParFilters} = event.payload;\n\t\t\t\tconst listFilters = componentProps?.fixedQuery;\n\t\t\t\tconst filterQueries = currentTabParFilters && currentTabParFilters.encodedQueries && currentTabParFilters.encodedQueries[table] ? `${currentTabParFilters.encodedQueries[table]}^` : '';\n\t\t\t\tlet queryWithFilterClauses = `${filterQueries}${query || ''}`;\n\t\t\t\tif (listFilters)\n\t\t\t\t\tqueryWithFilterClauses = `${queryWithFilterClauses}^${listFilters}`;\n\t\t\t\t\t\n\t\t\t\tconst coreUIParam = `${table}_list.do?sysparm_query=${queryWithFilterClauses}&sysparm_view=${drilldownListView}`;\n                                if (drilldownToCoreUI && isPolarisDisabled) {\n                                               navigateToCoreUI(coreUIParam, globalWindow)\n                                               return;\n                                }\n\n\t\t\t\tpayload = drilldownToCoreUI ? getCoreUIListNavigationPayload(coreUIParam, listTitle) : getSeismicListNavigationPayload(table, queryWithFilterClauses, listTitle || 'List', drilldownListView);\n\t\t\t}\n\n\t\t\tif (event.payload.navigationOptions) {\n\t\t\t\tpayload.navigationOptions = event.payload.navigationOptions;\n\t\t\t}\n\t\t\treturn payload;\n\t\t},\n\t};\n}\n","sys_class_name":"sys_ux_client_script_include","sys_id":"fdacb518b7320110aab961d9ce11a989","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/513b0006c3610110f2ace0dd9740dd12","value":"513b0006c3610110f2ace0dd9740dd12"},"sys_update_name":"sys_ux_client_script_include_fdacb518b7320110aab961d9ce11a989","sys_updated_by":"admin","api_name":"sn_app_analytics_w.ParWidgetsDrilldowns","sys_created_on":"2022-04-07 16:19:35","name":"ParWidgetsDrilldowns","sys_name":"ParWidgetsDrilldowns","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/513b0006c3610110f2ace0dd9740dd12","value":"513b0006c3610110f2ace0dd9740dd12"},"sys_created_by":"admin","sys_policy":""},{"script_api_version":"2.0.0","required_translations":"","access":"package_private","sys_mod_count":"14","includes":"","sys_updated_on":"2022-10-31 10:05:39","sys_tags":"","script":"function include({\n    imports\n}) {\n    return {\n        updatePropsDetailsForCtaCard: updatePropsDetailsForCtaCard,\n        getCurrentDateTime: getCurrentDateTime,\n        shuffleCtaCards: shuffleCtaCards\n    };\n\n    function getPageBodyContainer(contentBlocks) {\n        return contentBlocks[1];\n    }\n\n    function updatePropsDetailsForCtaCard(contentBlocks, cardId, propsDetails) {\n        patchPropsDetails(cardId, propsDetails, contentBlocks);\n\n        function patchPropsDetails(cardId, propsDetails, contentBlocks) {\n            for (let i = 0; i < contentBlocks.length; i++) {\n                const contentBlock = contentBlocks[i];\n                if (contentBlock.block_id === cardId) {\n                    contentBlocks[i].props_details = contentBlocks[i].props_details || {};\n                    contentBlocks[i].props_details = { ...contentBlocks[i].props_details,\n                        ...propsDetails\n                    };\n                    break;\n                } else if (Array.isArray(contentBlock.children) && contentBlock.children.length) {\n                    patchPropsDetails(cardId, propsDetails, contentBlock.children);\n                }\n            }\n        }\n    }\n\n    function getCurrentDateTime() {\n        var dateTime = new Date();\n        return dateTime.getUTCFullYear() + \"-\" +\n            ('0' + (dateTime.getUTCMonth() + 1)).slice(-2) + \"-\" +\n            ('0' + dateTime.getUTCDate()).slice(-2) + \" \" +\n            ('0' + dateTime.getUTCHours()).slice(-2) + \":\" +\n            ('0' + dateTime.getUTCMinutes()).slice(-2) + \":\" +\n            ('0' + dateTime.getUTCSeconds()).slice(-2);\n    }\n\n    function shuffleCtaCards(contentBlocks) {\n        class CTACard {\n            constructor(card) {\n                this.card = card;\n                this.card.props_details = this.card.props_details || {};\n            }\n\n            /**\n             * return -1 if card is pending, else the 'last action on' date time in ms\n             */\n            getLastActionOnInMs() {\n                var lastActionOn = this.card.props_details.last_action_on;\n                if (!lastActionOn)\n                    return -1;\n\n                lastActionOn = lastActionOn.replace(/\\s/, 'T');\n\n                var lastActionOnDateTimeInMs = new Date(lastActionOn).getTime() || 0;\n                return lastActionOnDateTimeInMs;\n            }\n\n            isComplete() {\n                if (this.card.hasOwnProperty('__is_complete')) {\n                    return (this.card.__is_complete == true);\n                } else if (this.card.children) {\n                    var screens = this.card.children;\n                    var screenIndex;\n                    for (screenIndex = 0; screenIndex < screens.length; screenIndex++) {\n                        var screen = screens[screenIndex];\n                        if (screen.hasOwnProperty('__is_complete')) {\n                            return (screen.__is_complete == true);\n                        }\n                    }\n                    return true;\n                }\n            }\n\n            getCard() {\n                return this.card;\n            }\n        }\n\n        let ctaCards = getCtaCards(contentBlocks);\n        ctaCards = ctaCards.map(card => new CTACard(card));\n\n        ctaCards.sort((card1, card2) => card1.getLastActionOnInMs() - card2.getLastActionOnInMs());\n\n        let tier1Cards = [];\n        let tier2Cards = [];\n\n        ctaCards.forEach(function(card) {\n            var canPushToTier1 = (!card.isComplete() && (tier1Cards.length < 3));\n            if (canPushToTier1) {\n                tier1Cards.push(card.getCard());\n            } else {\n                tier2Cards.push(card.getCard());\n            }\n        });\n\n        setTier1Cards(tier1Cards, contentBlocks);\n        setTier2Cards(tier2Cards, contentBlocks);\n\n        return [ ...contentBlocks ];\n    }\n\n    function getCtaCards(contentBlocks) {\n        var tier1 = getTier1Cards(contentBlocks);\n        var tier2 = getTier2Cards(contentBlocks);\n\n        return tier1.concat(tier2);\n    }\n\n    function setTier1Cards(tierChildren, contentBlocks) {\n        let pageBodyContainer = getPageBodyContainer(contentBlocks);\n        setTier(1, tierChildren, pageBodyContainer);\n    }\n\n    function setTier2Cards(tierChildren, contentBlocks) {\n        let pageBodyContainer = getPageBodyContainer(contentBlocks);\n        setTier(2, tierChildren, pageBodyContainer);\n    }\n\n    function getTier1Cards(contentBlocks) {\n        let pageBodyContainer = getPageBodyContainer(contentBlocks);\n        return getTierCards(1, pageBodyContainer);\n    }\n\n    function getTier2Cards(contentBlocks) {\n        let pageBodyContainer = getPageBodyContainer(contentBlocks);\n        return getTierCards(2, pageBodyContainer);\n    }\n\n    function setTier(tierNumber, tierChildren, pageBodyContainer) {\n        var tierIndex = findTierIndex(tierNumber, pageBodyContainer);\n        pageBodyContainer.children[tierIndex].children = tierChildren;\n    }\n\n    function getTierCards(tierNumber, pageBodyContainer) {\n        var tierIndex = findTierIndex(tierNumber, pageBodyContainer);\n        if (tierIndex == -1) {\n            return [];\n        }\n        const ctaTier = pageBodyContainer.children[tierIndex];\n        return ctaTier.children || [];\n    }\n\n    function findTierIndex(tierNumber, context) {\n        if (!context || !Array.isArray(context.children))\n            return -1;\n\n        var index;\n        for (index = 0; index < context.children.length; index++) {\n            var child = context.children[index];\n            if (child.__cta_tier == tierNumber) {\n                return index;\n            }\n        }\n\n        return -1;\n    }\n}","sys_class_name":"sys_ux_client_script_include","sys_id":"ffefba0bc3930110fc869bc8a840dd35","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_update_name":"sys_ux_client_script_include_ffefba0bc3930110fc869bc8a840dd35","sys_updated_by":"admin","api_name":"sn_oe_sfs.CTACardsUtil","sys_created_on":"2022-07-11 11:34:39","name":"CTACardsUtil","sys_name":"CTACardsUtil","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/53b1b0e79761011018b2fa98c253afcc","value":"53b1b0e79761011018b2fa98c253afcc"},"sys_created_by":"admin","sys_policy":""}]}