{"result":[{"send_warning":"false","sys_mod_count":"39","active":"true","increase_step":"5","sys_updated_on":"2022-10-11 06:55:18","sys_tags":"","field_types":"1","predicate":"isFlapper();\n\n// Check repeating value with extra condition that new value and old value should be similar up to some treshold.\nfunction isFlapper(/*String[] lastValues*/) {\t\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\n\tvar REPETITION_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.repetition_threshold', '2')) || 2;\n\t\n\tvar AMOUNT_OF_LAST_VALUES_TO_USE = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.amount_of_last_values_to_use', '7')) || 7;\n\tvar MIN_SIMILARITY_PERC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.substring.strategy.hits_perc_threshold', '90')) || 90;\n\n\t//minimum value for repetitions is two\n\tvar numOfRepetitionsForAHit = Math.max(REPETITION_THRESHOLD,2);\t\n\t\n\tvar newValue = this.prepareValueForComparison(lastValues[lastValues.length-1]);\t\n\tvar numRepetitions = 1;//count the last value itself\n\tvar startIndex = lastValues.length - AMOUNT_OF_LAST_VALUES_TO_USE;\n\t//start index must be greater than or equal to zero\n\tif (startIndex < 0) \n\t\tstartIndex = 0;\n\t//compare the last AMOUNT_OF_LAST_VALUES_TO_USE values in the list to the last value\n\tfor (var j = startIndex; j < lastValues.length-1 && numRepetitions < numOfRepetitionsForAHit; j++) {\n\t\tif (newValue == this.prepareValueForComparison(lastValues[j])) {\n\t\t\tnumRepetitions++;\n\t\t}\t\t\n\t}\n\t\t\n\treturn numRepetitions >= numOfRepetitionsForAHit && checkValueSimilarityPercentage(newValue, this.prepareValueForComparison(lastValues[lastValues.length-2]), MIN_SIMILARITY_PERC_THRESHOLD);\n}\n\nfunction prepareValueForComparison(value){\n\t// Value is object.\n\tvalue = String(value);\n    value = value.trim();\n    value = value.toUpperCase();\n    return value;\n}\n\nfunction checkValueSimilarityPercentage(oldValue, newValue, minSimilarityPercentage){\n\tvar maxLength = oldValue.length > newValue.length ? oldValue.length : newValue.length;\n\tif (maxLength === 0) return false;\n\t\t\n\tvar subStringLength = 0;\n\tfor(var i = 0;i < oldValue.length && i < newValue.length; i++)\n\t\tif (oldValue[i] === newValue[i]) subStringLength++;\n\t\telse break;\n\t\n\treturn subStringLength / maxLength * 100 > minSimilarityPercentage;\n}","sys_id":"0a08935d77821110b799287a2c5a9961","sys_updated_by":"admin","block_from_model":"true","sys_created_on":"2022-09-19 14:57:15","name":"Repeating Values Substring","eval_script":"isFlapper();\n\n// Check repeating value with extra condition that new value and old value should be similar up to some treshold.\nfunction isFlapper(/*String[] lastValues*/) {\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.substring.strategy.hits_threshold', '3')) || 3;\n\t\n\tvar REPETITION_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.substring.strategy.repetition_threshold', '2')) || 2;\n\tvar MIN_SIMILARITY_PERC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.substring.strategy.hits_perc_threshold', '90')) || 90;\n\n\tvar numOfHits = 0;\n\t//minimum value for repetitions is two\n\tvar numOfRepetitionsForAHit = Math.max(REPETITION_THRESHOLD,2);\t\n\t\n\tfor (var i=0;i<lastValues.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tvar tmpRepetitions = 1; //count the value itself\n\t\tvar currentValue = this.prepareValueForComparison(lastValues[i]);\n\t\tfor (var j = i + 1; j < lastValues.length && tmpRepetitions < numOfRepetitionsForAHit; j++) {\n\t\t\tif (currentValue == this.prepareValueForComparison(lastValues[j]) && checkValueSimilarityPercentage(this.prepareValueForComparison(lastValues[j-1]), this.prepareValueForComparison(lastValues[j]), MIN_SIMILARITY_PERC_THRESHOLD)) {\n\t\t\t\ttmpRepetitions++;\n\t\t\t\tif (tmpRepetitions >= numOfRepetitionsForAHit){\n\t\t\t\t\tnumOfHits++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn numOfHits >= HITS_THRESHOLD;\n}\n\nfunction prepareValueForComparison(value){\n\t// Value is object.\n\tvalue = String(value);\n    value = value.trim();\n    value = value.toUpperCase();\n    return value;\n}\n\nfunction checkValueSimilarityPercentage(oldValue, newValue, minSimilarityPercentage){\n\tvar maxLength = oldValue.length > newValue.length ? oldValue.length : newValue.length;\n\tif (maxLength === 0) return false;\n\n\tvar subStringLength = 0;\n\tfor(var i = 0;i < oldValue.length && i < newValue.length; i++)\n\t\tif (oldValue[i] === newValue[i]) subStringLength++;\n\t\telse break;\n\t\n\treturn subStringLength / maxLength * 100 > minSimilarityPercentage;\n}","fading_step":"1","send_notification":"true","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"false","sys_mod_count":"18","active":"false","increase_step":"0","sys_updated_on":"2022-09-22 07:43:35","sys_tags":"","field_types":"0","predicate":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.for.notification.strategy.interval_threshold_in_minutes', '1440')) || 1440; ////24 hours\n\tvar newValue = Number(lastIntervals[lastIntervals.length-1]);\n\treturn newValue >= 0 && newValue <= INTERVAL_THRESHOLD;\n}","sys_id":"26fc267f73203300e7508d32b7f6a708","sys_updated_by":"admin","block_from_model":"false","sys_created_on":"2019-04-08 15:33:21","name":"invalid interval for notification","eval_script":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.for.notification.strategy.hits_threshold', '3')) || 3;\n\tvar INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.for.notification.strategy.interval_threshold_in_minutes', '1440')) || 1440; //24 hours\n\tvar numOfHits = 0;\n\tfor (var i=0;i<lastIntervals.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tvar curInterval = Number(lastIntervals[i]);\n\t\tif(curInterval >= 0 && curInterval <= INTERVAL_THRESHOLD){\n\t\t\tnumOfHits++;\n\t\t}\n\t}\n\treturn numOfHits >= HITS_THRESHOLD;\n}","fading_step":"0","send_notification":"true","sys_created_by":"admin","decrease_step":"0"},{"send_warning":"false","sys_mod_count":"114","active":"true","increase_step":"5","sys_updated_on":"2022-11-17 12:16:52","sys_tags":"","field_types":"2","predicate":"isFlapper();\n\nfunction isFlapper(/*Object[] lastValues, Object[] lastRejectedValues*/) {\n\t//if the new value is not a numeric value return false\n\tvar newValue = lastValues[lastValues.length-1];\n\tif(!this.isNumeric(newValue))\n\t\treturn false;\n\tnewValue = Number(newValue);\n\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", '5')) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar lastAcceptedIndex = findLastDiff(lastValues, lastRejectedValues);\n\tif (lastAcceptedIndex < 0)\n\t\treturn false;\n\n\tvar lastAcceptedValue = lastValues[lastAcceptedIndex];\n\tif(!this.isNumeric(lastAcceptedValue))\n\t\treturn false;\n    lastAcceptedValue = Number(lastAcceptedValue);\n\n\tvar avgVal = Math.round((lastAcceptedValue + newValue) / 2);\t\n\tvar percentDiff = parseInt(gs.getProperty('sm.flapper.strategy.percent_diff', '1')) || 1;\n\tvar diff = Math.round(percentDiff*avgVal/100);\n\tvar calcDiff = calculateDiff(newValue, lastAcceptedValue);\n\treturn calcDiff <= diff;\n}\n\nfunction isNumeric(val) {\n\tif (val.trim() != \"\" && !isNaN(val)) {\t\t\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction findLastDiff(list1, list2) {\n\t//find the location of the first value from the end of list1 that doesn't appear in list2\n\tvar i, j;\n\tfor (i = list1.length - 2, j = list2.length - 1; i >= 0; i--, j--) {\n\t\tif (j < 0 || String(list1[i]) !== String(list2[j])) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nfunction calculateDiff(a, b) {\n\treturn Math.abs(a-b);\n}","sys_id":"4a5c96209f8033000f51b7bda42e705b","sys_updated_by":"admin","block_from_model":"true","sys_created_on":"2019-03-04 15:58:07","name":"Percent Diff","eval_script":"isFlapper();\n\nfunction isFlapper(/*Object[] lastValues*/) {\n\t//remove empty values and non-numeric values\n\tvar cleanedList = this.cleanValues();\n\t\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", '5')) || 5;\n        \n\tif (cleanedList.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar median = this.median(cleanedList);\t\n\tvar percentDiff = parseInt(gs.getProperty('sm.flapper.strategy.percent_diff', '1')) || 1;\n\tvar diff = Math.round(percentDiff*median/100);\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.percent_diff.strategy.hits_threshold', '3')) || 3;\n\t\n\tvar numOfHits = 0;\n\tfor (var i=0;i<cleanedList.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tfor (var j = i + 1; j < lastValues.length && numOfHits < HITS_THRESHOLD; j++) {\n\t\t\tif (calculateDiff(cleanedList[i], cleanedList[j]) <= diff) {\n\t\t\t\tnumOfHits++;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn numOfHits >= HITS_THRESHOLD;\n}\n\nfunction cleanValues() {\n\t//remove non numeric values from the list\n\tvar list = [];\n\tfor (var i=0;i<lastValues.length;i++) {\n\t\tif (this.isNumeric(lastValues[i])) {\t\t\n\t\t\tlist.push(Number(lastValues[i]));\n\t\t}\n\t}\n\treturn list;\n}\n\nfunction median(values){\n\t//return the median of the list\n\tvalues.sort(function(a,b){\n\t\treturn a-b;\n\t});\n\n\tvar half = Math.floor(values.length / 2);\n\tif (values.length % 2)\n\t\treturn values[half];\n\treturn (values[half - 1] + values[half]) / 2.0;\n}\n\nfunction isNumeric(val) {\n\tif (val.trim() != \"\" && !isNaN(val)) {\t\t\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction calculateDiff(a, b) {\n\treturn Math.abs(a-b);\n}","fading_step":"1","send_notification":"true","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"false","sys_mod_count":"46","active":"true","increase_step":"5","sys_updated_on":"2022-09-22 07:43:35","sys_tags":"","field_types":"1","predicate":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\t\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar oldValue = lastValues[lastValues.length-2];\n\tvar newValue = lastValues[lastValues.length-1];\n\treturn oldValue.toUpperCase() == newValue.toUpperCase();\n}","sys_id":"7d97a1e49f0033000f51b7bda42e7089","sys_updated_by":"admin","block_from_model":"true","sys_created_on":"2019-03-04 11:42:23","name":"Upper/Lower case","eval_script":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.case.sensitive.strategy.hits_threshold', '3')) || 3;\n\t\n\tvar numOfHits = 0;\n\tfor (var i=0;i<lastValues.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tfor (var j = i + 1; j < lastValues.length && numOfHits < HITS_THRESHOLD; j++) {\n\t\t\tif (lastValues[i].toUpperCase() == lastValues[j].toUpperCase()) {\n\t\t\t\tnumOfHits++;\n\t\t\t}\n\t\t}\n\t}\n\treturn numOfHits >= HITS_THRESHOLD;\n}","fading_step":"1","send_notification":"true","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"false","sys_mod_count":"31","active":"true","increase_step":"5","sys_updated_on":"2022-09-22 07:43:35","sys_tags":"","field_types":"0","predicate":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.strategy.interval_threshold_in_minutes', '5')) || 5;\n\tvar newValue = Number(lastIntervals[lastIntervals.length-1]);\n\treturn newValue >= 0 && newValue <= INTERVAL_THRESHOLD;\n}","sys_id":"896456f773203300e7508d32b7f6a709","sys_updated_by":"admin","block_from_model":"true","sys_created_on":"2019-04-08 14:22:13","name":"Invalid interval","eval_script":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) { \n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.strategy.hits_threshold', '3')) || 3;\n\tvar INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.interval.strategy.interval_threshold_in_minutes', '5')) || 5; //5 minutes\n\tvar numOfHits = 0;\n\tfor (var i=0;i<lastIntervals.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tvar curInterval = Number(lastIntervals[i]);\n\t\tif(curInterval >= 0 && curInterval <= INTERVAL_THRESHOLD){\n\t\t\tnumOfHits++;\n\t\t}\n\t}\n\treturn numOfHits >= HITS_THRESHOLD;\n}","fading_step":"1","send_notification":"true","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"true","sys_mod_count":"0","active":"true","increase_step":"5","sys_updated_on":"2022-09-15 10:40:22","sys_tags":"","field_types":"3","predicate":"isFlapper();\n\nfunction isFlapper(/*String[] lastIntervals*/) {\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n        \n\tif (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.datetime.interval.strategy.interval_threshold_in_minutes', '1440')) || 1440;\n\tvar newValue = Number(lastIntervals[lastIntervals.length-1]);\n\treturn newValue >= 0 && newValue < INTERVAL_THRESHOLD;\n}","sys_id":"a186350c53021110b33bddeeff7b12b4","sys_updated_by":"admin","block_from_model":"false","sys_created_on":"2022-09-15 10:40:22","name":"DateTime invalid interval","eval_script":"isFlapper();\n\nfunction isFlapper( /*String[] lastIntervals*/ ) {\n    var FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty('sm.flapper.strategy.calculation_threshold', '5')) || 5;\n\n    if (lastIntervals.length < FLAPPER_CALC_THRESHOLD)\n        return false;\n\n    var HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.datetime.interval.strategy.hits_threshold', '3')) || 3;\n    var INTERVAL_THRESHOLD = parseInt(gs.getProperty('sm.flapper.invalid.datetime.interval.strategy.interval_threshold_in_minutes', '1440')) || 1440; // 24 hours\n    var numOfHits = 0;\n    for (var i = 0; i < lastIntervals.length && numOfHits < HITS_THRESHOLD; i++) {\n        var curInterval = Number(lastIntervals[i]);\n        if (curInterval >= 0 && curInterval < INTERVAL_THRESHOLD) {\n            numOfHits++;\n        }\n    }\n    return numOfHits >= HITS_THRESHOLD;\n}","fading_step":"1","send_notification":"false","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"false","sys_mod_count":"4","active":"true","increase_step":"5","sys_updated_on":"2022-09-22 06:50:48","sys_tags":"","field_types":"1","predicate":"isFlapper();\n\n// Code runtime: o(n). explenation\n// 1. Convert string to array - o(n)\n// 2. build last value counter object - o(n)\n// 3 convert the previous string to array - o(n)\n// 4 clone the object from section 2 - o(n)\n// 5 decrease the counter object - o(n)\nfunction isFlapper(/*String[] lastValues*/) {\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\n    // Check if last value is comma separated\n\tvar separator = this.findSeparateCharacter(lastValues[lastValues.length-1]);\n\tif (!separator) return false;\n\n\t// Create comma separated counter object.\n\tvar lastValueObject = this.convertToCountObject(lastValues[lastValues.length-1], separator);\n\tvar lastValueLength = lastValues[lastValues.length-1].split(separator).length;\n\n\tvar prevValueArray = lastValues[lastValues.length-2].split(separator);\n\n\t// Only array with same length can be identical.\n\tif (lastValueLength === prevValueArray.length){\n\t\tvar identicalArrays = true;\n\n\t\tfor(var i = 0; i < prevValueArray.length; i++){\n\t\t\tvar value = this.prepareValueForComparison(prevValueArray[i]);\n\n\t\t\t// Check if value not exist or value exist less times in last value(lastValueObject) string.\n\t\t\tif(!lastValueObject[value] || lastValueObject[value] === 0){\n\t\t\t\tidenticalArrays = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse\n\t\t\t\tlastValueObject[value]--;\n\t\t}\n\n\t\t// Empty field is also identical for this rule.\n\t\tif(identicalArrays){\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n\nfunction convertToCountObject(value, separator) {\n\tvar valueObject = {};\n\tif (value) {\n\t\tvar valueArray = value.split(separator);\n\t\tfor(var i = 0;i < valueArray.length; i++){\n\t\t\tvar currValue = this.prepareValueForComparison(valueArray[i]);\n\t\t\tvalueObject[currValue] = valueObject[currValue] ? valueObject[currValue] + 1 : 1;\n\t\t}\n\t}\n\treturn valueObject;\n}\n\nfunction prepareValueForComparison(value){\n    value = value.trim();\n    value = value.toUpperCase();\n    return value;\n}\n\nfunction findSeparateCharacter(value){\n    if(value.indexOf(',') >= 0)\n\t\treturn ',';\n\telse if(value.indexOf(';') >= 0)\n\t\treturn ';';\n    return \"\";\n}","sys_id":"ba7c87fa4f311110b799aa6b43ce0bc4","sys_updated_by":"admin","block_from_model":"true","sys_created_on":"2022-09-11 19:41:28","name":"Comma separated repeating values","eval_script":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) {\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n\n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\n\t// Check if there is separator.\n    var separator = this.findSeparateCharacter(lastValues);\n    if(!separator) return false;\n\n\tvar filteredLastValues = this.getOnlySeparatedValue(lastValues, separator);\n\tif (filteredLastValues.length < 2) return false;\n\n    var HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.csv.repeating.values.strategy.hits_threshold', '3')) || 3;\n\n\tvar REPETITION_THRESHOLD = parseInt(gs.getProperty('sm.flapper.csv.repeating.values.strategy.repetition_threshold', '2')) || 2;\n\n\tvar numOfHits = 0;\n    var numOfRepetitionsForAHit = REPETITION_THRESHOLD <= 1 ? 2 : REPETITION_THRESHOLD;\n\n\t// Big-o(400n) -> because first and second loop pass on lastValue array that is limited to 20 values.\n\t// The comparison process is o(n) - explanation in Predicate script section.\n\tfor (var i=0;i<filteredLastValues.length;i++) {\n\t\tvar tmpRepetitions = 1; //count the value itself\n\t\tvar currValueObject = this.convertToCountObject(filteredLastValues[i], separator);\n\t\tvar currValueLength = filteredLastValues[i].split(separator).length;\n\n\t\tfor (var j = i + 1; j < filteredLastValues.length; j++) {\n\t\t\tvar nextValueArray = filteredLastValues[j].split(separator);\n\n\t\t\t// Only array with same length can be identical.\n\t\t\tif (nextValueArray.length === currValueLength){\n                var nextValueObject = this.cloneObject(currValueObject);\n\t\t\t\tvar identicalArrays = true;\n\n\t\t\t\tfor(var x = 0; x < nextValueArray.length; x++){\n                    var value = this.prepareValueForComparison(nextValueArray[x]);\n\n\t\t\t\t\t// Check if value not exist or value exist less times in current value(currValueObject) string.\n\t\t\t\t\tif(!nextValueObject[value] || nextValueObject[value] == 0){\n\t\t\t\t\t\tidenticalArrays = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tnextValueObject[value]--;\n\t\t\t\t}\n\n\t\t\t\t// Empty field is also identical for this rule.\n\t\t\t\tif(identicalArrays){\n\t\t\t\t\ttmpRepetitions++;\n\t\t\t\t\tif (tmpRepetitions >= numOfRepetitionsForAHit){\n\t\t\t\t\t\tnumOfHits++;\n\t\t\t\t\t\tif (numOfHits >= HITS_THRESHOLD) return true;\n\t\t\t\t\t\tbreak; //Exit this loop(j loop) because we reach repetitions for a hit limit\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction convertToCountObject(value, separator) {\n\tvar valueObject = {};\n\tif (value) {\n\t\tvar valueArray = value.split(separator);\n\t\tfor(var i = 0;i < valueArray.length; i++){\n            var currValue = this.prepareValueForComparison(valueArray[i]);\n\t\t\tvalueObject[currValue] = valueObject[currValue] ? valueObject[currValue] + 1 : 1;\n\t\t}\n\t}\n\treturn valueObject;\n}\n\nfunction getOnlySeparatedValue(lastValueArray, separator){\n    return lastValueArray.filter(function(value) { return value.indexOf(separator) >= 0; });\n}\n\nfunction findSeparateCharacter(lastValueArray){\n    if(lastValueArray.some(function(value) { return value.indexOf(',') >= 0; }))\n\t\treturn ',';\n\telse if (lastValueArray.some(function(value) { return value.indexOf(';') >= 0; }))\n\t\treturn ';';\n\treturn \"\";\n}\n\nfunction prepareValueForComparison(value){\n    value = value.trim();\n    value = value.toUpperCase();\n    return value;\n}\n\nfunction cloneObject(object){\n\tvar newObject = {};\n\tObject.keys(object).forEach(function (key){\n\t\tnewObject[key] = object[key];\n\t});\n\treturn newObject;\n}","fading_step":"1","send_notification":"true","sys_created_by":"admin","decrease_step":"2"},{"send_warning":"true","sys_mod_count":"44","active":"true","increase_step":"5","sys_updated_on":"2022-09-22 07:43:35","sys_tags":"","field_types":"0","predicate":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) {\t\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar REPETITION_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.repetition_threshold', '2')) || 2;\n\t\n\tvar AMOUNT_OF_LAST_VALUES_TO_USE = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.amount_of_last_values_to_use', '7')) || 7;\n\t\n\tvar numOfRepetitionsForAHit = REPETITION_THRESHOLD;\n\t//minimum value for repetitions is two\n\tif (numOfRepetitionsForAHit <= 1) \n\t\tnumOfRepetitionsForAHit = 2;\n\t\n\tvar newValue = this.prepareValueForComparison(lastValues[lastValues.length-1]);\t\n\tvar numRepetitions = 1;//count the last value itself\n\tvar startIndex = lastValues.length - AMOUNT_OF_LAST_VALUES_TO_USE;\n\t//start index must be greater than or equal to zero\n\tif (startIndex < 0) \n\t\tstartIndex = 0;\n\t//compare the last AMOUNT_OF_LAST_VALUES_TO_USE values in the list to the last value\n\tfor (var j = startIndex; j < lastValues.length-1 && numRepetitions < numOfRepetitionsForAHit; j++) {\n\t\tif (newValue == this.prepareValueForComparison(lastValues[j])) {\n\t\t\tnumRepetitions++;\n\t\t}\t\t\n\t}\n\t\t\n\treturn numRepetitions >= numOfRepetitionsForAHit;\t\n}\n\nfunction prepareValueForComparison(value) {\n\t//Strings change to Upper case, Numeric keep as is\n\tif (value.trim() == \"\" || isNaN(value)) {\t\t\n\t\treturn value.toUpperCase();\n\t}\n\treturn value;\n}","sys_id":"fc7577bc9fc433000f51b7bda42e70a8","sys_updated_by":"admin","block_from_model":"false","sys_created_on":"2019-03-05 16:51:49","name":"Repeating Values","eval_script":"isFlapper();\n\nfunction isFlapper(/*String[] lastValues*/) {\n\tvar FLAPPER_CALC_THRESHOLD = parseInt(gs.getProperty(\"sm.flapper.strategy.calculation_threshold\", 5)) || 5;\n        \n\tif (lastValues.length < FLAPPER_CALC_THRESHOLD)\n\t\treturn false;\n\t\n\tvar HITS_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.hits_threshold', '3')) || 3;\n\t\n\tvar REPETITION_THRESHOLD = parseInt(gs.getProperty('sm.flapper.repeating.values.strategy.repetition_threshold', '2')) || 2;\n\t\n\tvar numOfHits = 0;\n\tvar numOfRepetitionsForAHit = REPETITION_THRESHOLD;\t\n\t//minimum value for repetitions is two\n\tif (numOfRepetitionsForAHit <= 1) \n\t\tnumOfRepetitionsForAHit = 2;\n\t\n\tfor (var i=0;i<lastValues.length && numOfHits < HITS_THRESHOLD;i++) {\n\t\tvar tmpRepetitions = 1; //count the value itself\n\t\tvar currentValue = this.prepareValueForComparison(lastValues[i]);\n\t\tfor (var j = i + 1; j < lastValues.length && tmpRepetitions < numOfRepetitionsForAHit; j++) {\n\t\t\tif (currentValue == this.prepareValueForComparison(lastValues[j])) {\n\t\t\t\ttmpRepetitions++;\n\t\t\t\tif (tmpRepetitions >= numOfRepetitionsForAHit)\n\t\t\t\t\tnumOfHits++;\n\t\t\t}\n\t\t}\n\t}\n\treturn numOfHits >= HITS_THRESHOLD;\n}\n\nfunction prepareValueForComparison(value) {\n\t//Strings change to Upper case, Numeric keep as is\n\tif (value.trim() == \"\" || isNaN(value)) {\t\t\n\t\treturn value.toUpperCase();\n\t}\n\treturn value;\n}","fading_step":"1","send_notification":"false","sys_created_by":"admin","decrease_step":"2"}]}