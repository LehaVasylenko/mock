{"result":[{"sys_mod_count":"35","active":"true","description":"Identify CIs in the CMDB based on the serial_number field and matching sys_class_name.","sys_updated_on":"2013-12-03 23:42:29","sys_tags":"","script":"function(ciData, log, identifier) { \n    var discoveredSerials = getDiscoveredSerials(ciData);\n    var matching = matchingCIs(discoveredSerials, ciData);\n    return new CIIdentifierResult(matching, discoveredSerials.length > 0);\n    \n    function matchingCIs(discoveredSerials, ciData) {\n        var matches = [];\n\n        // If there's no discovered serial numbers, skip the lookup\n        if (discoveredSerials.length == 0)\n            return matches;\n\n        // find matches for any discovered serial number...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('sys_class_name', ciData.getData().sys_class_name);\n        gr.addQuery('serial_number', discoveredSerials);\n        gr.query();\n        \n        while (gr.next()) {\n\t\t\tif (_shouldSkip(discoveredSerials, gr))            \n                continue;\n\n            matches.push('' + gr.getUniqueValue());\n       }\n\n        return matches;\n    }\n\n\t/* Typically if we have serial number table available to match against, we should use it by leveraging \n\t * the \"serial number table and class name\" identifier. However...\n\t * If we've only discovered one serial number, we should always match with it. \n\t * If the serial number table identifer doesn't exist or it's been deactivated, we don't want to skip. \n\t * If the CI we've just found by looking at the serial number field doesn't have anything in the serial number table, then we shouldn't skip\n\t*/\t\n\tfunction _shouldSkip(discoveredSerials, gr) {\n\t\t// We've only got one valid serial to match, don't skip \n\t\tif (discoveredSerials.length == 1)\n\t\t\treturn false;\n\t\t\n\t\t// Get the Serial Number Table & Class Name identifier\t\t\n\t\tvar idgr = _getSerialNumberTableIdentifier();\t\t\n\t\t// if we can't find the serial number table identifier, don't skip!\n\t\tif (!idgr)\n\t\t\treturn false;\n\t\n\t\t// if it's been deactivated, don't skip!\n\t\tif (idgr.active == false)\n\t\t\treturn false;\n\t\t\n\t\tif (hasSerialNumberTable(gr))\n\t\t\treturn true;\n\t\n\t\treturn false;\n\t}\n\t\n\tfunction _getSerialNumberTableIdentifier() {\n\t\t// Look up by sys_id or name.\n\t\tvar gr = new GlideRecord(\"ci_identifier\");\n\t\tif (gr.get(\"sys_id\", \"0e9717c40a0a0b4508e68214b8335cbd\"))\n\t\t\treturn gr;\t\t\t\n\t\telse if (gr.get(\"name\", \"Serial Number Table & Class Name\"))\n\t\t\treturn gr;\n\t\telse\n\t\t\treturn null;\t\t\t\t\n\t}\n\t\n    /*\n     * Check for skip here because if a CI already has serial numbers populated in the serial number table, we shouldn't even bother\n     * with checking the serial number field value anymore.\n     */\n    function hasSerialNumberTable(cigr) {\n        var sgr = new GlideRecord(\"cmdb_serial_number\");\n        sgr.addQuery(\"cmdb_ci\", cigr.sys_id);\n        sgr.addQuery('absent', 'false');\n        sgr.addQuery('valid', 'true');\t\t\n\t\tsgr.setLimit(1);\n        sgr.query();\n        if (sgr.next())\n            return true;\n        else\n            return false;\n    }\n    \n    function getDiscoveredSerials(ciData) {\n        var srls = ciData.getRelatedList('cmdb_serial_number', 'cmdb_ci');\n        var result = [];\n        for (var i = 0; i < srls.length; i++) {\n            var srl = srls[i];\n            var sn = new SncSerialNumber();\n            if (sn.isValid(srl.serial_number))\n                result.push(srl.serial_number);\n        }\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"0e3e19930ab301580031dfbfc8a78213","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0e3e19930ab301580031dfbfc8a78213","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-18 00:07:50","name":"Serial Number & Class Name","sys_name":"Serial Number & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"tom.dilatush","order":"1050","sys_policy":""},{"sys_mod_count":"14","active":"false","description":"Identify CIs in the CMDB based on the ip_address field and the matching sys_class_name.","sys_updated_on":"2012-11-16 21:22:55","sys_tags":"","script":"function(ciData, log, identifier) { \n    var ips = getDiscoveredIPs(ciData);\n    var matching = matchingCIs(ips, ciData);\n    return new CIIdentifierResult(matching, ips.length > 0);\n    \n    function matchingCIs(ips, ciData) {\n        var matches = [];\n        if (ips.length == 0)\n            return matches;\n\n        // find matches for the discovered IP address...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('sys_class_name', ciData.getData().sys_class_name);\n        gr.addQuery('ip_address', ips);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next())\n            matches.push('' + gr.getUniqueValue());\n\n        return matches;\n    }\n    \n    function getDiscoveredIPs(ciData) {\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\n        var result = [];\n        for(var i = 0; i < adapters.length; i++) {\n            if (SncIPAddressV4.getIPAddressV4Instance(adapters[i].ip_address) == null)\n                continue;\n\n            result.push(adapters[i].ip_address);\n        }\n        var ip = ciData.getData().ip_address;\n        if (SncIPAddressV4.getIPAddressV4Instance(ip) != null)\n            result.push(ip);\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"0e5985b80ab3015800c5d32cec50cba6","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0e5985b80ab3015800c5d32cec50cba6","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-18 00:37:47","name":"IP Address & Class Name","sys_name":"IP Address & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"tom.dilatush","order":"2400","sys_policy":""},{"sys_mod_count":"27","active":"false","description":"Identify CIs in the CMDB based on the mac_address field and matching sys_class_name.","sys_updated_on":"2012-11-16 21:22:46","sys_tags":"","script":"function(ciData, log, identifier) { \n    var macs = getDiscoveredMACs(ciData);\n    var matching = matchingCIs(macs, ciData);\n    return new CIIdentifierResult(matching, macs.length > 0);\n    \n    function matchingCIs(macs, ciData) {\n        var matches = [];\n        if (macs.length == 0)\n            return matches;\n\n        // find matches for the discovered MAC address...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('sys_class_name', ciData.getData().sys_class_name);\n        gr.addQuery('mac_address', macs);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next())\n            matches.push('' + gr.getUniqueValue());\n\n        return matches;\n    }\n    \n    function getDiscoveredMACs(ciData) {\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\n        var result = [];\n        for(var i = 0; i < adapters.length; i++) {\n            if (SncMACAddress.getMACAddressInstance(adapters[i].mac_address) == null)\n                continue;\n\n            result.push(adapters[i].mac_address);\n        }\t\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"0e623b6b0ab3015800577d4bf86e62e3","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0e623b6b0ab3015800577d4bf86e62e3","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-18 00:47:18","name":"MAC Address & Class Name","sys_name":"MAC Address & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"tom.dilatush","order":"2300","sys_policy":""},{"sys_mod_count":"13","active":"false","description":"Identify CIs in the CMDB based on the  mac_address field and the ip_address field and matching sys_class_name.","sys_updated_on":"2012-11-16 21:22:40","sys_tags":"","script":"function(ciData, log, identifier) { \n    var nets = getDiscoveredNetworks(ciData);\n    var matching = matchingCIs(nets, ciData);\n    return new CIIdentifierResult(matching, nets.length > 0);\n    \n    function matchingCIs(nets, ciData) {\n        var matches = [];\n        if (nets.length == 0)\n            return matches;\n            \n        var ips = [];\n        var macs = [];\n        var checker = {};\n        for (var i = 0; i < nets.length; i++) {\n            ips.push(nets[i].ip_address);\n            macs.push(nets[i].mac_address);\n            checker[nets[i].mac_address] = nets[i].ip_address;\n        }\n\n        // find matches for the discovered IP address...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('sys_class_name', ciData.getData().sys_class_name);\n        gr.addQuery('ip_address', ips);\n        gr.addQuery('mac_address', macs);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next()) {\n            if (checker[gr.mac_address] != gr.ip_address)\n                continue;\n            matches.push('' + gr.getUniqueValue());\n        }\n\n        return matches;\n    }\n    \n    function getDiscoveredNetworks(ciData) {\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\n        var result = [];\n        for(var i = 0; i < adapters.length; i++) {\n            var valid_ip = (SncIPAddressV4.getIPAddressV4Instance(adapters[i].ip_address) != null);\n            var valid_mac = (SncMACAddress.getMACAddressInstance(adapters[i].mac_address) != null);\n            if (!valid_ip || !valid_mac)\n                continue;\n\n            result.push(adapters[i]);\n        }\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"0e7946780ab30158007c6f8eec1cfffb","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0e7946780ab30158007c6f8eec1cfffb","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-18 01:12:28","name":"Network & Class Name","sys_name":"Network & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"tom.dilatush","order":"2200","sys_policy":""},{"sys_mod_count":"135","active":"true","description":"Identify CIs in the CMDB based on serial number(s) in the serial number table and sys_class_name.","sys_updated_on":"2011-06-29 22:14:54","sys_tags":"","script":"function(ciData, log, identifier) {\r\n    var discoveredSerials = getDiscoveredSerials(ciData);\r\n    var matching = matchingCIs(discoveredSerials, ciData);\r\n    return new CIIdentifierResult(matching, discoveredSerials.length > 0);\r\n    \r\n    function matchingCIs(discoveredSerials, ciData) {\r\n        var matches = [];\r\n\r\n        // If there's no discovered serial numbers, skip the lookup\r\n        if (discoveredSerials.length == 0)\r\n            return matches;\r\n\r\n        // find matches for all valid serials in the serial number table...\r\n        var gr = new GlideAggregate('cmdb_serial_number');\r\n        gr.addEncodedQuery(buildEncodedQuery(discoveredSerials));\r\n        gr.addAggregate('COUNT', 'cmdb_ci');\r\n        gr.addQuery('valid', 'true');\r\n        gr.addQuery('absent', 'false');\r\n        gr.groupBy('cmdb_ci');\r\n        gr.addHaving('COUNT', '=', discoveredSerials.length);\r\n        gr.query();\r\n\r\n        // populate our return value...\r\n        while (gr.next())\r\n            if (ciData.getData().sys_class_name == gr.cmdb_ci.sys_class_name)\r\n                matches.push('' + gr.getValue('cmdb_ci'));\r\n\r\n        return matches;\r\n    }\r\n\r\n    function buildEncodedQuery(discoveredSerials) {\r\n        var conds = [];\r\n        for (var i = 0; i < discoveredSerials.length; i++)\r\n            conds.push('serial_number=' + discoveredSerials[i].serial_number + '^serial_number_type=' + discoveredSerials[i].serial_number_type);\r\n\r\n        return conds.join('^NQ');\r\n    }\r\n    \r\n    function getDiscoveredSerials(ciData) {\r\n        var srls = ciData.getRelatedList('cmdb_serial_number', 'cmdb_ci');\r\n        var result = [];\r\n\r\n        for (var i = 0; i < srls.length; i++) {\r\n            var srl = srls[i];\r\n            var sn = new SncSerialNumber();\r\n            if (sn.isValid(srl.serial_number))\r\n                result.push(srl);\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"0e9717c40a0a0b4508e68214b8335cbd","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0e9717c40a0a0b4508e68214b8335cbd","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2009-11-19 22:37:03","name":"Serial Number Table & Class Name","sys_name":"Serial Number Table & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","order":"1000","sys_policy":""},{"sys_mod_count":"68","active":"true","description":"Identify CIs in the CMDB based on IPs and MAC Address(es) in the network adapter table.","sys_updated_on":"2011-09-15 21:19:04","sys_tags":"","script":"function(ciData, log, identifier) {\r\n    var discoveredNICs = getDiscoveredNICs(ciData);\r\n    var matching = matchingCIs(discoveredNICs, ciData);\r\n    return new CIIdentifierResult(matching, discoveredNICs.length > 0);\r\n    \r\n    function matchingCIs(discoveredNICs, ciData) {\r\n        var matches = [];\r\n\r\n        if (discoveredNICs.length == 0)\r\n            return matches;\r\n\r\n        // find matches for all NICs in the network adapter table...\r\n        var gr = new GlideAggregate('cmdb_ci_network_adapter');\r\n        gr.addEncodedQuery(buildEncodedQuery(discoveredNICs));\r\n        gr.addAggregate('COUNT', 'cmdb_ci');\r\n        gr.addQuery('valid', 'true');\r\n        gr.addQuery('install_status', '!=', '100');  // install status not absent...\r\n        gr.groupBy('cmdb_ci');\r\n        gr.addHaving('COUNT', '=', discoveredNICs.length);\r\n        gr.query();\r\n        \r\n        // populate our return value...\r\n        while (gr.next()) {\r\n            // make sure the sys_class_name is the same\r\n            if (ciData.getData().sys_class_name == gr.cmdb_ci.sys_class_name)\r\n                matches.push('' + gr.getValue('cmdb_ci'));\r\n        }\r\n\r\n        return matches;\r\n    }\r\n\r\n    function buildEncodedQuery(discoveredNICs) {\r\n        var conds = [];\r\n        for (var i = 0; i < discoveredNICs.length; i++) {\r\n            var ma = SncMACAddress.getMACAddressInstance(discoveredNICs[i].mac_address);\r\n            if (!ma)\r\n                continue;\r\n            conds.push('mac_address=' + ma.getAddressAsString() + '^ip_address=' + discoveredNICs[i].ip_address);\r\n        }\r\n        return conds.join('^NQ');\r\n    }\r\n    \r\n    function getDiscoveredNICs(ciData) {\r\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\r\n        var result = [];\r\n        for(var i = 0; i < adapters.length; i++) {\r\n            if (JSUtil.nil(adapters[i].mac_address) || JSUtil.nil(adapters[i].ip_address))\r\n                continue;\r\n\r\n            result.push(adapters[i]);\r\n        }\t\r\n        return result;\r\n    }\r\n\r\n}","sys_class_name":"ci_identifier","sys_id":"0efa3c160a0a0b452dd3c69166a90b95","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_0efa3c160a0a0b452dd3c69166a90b95","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2009-11-20 00:40:57","name":"Network","sys_name":"Network","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","order":"1200","sys_policy":""},{"sys_mod_count":"14","active":"false","description":"Identify CIs in the CMDB based on serial_number field.","sys_updated_on":"2014-10-18 01:00:27","sys_tags":"","script":"/*\n *  Notes: This identifier will go through the table specified in applies_to field of the identifier\n *         and match based on serial number field of the CI. \n *\n *  Warning: This could potentially cause reclassification since it does not check for the CI class (sys_class_name).\n */\n\nfunction(ciData, log, identifier) { \n    var discoveredSerials = getDiscoveredSerials(ciData);\n    var matching = matchingCIs(discoveredSerials, ciData);\n    return new CIIdentifierResult(matching, discoveredSerials.length > 0);\n    \n    function matchingCIs(discoveredSerials, ciData) {\n        var matches = [];\n\t\tif (discoveredSerials.length == 0)\n            return matches;\n\t\t\n        // find matches for any discovered serial number...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('serial_number', discoveredSerials);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next())\n            matches.push('' + gr.getUniqueValue());\n\n        return matches;\n    }\n    \n    function getDiscoveredSerials(ciData) {\n        var srls = ciData.getRelatedList('cmdb_serial_number', 'cmdb_ci');\n        var result = [];\n        for (var i = 0; i < srls.length; i++) {\n            var srl = srls[i];\n            var sn = new SncSerialNumber();\n            if (sn.isValid(srl.serial_number))\n                result.push(srl.serial_number);\n        }\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"40ee22560a0a0b684eee37556eb9c989","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_40ee22560a0a0b684eee37556eb9c989","sys_updated_by":"amit.dhuleshia","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-27 20:21:07","name":"Generic Serial Number","sys_name":"Generic Serial Number","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","order":"4000","sys_policy":""},{"sys_mod_count":"14","active":"false","description":"Identify CIs in the CMDB based on name field.","sys_updated_on":"2014-10-18 00:59:13","sys_tags":"","script":"/*\n *  Notes: This identifier will go through the table specified in applies_to field of the identifier\n *         and match based on name field of the CI. \n *\n *  Warning: This could potentially cause reclassification since it does not check for the CI class (sys_class_name).\n */\n\nfunction(ciData, log, identifier) { \n    var discoveredName = ciData.getData().name;\n    var matchable = JSUtil.notNil(discoveredName);\n\tvar matching = [];\n\t\n\tif (matchable)\n\t\tmatching = matchingCIs(discoveredName, ciData);\n\t\n\treturn new CIIdentifierResult(matching, matchable);\n    \n    function matchingCIs(discoveredName, ciData) {\n        var matches = [];\n\n        // find all the matches by name...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('name', discoveredName);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next())\n            matches.push('' + gr.getUniqueValue());\n\n        return matches;\n    }\n}","sys_class_name":"ci_identifier","sys_id":"40f730320a0a0b6867e3ea5026e2c986","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_40f730320a0a0b6867e3ea5026e2c986","sys_updated_by":"amit.dhuleshia","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-27 20:31:01","name":"Generic Name","sys_name":"Generic Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","order":"4200","sys_policy":""},{"sys_mod_count":"11","active":"false","description":"Identify CIs in the CMDB based on MAC address field.","sys_updated_on":"2011-06-29 22:14:55","sys_tags":"","script":"/*\r\n *  Notes: This identifier will go through the table specified in applies_to field of the identifier\r\n *         and match based on the MAC address field. \r\n *\r\n *  Warning: This could potentially cause reclassification since it does not check for the CI class (sys_class_name).\r\n */\r\n\r\nfunction(ciData, log, identifier) { \r\n    var macs = getDiscoveredMACs(ciData);\r\n    var matching = matchingCIs(macs, ciData);\r\n    return new CIIdentifierResult(matching, macs.length > 0);\r\n    \r\n    function matchingCIs(macs, ciData) {\r\n        var matches = [];\r\n        if (macs.length == 0)\r\n            return matches;\r\n\r\n        // find matches for the discovered MAC address...\r\n        var gr = new GlideRecord(identifier.applies_to);\r\n        gr.addQuery('mac_address', macs);\r\n        gr.query();\r\n        \r\n        // populate our return value...\r\n        while (gr.next())\r\n            matches.push('' + gr.getUniqueValue());\r\n\r\n        return matches;\r\n    }\r\n    \r\n    function getDiscoveredMACs(ciData) {\r\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\r\n        var result = [];\r\n        for(var i = 0; i < adapters.length; i++) {\r\n            if (SncMACAddress.getMACAddressInstance(adapters[i].mac_address) == null)\r\n                continue;\r\n\r\n            result.push(adapters[i].mac_address);\r\n        }\t\r\n        return result;\r\n    }\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"410f35040a0a0b68236ef39fbf12b375","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_410f35040a0a0b68236ef39fbf12b375","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-27 20:57:15","name":"Generic MAC Address","sys_name":"Generic MAC Address","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","order":"4300","sys_policy":""},{"sys_mod_count":"9","active":"false","description":"Identify CIs in the CMDB based on the  mac_address field and the ip_address field.","sys_updated_on":"2011-06-29 22:14:54","sys_tags":"","script":"/*\r\n *  Notes: This identifier will go through the table specified in applies_to field of the identifier\r\n *         and match based on IP field and MAC address field of the CI. \r\n *\r\n *  Warning: This could potentially cause reclassification since it does not check for the CI class (sys_class_name).\r\n */\r\n\r\nfunction(ciData, log, identifier) { \r\n    var nets = getDiscoveredNetworks(ciData);\r\n    var matching = matchingCIs(nets, ciData);\r\n    return new CIIdentifierResult(matching, nets.length > 0);\r\n    \r\n    function matchingCIs(nets, ciData) {\r\n        var matches = [];\r\n        if (nets.length == 0)\r\n            return matches;\r\n            \r\n        var ips = [];\r\n        var macs = [];\r\n        var checker = {};\r\n        for (var i = 0; i < nets.length; i++) {\r\n            ips.push(nets[i].ip_address);\r\n            macs.push(nets[i].mac_address);\r\n            checker[nets[i].mac_address] = nets[i].ip_address;\r\n        }\r\n\r\n        // find matches for the discovered IP address...\r\n        var gr = new GlideRecord(identifier.applies_to);\r\n        gr.addQuery('ip_address', ips);\r\n        gr.addQuery('mac_address', macs);\r\n        gr.query();\r\n        \r\n        // populate our return value...\r\n        while (gr.next()) {\r\n            if (checker[gr.mac_address] != gr.ip_address)\r\n                continue;\r\n            matches.push('' + gr.getUniqueValue());\r\n        }\r\n\r\n        return matches;\r\n    }\r\n    \r\n    function getDiscoveredNetworks(ciData) {\r\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\r\n        var result = [];\r\n        for(var i = 0; i < adapters.length; i++) {\r\n            var valid_ip = (SncIPAddressV4.getIPAddressV4Instance(adapters[i].ip_address) != null);\r\n            var valid_mac = (SncMACAddress.getMACAddressInstance(adapters[i].mac_address) != null);\r\n            if (!valid_ip || !valid_mac)\r\n                continue;\r\n\r\n            result.push(adapters[i]);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"412e77670a0a0b6818f150e164b87235","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_412e77670a0a0b6818f150e164b87235","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-04-27 21:31:23","name":"Generic Network","sys_name":"Generic Network","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","order":"4100","sys_policy":""},{"sys_mod_count":"6","active":"true","description":"Identify ESX servers based on VMWare UUID.","sys_updated_on":"2012-05-16 18:04:18","sys_tags":"","script":"function(ciData, log, identifier) { \r\n   var uuid = ciData.getData().correlation_id;\r\n   var matches = [];\r\n   \r\n   if(!uuid)\r\n\t  return new CIIdentifierResult(matches, false);\r\n   \r\n   var gr = new GlideRecord(identifier.applies_to);\r\n   gr.addQuery('correlation_id', ciData.getData().correlation_id);\r\n   gr.query();\r\n   \r\n   while (gr.next())\r\n\t  matches.push('' + gr.getUniqueValue());\r\n   \r\n   return new CIIdentifierResult(matches, true);\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"556b37d9c302200031e65ad8cbba8fc7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_556b37d9c302200031e65ad8cbba8fc7","sys_updated_by":"eugene.lockett","applies_to":"cmdb_ci_esx_server","sys_created_on":"2012-05-16 17:59:21","name":"ESX UUID","sys_name":"ESX UUID","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"eugene.lockett","order":"900","sys_policy":""},{"sys_mod_count":"1","active":"true","description":"Identify CIs in the CMDB based on serial number(s) in the serial number table and name.\r\n\r\nThis is the fallback identifier in the case that discovery via SNMP receives a fraction of the requested data.","sys_updated_on":"2014-01-14 01:07:48","sys_tags":"","script":"/**\n * Identifier to handle edge case where an incomplete response from a network device may cause\n * the device to be misclassified.  Discovery will then rely on known serial numbers and the device\n * name to prevent duplication and reclassification.  However, if either the device name is empty\n * or no serial number is detected, this identifier will return no matches.\n *\n */\nfunction(ciData, log, identifier) {\n\tthis.logger = JSUtil.notNil(log) ? log : new DiscoveryLogger();\n    var discoveredSerials = getDiscoveredSerials(ciData);\n\t\n    var matching = matchingCIs(discoveredSerials, ciData);\n    return new CIIdentifierResult(matching, discoveredSerials.length > 0);\n    \n    function matchingCIs(discoveredSerials, ciData) {\n        var matches = [];\n\n        // If there's no discovered serial numbers or no name, skip the lookup\n        if (discoveredSerials.length == 0 || JSUtil.nil(ciData.getData().name))\n            return matches;\n\n        // find matches for all valid serials in the serial number table...\n        var gr = new GlideAggregate('cmdb_serial_number');\n        gr.addEncodedQuery(buildEncodedQuery(discoveredSerials));\n        gr.addAggregate('COUNT', 'cmdb_ci');\n        gr.addQuery('valid', 'true');\n        gr.addQuery('absent', 'false');\n        gr.groupBy('cmdb_ci');\n        gr.addHaving('COUNT', '=', discoveredSerials.length);\n        gr.query();\n\n        // populate our return value...\n        while (gr.next())\n            if (ciData.getData().name == gr.cmdb_ci.name) {\n                matches.push('' + gr.getValue('cmdb_ci'));\n\t\t\t\t\n\t\t\t\tvar classFound = ciData.data[\"sys_class_name\"];\n\t\t\t\tvar classExist = gr.cmdb_ci.sys_class_name;\n\t\t\t\t\n\t\t\t\tif (classFound != classExist) {\n\t\t\t\t\tthis.logger.info(\"Existing \" + classExist + \" record found. Ignoring \" + classFound + \" classification\", \"Identifier: \" + identifier.name);\n\t\t\t\t\t\n\t\t\t\t\t//prevent reclassification by updating the class in ciData\n\t\t\t\t\tciData.data[\"sys_class_name\"] = classExist;\n\t\t\t\t}\n\t\t\t}\n\n        return matches;\n    }\n\n    function buildEncodedQuery(discoveredSerials) {\n        var conds = [];\n        for (var i = 0; i < discoveredSerials.length; i++)\n            conds.push('serial_number=' + discoveredSerials[i].serial_number + '^serial_number_type=' + discoveredSerials[i].serial_number_type);\n\n        return conds.join('^NQ');\n    }\n    \n    function getDiscoveredSerials(ciData) {\n        var srls = ciData.getRelatedList('cmdb_serial_number', 'cmdb_ci');\n        var result = [];\n\n        for (var i = 0; i < srls.length; i++) {\n            var srl = srls[i];\n            var sn = new SncSerialNumber();\n            if (sn.isValid(srl.serial_number))\n                result.push(srl);\n        }\n\n        return result;\n    }\n}\n","sys_class_name":"ci_identifier","sys_id":"885bab01c33111002d031f051eba8f74","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_885bab01c33111002d031f051eba8f74","sys_updated_by":"chris.nguyen","applies_to":"cmdb_ci_netgear","sys_created_on":"2013-12-21 00:27:40","name":"Serial Number Table & Name","sys_name":"Serial Number Table & Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"chris.nguyen","order":"1500","sys_policy":""},{"sys_mod_count":"6","active":"false","description":"Identify CIs in the CMDB based on the ip_address field.","sys_updated_on":"2011-06-29 22:14:54","sys_tags":"","script":"/*\r\n *  Notes: This identifier will go through the table specified in applies_to field of the identifier\r\n *         and match based on the MAC address field. \r\n *\r\n *  Warning: This could potentially cause reclassification since it does not check for the CI class (sys_class_name).\r\n */\r\n\r\nfunction(ciData, log, identifier) { \r\n    var ips = getDiscoveredIPs(ciData);\r\n    var matching = matchingCIs(ips, ciData);\r\n    return new CIIdentifierResult(matching, ips.length > 0);\r\n    \r\n    function matchingCIs(ips, ciData) {\r\n        var matches = [];\r\n        if (ips.length == 0)\r\n            return matches;\r\n\r\n        // find matches for the discovered IP address...\r\n        var gr = new GlideRecord(identifier.applies_to);\r\n        gr.addQuery('ip_address', ips);\r\n        gr.query();\r\n        \r\n        // populate our return value...\r\n        while (gr.next())\r\n            matches.push('' + gr.getUniqueValue());\r\n\r\n        return matches;\r\n    }\r\n    \r\n    function getDiscoveredIPs(ciData) {\r\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\r\n        var result = [];\r\n        for(var i = 0; i < adapters.length; i++) {\r\n            if (SncIPAddressV4.getIPAddressV4Instance(adapters[i].ip_address) == null)\r\n                continue;\r\n\r\n            result.push(adapters[i].ip_address);\r\n        }\r\n        var ip = ciData.getData().ip_address;\r\n        if (SncIPAddressV4.getIPAddressV4Instance(ip) != null)\r\n            result.push(ip);\r\n        return result;\r\n    }\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"90719384c0a8026c0f770b88749bdf69","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_90719384c0a8026c0f770b88749bdf69","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-05-13 06:54:42","name":"Generic IP Address","sys_name":"Generic IP Address","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"aleck.lin","order":"4400","sys_policy":""},{"sys_mod_count":"27","active":"false","description":"Identify CIs in the CMDB based on MAC Address(es) in the network adapter table.","sys_updated_on":"2011-07-26 23:01:14","sys_tags":"","script":"function(ciData, log, identifier) {\r\n    var discoveredNICs = getDiscoveredNICs(ciData);\r\n    var matching = matchingCIs(discoveredNICs);\r\n    return new CIIdentifierResult(matching, discoveredNICs.length > 0);\r\n    \r\n    function matchingCIs(discoveredNICs) {\r\n        var matches = [];\r\n\r\n        if (discoveredNICs.length == 0)\r\n            return matches;\r\n\r\n        // find matches for all NICs in the network adapter table...\r\n        var gr = new GlideAggregate('cmdb_ci_network_adapter');\r\n        gr.addEncodedQuery(buildEncodedQuery(discoveredNICs));\r\n        gr.addAggregate('COUNT', 'cmdb_ci');\r\n        gr.addQuery('valid', 'true');\r\n        gr.addQuery('install_status', '!=', '100');\r\n        gr.groupBy('cmdb_ci');\r\n        gr.addHaving('COUNT', '=', discoveredNICs.length);\r\n        gr.query();\r\n        \r\n        // populate our return value...\r\n        while (gr.next())\r\n            matches.push('' + gr.getValue('cmdb_ci'));\r\n\r\n        return matches;\r\n    }\r\n\r\n    function buildEncodedQuery(discoveredNICs) {\r\n        var conds = [];\r\n        for (var i = 0; i < discoveredNICs.length; i++) {\r\n            var ma = SncMACAddress.getMACAddressInstance(discoveredNICs[i].mac_address);\r\n            if (!ma)\r\n                continue;\r\n            conds.push('mac_address=' + ma.getAddressAsString());\r\n        }\r\n        return conds.join('^NQ');\r\n    }\r\n    \r\n    function getDiscoveredNICs(ciData) {\r\n        var adapters = ciData.getRelatedList(\"cmdb_ci_network_adapter\", \"cmdb_ci\");\r\n        var result = [];\r\n        for(var i = 0; i < adapters.length; i++) {\r\n            if (gs.nil(adapters[i].mac_address) || gs.nil(adapters[i].ip_address))\r\n                continue;\r\n\r\n            result.push(adapters[i]);\r\n        }\t\r\n        return result;\r\n    }\r\n}\r\n","sys_class_name":"ci_identifier","sys_id":"e2dd56de0a0a0b056eef632bdff323c7","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_e2dd56de0a0a0b056eef632bdff323c7","sys_updated_by":"aleck.lin","applies_to":"cmdb_ci_hardware","sys_created_on":"2009-12-31 03:52:54","name":"MACAddress","sys_name":"MACAddress","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"glide.maint","order":"3000","sys_policy":""},{"sys_mod_count":"22","active":"true","description":"Identify CIs in the CMDB based on name field  and matching sys_class_name.","sys_updated_on":"2014-10-18 00:49:11","sys_tags":"","script":"function(ciData, log, identifier) { \n    var discoveredName = ciData.getData().name;\n    var matchable = JSUtil.notNil(discoveredName);\n\tvar matching = [];\n\t\n\tif (matchable)\n\t\tmatching = matchingCIs(discoveredName, ciData);\n\t\n\treturn new CIIdentifierResult(matching, matchable);\n\t    \n    function matchingCIs(discoveredName, ciData) {\n        var matches = [];\n\n        // find all the matches by name...\n        var gr = new GlideRecord(identifier.applies_to);\n        gr.addQuery('sys_class_name', ciData.getData().sys_class_name);\n        gr.addQuery('name', discoveredName);\n        gr.query();\n        \n        // populate our return value...\n        while (gr.next())\n            matches.push('' + gr.getUniqueValue());\n\n        return matches;\n    }\n}","sys_class_name":"ci_identifier","sys_id":"f17bef7c0ab30159004adad6b36f4390","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/6dd8237704f12210559073c06a02f73b","value":"6dd8237704f12210559073c06a02f73b"},"sys_update_name":"ci_identifier_f17bef7c0ab30159004adad6b36f4390","sys_updated_by":"amit.dhuleshia","applies_to":"cmdb_ci_hardware","sys_created_on":"2010-02-21 17:04:14","name":"Name & Class Name","sys_name":"Name & Class Name","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"tom.dilatush","order":"1100","sys_policy":""}]}