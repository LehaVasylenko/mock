{"result":[{"sys_mod_count":"53","active":"true","description":"","sys_updated_on":"2013-03-05 17:12:58","sys_tags":"","script":"// Service APIs must be defined in the \"Services\" namespace - leave the \"Services.\" prefix on the class name and prototype\n\nServices.Workflow = Class.create();\nServices.Workflow.prototype = {\n    initialize: function() {\n        // Place any Service API initialization code here - runs each time an API is called on this Service\n\n    },\n        \n    /**\n     * lookup a Workflow ViewModel\n     *\n     * @param parms - object\n     *\t\t\t.workflow - name or sys_id of the workflow to lookup\n     * @returns a workflow ViewModel\n     */\n    get: function(parms) {\n    \tvar wf = {\n    \t\tname: null,\n    \t\tsys_id: null,\n    \t\tdescription: null,\n\t\t\tui: null\n    \t};\n\t\tvar gr = new GlideRecord('wf_workflow_version');\n\t\tgr.query(parms.workflow);\n\t\tif (!gr.hasNext()) {\n\t\t\tgr.query('name', parms.workflow);\n\t\t}\n\t\tif (gr.next()) {\n\t\t\twf.sys_id = gr.getValue('sys_id');\n\t\t\twf.name = gr.getValue('name');\n\t\t\twf.description = gr.getValue('description');\n\t\t}\n\t\tthis.data.workflow = wf;\n\t},\n\t\n\t/**\n     * start a Workflow\n     *\n     * @param parms - object\n     *\t\t\t.workflow - name or sys_id of the workflow to start\n     *\n     */\n\tstart: function(parms) {\n\t\tvar context = new WorkflowChooser().runWorkflowForName(parms.workflow, null, {});\n\t\tthis.data.workflow = {\n\t\t\tsys_id : context.workflow.sys_id.toString(),\n\t\t\tname : context.workflow.name.toString(),\n\t\t\tdescription: context.workflow.description.toString()\n\t\t}\n\t\tthis.data.context = {\n\t\t\tsys_id : context.sys_id.toString(),\n\t\t\tstarted: context.started.toString(),\n\t\t\tstage: context.stage.getDisplayValue(),\n\t\t\tactivity_index: new String(context.activity_index)\n\t\t}\n\t},\n\t\n\tsubmitUI: function(parms) {\n\t\tvar activity = new GlideRecord('wf_executing');\n\t\tactivity.get(parms.executing);\n\t\t//TODO: put in some error handling, this could hang workflows if it goes wrong\n\t\tactivity.scratchpad = parms.model;\n\t\tactivity.update();\n\t\tnew Workflow().fireEvent(activity,'submit');\n\t},\n\n    type: 'Workflow'\n}","sys_class_name":"sys_service_api","sys_id":"5a49086537133000f5bf1f23dfbe5d93","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/5d08efff04b12210559073c06a02f774","value":"5d08efff04b12210559073c06a02f774"},"sys_update_name":"sys_service_api_5a49086537133000f5bf1f23dfbe5d93","sys_updated_by":"russ.sarbora","sys_created_on":"2013-02-01 18:29:17","name":"Workflow","sys_name":"Workflow","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"russ.sarbora","sys_policy":""},{"sys_mod_count":"46","active":"true","description":"","sys_updated_on":"2013-03-05 00:19:16","sys_tags":"","script":"// Service APIs must be defined in the \"Services\" namespace - leave the \"Services.\" prefix on the class name and prototype\n\nServices.UpdateListener = Class.create();\nServices.UpdateListener.prototype = {\n    initialize: function() {\n        // Place any Service API initialization code here - runs each time an API is called on this Service\n    },\n\n\t/**\n     * check for updates on the specified records\n     *\n     * @param parms - object\n     *\t\t\t.listenFor - array of table+sys_id to check for updates\n     *\t\t\t.lastPoll - optional time since the last check, if set, only updates after lastPoll are reported\n     *\t\t\t.processor - optional processor that will passed each reported record. the returned valued is attached to the result\n     *\n     */\n\tpoll: function(parms) {\n\t\tvar updated = [];\n\t\tvar listenFor=new JSON().decode(parms.listenFor);\n\t\tfor(var table in listenFor) {\n\t\t\tvar fieldNames = listenFor[table].fields;\n\t\t\tvar qry = this._query(table, listenFor[table].ids, parms.lastPoll);\n\t\t\tif (qry.hasNext()) {\n\t\t\t\twhile(qry.next()) {\n\t\t\t\t\tvar update = {\n\t\t\t\t\t\tsys_id : qry.getUniqueValue(),\n\t\t\t\t\t\ttable : table,\n\t\t\t\t\t}\n\t\t\t\t\tif (JSUtil.notNil(parms.processor)) {\n\t\t\t\t\t\tvar processor = Services.UpdateListener.processors[parms.processor];\n\t\t\t\t\t\tprocessor.call(update, qry);\n\t\t\t\t\t}\n\t\t\t\t\tupdated.push(update);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.data.updated = updated;\n\t},\n\t\n\t_query: function(table, ids, lastPoll) {\n\t\tvar qry = new GlideRecord(table);\n\t\tif (qry.isValid()) {\n\t\t\tqry.addQuery(\"sys_id\", ids);\n\t\t\tqry.addQuery(\"sys_updated_on\", \">=\", lastPoll);\n\t\t\tqry.query();\n\t\t}\n\t\treturn qry;\n\t},\n\n    type: 'UpdateListener'\n}\n\nServices.UpdateListener.processors = {};\n\nServices.UpdateListener.processors.workflowUI = function(gr) {\n\tvar scratchpad = new JSON().decode(gr.scratchpad);\n\tthis.ui = scratchpad.ui;\n}","sys_class_name":"sys_service_api","sys_id":"6406447d37633000f5bf1f23dfbe5dd0","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/41672bfb04b12210559073c06a02f7c6","value":"41672bfb04b12210559073c06a02f7c6"},"sys_update_name":"sys_service_api_6406447d37633000f5bf1f23dfbe5dd0","sys_updated_by":"russ.sarbora","sys_created_on":"2013-02-14 23:10:00","name":"UpdateListener","sys_name":"UpdateListener","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"russ.sarbora","sys_policy":""},{"sys_mod_count":"11","active":"true","description":"","sys_updated_on":"2012-10-03 21:55:32","sys_tags":"","script":"// Service APIs must be defined in the \"Services\" namespace - leave the \"Services.\" prefix on the class name and prototype\n\nServices.ServiceTest1 = Class.create();\nServices.ServiceTest1.prototype = {\n    initialize: function() {\n        // Place any Service API initialization code here - runs each time an API is called on this Service\n        \n    },\n    \n    // Add Service APIs here as methods for this class\n    \n    get: function(parms) {\n        this.data.a = 1;\n        this.data.id = parms.id;\n    },\n    \n    getWithError: function(parms) {\n        this.data.a = 1;\n        this.data.id = parms.id;\n        this.setError(parms.code, parms.msg);\n        this.setHttpResponseCode(parms.http);\n    },\n    \n    getWithArray: function(parms) {\n        this.data.rootArray = [ 1, 2, 3, '<test!>' ];\n\t\tthis.data.embeddedArray = {\n\t\t\tanArray: [ 1, 2, 3, '<test!>' ]\n\t\t};\n    },\n    \n    type: 'ServiceTest1'\n}\n","sys_class_name":"sys_service_api","sys_id":"abeccf10a712200015ab192bd9acf441","sys_package":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_package/1a77633f04b12210559073c06a02f795","value":"1a77633f04b12210559073c06a02f795"},"sys_update_name":"sys_service_api_abeccf10a712200015ab192bd9acf441","sys_updated_by":"admin","sys_created_on":"2012-05-25 22:18:46","name":"ServiceTest1","sys_name":"ServiceTest1","sys_scope":{"link":"https://dev315171.service-now.com/api/now/v1/table/sys_scope/global","value":"global"},"sys_created_by":"admin","sys_policy":""}]}